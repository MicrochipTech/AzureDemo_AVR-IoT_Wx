
avr.iot-aws-ecc-provision.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001ca  00802800  00006a9f  00006b53  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000635e  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000741  0000a35e  0000635e  00006412  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          00000fcf  008029ca  008029ca  00006d1d  2**0
                  ALLOC
  4 .comment      0000005c  00000000  00000000  00006d1d  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00006d7c  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00001218  00000000  00000000  00006dc0  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000231f8  00000000  00000000  00007fd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00007ad6  00000000  00000000  0002b1d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000b49d  00000000  00000000  00032ca6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00004478  00000000  00000000  0003e144  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00007db8  00000000  00000000  000425bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0001a493  00000000  00000000  0004a374  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000010f0  00000000  00000000  00064807  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__ctors_end>
       4:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
       8:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
       c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      10:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      14:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      18:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      1c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      20:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      24:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      28:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      2c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      30:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      34:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      38:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      3c:	0c 94 0a 1a 	jmp	0x3414	; 0x3414 <__vector_15>
      40:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      44:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      48:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      4c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      50:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      54:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      58:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      5c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      60:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      64:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      68:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      6c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      70:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      74:	0c 94 bc 1a 	jmp	0x3578	; 0x3578 <__vector_29>
      78:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      7c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      80:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      84:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      88:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      8c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      90:	7b 1e       	adc	r7, r27
      92:	76 1e       	adc	r7, r22
      94:	85 1e       	adc	r8, r21
      96:	80 1e       	adc	r8, r16
      98:	94 1e       	adc	r9, r20
      9a:	8a 1e       	adc	r8, r26
      9c:	8f 1e       	adc	r8, r31
      9e:	9e 26       	eor	r9, r30
      a0:	9e 26       	eor	r9, r30
      a2:	ac 26       	eor	r10, r28
      a4:	8b 26       	eor	r8, r27
      a6:	95 26       	eor	r9, r21
      a8:	95 26       	eor	r9, r21
      aa:	a5 26       	eor	r10, r21
      ac:	a5 26       	eor	r10, r21
      ae:	ba 26       	eor	r11, r26
      b0:	87 26       	eor	r8, r23
      b2:	d3 26       	eor	r13, r19
      b4:	d3 26       	eor	r13, r19
      b6:	d3 26       	eor	r13, r19
      b8:	d3 26       	eor	r13, r19
      ba:	98 26       	eor	r9, r24

000000bc <__trampolines_end>:
      bc:	00 09       	sbc	r16, r0
      be:	12 1b       	sub	r17, r18
      c0:	24 2d       	mov	r18, r4
      c2:	36 3f       	cpi	r19, 0xF6	; 246
      c4:	48 41       	sbci	r20, 0x18	; 24
      c6:	5a 53       	subi	r21, 0x3A	; 58
      c8:	6c 65       	ori	r22, 0x5C	; 92
      ca:	7e 77       	andi	r23, 0x7E	; 126
      cc:	19 10       	cpse	r1, r9
      ce:	0b 02       	muls	r16, r27
      d0:	3d 34       	cpi	r19, 0x4D	; 77
      d2:	2f 26       	eor	r2, r31
      d4:	51 58       	subi	r21, 0x81	; 129
      d6:	43 4a       	sbci	r20, 0xA3	; 163
      d8:	75 7c       	andi	r23, 0xC5	; 197
      da:	67 6e       	ori	r22, 0xE7	; 231
      dc:	32 3b       	cpi	r19, 0xB2	; 178
      de:	20 29       	or	r18, r0
      e0:	16 1f       	adc	r17, r22
      e2:	04 0d       	add	r16, r4
      e4:	7a 73       	andi	r23, 0x3A	; 58
      e6:	68 61       	ori	r22, 0x18	; 24
      e8:	5e 57       	subi	r21, 0x7E	; 126
      ea:	4c 45       	sbci	r20, 0x5C	; 92
      ec:	2b 22       	and	r2, r27
      ee:	39 30       	cpi	r19, 0x09	; 9
      f0:	0f 06       	cpc	r0, r31
      f2:	1d 14       	cp	r1, r13
      f4:	63 6a       	ori	r22, 0xA3	; 163
      f6:	71 78       	andi	r23, 0x81	; 129
      f8:	47 4e       	sbci	r20, 0xE7	; 231
      fa:	55 5c       	subi	r21, 0xC5	; 197
      fc:	64 6d       	ori	r22, 0xD4	; 212
      fe:	76 7f       	andi	r23, 0xF6	; 246
     100:	40 49       	sbci	r20, 0x90	; 144
     102:	52 5b       	subi	r21, 0xB2	; 178
     104:	2c 25       	eor	r18, r12
     106:	3e 37       	cpi	r19, 0x7E	; 126
     108:	08 01       	movw	r0, r16
     10a:	1a 13       	cpse	r17, r26
     10c:	7d 74       	andi	r23, 0x4D	; 77
     10e:	6f 66       	ori	r22, 0x6F	; 111
     110:	59 50       	subi	r21, 0x09	; 9
     112:	4b 42       	sbci	r20, 0x2B	; 43
     114:	35 3c       	cpi	r19, 0xC5	; 197
     116:	27 2e       	mov	r2, r23
     118:	11 18       	sub	r1, r1
     11a:	03 0a       	sbc	r0, r19
     11c:	56 5f       	subi	r21, 0xF6	; 246
     11e:	44 4d       	sbci	r20, 0xD4	; 212
     120:	72 7b       	andi	r23, 0xB2	; 178
     122:	60 69       	ori	r22, 0x90	; 144
     124:	1e 17       	cp	r17, r30
     126:	0c 05       	cpc	r16, r12
     128:	3a 33       	cpi	r19, 0x3A	; 58
     12a:	28 21       	and	r18, r8
     12c:	4f 46       	sbci	r20, 0x6F	; 111
     12e:	5d 54       	subi	r21, 0x4D	; 77
     130:	6b 62       	ori	r22, 0x2B	; 43
     132:	79 70       	andi	r23, 0x09	; 9
     134:	07 0e       	add	r0, r23
     136:	15 1c       	adc	r1, r5
     138:	23 2a       	or	r2, r19
     13a:	31 38       	cpi	r19, 0x81	; 129
     13c:	41 48       	sbci	r20, 0x81	; 129
     13e:	53 5a       	subi	r21, 0xA3	; 163
     140:	65 6c       	ori	r22, 0xC5	; 197
     142:	77 7e       	andi	r23, 0xE7	; 231
     144:	09 00       	.word	0x0009	; ????
     146:	1b 12       	cpse	r1, r27
     148:	2d 24       	eor	r2, r13
     14a:	3f 36       	cpi	r19, 0x6F	; 111
     14c:	58 51       	subi	r21, 0x18	; 24
     14e:	4a 43       	sbci	r20, 0x3A	; 58
     150:	7c 75       	andi	r23, 0x5C	; 92
     152:	6e 67       	ori	r22, 0x7E	; 126
     154:	10 19       	sub	r17, r0
     156:	02 0b       	sbc	r16, r18
     158:	34 3d       	cpi	r19, 0xD4	; 212
     15a:	26 2f       	mov	r18, r22
     15c:	73 7a       	andi	r23, 0xA3	; 163
     15e:	61 68       	ori	r22, 0x81	; 129
     160:	57 5e       	subi	r21, 0xE7	; 231
     162:	45 4c       	sbci	r20, 0xC5	; 197
     164:	3b 32       	cpi	r19, 0x2B	; 43
     166:	29 20       	and	r2, r9
     168:	1f 16       	cp	r1, r31
     16a:	0d 04       	cpc	r0, r13
     16c:	6a 63       	ori	r22, 0x3A	; 58
     16e:	78 71       	andi	r23, 0x18	; 24
     170:	4e 47       	sbci	r20, 0x7E	; 126
     172:	5c 55       	subi	r21, 0x5C	; 92
     174:	22 2b       	or	r18, r18
     176:	30 39       	cpi	r19, 0x90	; 144
     178:	06 0f       	add	r16, r22
     17a:	14 1d       	adc	r17, r4
     17c:	25 2c       	mov	r2, r5
     17e:	37 3e       	cpi	r19, 0xE7	; 231
     180:	01 08       	sbc	r0, r1
     182:	13 1a       	sub	r1, r19
     184:	6d 64       	ori	r22, 0x4D	; 77
     186:	7f 76       	andi	r23, 0x6F	; 111
     188:	49 40       	sbci	r20, 0x09	; 9
     18a:	5b 52       	subi	r21, 0x2B	; 43
     18c:	3c 35       	cpi	r19, 0x5C	; 92
     18e:	2e 27       	eor	r18, r30
     190:	18 11       	cpse	r17, r8
     192:	0a 03       	fmul	r16, r18
     194:	74 7d       	andi	r23, 0xD4	; 212
     196:	66 6f       	ori	r22, 0xF6	; 246
     198:	50 59       	subi	r21, 0x90	; 144
     19a:	42 4b       	sbci	r20, 0xB2	; 178
     19c:	17 1e       	adc	r1, r23
     19e:	05 0c       	add	r0, r5
     1a0:	33 3a       	cpi	r19, 0xA3	; 163
     1a2:	21 28       	or	r2, r1
     1a4:	5f 56       	subi	r21, 0x6F	; 111
     1a6:	4d 44       	sbci	r20, 0x4D	; 77
     1a8:	7b 72       	andi	r23, 0x2B	; 43
     1aa:	69 60       	ori	r22, 0x09	; 9
     1ac:	0e 07       	cpc	r16, r30
     1ae:	1c 15       	cp	r17, r12
     1b0:	2a 23       	and	r18, r26
     1b2:	38 31       	cpi	r19, 0x18	; 24
     1b4:	46 4f       	sbci	r20, 0xF6	; 246
     1b6:	54 5d       	subi	r21, 0xD4	; 212
     1b8:	62 6b       	ori	r22, 0xB2	; 178
     1ba:	70 79       	andi	r23, 0x90	; 144

000001bc <__ctors_end>:
     1bc:	11 24       	eor	r1, r1
     1be:	1f be       	out	0x3f, r1	; 63
     1c0:	cf ef       	ldi	r28, 0xFF	; 255
     1c2:	cd bf       	out	0x3d, r28	; 61
     1c4:	df e3       	ldi	r29, 0x3F	; 63
     1c6:	de bf       	out	0x3e, r29	; 62

000001c8 <__do_copy_data>:
     1c8:	19 e2       	ldi	r17, 0x29	; 41
     1ca:	a0 e0       	ldi	r26, 0x00	; 0
     1cc:	b8 e2       	ldi	r27, 0x28	; 40
     1ce:	ef e9       	ldi	r30, 0x9F	; 159
     1d0:	fa e6       	ldi	r31, 0x6A	; 106
     1d2:	02 c0       	rjmp	.+4      	; 0x1d8 <__do_copy_data+0x10>
     1d4:	05 90       	lpm	r0, Z+
     1d6:	0d 92       	st	X+, r0
     1d8:	aa 3c       	cpi	r26, 0xCA	; 202
     1da:	b1 07       	cpc	r27, r17
     1dc:	d9 f7       	brne	.-10     	; 0x1d4 <__do_copy_data+0xc>

000001de <__do_clear_bss>:
     1de:	29 e3       	ldi	r18, 0x39	; 57
     1e0:	aa ec       	ldi	r26, 0xCA	; 202
     1e2:	b9 e2       	ldi	r27, 0x29	; 41
     1e4:	01 c0       	rjmp	.+2      	; 0x1e8 <.do_clear_bss_start>

000001e6 <.do_clear_bss_loop>:
     1e6:	1d 92       	st	X+, r1

000001e8 <.do_clear_bss_start>:
     1e8:	a9 39       	cpi	r26, 0x99	; 153
     1ea:	b2 07       	cpc	r27, r18
     1ec:	e1 f7       	brne	.-8      	; 0x1e6 <.do_clear_bss_loop>
     1ee:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <main>
     1f2:	0c 94 ad 31 	jmp	0x635a	; 0x635a <_exit>

000001f6 <__bad_interrupt>:
     1f6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001fa <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
**/
void atmel_start_init(void)
{
	system_init();	
     1fa:	0c 94 5f 17 	jmp	0x2ebe	; 0x2ebe <system_init>

000001fe <kit_protocol_convert_hex_to_nibble>:
#include "convertions.h"

#define HEX_BUFFER_SIZE 1000

static uint8_t kit_protocol_convert_hex_to_nibble(uint8_t hex)
{
     1fe:	98 2f       	mov	r25, r24
    if ((hex <= '9') && (hex >= '0'))
     200:	80 ed       	ldi	r24, 0xD0	; 208
     202:	89 0f       	add	r24, r25
     204:	8a 30       	cpi	r24, 0x0A	; 10
     206:	70 f0       	brcs	.+28     	; 0x224 <kit_protocol_convert_hex_to_nibble+0x26>
    {
        hex -= '0';
    }
    else if ((hex <= 'F' ) && (hex >= 'A'))
     208:	8f eb       	ldi	r24, 0xBF	; 191
     20a:	89 0f       	add	r24, r25
     20c:	86 30       	cpi	r24, 0x06	; 6
     20e:	10 f4       	brcc	.+4      	; 0x214 <kit_protocol_convert_hex_to_nibble+0x16>
    {
        hex -= ('A' - 10);
     210:	89 ec       	ldi	r24, 0xC9	; 201
     212:	05 c0       	rjmp	.+10     	; 0x21e <kit_protocol_convert_hex_to_nibble+0x20>
    }
    else if ((hex <= 'f') && (hex >= 'a'))
     214:	8f e9       	ldi	r24, 0x9F	; 159
     216:	89 0f       	add	r24, r25
     218:	86 30       	cpi	r24, 0x06	; 6
     21a:	18 f4       	brcc	.+6      	; 0x222 <kit_protocol_convert_hex_to_nibble+0x24>
    {
        hex -= ('a' - 10);
     21c:	89 ea       	ldi	r24, 0xA9	; 169
     21e:	89 0f       	add	r24, r25
     220:	08 95       	ret
    }
    else
    {
        hex = 0;
     222:	80 e0       	ldi	r24, 0x00	; 0
    }

    return hex;
}
     224:	08 95       	ret

00000226 <CONVERTIONS_hexToBinary>:
 *                           OUT - The binary buffer
 *
 * \return    The length of the binary buffer
 */
uint16_t CONVERTIONS_hexToBinary(uint16_t length, uint8_t *buffer)
{
     226:	af 92       	push	r10
     228:	bf 92       	push	r11
     22a:	df 92       	push	r13
     22c:	ef 92       	push	r14
     22e:	ff 92       	push	r15
     230:	0f 93       	push	r16
     232:	1f 93       	push	r17
     234:	cf 93       	push	r28
     236:	df 93       	push	r29
    uint16_t index = 0;
    uint16_t binary_index = 0;
    uint8_t  hex = 0;

    if ((buffer == NULL) || (length < 2))
     238:	61 15       	cp	r22, r1
     23a:	71 05       	cpc	r23, r1
     23c:	21 f1       	breq	.+72     	; 0x286 <CONVERTIONS_hexToBinary+0x60>
     23e:	82 30       	cpi	r24, 0x02	; 2
     240:	91 05       	cpc	r25, r1
     242:	08 f1       	brcs	.+66     	; 0x286 <CONVERTIONS_hexToBinary+0x60>
     244:	5c 01       	movw	r10, r24
     246:	eb 01       	movw	r28, r22
     248:	7b 01       	movw	r14, r22
     24a:	00 e0       	ldi	r16, 0x00	; 0
     24c:	10 e0       	ldi	r17, 0x00	; 0
    }

    for (index = 0, binary_index = 0; index < length; index += 2, binary_index++)
    {
        hex = buffer[index];
        buffer[binary_index]  = (kit_protocol_convert_hex_to_nibble(hex) << 4);
     24e:	f7 01       	movw	r30, r14
     250:	80 81       	ld	r24, Z
     252:	0e 94 ff 00 	call	0x1fe	; 0x1fe <kit_protocol_convert_hex_to_nibble>
     256:	d8 2e       	mov	r13, r24
     258:	d2 94       	swap	r13
     25a:	80 ef       	ldi	r24, 0xF0	; 240
     25c:	d8 22       	and	r13, r24
     25e:	d8 82       	st	Y, r13

        hex = buffer[(index + 1)];
        buffer[binary_index] |= kit_protocol_convert_hex_to_nibble(hex);
     260:	f7 01       	movw	r30, r14
     262:	81 81       	ldd	r24, Z+1	; 0x01
     264:	0e 94 ff 00 	call	0x1fe	; 0x1fe <kit_protocol_convert_hex_to_nibble>
     268:	8d 29       	or	r24, r13
     26a:	89 93       	st	Y+, r24
    if ((buffer == NULL) || (length < 2))
    {
        return 0;
    }

    for (index = 0, binary_index = 0; index < length; index += 2, binary_index++)
     26c:	0f 5f       	subi	r16, 0xFF	; 255
     26e:	1f 4f       	sbci	r17, 0xFF	; 255
     270:	f2 e0       	ldi	r31, 0x02	; 2
     272:	ef 0e       	add	r14, r31
     274:	f1 1c       	adc	r15, r1
     276:	c8 01       	movw	r24, r16
     278:	88 0f       	add	r24, r24
     27a:	99 1f       	adc	r25, r25
     27c:	8a 15       	cp	r24, r10
     27e:	9b 05       	cpc	r25, r11
     280:	30 f3       	brcs	.-52     	; 0x24e <CONVERTIONS_hexToBinary+0x28>
     282:	c8 01       	movw	r24, r16
     284:	02 c0       	rjmp	.+4      	; 0x28a <CONVERTIONS_hexToBinary+0x64>
    uint16_t binary_index = 0;
    uint8_t  hex = 0;

    if ((buffer == NULL) || (length < 2))
    {
        return 0;
     286:	80 e0       	ldi	r24, 0x00	; 0
     288:	90 e0       	ldi	r25, 0x00	; 0
        hex = buffer[(index + 1)];
        buffer[binary_index] |= kit_protocol_convert_hex_to_nibble(hex);
    }

    return binary_index;
}
     28a:	df 91       	pop	r29
     28c:	cf 91       	pop	r28
     28e:	1f 91       	pop	r17
     290:	0f 91       	pop	r16
     292:	ff 90       	pop	r15
     294:	ef 90       	pop	r14
     296:	df 90       	pop	r13
     298:	bf 90       	pop	r11
     29a:	af 90       	pop	r10
     29c:	08 95       	ret

0000029e <CONVERTIONS_binaryToHex>:
 *                           OUT - The ASCII null-terminated hex buffer
 *
 * \return    The length of the ASCII null-terminated hex buffer
 */
uint16_t CONVERTIONS_binaryToHex(uint16_t length, uint8_t *buffer)
{
     29e:	cf 92       	push	r12
     2a0:	df 92       	push	r13
     2a2:	ef 92       	push	r14
     2a4:	ff 92       	push	r15
     2a6:	0f 93       	push	r16
     2a8:	1f 93       	push	r17
     2aa:	cf 93       	push	r28
     2ac:	df 93       	push	r29
     2ae:	cd b7       	in	r28, 0x3d	; 61
     2b0:	de b7       	in	r29, 0x3e	; 62
     2b2:	c8 5e       	subi	r28, 0xE8	; 232
     2b4:	d3 40       	sbci	r29, 0x03	; 3
     2b6:	cd bf       	out	0x3d, r28	; 61
     2b8:	de bf       	out	0x3e, r29	; 62
     2ba:	8c 01       	movw	r16, r24
    const size_t hex_buffer_size = HEX_BUFFER_SIZE;

    char hex_buffer[HEX_BUFFER_SIZE];
    uint16_t hex_length = 0;

    if ((buffer == NULL) || (length == 0))
     2bc:	61 15       	cp	r22, r1
     2be:	71 05       	cpc	r23, r1
     2c0:	e1 f1       	breq	.+120    	; 0x33a <CONVERTIONS_binaryToHex+0x9c>
     2c2:	89 2b       	or	r24, r25
     2c4:	d1 f1       	breq	.+116    	; 0x33a <CONVERTIONS_binaryToHex+0x9c>
    {
        return 0;
    }

    memset(hex_buffer, 0, hex_buffer_size);
     2c6:	9e 01       	movw	r18, r28
     2c8:	2f 5f       	subi	r18, 0xFF	; 255
     2ca:	3f 4f       	sbci	r19, 0xFF	; 255
     2cc:	79 01       	movw	r14, r18
     2ce:	88 ee       	ldi	r24, 0xE8	; 232
     2d0:	93 e0       	ldi	r25, 0x03	; 3
     2d2:	d9 01       	movw	r26, r18
     2d4:	fc 01       	movw	r30, r24
     2d6:	1d 92       	st	X+, r1
     2d8:	31 97       	sbiw	r30, 0x01	; 1
     2da:	e9 f7       	brne	.-6      	; 0x2d6 <CONVERTIONS_binaryToHex+0x38>
     2dc:	69 01       	movw	r12, r18
     2de:	fb 01       	movw	r30, r22
     2e0:	9b 01       	movw	r18, r22
     2e2:	20 0f       	add	r18, r16
     2e4:	31 1f       	adc	r19, r17

    for (uint16_t index = 0; index < length; index++)
     2e6:	2e 17       	cp	r18, r30
     2e8:	3f 07       	cpc	r19, r31
     2ea:	d9 f0       	breq	.+54     	; 0x322 <CONVERTIONS_binaryToHex+0x84>
     2ec:	af 01       	movw	r20, r30
    {
        hex_buffer[hex_length++] = (char)kit_protocol_convert_nibble_to_hex((buffer[index] >> 4));
     2ee:	90 81       	ld	r25, Z
     2f0:	92 95       	swap	r25
     2f2:	9f 70       	andi	r25, 0x0F	; 15
 */
static uint8_t kit_protocol_convert_nibble_to_hex(uint8_t nibble)
{
    nibble &= 0x0F;

    if (nibble <= 0x09)
     2f4:	9a 30       	cpi	r25, 0x0A	; 10
     2f6:	10 f4       	brcc	.+4      	; 0x2fc <CONVERTIONS_binaryToHex+0x5e>
    {
        nibble += '0';
     2f8:	90 5d       	subi	r25, 0xD0	; 208
     2fa:	01 c0       	rjmp	.+2      	; 0x2fe <CONVERTIONS_binaryToHex+0x60>
    }
    else
    {
        nibble += ('A' - 10);
     2fc:	99 5c       	subi	r25, 0xC9	; 201

    memset(hex_buffer, 0, hex_buffer_size);

    for (uint16_t index = 0; index < length; index++)
    {
        hex_buffer[hex_length++] = (char)kit_protocol_convert_nibble_to_hex((buffer[index] >> 4));
     2fe:	d6 01       	movw	r26, r12
     300:	9c 93       	st	X, r25
     302:	31 96       	adiw	r30, 0x01	; 1
 *
 * \return    The ASCII hex value
 */
static uint8_t kit_protocol_convert_nibble_to_hex(uint8_t nibble)
{
    nibble &= 0x0F;
     304:	da 01       	movw	r26, r20
     306:	9c 91       	ld	r25, X
     308:	9f 70       	andi	r25, 0x0F	; 15

    if (nibble <= 0x09)
     30a:	9a 30       	cpi	r25, 0x0A	; 10
     30c:	10 f4       	brcc	.+4      	; 0x312 <CONVERTIONS_binaryToHex+0x74>
    {
        nibble += '0';
     30e:	90 5d       	subi	r25, 0xD0	; 208
     310:	01 c0       	rjmp	.+2      	; 0x314 <CONVERTIONS_binaryToHex+0x76>
    }
    else
    {
        nibble += ('A' - 10);
     312:	99 5c       	subi	r25, 0xC9	; 201
    memset(hex_buffer, 0, hex_buffer_size);

    for (uint16_t index = 0; index < length; index++)
    {
        hex_buffer[hex_length++] = (char)kit_protocol_convert_nibble_to_hex((buffer[index] >> 4));
        hex_buffer[hex_length++] = (char)kit_protocol_convert_nibble_to_hex((buffer[index] & 0x0F));
     314:	d6 01       	movw	r26, r12
     316:	11 96       	adiw	r26, 0x01	; 1
     318:	9c 93       	st	X, r25
     31a:	b2 e0       	ldi	r27, 0x02	; 2
     31c:	cb 0e       	add	r12, r27
     31e:	d1 1c       	adc	r13, r1
     320:	e2 cf       	rjmp	.-60     	; 0x2e6 <CONVERTIONS_binaryToHex+0x48>
     322:	cb 01       	movw	r24, r22
     324:	00 0f       	add	r16, r16
     326:	11 1f       	adc	r17, r17
    }

    // Save the ASCII hex buffer
    memcpy(buffer, hex_buffer, hex_length);
     328:	a8 01       	movw	r20, r16
     32a:	b7 01       	movw	r22, r14
     32c:	0e 94 72 2e 	call	0x5ce4	; 0x5ce4 <memcpy>

    // Free the allocated memory
    free(hex_buffer);
     330:	c7 01       	movw	r24, r14
     332:	0e 94 dc 2d 	call	0x5bb8	; 0x5bb8 <free>

    return hex_length;
     336:	c8 01       	movw	r24, r16
     338:	02 c0       	rjmp	.+4      	; 0x33e <CONVERTIONS_binaryToHex+0xa0>
    char hex_buffer[HEX_BUFFER_SIZE];
    uint16_t hex_length = 0;

    if ((buffer == NULL) || (length == 0))
    {
        return 0;
     33a:	80 e0       	ldi	r24, 0x00	; 0
     33c:	90 e0       	ldi	r25, 0x00	; 0

    // Free the allocated memory
    free(hex_buffer);

    return hex_length;
     33e:	c8 51       	subi	r28, 0x18	; 24
     340:	dc 4f       	sbci	r29, 0xFC	; 252
     342:	cd bf       	out	0x3d, r28	; 61
     344:	de bf       	out	0x3e, r29	; 62
     346:	df 91       	pop	r29
     348:	cf 91       	pop	r28
     34a:	1f 91       	pop	r17
     34c:	0f 91       	pop	r16
     34e:	ff 90       	pop	r15
     350:	ef 90       	pop	r14
     352:	df 90       	pop	r13
     354:	cf 90       	pop	r12
     356:	08 95       	ret

00000358 <atcacert_create_csr>:

    return status;
}

int atcacert_create_csr(const atcacert_def_t* csr_def, uint8_t* csr, size_t* csr_size)
{
     358:	2f 92       	push	r2
     35a:	3f 92       	push	r3
     35c:	4f 92       	push	r4
     35e:	5f 92       	push	r5
     360:	6f 92       	push	r6
     362:	7f 92       	push	r7
     364:	8f 92       	push	r8
     366:	9f 92       	push	r9
     368:	af 92       	push	r10
     36a:	bf 92       	push	r11
     36c:	cf 92       	push	r12
     36e:	df 92       	push	r13
     370:	ef 92       	push	r14
     372:	ff 92       	push	r15
     374:	0f 93       	push	r16
     376:	1f 93       	push	r17
     378:	cf 93       	push	r28
     37a:	df 93       	push	r29
     37c:	cd b7       	in	r28, 0x3d	; 61
     37e:	de b7       	in	r29, 0x3e	; 62
     380:	c1 5a       	subi	r28, 0xA1	; 161
     382:	d1 09       	sbc	r29, r1
     384:	cd bf       	out	0x3d, r28	; 61
     386:	de bf       	out	0x3e, r29	; 62
     388:	fa 01       	movw	r30, r20
    ATCA_STATUS status = ATCA_SUCCESS;
    uint8_t pub_key[ATCA_PUB_KEY_SIZE] = { 0 };
     38a:	20 e4       	ldi	r18, 0x40	; 64
     38c:	8e 01       	movw	r16, r28
     38e:	0f 5b       	subi	r16, 0xBF	; 191
     390:	1f 4f       	sbci	r17, 0xFF	; 255
     392:	d8 01       	movw	r26, r16
     394:	32 2f       	mov	r19, r18
     396:	1d 92       	st	X+, r1
     398:	3a 95       	dec	r19
     39a:	e9 f7       	brne	.-6      	; 0x396 <atcacert_create_csr+0x3e>
    uint8_t sig[ATCA_SIG_SIZE] = { 0 };
     39c:	ae 01       	movw	r20, r28
     39e:	4f 5f       	subi	r20, 0xFF	; 255
     3a0:	5f 4f       	sbci	r21, 0xFF	; 255
     3a2:	2a 01       	movw	r4, r20
     3a4:	da 01       	movw	r26, r20
     3a6:	1d 92       	st	X+, r1
     3a8:	2a 95       	dec	r18
     3aa:	e9 f7       	brne	.-6      	; 0x3a6 <atcacert_create_csr+0x4e>
    const atcacert_device_loc_t* pub_dev_loc = NULL;
    const atcacert_cert_loc_t* pub_loc = NULL;
    uint16_t key_slot = 0;
    uint16_t priv_key_slot = 0;
    uint8_t tbs_digest[ATCA_BLOCK_SIZE] = { 0 };
     3ac:	3e 01       	movw	r6, r28
     3ae:	b1 e8       	ldi	r27, 0x81	; 129
     3b0:	6b 0e       	add	r6, r27
     3b2:	71 1c       	adc	r7, r1
     3b4:	20 e2       	ldi	r18, 0x20	; 32
     3b6:	d3 01       	movw	r26, r6
     3b8:	1d 92       	st	X+, r1
     3ba:	2a 95       	dec	r18
     3bc:	e9 f7       	brne	.-6      	; 0x3b8 <atcacert_create_csr+0x60>
    size_t csr_max_size = 0;

    do
    {
        // Check the pointers
        if (csr_def == NULL || csr == NULL || csr == NULL || csr_size == NULL)
     3be:	00 97       	sbiw	r24, 0x00	; 0
     3c0:	09 f4       	brne	.+2      	; 0x3c4 <atcacert_create_csr+0x6c>
     3c2:	6d c0       	rjmp	.+218    	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
     3c4:	61 15       	cp	r22, r1
     3c6:	71 05       	cpc	r23, r1
     3c8:	09 f4       	brne	.+2      	; 0x3cc <atcacert_create_csr+0x74>
     3ca:	69 c0       	rjmp	.+210    	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
     3cc:	30 97       	sbiw	r30, 0x00	; 0
     3ce:	09 f4       	brne	.+2      	; 0x3d2 <atcacert_create_csr+0x7a>
     3d0:	66 c0       	rjmp	.+204    	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
        {
            status = ATCACERT_E_BAD_PARAMS;
            BREAK(status, "Null input parameter");
        }
        // Check the csr buffer size
        if (*csr_size < csr_def->cert_template_size)
     3d2:	7c 01       	movw	r14, r24
     3d4:	b6 e4       	ldi	r27, 0x46	; 70
     3d6:	eb 0e       	add	r14, r27
     3d8:	f1 1c       	adc	r15, r1
     3da:	d7 01       	movw	r26, r14
     3dc:	4d 91       	ld	r20, X+
     3de:	5c 91       	ld	r21, X
     3e0:	20 81       	ld	r18, Z
     3e2:	31 81       	ldd	r19, Z+1	; 0x01
     3e4:	24 17       	cp	r18, r20
     3e6:	35 07       	cpc	r19, r21
     3e8:	08 f4       	brcc	.+2      	; 0x3ec <atcacert_create_csr+0x94>
     3ea:	5b c0       	rjmp	.+182    	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
     3ec:	5f 01       	movw	r10, r30
     3ee:	4b 01       	movw	r8, r22
     3f0:	6c 01       	movw	r12, r24
        {
            status = ATCACERT_E_BUFFER_TOO_SMALL;
            BREAK(status, "CSR buffer size too small");
        }
        // Copy the CSR template into the CSR that will be returned
        memcpy(csr, csr_def->cert_template, csr_def->cert_template_size);
     3f2:	fc 01       	movw	r30, r24
     3f4:	ec 5b       	subi	r30, 0xBC	; 188
     3f6:	ff 4f       	sbci	r31, 0xFF	; 255
     3f8:	60 81       	ld	r22, Z
     3fa:	71 81       	ldd	r23, Z+1	; 0x01
     3fc:	c4 01       	movw	r24, r8
     3fe:	0e 94 72 2e 	call	0x5ce4	; 0x5ce4 <memcpy>
        csr_max_size = *csr_size;
     402:	f5 01       	movw	r30, r10
     404:	20 80       	ld	r2, Z
     406:	31 80       	ldd	r3, Z+1	; 0x01
        *csr_size = csr_def->cert_template_size;
     408:	d7 01       	movw	r26, r14
     40a:	8d 91       	ld	r24, X+
     40c:	9c 91       	ld	r25, X
     40e:	80 83       	st	Z, r24
     410:	91 83       	std	Z+1, r25	; 0x01

        // Get a few elements from the csr_def structure
        pub_loc = &(csr_def->std_cert_elements[STDCERT_PUBLIC_KEY]);
        pub_dev_loc = &(csr_def->public_key_dev_loc);
        key_slot = pub_dev_loc->slot;
     412:	f6 01       	movw	r30, r12
     414:	84 89       	ldd	r24, Z+20	; 0x14
     416:	90 e0       	ldi	r25, 0x00	; 0
        priv_key_slot = csr_def->private_key_slot;
     418:	f3 81       	ldd	r31, Z+3	; 0x03
     41a:	cf 55       	subi	r28, 0x5F	; 95
     41c:	df 4f       	sbci	r29, 0xFF	; 255
     41e:	f8 83       	st	Y, r31
     420:	c1 5a       	subi	r28, 0xA1	; 161
     422:	d0 40       	sbci	r29, 0x00	; 0

        // Get the public key from the device
        if (pub_dev_loc->is_genkey)
     424:	d6 01       	movw	r26, r12
     426:	55 96       	adiw	r26, 0x15	; 21
     428:	2c 91       	ld	r18, X
        {
            // Calculate the public key from the private key
            status = atcab_get_pubkey(key_slot, pub_key);
     42a:	b8 01       	movw	r22, r16
        pub_dev_loc = &(csr_def->public_key_dev_loc);
        key_slot = pub_dev_loc->slot;
        priv_key_slot = csr_def->private_key_slot;

        // Get the public key from the device
        if (pub_dev_loc->is_genkey)
     42c:	22 23       	and	r18, r18
     42e:	a1 f0       	breq	.+40     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
        {
            // Calculate the public key from the private key
            status = atcab_get_pubkey(key_slot, pub_key);
     430:	0e 94 a1 0b 	call	0x1742	; 0x1742 <atcab_get_pubkey>
            if (status != ATCA_SUCCESS)
     434:	81 11       	cpse	r24, r1
     436:	36 c0       	rjmp	.+108    	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
            {
                BREAK(status, "Could not read public key");
            }
        }
        // Insert the public key into the CSR template
        status = atcacert_set_cert_element(csr_def, pub_loc, csr, *csr_size, pub_key, ATCA_PUB_KEY_SIZE);
     438:	f5 01       	movw	r30, r10
     43a:	20 81       	ld	r18, Z
     43c:	31 81       	ldd	r19, Z+1	; 0x01
     43e:	80 e4       	ldi	r24, 0x40	; 64
     440:	e8 2e       	mov	r14, r24
     442:	f1 2c       	mov	r15, r1
     444:	a4 01       	movw	r20, r8
     446:	b6 01       	movw	r22, r12
     448:	6f 5d       	subi	r22, 0xDF	; 223
     44a:	7f 4f       	sbci	r23, 0xFF	; 255
     44c:	c6 01       	movw	r24, r12
     44e:	0e 94 0e 03 	call	0x61c	; 0x61c <atcacert_set_cert_element>
        if (status != ATCA_SUCCESS)
     452:	81 11       	cpse	r24, r1
     454:	27 c0       	rjmp	.+78     	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
     456:	03 c0       	rjmp	.+6      	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
            }
        }
        else
        {
            // Read the public key from a slot
            status = atcab_read_pubkey(key_slot, pub_key);
     458:	0e 94 ed 0c 	call	0x19da	; 0x19da <atcab_read_pubkey>
     45c:	eb cf       	rjmp	.-42     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
        if (status != ATCA_SUCCESS)
        {
            BREAK(status, "Setting CSR public key failed");
        }
		
		asm("nop");
     45e:	00 00       	nop

        // Get the CSR TBS digest
        status = atcacert_get_tbs_digest(csr_def, csr, *csr_size, tbs_digest);
     460:	d5 01       	movw	r26, r10
     462:	4d 91       	ld	r20, X+
     464:	5c 91       	ld	r21, X
     466:	93 01       	movw	r18, r6
     468:	b4 01       	movw	r22, r8
     46a:	c6 01       	movw	r24, r12
     46c:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <atcacert_get_tbs_digest>
        if (status != ATCA_SUCCESS)
     470:	81 11       	cpse	r24, r1
     472:	18 c0       	rjmp	.+48     	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
        {
            BREAK(status, "Get TBS digest failed");
        }

        // Sign the TBS digest
        status = atcab_sign(priv_key_slot, tbs_digest, sig);
     474:	a2 01       	movw	r20, r4
     476:	b3 01       	movw	r22, r6
     478:	cf 55       	subi	r28, 0x5F	; 95
     47a:	df 4f       	sbci	r29, 0xFF	; 255
     47c:	b8 81       	ld	r27, Y
     47e:	c1 5a       	subi	r28, 0xA1	; 161
     480:	d0 40       	sbci	r29, 0x00	; 0
     482:	8b 2f       	mov	r24, r27
     484:	90 e0       	ldi	r25, 0x00	; 0
     486:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <atcab_sign>
        if (status != ATCA_SUCCESS)
     48a:	81 11       	cpse	r24, r1
     48c:	0b c0       	rjmp	.+22     	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
        {
            BREAK(status, "Signing CSR failed");
        }

        // Insert the signature into the CSR template
        status = atcacert_set_signature(csr_def, csr, csr_size, csr_max_size, sig);
     48e:	82 01       	movw	r16, r4
     490:	91 01       	movw	r18, r2
     492:	a5 01       	movw	r20, r10
     494:	b4 01       	movw	r22, r8
     496:	c6 01       	movw	r24, r12
     498:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <atcacert_set_signature>
     49c:	03 c0       	rjmp	.+6      	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
    do
    {
        // Check the pointers
        if (csr_def == NULL || csr == NULL || csr == NULL || csr_size == NULL)
        {
            status = ATCACERT_E_BAD_PARAMS;
     49e:	82 e0       	ldi	r24, 0x02	; 2
     4a0:	01 c0       	rjmp	.+2      	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
            BREAK(status, "Null input parameter");
        }
        // Check the csr buffer size
        if (*csr_size < csr_def->cert_template_size)
        {
            status = ATCACERT_E_BUFFER_TOO_SMALL;
     4a2:	83 e0       	ldi	r24, 0x03	; 3

    }
    while (false);

    return status;
}
     4a4:	90 e0       	ldi	r25, 0x00	; 0
     4a6:	cf 55       	subi	r28, 0x5F	; 95
     4a8:	df 4f       	sbci	r29, 0xFF	; 255
     4aa:	cd bf       	out	0x3d, r28	; 61
     4ac:	de bf       	out	0x3e, r29	; 62
     4ae:	df 91       	pop	r29
     4b0:	cf 91       	pop	r28
     4b2:	1f 91       	pop	r17
     4b4:	0f 91       	pop	r16
     4b6:	ff 90       	pop	r15
     4b8:	ef 90       	pop	r14
     4ba:	df 90       	pop	r13
     4bc:	cf 90       	pop	r12
     4be:	bf 90       	pop	r11
     4c0:	af 90       	pop	r10
     4c2:	9f 90       	pop	r9
     4c4:	8f 90       	pop	r8
     4c6:	7f 90       	pop	r7
     4c8:	6f 90       	pop	r6
     4ca:	5f 90       	pop	r5
     4cc:	4f 90       	pop	r4
     4ce:	3f 90       	pop	r3
     4d0:	2f 90       	pop	r2
     4d2:	08 95       	ret

000004d4 <get_effective_offset>:
    comp_cert[69] = ((cert_def->template_id & 0x0F) << 4) | (cert_def->chain_id & 0x0F);
    comp_cert[70] = ((uint8_t)(cert_def->sn_source & 0x0F) << 4) | 0;
    comp_cert[71] = 0;

    return ATCACERT_E_SUCCESS;
}
     4d4:	fc 01       	movw	r30, r24
     4d6:	80 81       	ld	r24, Z
     4d8:	81 11       	cpse	r24, r1
     4da:	1a c0       	rjmp	.+52     	; 0x510 <get_effective_offset+0x3c>
     4dc:	84 81       	ldd	r24, Z+4	; 0x04
     4de:	87 30       	cpi	r24, 0x07	; 7
     4e0:	b9 f4       	brne	.+46     	; 0x510 <get_effective_offset+0x3c>
     4e2:	85 a9       	ldd	r24, Z+53	; 0x35
     4e4:	96 a9       	ldd	r25, Z+54	; 0x36
     4e6:	84 17       	cp	r24, r20
     4e8:	95 07       	cpc	r25, r21
     4ea:	90 f4       	brcc	.+36     	; 0x510 <get_effective_offset+0x3c>
     4ec:	db 01       	movw	r26, r22
     4ee:	a8 0f       	add	r26, r24
     4f0:	b9 1f       	adc	r27, r25
     4f2:	2c 91       	ld	r18, X
     4f4:	30 e0       	ldi	r19, 0x00	; 0
     4f6:	ec 5b       	subi	r30, 0xBC	; 188
     4f8:	ff 4f       	sbci	r31, 0xFF	; 255
     4fa:	40 81       	ld	r20, Z
     4fc:	51 81       	ldd	r21, Z+1	; 0x01
     4fe:	fa 01       	movw	r30, r20
     500:	e8 0f       	add	r30, r24
     502:	f9 1f       	adc	r31, r25
     504:	80 81       	ld	r24, Z
     506:	a9 01       	movw	r20, r18
     508:	48 1b       	sub	r20, r24
     50a:	51 09       	sbc	r21, r1
     50c:	ca 01       	movw	r24, r20
     50e:	08 95       	ret
     510:	80 e0       	ldi	r24, 0x00	; 0
     512:	90 e0       	ldi	r25, 0x00	; 0
     514:	08 95       	ret

00000516 <atcacert_get_tbs>:
     516:	6f 92       	push	r6
     518:	7f 92       	push	r7
     51a:	8f 92       	push	r8
     51c:	9f 92       	push	r9
     51e:	af 92       	push	r10
     520:	bf 92       	push	r11
     522:	cf 92       	push	r12
     524:	df 92       	push	r13
     526:	ef 92       	push	r14
     528:	ff 92       	push	r15
     52a:	0f 93       	push	r16
     52c:	1f 93       	push	r17
     52e:	cf 93       	push	r28
     530:	df 93       	push	r29
     532:	00 97       	sbiw	r24, 0x00	; 0
     534:	51 f1       	breq	.+84     	; 0x58a <atcacert_get_tbs+0x74>
     536:	61 15       	cp	r22, r1
     538:	71 05       	cpc	r23, r1
     53a:	39 f1       	breq	.+78     	; 0x58a <atcacert_get_tbs+0x74>
     53c:	21 15       	cp	r18, r1
     53e:	31 05       	cpc	r19, r1
     540:	21 f1       	breq	.+72     	; 0x58a <atcacert_get_tbs+0x74>
     542:	01 15       	cp	r16, r1
     544:	11 05       	cpc	r17, r1
     546:	09 f1       	breq	.+66     	; 0x58a <atcacert_get_tbs+0x74>
     548:	38 01       	movw	r6, r16
     54a:	89 01       	movw	r16, r18
     54c:	5a 01       	movw	r10, r20
     54e:	eb 01       	movw	r28, r22
     550:	fc 01       	movw	r30, r24
     552:	e6 84       	ldd	r14, Z+14	; 0x0e
     554:	f7 84       	ldd	r15, Z+15	; 0x0f
     556:	80 88       	ldd	r8, Z+16	; 0x10
     558:	91 88       	ldd	r9, Z+17	; 0x11
     55a:	67 01       	movw	r12, r14
     55c:	c8 0c       	add	r12, r8
     55e:	d9 1c       	adc	r13, r9
     560:	a6 01       	movw	r20, r12
     562:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <get_effective_offset>
     566:	c8 0e       	add	r12, r24
     568:	d9 1e       	adc	r13, r25
     56a:	ac 14       	cp	r10, r12
     56c:	bd 04       	cpc	r11, r13
     56e:	80 f0       	brcs	.+32     	; 0x590 <atcacert_get_tbs+0x7a>
     570:	ce 0d       	add	r28, r14
     572:	df 1d       	adc	r29, r15
     574:	f8 01       	movw	r30, r16
     576:	c0 83       	st	Z, r28
     578:	d1 83       	std	Z+1, r29	; 0x01
     57a:	88 0d       	add	r24, r8
     57c:	99 1d       	adc	r25, r9
     57e:	f3 01       	movw	r30, r6
     580:	80 83       	st	Z, r24
     582:	91 83       	std	Z+1, r25	; 0x01
     584:	80 e0       	ldi	r24, 0x00	; 0
     586:	90 e0       	ldi	r25, 0x00	; 0
     588:	05 c0       	rjmp	.+10     	; 0x594 <atcacert_get_tbs+0x7e>
     58a:	82 e0       	ldi	r24, 0x02	; 2
     58c:	90 e0       	ldi	r25, 0x00	; 0
     58e:	02 c0       	rjmp	.+4      	; 0x594 <atcacert_get_tbs+0x7e>
     590:	8a e0       	ldi	r24, 0x0A	; 10
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	df 91       	pop	r29
     596:	cf 91       	pop	r28
     598:	1f 91       	pop	r17
     59a:	0f 91       	pop	r16
     59c:	ff 90       	pop	r15
     59e:	ef 90       	pop	r14
     5a0:	df 90       	pop	r13
     5a2:	cf 90       	pop	r12
     5a4:	bf 90       	pop	r11
     5a6:	af 90       	pop	r10
     5a8:	9f 90       	pop	r9
     5aa:	8f 90       	pop	r8
     5ac:	7f 90       	pop	r7
     5ae:	6f 90       	pop	r6
     5b0:	08 95       	ret

000005b2 <atcacert_get_tbs_digest>:
     5b2:	ef 92       	push	r14
     5b4:	ff 92       	push	r15
     5b6:	0f 93       	push	r16
     5b8:	1f 93       	push	r17
     5ba:	cf 93       	push	r28
     5bc:	df 93       	push	r29
     5be:	00 d0       	rcall	.+0      	; 0x5c0 <atcacert_get_tbs_digest+0xe>
     5c0:	00 d0       	rcall	.+0      	; 0x5c2 <atcacert_get_tbs_digest+0x10>
     5c2:	cd b7       	in	r28, 0x3d	; 61
     5c4:	de b7       	in	r29, 0x3e	; 62
     5c6:	1b 82       	std	Y+3, r1	; 0x03
     5c8:	1c 82       	std	Y+4, r1	; 0x04
     5ca:	19 82       	std	Y+1, r1	; 0x01
     5cc:	1a 82       	std	Y+2, r1	; 0x02
     5ce:	00 97       	sbiw	r24, 0x00	; 0
     5d0:	c9 f0       	breq	.+50     	; 0x604 <atcacert_get_tbs_digest+0x52>
     5d2:	61 15       	cp	r22, r1
     5d4:	71 05       	cpc	r23, r1
     5d6:	b1 f0       	breq	.+44     	; 0x604 <atcacert_get_tbs_digest+0x52>
     5d8:	21 15       	cp	r18, r1
     5da:	31 05       	cpc	r19, r1
     5dc:	99 f0       	breq	.+38     	; 0x604 <atcacert_get_tbs_digest+0x52>
     5de:	79 01       	movw	r14, r18
     5e0:	8e 01       	movw	r16, r28
     5e2:	0f 5f       	subi	r16, 0xFF	; 255
     5e4:	1f 4f       	sbci	r17, 0xFF	; 255
     5e6:	9e 01       	movw	r18, r28
     5e8:	2d 5f       	subi	r18, 0xFD	; 253
     5ea:	3f 4f       	sbci	r19, 0xFF	; 255
     5ec:	0e 94 8b 02 	call	0x516	; 0x516 <atcacert_get_tbs>
     5f0:	00 97       	sbiw	r24, 0x00	; 0
     5f2:	51 f4       	brne	.+20     	; 0x608 <atcacert_get_tbs_digest+0x56>
     5f4:	69 81       	ldd	r22, Y+1	; 0x01
     5f6:	7a 81       	ldd	r23, Y+2	; 0x02
     5f8:	a7 01       	movw	r20, r14
     5fa:	8b 81       	ldd	r24, Y+3	; 0x03
     5fc:	9c 81       	ldd	r25, Y+4	; 0x04
     5fe:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <atcac_sw_sha2_256>
     602:	02 c0       	rjmp	.+4      	; 0x608 <atcacert_get_tbs_digest+0x56>
     604:	82 e0       	ldi	r24, 0x02	; 2
     606:	90 e0       	ldi	r25, 0x00	; 0
     608:	24 96       	adiw	r28, 0x04	; 4
     60a:	cd bf       	out	0x3d, r28	; 61
     60c:	de bf       	out	0x3e, r29	; 62
     60e:	df 91       	pop	r29
     610:	cf 91       	pop	r28
     612:	1f 91       	pop	r17
     614:	0f 91       	pop	r16
     616:	ff 90       	pop	r15
     618:	ef 90       	pop	r14
     61a:	08 95       	ret

0000061c <atcacert_set_cert_element>:
     61c:	af 92       	push	r10
     61e:	bf 92       	push	r11
     620:	cf 92       	push	r12
     622:	df 92       	push	r13
     624:	ef 92       	push	r14
     626:	ff 92       	push	r15
     628:	0f 93       	push	r16
     62a:	1f 93       	push	r17
     62c:	cf 93       	push	r28
     62e:	df 93       	push	r29
     630:	fc 01       	movw	r30, r24
     632:	89 2b       	or	r24, r25
     634:	f1 f1       	breq	.+124    	; 0x6b2 <atcacert_set_cert_element+0x96>
     636:	61 15       	cp	r22, r1
     638:	71 05       	cpc	r23, r1
     63a:	d9 f1       	breq	.+118    	; 0x6b2 <atcacert_set_cert_element+0x96>
     63c:	41 15       	cp	r20, r1
     63e:	51 05       	cpc	r21, r1
     640:	c1 f1       	breq	.+112    	; 0x6b2 <atcacert_set_cert_element+0x96>
     642:	db 01       	movw	r26, r22
     644:	12 96       	adiw	r26, 0x02	; 2
     646:	8d 91       	ld	r24, X+
     648:	9c 91       	ld	r25, X
     64a:	13 97       	sbiw	r26, 0x03	; 3
     64c:	00 97       	sbiw	r24, 0x00	; 0
     64e:	71 f1       	breq	.+92     	; 0x6ac <atcacert_set_cert_element+0x90>
     650:	01 15       	cp	r16, r1
     652:	11 05       	cpc	r17, r1
     654:	71 f1       	breq	.+92     	; 0x6b2 <atcacert_set_cert_element+0x96>
     656:	a0 81       	ld	r26, Z
     658:	a1 11       	cpse	r26, r1
     65a:	0b c0       	rjmp	.+22     	; 0x672 <atcacert_set_cert_element+0x56>
     65c:	a4 81       	ldd	r26, Z+4	; 0x04
     65e:	a7 30       	cpi	r26, 0x07	; 7
     660:	41 f4       	brne	.+16     	; 0x672 <atcacert_set_cert_element+0x56>
     662:	db 01       	movw	r26, r22
     664:	cd 91       	ld	r28, X+
     666:	dc 91       	ld	r29, X
     668:	a5 a9       	ldd	r26, Z+53	; 0x35
     66a:	b6 a9       	ldd	r27, Z+54	; 0x36
     66c:	ca 17       	cp	r28, r26
     66e:	db 07       	cpc	r29, r27
     670:	19 f0       	breq	.+6      	; 0x678 <atcacert_set_cert_element+0x5c>
     672:	8e 15       	cp	r24, r14
     674:	9f 05       	cpc	r25, r15
     676:	01 f5       	brne	.+64     	; 0x6b8 <atcacert_set_cert_element+0x9c>
     678:	69 01       	movw	r12, r18
     67a:	ea 01       	movw	r28, r20
     67c:	db 01       	movw	r26, r22
     67e:	cf 01       	movw	r24, r30
     680:	ad 90       	ld	r10, X+
     682:	bc 90       	ld	r11, X
     684:	a5 01       	movw	r20, r10
     686:	be 01       	movw	r22, r28
     688:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <get_effective_offset>
     68c:	97 01       	movw	r18, r14
     68e:	2a 0d       	add	r18, r10
     690:	3b 1d       	adc	r19, r11
     692:	28 0f       	add	r18, r24
     694:	39 1f       	adc	r19, r25
     696:	c2 16       	cp	r12, r18
     698:	d3 06       	cpc	r13, r19
     69a:	88 f0       	brcs	.+34     	; 0x6be <atcacert_set_cert_element+0xa2>
     69c:	8a 0d       	add	r24, r10
     69e:	9b 1d       	adc	r25, r11
     6a0:	a7 01       	movw	r20, r14
     6a2:	b8 01       	movw	r22, r16
     6a4:	8c 0f       	add	r24, r28
     6a6:	9d 1f       	adc	r25, r29
     6a8:	0e 94 72 2e 	call	0x5ce4	; 0x5ce4 <memcpy>
     6ac:	80 e0       	ldi	r24, 0x00	; 0
     6ae:	90 e0       	ldi	r25, 0x00	; 0
     6b0:	08 c0       	rjmp	.+16     	; 0x6c2 <atcacert_set_cert_element+0xa6>
     6b2:	82 e0       	ldi	r24, 0x02	; 2
     6b4:	90 e0       	ldi	r25, 0x00	; 0
     6b6:	05 c0       	rjmp	.+10     	; 0x6c2 <atcacert_set_cert_element+0xa6>
     6b8:	87 e0       	ldi	r24, 0x07	; 7
     6ba:	90 e0       	ldi	r25, 0x00	; 0
     6bc:	02 c0       	rjmp	.+4      	; 0x6c2 <atcacert_set_cert_element+0xa6>
     6be:	89 e0       	ldi	r24, 0x09	; 9
     6c0:	90 e0       	ldi	r25, 0x00	; 0
     6c2:	df 91       	pop	r29
     6c4:	cf 91       	pop	r28
     6c6:	1f 91       	pop	r17
     6c8:	0f 91       	pop	r16
     6ca:	ff 90       	pop	r15
     6cc:	ef 90       	pop	r14
     6ce:	df 90       	pop	r13
     6d0:	cf 90       	pop	r12
     6d2:	bf 90       	pop	r11
     6d4:	af 90       	pop	r10
     6d6:	08 95       	ret

000006d8 <atcacert_set_signature>:
     6d8:	6f 92       	push	r6
     6da:	7f 92       	push	r7
     6dc:	8f 92       	push	r8
     6de:	9f 92       	push	r9
     6e0:	af 92       	push	r10
     6e2:	bf 92       	push	r11
     6e4:	cf 92       	push	r12
     6e6:	df 92       	push	r13
     6e8:	ef 92       	push	r14
     6ea:	ff 92       	push	r15
     6ec:	0f 93       	push	r16
     6ee:	1f 93       	push	r17
     6f0:	cf 93       	push	r28
     6f2:	df 93       	push	r29
     6f4:	cd b7       	in	r28, 0x3d	; 61
     6f6:	de b7       	in	r29, 0x3e	; 62
     6f8:	28 97       	sbiw	r28, 0x08	; 8
     6fa:	cd bf       	out	0x3d, r28	; 61
     6fc:	de bf       	out	0x3e, r29	; 62
     6fe:	00 97       	sbiw	r24, 0x00	; 0
     700:	09 f4       	brne	.+2      	; 0x704 <atcacert_set_signature+0x2c>
     702:	86 c0       	rjmp	.+268    	; 0x810 <atcacert_set_signature+0x138>
     704:	61 15       	cp	r22, r1
     706:	71 05       	cpc	r23, r1
     708:	09 f4       	brne	.+2      	; 0x70c <atcacert_set_signature+0x34>
     70a:	82 c0       	rjmp	.+260    	; 0x810 <atcacert_set_signature+0x138>
     70c:	41 15       	cp	r20, r1
     70e:	51 05       	cpc	r21, r1
     710:	09 f4       	brne	.+2      	; 0x714 <atcacert_set_signature+0x3c>
     712:	7e c0       	rjmp	.+252    	; 0x810 <atcacert_set_signature+0x138>
     714:	01 15       	cp	r16, r1
     716:	11 05       	cpc	r17, r1
     718:	09 f4       	brne	.+2      	; 0x71c <atcacert_set_signature+0x44>
     71a:	7a c0       	rjmp	.+244    	; 0x810 <atcacert_set_signature+0x138>
     71c:	39 01       	movw	r6, r18
     71e:	7a 01       	movw	r14, r20
     720:	4b 01       	movw	r8, r22
     722:	5c 01       	movw	r10, r24
     724:	fc 01       	movw	r30, r24
     726:	c5 a0       	ldd	r12, Z+37	; 0x25
     728:	d6 a0       	ldd	r13, Z+38	; 0x26
     72a:	a6 01       	movw	r20, r12
     72c:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <get_effective_offset>
     730:	8c 0d       	add	r24, r12
     732:	9d 1d       	adc	r25, r13
     734:	f5 01       	movw	r30, r10
     736:	40 81       	ld	r20, Z
     738:	f7 01       	movw	r30, r14
     73a:	20 81       	ld	r18, Z
     73c:	31 81       	ldd	r19, Z+1	; 0x01
     73e:	44 23       	and	r20, r20
     740:	59 f0       	breq	.+22     	; 0x758 <atcacert_set_signature+0x80>
     742:	b5 01       	movw	r22, r10
     744:	6b 5d       	subi	r22, 0xDB	; 219
     746:	7f 4f       	sbci	r23, 0xFF	; 255
     748:	80 e4       	ldi	r24, 0x40	; 64
     74a:	e8 2e       	mov	r14, r24
     74c:	f1 2c       	mov	r15, r1
     74e:	a4 01       	movw	r20, r8
     750:	c5 01       	movw	r24, r10
     752:	0e 94 0e 03 	call	0x61c	; 0x61c <atcacert_set_cert_element>
     756:	5e c0       	rjmp	.+188    	; 0x814 <atcacert_set_signature+0x13c>
     758:	82 17       	cp	r24, r18
     75a:	93 07       	cpc	r25, r19
     75c:	08 f0       	brcs	.+2      	; 0x760 <atcacert_set_signature+0x88>
     75e:	54 c0       	rjmp	.+168    	; 0x808 <atcacert_set_signature+0x130>
     760:	59 01       	movw	r10, r18
     762:	a8 1a       	sub	r10, r24
     764:	b9 0a       	sbc	r11, r25
     766:	68 1a       	sub	r6, r24
     768:	79 0a       	sbc	r7, r25
     76a:	6f 82       	std	Y+7, r6	; 0x07
     76c:	78 86       	std	Y+8, r7	; 0x08
     76e:	b4 01       	movw	r22, r8
     770:	68 0f       	add	r22, r24
     772:	79 1f       	adc	r23, r25
     774:	ae 01       	movw	r20, r28
     776:	49 5f       	subi	r20, 0xF9	; 249
     778:	5f 4f       	sbci	r21, 0xFF	; 255
     77a:	c8 01       	movw	r24, r16
     77c:	0e 94 1c 07 	call	0xe38	; 0xe38 <atcacert_der_enc_ecdsa_sig_value>
     780:	00 97       	sbiw	r24, 0x00	; 0
     782:	89 f0       	breq	.+34     	; 0x7a6 <atcacert_set_signature+0xce>
     784:	83 30       	cpi	r24, 0x03	; 3
     786:	91 05       	cpc	r25, r1
     788:	09 f0       	breq	.+2      	; 0x78c <atcacert_set_signature+0xb4>
     78a:	44 c0       	rjmp	.+136    	; 0x814 <atcacert_set_signature+0x13c>
     78c:	8f 81       	ldd	r24, Y+7	; 0x07
     78e:	98 85       	ldd	r25, Y+8	; 0x08
     790:	8a 19       	sub	r24, r10
     792:	9b 09       	sbc	r25, r11
     794:	f7 01       	movw	r30, r14
     796:	20 81       	ld	r18, Z
     798:	31 81       	ldd	r19, Z+1	; 0x01
     79a:	82 0f       	add	r24, r18
     79c:	93 1f       	adc	r25, r19
     79e:	80 83       	st	Z, r24
     7a0:	91 83       	std	Z+1, r25	; 0x01
     7a2:	83 e0       	ldi	r24, 0x03	; 3
     7a4:	36 c0       	rjmp	.+108    	; 0x812 <atcacert_set_signature+0x13a>
     7a6:	4f 81       	ldd	r20, Y+7	; 0x07
     7a8:	58 85       	ldd	r21, Y+8	; 0x08
     7aa:	4a 19       	sub	r20, r10
     7ac:	5b 09       	sbc	r21, r11
     7ae:	f7 01       	movw	r30, r14
     7b0:	80 81       	ld	r24, Z
     7b2:	91 81       	ldd	r25, Z+1	; 0x01
     7b4:	84 0f       	add	r24, r20
     7b6:	95 1f       	adc	r25, r21
     7b8:	80 83       	st	Z, r24
     7ba:	91 83       	std	Z+1, r25	; 0x01
     7bc:	01 97       	sbiw	r24, 0x01	; 1
     7be:	8d 83       	std	Y+5, r24	; 0x05
     7c0:	9e 83       	std	Y+6, r25	; 0x06
     7c2:	9e 01       	movw	r18, r28
     7c4:	2f 5f       	subi	r18, 0xFF	; 255
     7c6:	3f 4f       	sbci	r19, 0xFF	; 255
     7c8:	be 01       	movw	r22, r28
     7ca:	6b 5f       	subi	r22, 0xFB	; 251
     7cc:	7f 4f       	sbci	r23, 0xFF	; 255
     7ce:	c4 01       	movw	r24, r8
     7d0:	01 96       	adiw	r24, 0x01	; 1
     7d2:	0e 94 e6 05 	call	0xbcc	; 0xbcc <atcacert_der_adjust_length>
     7d6:	00 97       	sbiw	r24, 0x00	; 0
     7d8:	e9 f4       	brne	.+58     	; 0x814 <atcacert_set_signature+0x13c>
     7da:	8d 81       	ldd	r24, Y+5	; 0x05
     7dc:	9e 81       	ldd	r25, Y+6	; 0x06
     7de:	01 96       	adiw	r24, 0x01	; 1
     7e0:	49 81       	ldd	r20, Y+1	; 0x01
     7e2:	5a 81       	ldd	r21, Y+2	; 0x02
     7e4:	6b 81       	ldd	r22, Y+3	; 0x03
     7e6:	7c 81       	ldd	r23, Y+4	; 0x04
     7e8:	48 0f       	add	r20, r24
     7ea:	59 1f       	adc	r21, r25
     7ec:	61 1d       	adc	r22, r1
     7ee:	71 1d       	adc	r23, r1
     7f0:	f7 01       	movw	r30, r14
     7f2:	80 81       	ld	r24, Z
     7f4:	91 81       	ldd	r25, Z+1	; 0x01
     7f6:	a0 e0       	ldi	r26, 0x00	; 0
     7f8:	b0 e0       	ldi	r27, 0x00	; 0
     7fa:	48 17       	cp	r20, r24
     7fc:	59 07       	cpc	r21, r25
     7fe:	6a 07       	cpc	r22, r26
     800:	7b 07       	cpc	r23, r27
     802:	21 f4       	brne	.+8      	; 0x80c <atcacert_set_signature+0x134>
     804:	80 e0       	ldi	r24, 0x00	; 0
     806:	05 c0       	rjmp	.+10     	; 0x812 <atcacert_set_signature+0x13a>
     808:	89 e0       	ldi	r24, 0x09	; 9
     80a:	03 c0       	rjmp	.+6      	; 0x812 <atcacert_set_signature+0x13a>
     80c:	8a e0       	ldi	r24, 0x0A	; 10
     80e:	01 c0       	rjmp	.+2      	; 0x812 <atcacert_set_signature+0x13a>
     810:	82 e0       	ldi	r24, 0x02	; 2
     812:	90 e0       	ldi	r25, 0x00	; 0
     814:	28 96       	adiw	r28, 0x08	; 8
     816:	cd bf       	out	0x3d, r28	; 61
     818:	de bf       	out	0x3e, r29	; 62
     81a:	df 91       	pop	r29
     81c:	cf 91       	pop	r28
     81e:	1f 91       	pop	r17
     820:	0f 91       	pop	r16
     822:	ff 90       	pop	r15
     824:	ef 90       	pop	r14
     826:	df 90       	pop	r13
     828:	cf 90       	pop	r12
     82a:	bf 90       	pop	r11
     82c:	af 90       	pop	r10
     82e:	9f 90       	pop	r9
     830:	8f 90       	pop	r8
     832:	7f 90       	pop	r7
     834:	6f 90       	pop	r6
     836:	08 95       	ret

00000838 <atcacert_get_cert_element>:
     838:	af 92       	push	r10
     83a:	bf 92       	push	r11
     83c:	cf 92       	push	r12
     83e:	df 92       	push	r13
     840:	ef 92       	push	r14
     842:	ff 92       	push	r15
     844:	0f 93       	push	r16
     846:	1f 93       	push	r17
     848:	cf 93       	push	r28
     84a:	df 93       	push	r29
     84c:	fb 01       	movw	r30, r22
     84e:	00 97       	sbiw	r24, 0x00	; 0
     850:	61 f1       	breq	.+88     	; 0x8aa <atcacert_get_cert_element+0x72>
     852:	30 97       	sbiw	r30, 0x00	; 0
     854:	51 f1       	breq	.+84     	; 0x8aa <atcacert_get_cert_element+0x72>
     856:	41 15       	cp	r20, r1
     858:	51 05       	cpc	r21, r1
     85a:	39 f1       	breq	.+78     	; 0x8aa <atcacert_get_cert_element+0x72>
     85c:	01 15       	cp	r16, r1
     85e:	11 05       	cpc	r17, r1
     860:	21 f1       	breq	.+72     	; 0x8aa <atcacert_get_cert_element+0x72>
     862:	62 81       	ldd	r22, Z+2	; 0x02
     864:	73 81       	ldd	r23, Z+3	; 0x03
     866:	61 15       	cp	r22, r1
     868:	71 05       	cpc	r23, r1
     86a:	11 f1       	breq	.+68     	; 0x8b0 <atcacert_get_cert_element+0x78>
     86c:	e6 16       	cp	r14, r22
     86e:	f7 06       	cpc	r15, r23
     870:	11 f5       	brne	.+68     	; 0x8b6 <atcacert_get_cert_element+0x7e>
     872:	69 01       	movw	r12, r18
     874:	ea 01       	movw	r28, r20
     876:	a0 80       	ld	r10, Z
     878:	b1 80       	ldd	r11, Z+1	; 0x01
     87a:	a5 01       	movw	r20, r10
     87c:	be 01       	movw	r22, r28
     87e:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <get_effective_offset>
     882:	97 01       	movw	r18, r14
     884:	2a 0d       	add	r18, r10
     886:	3b 1d       	adc	r19, r11
     888:	28 0f       	add	r18, r24
     88a:	39 1f       	adc	r19, r25
     88c:	c2 16       	cp	r12, r18
     88e:	d3 06       	cpc	r13, r19
     890:	a8 f0       	brcs	.+42     	; 0x8bc <atcacert_get_cert_element+0x84>
     892:	8a 0d       	add	r24, r10
     894:	9b 1d       	adc	r25, r11
     896:	be 01       	movw	r22, r28
     898:	68 0f       	add	r22, r24
     89a:	79 1f       	adc	r23, r25
     89c:	a7 01       	movw	r20, r14
     89e:	c8 01       	movw	r24, r16
     8a0:	0e 94 72 2e 	call	0x5ce4	; 0x5ce4 <memcpy>
     8a4:	80 e0       	ldi	r24, 0x00	; 0
     8a6:	90 e0       	ldi	r25, 0x00	; 0
     8a8:	0b c0       	rjmp	.+22     	; 0x8c0 <atcacert_get_cert_element+0x88>
     8aa:	82 e0       	ldi	r24, 0x02	; 2
     8ac:	90 e0       	ldi	r25, 0x00	; 0
     8ae:	08 c0       	rjmp	.+16     	; 0x8c0 <atcacert_get_cert_element+0x88>
     8b0:	88 e0       	ldi	r24, 0x08	; 8
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	05 c0       	rjmp	.+10     	; 0x8c0 <atcacert_get_cert_element+0x88>
     8b6:	87 e0       	ldi	r24, 0x07	; 7
     8b8:	90 e0       	ldi	r25, 0x00	; 0
     8ba:	02 c0       	rjmp	.+4      	; 0x8c0 <atcacert_get_cert_element+0x88>
     8bc:	89 e0       	ldi	r24, 0x09	; 9
     8be:	90 e0       	ldi	r25, 0x00	; 0
     8c0:	df 91       	pop	r29
     8c2:	cf 91       	pop	r28
     8c4:	1f 91       	pop	r17
     8c6:	0f 91       	pop	r16
     8c8:	ff 90       	pop	r15
     8ca:	ef 90       	pop	r14
     8cc:	df 90       	pop	r13
     8ce:	cf 90       	pop	r12
     8d0:	bf 90       	pop	r11
     8d2:	af 90       	pop	r10
     8d4:	08 95       	ret

000008d6 <atcacert_get_subj_public_key>:
     8d6:	ef 92       	push	r14
     8d8:	ff 92       	push	r15
     8da:	0f 93       	push	r16
     8dc:	1f 93       	push	r17
     8de:	00 97       	sbiw	r24, 0x00	; 0
     8e0:	91 f0       	breq	.+36     	; 0x906 <atcacert_get_subj_public_key+0x30>
     8e2:	61 15       	cp	r22, r1
     8e4:	71 05       	cpc	r23, r1
     8e6:	79 f0       	breq	.+30     	; 0x906 <atcacert_get_subj_public_key+0x30>
     8e8:	21 15       	cp	r18, r1
     8ea:	31 05       	cpc	r19, r1
     8ec:	61 f0       	breq	.+24     	; 0x906 <atcacert_get_subj_public_key+0x30>
     8ee:	89 01       	movw	r16, r18
     8f0:	9a 01       	movw	r18, r20
     8f2:	ab 01       	movw	r20, r22
     8f4:	bc 01       	movw	r22, r24
     8f6:	6f 5d       	subi	r22, 0xDF	; 223
     8f8:	7f 4f       	sbci	r23, 0xFF	; 255
     8fa:	e0 e4       	ldi	r30, 0x40	; 64
     8fc:	ee 2e       	mov	r14, r30
     8fe:	f1 2c       	mov	r15, r1
     900:	0e 94 1c 04 	call	0x838	; 0x838 <atcacert_get_cert_element>
     904:	02 c0       	rjmp	.+4      	; 0x90a <atcacert_get_subj_public_key+0x34>
     906:	82 e0       	ldi	r24, 0x02	; 2
     908:	90 e0       	ldi	r25, 0x00	; 0
     90a:	1f 91       	pop	r17
     90c:	0f 91       	pop	r16
     90e:	ff 90       	pop	r15
     910:	ef 90       	pop	r14
     912:	08 95       	ret

00000914 <atcacert_get_subj_key_id>:
     914:	ef 92       	push	r14
     916:	ff 92       	push	r15
     918:	0f 93       	push	r16
     91a:	1f 93       	push	r17
     91c:	00 97       	sbiw	r24, 0x00	; 0
     91e:	91 f0       	breq	.+36     	; 0x944 <atcacert_get_subj_key_id+0x30>
     920:	61 15       	cp	r22, r1
     922:	71 05       	cpc	r23, r1
     924:	79 f0       	breq	.+30     	; 0x944 <atcacert_get_subj_key_id+0x30>
     926:	21 15       	cp	r18, r1
     928:	31 05       	cpc	r19, r1
     92a:	61 f0       	breq	.+24     	; 0x944 <atcacert_get_subj_key_id+0x30>
     92c:	89 01       	movw	r16, r18
     92e:	9a 01       	movw	r18, r20
     930:	ab 01       	movw	r20, r22
     932:	bc 01       	movw	r22, r24
     934:	63 5c       	subi	r22, 0xC3	; 195
     936:	7f 4f       	sbci	r23, 0xFF	; 255
     938:	e4 e1       	ldi	r30, 0x14	; 20
     93a:	ee 2e       	mov	r14, r30
     93c:	f1 2c       	mov	r15, r1
     93e:	0e 94 1c 04 	call	0x838	; 0x838 <atcacert_get_cert_element>
     942:	02 c0       	rjmp	.+4      	; 0x948 <atcacert_get_subj_key_id+0x34>
     944:	82 e0       	ldi	r24, 0x02	; 2
     946:	90 e0       	ldi	r25, 0x00	; 0
     948:	1f 91       	pop	r17
     94a:	0f 91       	pop	r16
     94c:	ff 90       	pop	r15
     94e:	ef 90       	pop	r14
     950:	08 95       	ret

00000952 <atcacert_get_cert_sn>:
int atcacert_get_cert_sn(const atcacert_def_t* cert_def,
                         const uint8_t*        cert,
                         size_t                cert_size,
                         uint8_t*              cert_sn,
                         size_t*               cert_sn_size)
{
     952:	ef 92       	push	r14
     954:	ff 92       	push	r15
     956:	0f 93       	push	r16
     958:	1f 93       	push	r17
     95a:	f8 01       	movw	r30, r16
    if (cert_def == NULL || cert == NULL || cert_sn == NULL || cert_sn_size == NULL)
     95c:	00 97       	sbiw	r24, 0x00	; 0
     95e:	11 f1       	breq	.+68     	; 0x9a4 <atcacert_get_cert_sn+0x52>
     960:	61 15       	cp	r22, r1
     962:	71 05       	cpc	r23, r1
     964:	f9 f0       	breq	.+62     	; 0x9a4 <atcacert_get_cert_sn+0x52>
     966:	21 15       	cp	r18, r1
     968:	31 05       	cpc	r19, r1
     96a:	e1 f0       	breq	.+56     	; 0x9a4 <atcacert_get_cert_sn+0x52>
     96c:	30 97       	sbiw	r30, 0x00	; 0
     96e:	d1 f0       	breq	.+52     	; 0x9a4 <atcacert_get_cert_sn+0x52>
    {
        return ATCACERT_E_BAD_PARAMS;
    }

    if (*cert_sn_size < cert_def->std_cert_elements[STDCERT_CERT_SN].count)
     970:	dc 01       	movw	r26, r24
     972:	d7 96       	adiw	r26, 0x37	; 55
     974:	ed 90       	ld	r14, X+
     976:	fc 90       	ld	r15, X
     978:	d8 97       	sbiw	r26, 0x38	; 56
     97a:	a0 81       	ld	r26, Z
     97c:	b1 81       	ldd	r27, Z+1	; 0x01
     97e:	ae 15       	cp	r26, r14
     980:	bf 05       	cpc	r27, r15
     982:	28 f4       	brcc	.+10     	; 0x98e <atcacert_get_cert_sn+0x3c>
    {
        *cert_sn_size = cert_def->std_cert_elements[STDCERT_CERT_SN].count;
     984:	e0 82       	st	Z, r14
     986:	f1 82       	std	Z+1, r15	; 0x01
        return ATCACERT_E_BUFFER_TOO_SMALL;
     988:	83 e0       	ldi	r24, 0x03	; 3
     98a:	90 e0       	ldi	r25, 0x00	; 0
     98c:	0d c0       	rjmp	.+26     	; 0x9a8 <atcacert_get_cert_sn+0x56>
     98e:	89 01       	movw	r16, r18
     990:	9a 01       	movw	r18, r20
     992:	ab 01       	movw	r20, r22
    }

    *cert_sn_size = cert_def->std_cert_elements[STDCERT_CERT_SN].count;
     994:	e0 82       	st	Z, r14
     996:	f1 82       	std	Z+1, r15	; 0x01

    return atcacert_get_cert_element(cert_def, &cert_def->std_cert_elements[STDCERT_CERT_SN], cert, cert_size, cert_sn, *cert_sn_size);
     998:	bc 01       	movw	r22, r24
     99a:	6b 5c       	subi	r22, 0xCB	; 203
     99c:	7f 4f       	sbci	r23, 0xFF	; 255
     99e:	0e 94 1c 04 	call	0x838	; 0x838 <atcacert_get_cert_element>
     9a2:	02 c0       	rjmp	.+4      	; 0x9a8 <atcacert_get_cert_sn+0x56>
                         uint8_t*              cert_sn,
                         size_t*               cert_sn_size)
{
    if (cert_def == NULL || cert == NULL || cert_sn == NULL || cert_sn_size == NULL)
    {
        return ATCACERT_E_BAD_PARAMS;
     9a4:	82 e0       	ldi	r24, 0x02	; 2
     9a6:	90 e0       	ldi	r25, 0x00	; 0
    }

    *cert_sn_size = cert_def->std_cert_elements[STDCERT_CERT_SN].count;

    return atcacert_get_cert_element(cert_def, &cert_def->std_cert_elements[STDCERT_CERT_SN], cert, cert_size, cert_sn, *cert_sn_size);
}
     9a8:	1f 91       	pop	r17
     9aa:	0f 91       	pop	r16
     9ac:	ff 90       	pop	r15
     9ae:	ef 90       	pop	r14
     9b0:	08 95       	ret

000009b2 <atcacert_der_enc_length>:

    }
    memcpy(int_data, &der_int[1 + der_length_size], int_data_size_calc);

    return ATCACERT_E_SUCCESS;
}
     9b2:	8f 92       	push	r8
     9b4:	9f 92       	push	r9
     9b6:	af 92       	push	r10
     9b8:	bf 92       	push	r11
     9ba:	cf 93       	push	r28
     9bc:	df 93       	push	r29
     9be:	d9 01       	movw	r26, r18
     9c0:	10 97       	sbiw	r26, 0x00	; 0
     9c2:	09 f4       	brne	.+2      	; 0x9c6 <atcacert_der_enc_length+0x14>
     9c4:	5d c0       	rjmp	.+186    	; 0xa80 <atcacert_der_enc_length+0xce>
     9c6:	60 38       	cpi	r22, 0x80	; 128
     9c8:	71 05       	cpc	r23, r1
     9ca:	81 05       	cpc	r24, r1
     9cc:	91 05       	cpc	r25, r1
     9ce:	c8 f0       	brcs	.+50     	; 0xa02 <atcacert_der_enc_length+0x50>
     9d0:	28 e1       	ldi	r18, 0x18	; 24
     9d2:	30 e0       	ldi	r19, 0x00	; 0
     9d4:	e3 e0       	ldi	r30, 0x03	; 3
     9d6:	f0 e0       	ldi	r31, 0x00	; 0
     9d8:	4b 01       	movw	r8, r22
     9da:	5c 01       	movw	r10, r24
     9dc:	02 2e       	mov	r0, r18
     9de:	04 c0       	rjmp	.+8      	; 0x9e8 <atcacert_der_enc_length+0x36>
     9e0:	b6 94       	lsr	r11
     9e2:	a7 94       	ror	r10
     9e4:	97 94       	ror	r9
     9e6:	87 94       	ror	r8
     9e8:	0a 94       	dec	r0
     9ea:	d2 f7       	brpl	.-12     	; 0x9e0 <atcacert_der_enc_length+0x2e>
     9ec:	28 50       	subi	r18, 0x08	; 8
     9ee:	31 09       	sbc	r19, r1
     9f0:	89 28       	or	r8, r9
     9f2:	8a 28       	or	r8, r10
     9f4:	8b 28       	or	r8, r11
     9f6:	11 f4       	brne	.+4      	; 0x9fc <atcacert_der_enc_length+0x4a>
     9f8:	31 97       	sbiw	r30, 0x01	; 1
     9fa:	ee cf       	rjmp	.-36     	; 0x9d8 <atcacert_der_enc_length+0x26>
     9fc:	ef 01       	movw	r28, r30
     9fe:	22 96       	adiw	r28, 0x02	; 2
     a00:	04 c0       	rjmp	.+8      	; 0xa0a <atcacert_der_enc_length+0x58>
     a02:	e0 e0       	ldi	r30, 0x00	; 0
     a04:	f0 e0       	ldi	r31, 0x00	; 0
     a06:	c1 e0       	ldi	r28, 0x01	; 1
     a08:	d0 e0       	ldi	r29, 0x00	; 0
     a0a:	41 15       	cp	r20, r1
     a0c:	51 05       	cpc	r21, r1
     a0e:	59 f0       	breq	.+22     	; 0xa26 <atcacert_der_enc_length+0x74>
     a10:	2d 91       	ld	r18, X+
     a12:	3c 91       	ld	r19, X
     a14:	11 97       	sbiw	r26, 0x01	; 1
     a16:	2c 17       	cp	r18, r28
     a18:	3d 07       	cpc	r19, r29
     a1a:	28 f4       	brcc	.+10     	; 0xa26 <atcacert_der_enc_length+0x74>
     a1c:	cd 93       	st	X+, r28
     a1e:	dc 93       	st	X, r29
     a20:	83 e0       	ldi	r24, 0x03	; 3
     a22:	90 e0       	ldi	r25, 0x00	; 0
     a24:	2f c0       	rjmp	.+94     	; 0xa84 <atcacert_der_enc_length+0xd2>
     a26:	cd 93       	st	X+, r28
     a28:	dc 93       	st	X, r29
     a2a:	41 15       	cp	r20, r1
     a2c:	51 05       	cpc	r21, r1
     a2e:	29 f1       	breq	.+74     	; 0xa7a <atcacert_der_enc_length+0xc8>
     a30:	9f 01       	movw	r18, r30
     a32:	a3 e0       	ldi	r26, 0x03	; 3
     a34:	22 0f       	add	r18, r18
     a36:	33 1f       	adc	r19, r19
     a38:	aa 95       	dec	r26
     a3a:	e1 f7       	brne	.-8      	; 0xa34 <atcacert_der_enc_length+0x82>
     a3c:	de 01       	movw	r26, r28
     a3e:	11 97       	sbiw	r26, 0x01	; 1
     a40:	ae 1b       	sub	r26, r30
     a42:	bf 0b       	sbc	r27, r31
     a44:	a4 0f       	add	r26, r20
     a46:	b5 1f       	adc	r27, r21
     a48:	f7 fd       	sbrc	r31, 7
     a4a:	0f c0       	rjmp	.+30     	; 0xa6a <atcacert_der_enc_length+0xb8>
     a4c:	4b 01       	movw	r8, r22
     a4e:	5c 01       	movw	r10, r24
     a50:	02 2e       	mov	r0, r18
     a52:	04 c0       	rjmp	.+8      	; 0xa5c <atcacert_der_enc_length+0xaa>
     a54:	b6 94       	lsr	r11
     a56:	a7 94       	ror	r10
     a58:	97 94       	ror	r9
     a5a:	87 94       	ror	r8
     a5c:	0a 94       	dec	r0
     a5e:	d2 f7       	brpl	.-12     	; 0xa54 <atcacert_der_enc_length+0xa2>
     a60:	8d 92       	st	X+, r8
     a62:	31 97       	sbiw	r30, 0x01	; 1
     a64:	28 50       	subi	r18, 0x08	; 8
     a66:	31 09       	sbc	r19, r1
     a68:	ef cf       	rjmp	.-34     	; 0xa48 <atcacert_der_enc_length+0x96>
     a6a:	c2 30       	cpi	r28, 0x02	; 2
     a6c:	d1 05       	cpc	r29, r1
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <atcacert_der_enc_length+0xc8>
     a70:	8c 2f       	mov	r24, r28
     a72:	81 50       	subi	r24, 0x01	; 1
     a74:	80 68       	ori	r24, 0x80	; 128
     a76:	fa 01       	movw	r30, r20
     a78:	80 83       	st	Z, r24
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	02 c0       	rjmp	.+4      	; 0xa84 <atcacert_der_enc_length+0xd2>
     a80:	82 e0       	ldi	r24, 0x02	; 2
     a82:	90 e0       	ldi	r25, 0x00	; 0
     a84:	df 91       	pop	r29
     a86:	cf 91       	pop	r28
     a88:	bf 90       	pop	r11
     a8a:	af 90       	pop	r10
     a8c:	9f 90       	pop	r9
     a8e:	8f 90       	pop	r8
     a90:	08 95       	ret

00000a92 <atcacert_der_dec_length>:
     a92:	2f 92       	push	r2
     a94:	3f 92       	push	r3
     a96:	4f 92       	push	r4
     a98:	5f 92       	push	r5
     a9a:	6f 92       	push	r6
     a9c:	7f 92       	push	r7
     a9e:	8f 92       	push	r8
     aa0:	9f 92       	push	r9
     aa2:	af 92       	push	r10
     aa4:	bf 92       	push	r11
     aa6:	cf 92       	push	r12
     aa8:	df 92       	push	r13
     aaa:	ef 92       	push	r14
     aac:	ff 92       	push	r15
     aae:	0f 93       	push	r16
     ab0:	1f 93       	push	r17
     ab2:	cf 93       	push	r28
     ab4:	df 93       	push	r29
     ab6:	dc 01       	movw	r26, r24
     ab8:	1b 01       	movw	r2, r22
     aba:	fa 01       	movw	r30, r20
     abc:	89 2b       	or	r24, r25
     abe:	09 f4       	brne	.+2      	; 0xac2 <atcacert_der_dec_length+0x30>
     ac0:	6d c0       	rjmp	.+218    	; 0xb9c <atcacert_der_dec_length+0x10a>
     ac2:	61 15       	cp	r22, r1
     ac4:	71 05       	cpc	r23, r1
     ac6:	09 f4       	brne	.+2      	; 0xaca <atcacert_der_dec_length+0x38>
     ac8:	69 c0       	rjmp	.+210    	; 0xb9c <atcacert_der_dec_length+0x10a>
     aca:	eb 01       	movw	r28, r22
     acc:	28 81       	ld	r18, Y
     ace:	39 81       	ldd	r19, Y+1	; 0x01
     ad0:	21 15       	cp	r18, r1
     ad2:	31 05       	cpc	r19, r1
     ad4:	09 f4       	brne	.+2      	; 0xad8 <atcacert_der_dec_length+0x46>
     ad6:	65 c0       	rjmp	.+202    	; 0xba2 <atcacert_der_dec_length+0x110>
     ad8:	8c 91       	ld	r24, X
     ada:	87 ff       	sbrs	r24, 7
     adc:	4e c0       	rjmp	.+156    	; 0xb7a <atcacert_der_dec_length+0xe8>
     ade:	8f 77       	andi	r24, 0x7F	; 127
     ae0:	48 2f       	mov	r20, r24
     ae2:	50 e0       	ldi	r21, 0x00	; 0
     ae4:	8a 01       	movw	r16, r20
     ae6:	0f 5f       	subi	r16, 0xFF	; 255
     ae8:	1f 4f       	sbci	r17, 0xFF	; 255
     aea:	20 17       	cp	r18, r16
     aec:	31 07       	cpc	r19, r17
     aee:	08 f4       	brcc	.+2      	; 0xaf2 <atcacert_der_dec_length+0x60>
     af0:	58 c0       	rjmp	.+176    	; 0xba2 <atcacert_der_dec_length+0x110>
     af2:	81 50       	subi	r24, 0x01	; 1
     af4:	84 30       	cpi	r24, 0x04	; 4
     af6:	08 f0       	brcs	.+2      	; 0xafa <atcacert_der_dec_length+0x68>
     af8:	54 c0       	rjmp	.+168    	; 0xba2 <atcacert_der_dec_length+0x110>
     afa:	30 97       	sbiw	r30, 0x00	; 0
     afc:	21 f4       	brne	.+8      	; 0xb06 <atcacert_der_dec_length+0x74>
     afe:	f1 01       	movw	r30, r2
     b00:	00 83       	st	Z, r16
     b02:	11 83       	std	Z+1, r17	; 0x01
     b04:	48 c0       	rjmp	.+144    	; 0xb96 <atcacert_der_dec_length+0x104>
     b06:	10 82       	st	Z, r1
     b08:	11 82       	std	Z+1, r1	; 0x01
     b0a:	12 82       	std	Z+2, r1	; 0x02
     b0c:	13 82       	std	Z+3, r1	; 0x03
     b0e:	cd 01       	movw	r24, r26
     b10:	01 96       	adiw	r24, 0x01	; 1
     b12:	60 e0       	ldi	r22, 0x00	; 0
     b14:	70 e0       	ldi	r23, 0x00	; 0
     b16:	9a 01       	movw	r18, r20
     b18:	c3 e0       	ldi	r28, 0x03	; 3
     b1a:	22 0f       	add	r18, r18
     b1c:	33 1f       	adc	r19, r19
     b1e:	ca 95       	dec	r28
     b20:	e1 f7       	brne	.-8      	; 0xb1a <atcacert_der_dec_length+0x88>
     b22:	28 50       	subi	r18, 0x08	; 8
     b24:	31 09       	sbc	r19, r1
     b26:	ec 01       	movw	r28, r24
     b28:	c9 90       	ld	r12, Y+
     b2a:	ce 01       	movw	r24, r28
     b2c:	8c 2c       	mov	r8, r12
     b2e:	91 2c       	mov	r9, r1
     b30:	a1 2c       	mov	r10, r1
     b32:	b1 2c       	mov	r11, r1
     b34:	79 01       	movw	r14, r18
     b36:	e6 0e       	add	r14, r22
     b38:	f7 1e       	adc	r15, r23
     b3a:	24 01       	movw	r4, r8
     b3c:	35 01       	movw	r6, r10
     b3e:	04 c0       	rjmp	.+8      	; 0xb48 <atcacert_der_dec_length+0xb6>
     b40:	44 0c       	add	r4, r4
     b42:	55 1c       	adc	r5, r5
     b44:	66 1c       	adc	r6, r6
     b46:	77 1c       	adc	r7, r7
     b48:	ea 94       	dec	r14
     b4a:	d2 f7       	brpl	.-12     	; 0xb40 <atcacert_der_dec_length+0xae>
     b4c:	73 01       	movw	r14, r6
     b4e:	62 01       	movw	r12, r4
     b50:	80 80       	ld	r8, Z
     b52:	91 80       	ldd	r9, Z+1	; 0x01
     b54:	a2 80       	ldd	r10, Z+2	; 0x02
     b56:	b3 80       	ldd	r11, Z+3	; 0x03
     b58:	c8 0c       	add	r12, r8
     b5a:	d9 1c       	adc	r13, r9
     b5c:	ea 1c       	adc	r14, r10
     b5e:	fb 1c       	adc	r15, r11
     b60:	c0 82       	st	Z, r12
     b62:	d1 82       	std	Z+1, r13	; 0x01
     b64:	e2 82       	std	Z+2, r14	; 0x02
     b66:	f3 82       	std	Z+3, r15	; 0x03
     b68:	68 50       	subi	r22, 0x08	; 8
     b6a:	71 09       	sbc	r23, r1
     b6c:	7e 01       	movw	r14, r28
     b6e:	ea 1a       	sub	r14, r26
     b70:	fb 0a       	sbc	r15, r27
     b72:	4e 15       	cp	r20, r14
     b74:	5f 05       	cpc	r21, r15
     b76:	b8 f6       	brcc	.-82     	; 0xb26 <atcacert_der_dec_length+0x94>
     b78:	c2 cf       	rjmp	.-124    	; 0xafe <atcacert_der_dec_length+0x6c>
     b7a:	30 97       	sbiw	r30, 0x00	; 0
     b7c:	39 f0       	breq	.+14     	; 0xb8c <atcacert_der_dec_length+0xfa>
     b7e:	90 e0       	ldi	r25, 0x00	; 0
     b80:	a0 e0       	ldi	r26, 0x00	; 0
     b82:	b0 e0       	ldi	r27, 0x00	; 0
     b84:	80 83       	st	Z, r24
     b86:	91 83       	std	Z+1, r25	; 0x01
     b88:	a2 83       	std	Z+2, r26	; 0x02
     b8a:	b3 83       	std	Z+3, r27	; 0x03
     b8c:	81 e0       	ldi	r24, 0x01	; 1
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	e1 01       	movw	r28, r2
     b92:	88 83       	st	Y, r24
     b94:	99 83       	std	Y+1, r25	; 0x01
     b96:	80 e0       	ldi	r24, 0x00	; 0
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	05 c0       	rjmp	.+10     	; 0xba6 <atcacert_der_dec_length+0x114>
     b9c:	82 e0       	ldi	r24, 0x02	; 2
     b9e:	90 e0       	ldi	r25, 0x00	; 0
     ba0:	02 c0       	rjmp	.+4      	; 0xba6 <atcacert_der_dec_length+0x114>
     ba2:	84 e0       	ldi	r24, 0x04	; 4
     ba4:	90 e0       	ldi	r25, 0x00	; 0
     ba6:	df 91       	pop	r29
     ba8:	cf 91       	pop	r28
     baa:	1f 91       	pop	r17
     bac:	0f 91       	pop	r16
     bae:	ff 90       	pop	r15
     bb0:	ef 90       	pop	r14
     bb2:	df 90       	pop	r13
     bb4:	cf 90       	pop	r12
     bb6:	bf 90       	pop	r11
     bb8:	af 90       	pop	r10
     bba:	9f 90       	pop	r9
     bbc:	8f 90       	pop	r8
     bbe:	7f 90       	pop	r7
     bc0:	6f 90       	pop	r6
     bc2:	5f 90       	pop	r5
     bc4:	4f 90       	pop	r4
     bc6:	3f 90       	pop	r3
     bc8:	2f 90       	pop	r2
     bca:	08 95       	ret

00000bcc <atcacert_der_adjust_length>:
     bcc:	8f 92       	push	r8
     bce:	9f 92       	push	r9
     bd0:	af 92       	push	r10
     bd2:	bf 92       	push	r11
     bd4:	cf 92       	push	r12
     bd6:	df 92       	push	r13
     bd8:	ef 92       	push	r14
     bda:	ff 92       	push	r15
     bdc:	0f 93       	push	r16
     bde:	1f 93       	push	r17
     be0:	cf 93       	push	r28
     be2:	df 93       	push	r29
     be4:	cd b7       	in	r28, 0x3d	; 61
     be6:	de b7       	in	r29, 0x3e	; 62
     be8:	2b 97       	sbiw	r28, 0x0b	; 11
     bea:	cd bf       	out	0x3d, r28	; 61
     bec:	de bf       	out	0x3e, r29	; 62
     bee:	8c 01       	movw	r16, r24
     bf0:	6b 01       	movw	r12, r22
     bf2:	5a 01       	movw	r10, r20
     bf4:	79 01       	movw	r14, r18
     bf6:	1a 86       	std	Y+10, r1	; 0x0a
     bf8:	1b 86       	std	Y+11, r1	; 0x0b
     bfa:	1e 82       	std	Y+6, r1	; 0x06
     bfc:	1f 82       	std	Y+7, r1	; 0x07
     bfe:	18 86       	std	Y+8, r1	; 0x08
     c00:	19 86       	std	Y+9, r1	; 0x09
     c02:	ae 01       	movw	r20, r28
     c04:	4a 5f       	subi	r20, 0xFA	; 250
     c06:	5f 4f       	sbci	r21, 0xFF	; 255
     c08:	0e 94 49 05 	call	0xa92	; 0xa92 <atcacert_der_dec_length>
     c0c:	00 97       	sbiw	r24, 0x00	; 0
     c0e:	09 f0       	breq	.+2      	; 0xc12 <atcacert_der_adjust_length+0x46>
     c10:	47 c0       	rjmp	.+142    	; 0xca0 <atcacert_der_adjust_length+0xd4>
     c12:	8e 81       	ldd	r24, Y+6	; 0x06
     c14:	9f 81       	ldd	r25, Y+7	; 0x07
     c16:	a8 85       	ldd	r26, Y+8	; 0x08
     c18:	b9 85       	ldd	r27, Y+9	; 0x09
     c1a:	b7 fe       	sbrs	r11, 7
     c1c:	0d c0       	rjmp	.+26     	; 0xc38 <atcacert_der_adjust_length+0x6c>
     c1e:	44 27       	eor	r20, r20
     c20:	55 27       	eor	r21, r21
     c22:	4a 19       	sub	r20, r10
     c24:	5b 09       	sbc	r21, r11
     c26:	05 2e       	mov	r0, r21
     c28:	00 0c       	add	r0, r0
     c2a:	66 0b       	sbc	r22, r22
     c2c:	77 0b       	sbc	r23, r23
     c2e:	84 17       	cp	r24, r20
     c30:	95 07       	cpc	r25, r21
     c32:	a6 07       	cpc	r26, r22
     c34:	b7 07       	cpc	r27, r23
     c36:	90 f1       	brcs	.+100    	; 0xc9c <atcacert_der_adjust_length+0xd0>
     c38:	a5 01       	movw	r20, r10
     c3a:	bb 0c       	add	r11, r11
     c3c:	66 0b       	sbc	r22, r22
     c3e:	77 0b       	sbc	r23, r23
     c40:	4a 01       	movw	r8, r20
     c42:	5b 01       	movw	r10, r22
     c44:	88 0e       	add	r8, r24
     c46:	99 1e       	adc	r9, r25
     c48:	aa 1e       	adc	r10, r26
     c4a:	bb 1e       	adc	r11, r27
     c4c:	c5 01       	movw	r24, r10
     c4e:	b4 01       	movw	r22, r8
     c50:	e1 14       	cp	r14, r1
     c52:	f1 04       	cpc	r15, r1
     c54:	29 f0       	breq	.+10     	; 0xc60 <atcacert_der_adjust_length+0x94>
     c56:	f7 01       	movw	r30, r14
     c58:	80 82       	st	Z, r8
     c5a:	91 82       	std	Z+1, r9	; 0x01
     c5c:	a2 82       	std	Z+2, r10	; 0x02
     c5e:	b3 82       	std	Z+3, r11	; 0x03
     c60:	25 e0       	ldi	r18, 0x05	; 5
     c62:	30 e0       	ldi	r19, 0x00	; 0
     c64:	2a 87       	std	Y+10, r18	; 0x0a
     c66:	3b 87       	std	Y+11, r19	; 0x0b
     c68:	9e 01       	movw	r18, r28
     c6a:	26 5f       	subi	r18, 0xF6	; 246
     c6c:	3f 4f       	sbci	r19, 0xFF	; 255
     c6e:	ae 01       	movw	r20, r28
     c70:	4f 5f       	subi	r20, 0xFF	; 255
     c72:	5f 4f       	sbci	r21, 0xFF	; 255
     c74:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <atcacert_der_enc_length>
     c78:	00 97       	sbiw	r24, 0x00	; 0
     c7a:	91 f4       	brne	.+36     	; 0xca0 <atcacert_der_adjust_length+0xd4>
     c7c:	f6 01       	movw	r30, r12
     c7e:	40 81       	ld	r20, Z
     c80:	51 81       	ldd	r21, Z+1	; 0x01
     c82:	8a 85       	ldd	r24, Y+10	; 0x0a
     c84:	9b 85       	ldd	r25, Y+11	; 0x0b
     c86:	48 17       	cp	r20, r24
     c88:	59 07       	cpc	r21, r25
     c8a:	61 f4       	brne	.+24     	; 0xca4 <atcacert_der_adjust_length+0xd8>
     c8c:	be 01       	movw	r22, r28
     c8e:	6f 5f       	subi	r22, 0xFF	; 255
     c90:	7f 4f       	sbci	r23, 0xFF	; 255
     c92:	c8 01       	movw	r24, r16
     c94:	0e 94 72 2e 	call	0x5ce4	; 0x5ce4 <memcpy>
     c98:	20 e0       	ldi	r18, 0x00	; 0
     c9a:	05 c0       	rjmp	.+10     	; 0xca6 <atcacert_der_adjust_length+0xda>
     c9c:	21 e0       	ldi	r18, 0x01	; 1
     c9e:	03 c0       	rjmp	.+6      	; 0xca6 <atcacert_der_adjust_length+0xda>
     ca0:	28 2f       	mov	r18, r24
     ca2:	02 c0       	rjmp	.+4      	; 0xca8 <atcacert_der_adjust_length+0xdc>
     ca4:	2a e0       	ldi	r18, 0x0A	; 10
     ca6:	90 e0       	ldi	r25, 0x00	; 0
     ca8:	82 2f       	mov	r24, r18
     caa:	2b 96       	adiw	r28, 0x0b	; 11
     cac:	cd bf       	out	0x3d, r28	; 61
     cae:	de bf       	out	0x3e, r29	; 62
     cb0:	df 91       	pop	r29
     cb2:	cf 91       	pop	r28
     cb4:	1f 91       	pop	r17
     cb6:	0f 91       	pop	r16
     cb8:	ff 90       	pop	r15
     cba:	ef 90       	pop	r14
     cbc:	df 90       	pop	r13
     cbe:	cf 90       	pop	r12
     cc0:	bf 90       	pop	r11
     cc2:	af 90       	pop	r10
     cc4:	9f 90       	pop	r9
     cc6:	8f 90       	pop	r8
     cc8:	08 95       	ret

00000cca <atcacert_der_enc_integer>:
     cca:	4f 92       	push	r4
     ccc:	5f 92       	push	r5
     cce:	6f 92       	push	r6
     cd0:	7f 92       	push	r7
     cd2:	8f 92       	push	r8
     cd4:	9f 92       	push	r9
     cd6:	af 92       	push	r10
     cd8:	bf 92       	push	r11
     cda:	cf 92       	push	r12
     cdc:	df 92       	push	r13
     cde:	ef 92       	push	r14
     ce0:	ff 92       	push	r15
     ce2:	0f 93       	push	r16
     ce4:	1f 93       	push	r17
     ce6:	cf 93       	push	r28
     ce8:	df 93       	push	r29
     cea:	cd b7       	in	r28, 0x3d	; 61
     cec:	de b7       	in	r29, 0x3e	; 62
     cee:	27 97       	sbiw	r28, 0x07	; 7
     cf0:	cd bf       	out	0x3d, r28	; 61
     cf2:	de bf       	out	0x3e, r29	; 62
     cf4:	59 01       	movw	r10, r18
     cf6:	25 e0       	ldi	r18, 0x05	; 5
     cf8:	30 e0       	ldi	r19, 0x00	; 0
     cfa:	2e 83       	std	Y+6, r18	; 0x06
     cfc:	3f 83       	std	Y+7, r19	; 0x07
     cfe:	00 97       	sbiw	r24, 0x00	; 0
     d00:	09 f4       	brne	.+2      	; 0xd04 <atcacert_der_enc_integer+0x3a>
     d02:	82 c0       	rjmp	.+260    	; 0xe08 <atcacert_der_enc_integer+0x13e>
     d04:	01 15       	cp	r16, r1
     d06:	11 05       	cpc	r17, r1
     d08:	09 f4       	brne	.+2      	; 0xd0c <atcacert_der_enc_integer+0x42>
     d0a:	7e c0       	rjmp	.+252    	; 0xe08 <atcacert_der_enc_integer+0x13e>
     d0c:	61 15       	cp	r22, r1
     d0e:	71 05       	cpc	r23, r1
     d10:	09 f4       	brne	.+2      	; 0xd14 <atcacert_der_enc_integer+0x4a>
     d12:	7a c0       	rjmp	.+244    	; 0xe08 <atcacert_der_enc_integer+0x13e>
     d14:	44 23       	and	r20, r20
     d16:	21 f0       	breq	.+8      	; 0xd20 <atcacert_der_enc_integer+0x56>
     d18:	fc 01       	movw	r30, r24
     d1a:	20 81       	ld	r18, Z
     d1c:	27 fd       	sbrc	r18, 7
     d1e:	19 c0       	rjmp	.+50     	; 0xd52 <atcacert_der_enc_integer+0x88>
     d20:	fc 01       	movw	r30, r24
     d22:	ab 01       	movw	r20, r22
     d24:	41 50       	subi	r20, 0x01	; 1
     d26:	51 09       	sbc	r21, r1
     d28:	e1 2c       	mov	r14, r1
     d2a:	f1 2c       	mov	r15, r1
     d2c:	e4 16       	cp	r14, r20
     d2e:	f5 06       	cpc	r15, r21
     d30:	b1 f0       	breq	.+44     	; 0xd5e <atcacert_der_enc_integer+0x94>
     d32:	31 91       	ld	r19, Z+
     d34:	31 11       	cpse	r19, r1
     d36:	07 c0       	rjmp	.+14     	; 0xd46 <atcacert_der_enc_integer+0x7c>
     d38:	20 81       	ld	r18, Z
     d3a:	27 fd       	sbrc	r18, 7
     d3c:	10 c0       	rjmp	.+32     	; 0xd5e <atcacert_der_enc_integer+0x94>
     d3e:	2f ef       	ldi	r18, 0xFF	; 255
     d40:	e2 1a       	sub	r14, r18
     d42:	f2 0a       	sbc	r15, r18
     d44:	f3 cf       	rjmp	.-26     	; 0xd2c <atcacert_der_enc_integer+0x62>
     d46:	3f 3f       	cpi	r19, 0xFF	; 255
     d48:	51 f4       	brne	.+20     	; 0xd5e <atcacert_der_enc_integer+0x94>
     d4a:	20 81       	ld	r18, Z
     d4c:	27 fd       	sbrc	r18, 7
     d4e:	f7 cf       	rjmp	.-18     	; 0xd3e <atcacert_der_enc_integer+0x74>
     d50:	06 c0       	rjmp	.+12     	; 0xd5e <atcacert_der_enc_integer+0x94>
     d52:	cc 24       	eor	r12, r12
     d54:	c3 94       	inc	r12
     d56:	d1 2c       	mov	r13, r1
     d58:	e1 2c       	mov	r14, r1
     d5a:	f1 2c       	mov	r15, r1
     d5c:	02 c0       	rjmp	.+4      	; 0xd62 <atcacert_der_enc_integer+0x98>
     d5e:	c1 2c       	mov	r12, r1
     d60:	d1 2c       	mov	r13, r1
     d62:	38 01       	movw	r6, r16
     d64:	8b 01       	movw	r16, r22
     d66:	2c 01       	movw	r4, r24
     d68:	b6 01       	movw	r22, r12
     d6a:	60 0f       	add	r22, r16
     d6c:	71 1f       	adc	r23, r17
     d6e:	6e 19       	sub	r22, r14
     d70:	7f 09       	sbc	r23, r15
     d72:	80 e0       	ldi	r24, 0x00	; 0
     d74:	90 e0       	ldi	r25, 0x00	; 0
     d76:	9e 01       	movw	r18, r28
     d78:	2a 5f       	subi	r18, 0xFA	; 250
     d7a:	3f 4f       	sbci	r19, 0xFF	; 255
     d7c:	ae 01       	movw	r20, r28
     d7e:	4f 5f       	subi	r20, 0xFF	; 255
     d80:	5f 4f       	sbci	r21, 0xFF	; 255
     d82:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <atcacert_der_enc_length>
     d86:	00 97       	sbiw	r24, 0x00	; 0
     d88:	09 f0       	breq	.+2      	; 0xd8c <atcacert_der_enc_integer+0xc2>
     d8a:	42 c0       	rjmp	.+132    	; 0xe10 <atcacert_der_enc_integer+0x146>
     d8c:	4e 81       	ldd	r20, Y+6	; 0x06
     d8e:	5f 81       	ldd	r21, Y+7	; 0x07
     d90:	4a 01       	movw	r8, r20
     d92:	8f ef       	ldi	r24, 0xFF	; 255
     d94:	88 1a       	sub	r8, r24
     d96:	98 0a       	sbc	r9, r24
     d98:	c8 01       	movw	r24, r16
     d9a:	88 0d       	add	r24, r8
     d9c:	99 1d       	adc	r25, r9
     d9e:	8c 0d       	add	r24, r12
     da0:	9d 1d       	adc	r25, r13
     da2:	8e 19       	sub	r24, r14
     da4:	9f 09       	sbc	r25, r15
     da6:	a1 14       	cp	r10, r1
     da8:	b1 04       	cpc	r11, r1
     daa:	51 f0       	breq	.+20     	; 0xdc0 <atcacert_der_enc_integer+0xf6>
     dac:	f3 01       	movw	r30, r6
     dae:	20 81       	ld	r18, Z
     db0:	31 81       	ldd	r19, Z+1	; 0x01
     db2:	28 17       	cp	r18, r24
     db4:	39 07       	cpc	r19, r25
     db6:	20 f4       	brcc	.+8      	; 0xdc0 <atcacert_der_enc_integer+0xf6>
     db8:	80 83       	st	Z, r24
     dba:	91 83       	std	Z+1, r25	; 0x01
     dbc:	83 e0       	ldi	r24, 0x03	; 3
     dbe:	27 c0       	rjmp	.+78     	; 0xe0e <atcacert_der_enc_integer+0x144>
     dc0:	f3 01       	movw	r30, r6
     dc2:	80 83       	st	Z, r24
     dc4:	91 83       	std	Z+1, r25	; 0x01
     dc6:	a1 14       	cp	r10, r1
     dc8:	b1 04       	cpc	r11, r1
     dca:	01 f1       	breq	.+64     	; 0xe0c <atcacert_der_enc_integer+0x142>
     dcc:	22 e0       	ldi	r18, 0x02	; 2
     dce:	f5 01       	movw	r30, r10
     dd0:	21 93       	st	Z+, r18
     dd2:	cf 01       	movw	r24, r30
     dd4:	be 01       	movw	r22, r28
     dd6:	6f 5f       	subi	r22, 0xFF	; 255
     dd8:	7f 4f       	sbci	r23, 0xFF	; 255
     dda:	0e 94 72 2e 	call	0x5ce4	; 0x5ce4 <memcpy>
     dde:	c1 14       	cp	r12, r1
     de0:	d1 04       	cpc	r13, r1
     de2:	21 f0       	breq	.+8      	; 0xdec <atcacert_der_enc_integer+0x122>
     de4:	f5 01       	movw	r30, r10
     de6:	e8 0d       	add	r30, r8
     de8:	f9 1d       	adc	r31, r9
     dea:	10 82       	st	Z, r1
     dec:	c6 01       	movw	r24, r12
     dee:	88 0d       	add	r24, r8
     df0:	99 1d       	adc	r25, r9
     df2:	a8 01       	movw	r20, r16
     df4:	4e 19       	sub	r20, r14
     df6:	5f 09       	sbc	r21, r15
     df8:	b2 01       	movw	r22, r4
     dfa:	6e 0d       	add	r22, r14
     dfc:	7f 1d       	adc	r23, r15
     dfe:	8a 0d       	add	r24, r10
     e00:	9b 1d       	adc	r25, r11
     e02:	0e 94 72 2e 	call	0x5ce4	; 0x5ce4 <memcpy>
     e06:	02 c0       	rjmp	.+4      	; 0xe0c <atcacert_der_enc_integer+0x142>
     e08:	82 e0       	ldi	r24, 0x02	; 2
     e0a:	01 c0       	rjmp	.+2      	; 0xe0e <atcacert_der_enc_integer+0x144>
     e0c:	80 e0       	ldi	r24, 0x00	; 0
     e0e:	90 e0       	ldi	r25, 0x00	; 0
     e10:	27 96       	adiw	r28, 0x07	; 7
     e12:	cd bf       	out	0x3d, r28	; 61
     e14:	de bf       	out	0x3e, r29	; 62
     e16:	df 91       	pop	r29
     e18:	cf 91       	pop	r28
     e1a:	1f 91       	pop	r17
     e1c:	0f 91       	pop	r16
     e1e:	ff 90       	pop	r15
     e20:	ef 90       	pop	r14
     e22:	df 90       	pop	r13
     e24:	cf 90       	pop	r12
     e26:	bf 90       	pop	r11
     e28:	af 90       	pop	r10
     e2a:	9f 90       	pop	r9
     e2c:	8f 90       	pop	r8
     e2e:	7f 90       	pop	r7
     e30:	6f 90       	pop	r6
     e32:	5f 90       	pop	r5
     e34:	4f 90       	pop	r4
     e36:	08 95       	ret

00000e38 <atcacert_der_enc_ecdsa_sig_value>:

int atcacert_der_enc_ecdsa_sig_value(const uint8_t raw_sig[64],
                                     uint8_t*      der_sig,
                                     size_t*       der_sig_size)
{
     e38:	8f 92       	push	r8
     e3a:	9f 92       	push	r9
     e3c:	af 92       	push	r10
     e3e:	bf 92       	push	r11
     e40:	cf 92       	push	r12
     e42:	df 92       	push	r13
     e44:	ef 92       	push	r14
     e46:	ff 92       	push	r15
     e48:	0f 93       	push	r16
     e4a:	1f 93       	push	r17
     e4c:	cf 93       	push	r28
     e4e:	df 93       	push	r29
     e50:	00 d0       	rcall	.+0      	; 0xe52 <atcacert_der_enc_ecdsa_sig_value+0x1a>
     e52:	00 d0       	rcall	.+0      	; 0xe54 <atcacert_der_enc_ecdsa_sig_value+0x1c>
     e54:	cd b7       	in	r28, 0x3d	; 61
     e56:	de b7       	in	r29, 0x3e	; 62
    int ret = 0;
    size_t r_size = 0;
     e58:	1b 82       	std	Y+3, r1	; 0x03
     e5a:	1c 82       	std	Y+4, r1	; 0x04
    size_t s_size = 0;
     e5c:	19 82       	std	Y+1, r1	; 0x01
     e5e:	1a 82       	std	Y+2, r1	; 0x02
    size_t der_sig_size_calc = 0;

    if (raw_sig == NULL || der_sig_size == NULL)
     e60:	00 97       	sbiw	r24, 0x00	; 0
     e62:	09 f4       	brne	.+2      	; 0xe66 <atcacert_der_enc_ecdsa_sig_value+0x2e>
     e64:	68 c0       	rjmp	.+208    	; 0xf36 <atcacert_der_enc_ecdsa_sig_value+0xfe>
     e66:	41 15       	cp	r20, r1
     e68:	51 05       	cpc	r21, r1
     e6a:	09 f4       	brne	.+2      	; 0xe6e <atcacert_der_enc_ecdsa_sig_value+0x36>
     e6c:	64 c0       	rjmp	.+200    	; 0xf36 <atcacert_der_enc_ecdsa_sig_value+0xfe>
     e6e:	5a 01       	movw	r10, r20
     e70:	7b 01       	movw	r14, r22
     e72:	6c 01       	movw	r12, r24
    {
        return ATCACERT_E_BAD_PARAMS;
    }

    // Find size of the DER encoded R integer
    ret = atcacert_der_enc_integer(&raw_sig[0], 32, TRUE, NULL, &r_size);
     e74:	8e 01       	movw	r16, r28
     e76:	0d 5f       	subi	r16, 0xFD	; 253
     e78:	1f 4f       	sbci	r17, 0xFF	; 255
     e7a:	20 e0       	ldi	r18, 0x00	; 0
     e7c:	30 e0       	ldi	r19, 0x00	; 0
     e7e:	41 e0       	ldi	r20, 0x01	; 1
     e80:	60 e2       	ldi	r22, 0x20	; 32
     e82:	70 e0       	ldi	r23, 0x00	; 0
     e84:	0e 94 65 06 	call	0xcca	; 0xcca <atcacert_der_enc_integer>
    if (ret != ATCACERT_E_SUCCESS)
     e88:	00 97       	sbiw	r24, 0x00	; 0
     e8a:	09 f0       	breq	.+2      	; 0xe8e <atcacert_der_enc_ecdsa_sig_value+0x56>
     e8c:	59 c0       	rjmp	.+178    	; 0xf40 <atcacert_der_enc_ecdsa_sig_value+0x108>
    {
        return ret;
    }

    // Find size of the DER encoded S integer
    ret = atcacert_der_enc_integer(&raw_sig[32], 32, TRUE, NULL, &s_size);
     e8e:	46 01       	movw	r8, r12
     e90:	80 e2       	ldi	r24, 0x20	; 32
     e92:	88 0e       	add	r8, r24
     e94:	91 1c       	adc	r9, r1
     e96:	02 50       	subi	r16, 0x02	; 2
     e98:	11 09       	sbc	r17, r1
     e9a:	20 e0       	ldi	r18, 0x00	; 0
     e9c:	30 e0       	ldi	r19, 0x00	; 0
     e9e:	41 e0       	ldi	r20, 0x01	; 1
     ea0:	60 e2       	ldi	r22, 0x20	; 32
     ea2:	70 e0       	ldi	r23, 0x00	; 0
     ea4:	c4 01       	movw	r24, r8
     ea6:	0e 94 65 06 	call	0xcca	; 0xcca <atcacert_der_enc_integer>
    if (ret != ATCACERT_E_SUCCESS)
     eaa:	00 97       	sbiw	r24, 0x00	; 0
     eac:	09 f0       	breq	.+2      	; 0xeb0 <atcacert_der_enc_ecdsa_sig_value+0x78>
     eae:	48 c0       	rjmp	.+144    	; 0xf40 <atcacert_der_enc_ecdsa_sig_value+0x108>
        return ret;
    }

    // This calculation assumes all DER lengths are a single byte, which is fine for 32 byte
    // R and S integers.
    der_sig_size_calc = 5 + r_size + s_size;
     eb0:	2b 81       	ldd	r18, Y+3	; 0x03
     eb2:	3c 81       	ldd	r19, Y+4	; 0x04
     eb4:	89 81       	ldd	r24, Y+1	; 0x01
     eb6:	9a 81       	ldd	r25, Y+2	; 0x02
     eb8:	28 0f       	add	r18, r24
     eba:	39 1f       	adc	r19, r25
     ebc:	2b 5f       	subi	r18, 0xFB	; 251
     ebe:	3f 4f       	sbci	r19, 0xFF	; 255

    if (der_sig != NULL && *der_sig_size < der_sig_size_calc)
     ec0:	e1 14       	cp	r14, r1
     ec2:	f1 04       	cpc	r15, r1
     ec4:	51 f0       	breq	.+20     	; 0xeda <atcacert_der_enc_ecdsa_sig_value+0xa2>
     ec6:	f5 01       	movw	r30, r10
     ec8:	80 81       	ld	r24, Z
     eca:	91 81       	ldd	r25, Z+1	; 0x01
     ecc:	82 17       	cp	r24, r18
     ece:	93 07       	cpc	r25, r19
     ed0:	20 f4       	brcc	.+8      	; 0xeda <atcacert_der_enc_ecdsa_sig_value+0xa2>
    {
        *der_sig_size = der_sig_size_calc;
     ed2:	20 83       	st	Z, r18
     ed4:	31 83       	std	Z+1, r19	; 0x01
        return ATCACERT_E_BUFFER_TOO_SMALL;
     ed6:	23 e0       	ldi	r18, 0x03	; 3
     ed8:	31 c0       	rjmp	.+98     	; 0xf3c <atcacert_der_enc_ecdsa_sig_value+0x104>
    }

    *der_sig_size = der_sig_size_calc;
     eda:	f5 01       	movw	r30, r10
     edc:	20 83       	st	Z, r18
     ede:	31 83       	std	Z+1, r19	; 0x01

    if (der_sig == NULL)
     ee0:	e1 14       	cp	r14, r1
     ee2:	f1 04       	cpc	r15, r1
     ee4:	51 f1       	breq	.+84     	; 0xf3a <atcacert_der_enc_ecdsa_sig_value+0x102>
    {
        return ATCACERT_E_SUCCESS;                  // Caller just wanted the encoded size

    }
    der_sig[0] = 0x03;                              // signatureValue bit string tag
     ee6:	83 e0       	ldi	r24, 0x03	; 3
     ee8:	f7 01       	movw	r30, r14
     eea:	80 83       	st	Z, r24
    der_sig[1] = (uint8_t)(der_sig_size_calc - 2);  // signatureValue bit string length
     eec:	8e ef       	ldi	r24, 0xFE	; 254
     eee:	82 0f       	add	r24, r18
     ef0:	81 83       	std	Z+1, r24	; 0x01
    der_sig[2] = 0x00;                              // signatureValue bit string spare bits
     ef2:	12 82       	std	Z+2, r1	; 0x02

    // signatureValue bit string value is the DER encoding of ECDSA-Sig-Value
    der_sig[3] = 0x30;                              // sequence tag
     ef4:	80 e3       	ldi	r24, 0x30	; 48
     ef6:	83 83       	std	Z+3, r24	; 0x03
    der_sig[4] = (uint8_t)(der_sig_size_calc - 5);  // sequence length
     ef8:	25 50       	subi	r18, 0x05	; 5
     efa:	24 83       	std	Z+4, r18	; 0x04

    // Add R integer
    ret = atcacert_der_enc_integer(&raw_sig[0], 32, TRUE, &der_sig[5], &r_size);
     efc:	8e 01       	movw	r16, r28
     efe:	0d 5f       	subi	r16, 0xFD	; 253
     f00:	1f 4f       	sbci	r17, 0xFF	; 255
     f02:	97 01       	movw	r18, r14
     f04:	2b 5f       	subi	r18, 0xFB	; 251
     f06:	3f 4f       	sbci	r19, 0xFF	; 255
     f08:	41 e0       	ldi	r20, 0x01	; 1
     f0a:	60 e2       	ldi	r22, 0x20	; 32
     f0c:	70 e0       	ldi	r23, 0x00	; 0
     f0e:	c6 01       	movw	r24, r12
     f10:	0e 94 65 06 	call	0xcca	; 0xcca <atcacert_der_enc_integer>
    if (ret != ATCACERT_E_SUCCESS)
     f14:	00 97       	sbiw	r24, 0x00	; 0
     f16:	a1 f4       	brne	.+40     	; 0xf40 <atcacert_der_enc_ecdsa_sig_value+0x108>
    {
        return ret;
    }

    // Add S integer
    ret = atcacert_der_enc_integer(&raw_sig[32], 32, TRUE, &der_sig[5 + r_size], &s_size);
     f18:	2b 81       	ldd	r18, Y+3	; 0x03
     f1a:	3c 81       	ldd	r19, Y+4	; 0x04
     f1c:	2b 5f       	subi	r18, 0xFB	; 251
     f1e:	3f 4f       	sbci	r19, 0xFF	; 255
     f20:	2e 0d       	add	r18, r14
     f22:	3f 1d       	adc	r19, r15
     f24:	02 50       	subi	r16, 0x02	; 2
     f26:	11 09       	sbc	r17, r1
     f28:	41 e0       	ldi	r20, 0x01	; 1
     f2a:	60 e2       	ldi	r22, 0x20	; 32
     f2c:	70 e0       	ldi	r23, 0x00	; 0
     f2e:	c4 01       	movw	r24, r8
     f30:	0e 94 65 06 	call	0xcca	; 0xcca <atcacert_der_enc_integer>
     f34:	05 c0       	rjmp	.+10     	; 0xf40 <atcacert_der_enc_ecdsa_sig_value+0x108>
    size_t s_size = 0;
    size_t der_sig_size_calc = 0;

    if (raw_sig == NULL || der_sig_size == NULL)
    {
        return ATCACERT_E_BAD_PARAMS;
     f36:	22 e0       	ldi	r18, 0x02	; 2
     f38:	01 c0       	rjmp	.+2      	; 0xf3c <atcacert_der_enc_ecdsa_sig_value+0x104>

    *der_sig_size = der_sig_size_calc;

    if (der_sig == NULL)
    {
        return ATCACERT_E_SUCCESS;                  // Caller just wanted the encoded size
     f3a:	20 e0       	ldi	r18, 0x00	; 0
     f3c:	90 e0       	ldi	r25, 0x00	; 0
     f3e:	01 c0       	rjmp	.+2      	; 0xf42 <atcacert_der_enc_ecdsa_sig_value+0x10a>
     f40:	28 2f       	mov	r18, r24
    {
        return ret;
    }

    return ATCACERT_E_SUCCESS;
}
     f42:	82 2f       	mov	r24, r18
     f44:	24 96       	adiw	r28, 0x04	; 4
     f46:	cd bf       	out	0x3d, r28	; 61
     f48:	de bf       	out	0x3e, r29	; 62
     f4a:	df 91       	pop	r29
     f4c:	cf 91       	pop	r28
     f4e:	1f 91       	pop	r17
     f50:	0f 91       	pop	r16
     f52:	ff 90       	pop	r15
     f54:	ef 90       	pop	r14
     f56:	df 90       	pop	r13
     f58:	cf 90       	pop	r12
     f5a:	bf 90       	pop	r11
     f5c:	af 90       	pop	r10
     f5e:	9f 90       	pop	r9
     f60:	8f 90       	pop	r8
     f62:	08 95       	ret

00000f64 <initATCACommand>:
        break;
    default:
        return false;
        break;
    }
}
     f64:	61 15       	cp	r22, r1
     f66:	71 05       	cpc	r23, r1
     f68:	19 f0       	breq	.+6      	; 0xf70 <initATCACommand+0xc>
     f6a:	fb 01       	movw	r30, r22
     f6c:	80 83       	st	Z, r24
     f6e:	11 82       	std	Z+1, r1	; 0x01
     f70:	cb 01       	movw	r24, r22
     f72:	08 95       	ret

00000f74 <deleteATCACommand>:
     f74:	08 95       	ret

00000f76 <atCRC>:
     f76:	0f 93       	push	r16
     f78:	1f 93       	push	r17
     f7a:	cf 93       	push	r28
     f7c:	da 01       	movw	r26, r20
     f7e:	fb 01       	movw	r30, r22
     f80:	8b 01       	movw	r16, r22
     f82:	08 0f       	add	r16, r24
     f84:	19 1f       	adc	r17, r25
     f86:	20 e0       	ldi	r18, 0x00	; 0
     f88:	30 e0       	ldi	r19, 0x00	; 0
     f8a:	0e 17       	cp	r16, r30
     f8c:	1f 07       	cpc	r17, r31
     f8e:	c9 f0       	breq	.+50     	; 0xfc2 <atCRC+0x4c>
     f90:	c1 91       	ld	r28, Z+
     f92:	68 e0       	ldi	r22, 0x08	; 8
     f94:	70 e0       	ldi	r23, 0x00	; 0
     f96:	91 e0       	ldi	r25, 0x01	; 1
     f98:	83 2f       	mov	r24, r19
     f9a:	88 1f       	adc	r24, r24
     f9c:	88 27       	eor	r24, r24
     f9e:	88 1f       	adc	r24, r24
     fa0:	22 0f       	add	r18, r18
     fa2:	33 1f       	adc	r19, r19
     fa4:	41 e0       	ldi	r20, 0x01	; 1
     fa6:	5c 2f       	mov	r21, r28
     fa8:	59 23       	and	r21, r25
     faa:	09 f4       	brne	.+2      	; 0xfae <atCRC+0x38>
     fac:	40 e0       	ldi	r20, 0x00	; 0
     fae:	48 17       	cp	r20, r24
     fb0:	19 f0       	breq	.+6      	; 0xfb8 <atCRC+0x42>
     fb2:	85 e0       	ldi	r24, 0x05	; 5
     fb4:	28 27       	eor	r18, r24
     fb6:	30 58       	subi	r19, 0x80	; 128
     fb8:	99 0f       	add	r25, r25
     fba:	61 50       	subi	r22, 0x01	; 1
     fbc:	71 09       	sbc	r23, r1
     fbe:	61 f7       	brne	.-40     	; 0xf98 <atCRC+0x22>
     fc0:	e4 cf       	rjmp	.-56     	; 0xf8a <atCRC+0x14>
     fc2:	2c 93       	st	X, r18
     fc4:	11 96       	adiw	r26, 0x01	; 1
     fc6:	3c 93       	st	X, r19
     fc8:	cf 91       	pop	r28
     fca:	1f 91       	pop	r17
     fcc:	0f 91       	pop	r16
     fce:	08 95       	ret

00000fd0 <atCalcCrc>:
     fd0:	bc 01       	movw	r22, r24
     fd2:	6f 5f       	subi	r22, 0xFF	; 255
     fd4:	7f 4f       	sbci	r23, 0xFF	; 255
     fd6:	fc 01       	movw	r30, r24
     fd8:	81 81       	ldd	r24, Z+1	; 0x01
     fda:	82 50       	subi	r24, 0x02	; 2
     fdc:	90 e0       	ldi	r25, 0x00	; 0
     fde:	ab 01       	movw	r20, r22
     fe0:	48 0f       	add	r20, r24
     fe2:	59 1f       	adc	r21, r25
     fe4:	0c 94 bb 07 	jmp	0xf76	; 0xf76 <atCRC>

00000fe8 <atGenKey>:
     fe8:	fb 01       	movw	r30, r22
     fea:	80 e4       	ldi	r24, 0x40	; 64
     fec:	82 83       	std	Z+2, r24	; 0x02
     fee:	83 81       	ldd	r24, Z+3	; 0x03
     ff0:	84 ff       	sbrs	r24, 4
     ff2:	02 c0       	rjmp	.+4      	; 0xff8 <atGenKey+0x10>
     ff4:	8a e0       	ldi	r24, 0x0A	; 10
     ff6:	01 c0       	rjmp	.+2      	; 0xffa <atGenKey+0x12>
     ff8:	87 e0       	ldi	r24, 0x07	; 7
     ffa:	81 83       	std	Z+1, r24	; 0x01
     ffc:	cf 01       	movw	r24, r30
     ffe:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <atCalcCrc>
    1002:	80 e0       	ldi	r24, 0x00	; 0
    1004:	08 95       	ret

00001006 <atNonce>:
    1006:	fb 01       	movw	r30, r22
    1008:	83 81       	ldd	r24, Z+3	; 0x03
    100a:	98 2f       	mov	r25, r24
    100c:	93 70       	andi	r25, 0x03	; 3
    100e:	26 e1       	ldi	r18, 0x16	; 22
    1010:	22 83       	std	Z+2, r18	; 0x02
    1012:	92 30       	cpi	r25, 0x02	; 2
    1014:	10 f4       	brcc	.+4      	; 0x101a <atNonce+0x14>
    1016:	8b e1       	ldi	r24, 0x1B	; 27
    1018:	07 c0       	rjmp	.+14     	; 0x1028 <atNonce+0x22>
    101a:	93 30       	cpi	r25, 0x03	; 3
    101c:	59 f4       	brne	.+22     	; 0x1034 <atNonce+0x2e>
    101e:	85 ff       	sbrs	r24, 5
    1020:	02 c0       	rjmp	.+4      	; 0x1026 <atNonce+0x20>
    1022:	87 e4       	ldi	r24, 0x47	; 71
    1024:	01 c0       	rjmp	.+2      	; 0x1028 <atNonce+0x22>
    1026:	87 e2       	ldi	r24, 0x27	; 39
    1028:	81 83       	std	Z+1, r24	; 0x01
    102a:	cf 01       	movw	r24, r30
    102c:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <atCalcCrc>
    1030:	80 e0       	ldi	r24, 0x00	; 0
    1032:	08 95       	ret
    1034:	82 ee       	ldi	r24, 0xE2	; 226
    1036:	08 95       	ret

00001038 <atRandom>:
    1038:	cb 01       	movw	r24, r22
    103a:	2b e1       	ldi	r18, 0x1B	; 27
    103c:	fb 01       	movw	r30, r22
    103e:	22 83       	std	Z+2, r18	; 0x02
    1040:	27 e0       	ldi	r18, 0x07	; 7
    1042:	21 83       	std	Z+1, r18	; 0x01
    1044:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <atCalcCrc>
    1048:	80 e0       	ldi	r24, 0x00	; 0
    104a:	08 95       	ret

0000104c <atRead>:
    104c:	cb 01       	movw	r24, r22
    104e:	22 e0       	ldi	r18, 0x02	; 2
    1050:	fb 01       	movw	r30, r22
    1052:	22 83       	std	Z+2, r18	; 0x02
    1054:	27 e0       	ldi	r18, 0x07	; 7
    1056:	21 83       	std	Z+1, r18	; 0x01
    1058:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <atCalcCrc>
    105c:	80 e0       	ldi	r24, 0x00	; 0
    105e:	08 95       	ret

00001060 <atSign>:
    1060:	cb 01       	movw	r24, r22
    1062:	21 e4       	ldi	r18, 0x41	; 65
    1064:	fb 01       	movw	r30, r22
    1066:	22 83       	std	Z+2, r18	; 0x02
    1068:	27 e0       	ldi	r18, 0x07	; 7
    106a:	21 83       	std	Z+1, r18	; 0x01
    106c:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <atCalcCrc>
    1070:	80 e0       	ldi	r24, 0x00	; 0
    1072:	08 95       	ret

00001074 <atCheckCrc>:
    1074:	ef 92       	push	r14
    1076:	ff 92       	push	r15
    1078:	0f 93       	push	r16
    107a:	1f 93       	push	r17
    107c:	cf 93       	push	r28
    107e:	df 93       	push	r29
    1080:	00 d0       	rcall	.+0      	; 0x1082 <atCheckCrc+0xe>
    1082:	cd b7       	in	r28, 0x3d	; 61
    1084:	de b7       	in	r29, 0x3e	; 62
    1086:	7c 01       	movw	r14, r24
    1088:	fc 01       	movw	r30, r24
    108a:	80 81       	ld	r24, Z
    108c:	82 50       	subi	r24, 0x02	; 2
    108e:	08 2f       	mov	r16, r24
    1090:	10 e0       	ldi	r17, 0x00	; 0
    1092:	ae 01       	movw	r20, r28
    1094:	4f 5f       	subi	r20, 0xFF	; 255
    1096:	5f 4f       	sbci	r21, 0xFF	; 255
    1098:	b7 01       	movw	r22, r14
    109a:	c8 01       	movw	r24, r16
    109c:	0e 94 bb 07 	call	0xf76	; 0xf76 <atCRC>
    10a0:	f7 01       	movw	r30, r14
    10a2:	e0 0f       	add	r30, r16
    10a4:	f1 1f       	adc	r31, r17
    10a6:	99 81       	ldd	r25, Y+1	; 0x01
    10a8:	80 81       	ld	r24, Z
    10aa:	98 13       	cpse	r25, r24
    10ac:	06 c0       	rjmp	.+12     	; 0x10ba <atCheckCrc+0x46>
    10ae:	9a 81       	ldd	r25, Y+2	; 0x02
    10b0:	81 81       	ldd	r24, Z+1	; 0x01
    10b2:	98 13       	cpse	r25, r24
    10b4:	02 c0       	rjmp	.+4      	; 0x10ba <atCheckCrc+0x46>
    10b6:	80 e0       	ldi	r24, 0x00	; 0
    10b8:	01 c0       	rjmp	.+2      	; 0x10bc <atCheckCrc+0x48>
    10ba:	85 ee       	ldi	r24, 0xE5	; 229
    10bc:	0f 90       	pop	r0
    10be:	0f 90       	pop	r0
    10c0:	df 91       	pop	r29
    10c2:	cf 91       	pop	r28
    10c4:	1f 91       	pop	r17
    10c6:	0f 91       	pop	r16
    10c8:	ff 90       	pop	r15
    10ca:	ef 90       	pop	r14
    10cc:	08 95       	ret

000010ce <isATCAError>:
 * \param[in] data pointer to received data - expected to be in the form of a CA device response frame
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */

ATCA_STATUS isATCAError(uint8_t *data)
{
    10ce:	0f 93       	push	r16
    10d0:	1f 93       	push	r17
    10d2:	cf 93       	push	r28
    10d4:	df 93       	push	r29
    10d6:	00 d0       	rcall	.+0      	; 0x10d8 <isATCAError+0xa>
    10d8:	00 d0       	rcall	.+0      	; 0x10da <isATCAError+0xc>
    10da:	cd b7       	in	r28, 0x3d	; 61
    10dc:	de b7       	in	r29, 0x3e	; 62
    10de:	8c 01       	movw	r16, r24
    uint8_t good[4] = { 0x04, 0x00, 0x03, 0x40 };
    10e0:	80 91 5e a3 	lds	r24, 0xA35E	; 0x80a35e <__bss_end+0x69c5>
    10e4:	90 91 5f a3 	lds	r25, 0xA35F	; 0x80a35f <__bss_end+0x69c6>
    10e8:	a0 91 60 a3 	lds	r26, 0xA360	; 0x80a360 <__bss_end+0x69c7>
    10ec:	b0 91 61 a3 	lds	r27, 0xA361	; 0x80a361 <__bss_end+0x69c8>
    10f0:	89 83       	std	Y+1, r24	; 0x01
    10f2:	9a 83       	std	Y+2, r25	; 0x02
    10f4:	ab 83       	std	Y+3, r26	; 0x03
    10f6:	bc 83       	std	Y+4, r27	; 0x04

    if (memcmp(data, good, 4) == 0)
    10f8:	44 e0       	ldi	r20, 0x04	; 4
    10fa:	50 e0       	ldi	r21, 0x00	; 0
    10fc:	be 01       	movw	r22, r28
    10fe:	6f 5f       	subi	r22, 0xFF	; 255
    1100:	7f 4f       	sbci	r23, 0xFF	; 255
    1102:	c8 01       	movw	r24, r16
    1104:	0e 94 65 2e 	call	0x5cca	; 0x5cca <memcmp>
    1108:	89 2b       	or	r24, r25
    110a:	41 f1       	breq	.+80     	; 0x115c <isATCAError+0x8e>
    {
        return ATCA_SUCCESS;
    }

    if (data[0] == 0x04)        // error packets are always 4 bytes long
    110c:	f8 01       	movw	r30, r16
    110e:	80 81       	ld	r24, Z
    1110:	84 30       	cpi	r24, 0x04	; 4
    1112:	21 f5       	brne	.+72     	; 0x115c <isATCAError+0x8e>
    {
        switch (data[1])
    1114:	81 81       	ldd	r24, Z+1	; 0x01
    1116:	87 30       	cpi	r24, 0x07	; 7
    1118:	c9 f0       	breq	.+50     	; 0x114c <isATCAError+0x7e>
    111a:	38 f4       	brcc	.+14     	; 0x112a <isATCAError+0x5c>
    111c:	83 30       	cpi	r24, 0x03	; 3
    111e:	91 f0       	breq	.+36     	; 0x1144 <isATCAError+0x76>
    1120:	85 30       	cpi	r24, 0x05	; 5
    1122:	91 f0       	breq	.+36     	; 0x1148 <isATCAError+0x7a>
    1124:	81 30       	cpi	r24, 0x01	; 1
    1126:	c1 f4       	brne	.+48     	; 0x1158 <isATCAError+0x8a>
    1128:	1b c0       	rjmp	.+54     	; 0x1160 <isATCAError+0x92>
    112a:	8f 30       	cpi	r24, 0x0F	; 15
    112c:	89 f0       	breq	.+34     	; 0x1150 <isATCAError+0x82>
    112e:	20 f4       	brcc	.+8      	; 0x1138 <isATCAError+0x6a>
    1130:	88 30       	cpi	r24, 0x08	; 8
    1132:	91 f4       	brne	.+36     	; 0x1158 <isATCAError+0x8a>
            break;
        case 0x07: // chip is in self test failure mode
            return ATCA_STATUS_SELFTEST_ERROR;
            break;
        case 0x08: //random number generator health test error
            return ATCA_HEALTH_TEST_ERROR;
    1134:	8a ef       	ldi	r24, 0xFA	; 250
    1136:	15 c0       	rjmp	.+42     	; 0x1162 <isATCAError+0x94>
        return ATCA_SUCCESS;
    }

    if (data[0] == 0x04)        // error packets are always 4 bytes long
    {
        switch (data[1])
    1138:	81 31       	cpi	r24, 0x11	; 17
    113a:	61 f0       	breq	.+24     	; 0x1154 <isATCAError+0x86>
    113c:	8f 3f       	cpi	r24, 0xFF	; 255
    113e:	61 f4       	brne	.+24     	; 0x1158 <isATCAError+0x8a>
            break;
        case 0x11: // chip was successfully woken up
            return ATCA_WAKE_SUCCESS;
            break;
        case 0xff: // bad crc found (command not properly received by device) or other comm error
            return ATCA_STATUS_CRC;
    1140:	84 ed       	ldi	r24, 0xD4	; 212
    1142:	0f c0       	rjmp	.+30     	; 0x1162 <isATCAError+0x94>
        {
        case 0x01: // checkmac or verify failed
            return ATCA_CHECKMAC_VERIFY_FAILED;
            break;
        case 0x03: // command received byte length, opcode or parameter was illegal
            return ATCA_PARSE_ERROR;
    1144:	82 ed       	ldi	r24, 0xD2	; 210
    1146:	0d c0       	rjmp	.+26     	; 0x1162 <isATCAError+0x94>
            break;
        case 0x05: // computation error during ECC processing causing invalid results
            return ATCA_STATUS_ECC;
    1148:	86 ed       	ldi	r24, 0xD6	; 214
    114a:	0b c0       	rjmp	.+22     	; 0x1162 <isATCAError+0x94>
            break;
        case 0x07: // chip is in self test failure mode
            return ATCA_STATUS_SELFTEST_ERROR;
    114c:	87 ed       	ldi	r24, 0xD7	; 215
    114e:	09 c0       	rjmp	.+18     	; 0x1162 <isATCAError+0x94>
            break;
        case 0x08: //random number generator health test error
            return ATCA_HEALTH_TEST_ERROR;
        case 0x0f: // chip can't execute the command
            return ATCA_EXECUTION_ERROR;
    1150:	84 ef       	ldi	r24, 0xF4	; 244
    1152:	07 c0       	rjmp	.+14     	; 0x1162 <isATCAError+0x94>
            break;
        case 0x11: // chip was successfully woken up
            return ATCA_WAKE_SUCCESS;
    1154:	83 ef       	ldi	r24, 0xF3	; 243
    1156:	05 c0       	rjmp	.+10     	; 0x1162 <isATCAError+0x94>
            break;
        case 0xff: // bad crc found (command not properly received by device) or other comm error
            return ATCA_STATUS_CRC;
            break;
        default:
            return ATCA_GEN_FAIL;
    1158:	81 ee       	ldi	r24, 0xE1	; 225
    115a:	03 c0       	rjmp	.+6      	; 0x1162 <isATCAError+0x94>
{
    uint8_t good[4] = { 0x04, 0x00, 0x03, 0x40 };

    if (memcmp(data, good, 4) == 0)
    {
        return ATCA_SUCCESS;
    115c:	80 e0       	ldi	r24, 0x00	; 0
    115e:	01 c0       	rjmp	.+2      	; 0x1162 <isATCAError+0x94>
    if (data[0] == 0x04)        // error packets are always 4 bytes long
    {
        switch (data[1])
        {
        case 0x01: // checkmac or verify failed
            return ATCA_CHECKMAC_VERIFY_FAILED;
    1160:	81 ed       	ldi	r24, 0xD1	; 209
    }
    else
    {
        return ATCA_SUCCESS;
    }
}
    1162:	24 96       	adiw	r28, 0x04	; 4
    1164:	cd bf       	out	0x3d, r28	; 61
    1166:	de bf       	out	0x3e, r29	; 62
    1168:	df 91       	pop	r29
    116a:	cf 91       	pop	r28
    116c:	1f 91       	pop	r17
    116e:	0f 91       	pop	r16
    1170:	08 95       	ret

00001172 <initATCADevice>:
 * \param[in] cfg  pointer to an interface configuration object
 * \param[in] ca_dev  pre-allocated structure to be initialized
 * \return reference to a new ATCADevice
 */
ATCADevice initATCADevice(ATCAIfaceCfg *cfg, ATCADevice ca_dev)
{
    1172:	ef 92       	push	r14
    1174:	ff 92       	push	r15
    1176:	0f 93       	push	r16
    1178:	1f 93       	push	r17
    117a:	cf 93       	push	r28
    117c:	df 93       	push	r29
    117e:	fb 01       	movw	r30, r22
	ATCACommand cmdResult;
	ATCAIface   ifaceResult;
	
	// Ensure all members have allocated ram first
	if (cfg == NULL || ca_dev == NULL || ca_dev->mCommands == NULL || ca_dev->mIface == NULL)
    1180:	00 97       	sbiw	r24, 0x00	; 0
    1182:	19 f4       	brne	.+6      	; 0x118a <initATCADevice+0x18>
	{
		return NULL;
    1184:	80 e0       	ldi	r24, 0x00	; 0
    1186:	90 e0       	ldi	r25, 0x00	; 0
    1188:	1c c0       	rjmp	.+56     	; 0x11c2 <initATCADevice+0x50>
{
	ATCACommand cmdResult;
	ATCAIface   ifaceResult;
	
	// Ensure all members have allocated ram first
	if (cfg == NULL || ca_dev == NULL || ca_dev->mCommands == NULL || ca_dev->mIface == NULL)
    118a:	30 97       	sbiw	r30, 0x00	; 0
    118c:	d9 f3       	breq	.-10     	; 0x1184 <initATCADevice+0x12>
    118e:	60 81       	ld	r22, Z
    1190:	71 81       	ldd	r23, Z+1	; 0x01
    1192:	61 15       	cp	r22, r1
    1194:	71 05       	cpc	r23, r1
    1196:	b1 f3       	breq	.-20     	; 0x1184 <initATCADevice+0x12>
    1198:	22 81       	ldd	r18, Z+2	; 0x02
    119a:	33 81       	ldd	r19, Z+3	; 0x03
    119c:	23 2b       	or	r18, r19
    119e:	91 f3       	breq	.-28     	; 0x1184 <initATCADevice+0x12>
    11a0:	8f 01       	movw	r16, r30
    11a2:	ec 01       	movw	r28, r24
	{
		return NULL;
	}

	cmdResult	= initATCACommand(cfg->devtype,ca_dev->mCommands);
    11a4:	89 81       	ldd	r24, Y+1	; 0x01
    11a6:	0e 94 b2 07 	call	0xf64	; 0xf64 <initATCACommand>
    11aa:	7c 01       	movw	r14, r24
	ifaceResult = initATCAIface(cfg,ca_dev->mIface);
    11ac:	f8 01       	movw	r30, r16
    11ae:	62 81       	ldd	r22, Z+2	; 0x02
    11b0:	73 81       	ldd	r23, Z+3	; 0x03
    11b2:	ce 01       	movw	r24, r28
    11b4:	0e 94 65 0a 	call	0x14ca	; 0x14ca <initATCAIface>

	if (cmdResult == NULL || ifaceResult == NULL)
    11b8:	ef 28       	or	r14, r15
    11ba:	21 f3       	breq	.-56     	; 0x1184 <initATCADevice+0x12>
    11bc:	89 2b       	or	r24, r25
    11be:	11 f3       	breq	.-60     	; 0x1184 <initATCADevice+0x12>
    11c0:	c8 01       	movw	r24, r16
	{
		return  NULL;
	}

	return ca_dev;
}
    11c2:	df 91       	pop	r29
    11c4:	cf 91       	pop	r28
    11c6:	1f 91       	pop	r17
    11c8:	0f 91       	pop	r16
    11ca:	ff 90       	pop	r15
    11cc:	ef 90       	pop	r14
    11ce:	08 95       	ret

000011d0 <atGetCommands>:
 * \return reference to the ATCACommand object for the device
 */
ATCACommand atGetCommands(ATCADevice dev)
{
    return dev->mCommands;
}
    11d0:	fc 01       	movw	r30, r24
    11d2:	80 81       	ld	r24, Z
    11d4:	91 81       	ldd	r25, Z+1	; 0x01
    11d6:	08 95       	ret

000011d8 <atGetIFace>:
 * \return reference to the ATCAIface object for the device
 */
ATCAIface atGetIFace(ATCADevice dev)
{
    return dev->mIface;
}
    11d8:	fc 01       	movw	r30, r24
    11da:	82 81       	ldd	r24, Z+2	; 0x02
    11dc:	93 81       	ldd	r25, Z+3	; 0x03
    11de:	08 95       	ret

000011e0 <deleteATCADevice>:

/** \brief destructor for a device NULLs reference after object is freed
 * \param[in] ca_dev  pointer to a reference to a device
 */
void deleteATCADevice(ATCADevice *ca_dev)   // destructor
{
    11e0:	0f 93       	push	r16
    11e2:	1f 93       	push	r17
    11e4:	cf 93       	push	r28
    11e6:	df 93       	push	r29
    11e8:	8c 01       	movw	r16, r24
    struct atca_device *dev = *ca_dev;
    11ea:	fc 01       	movw	r30, r24
    11ec:	c0 81       	ld	r28, Z
    11ee:	d1 81       	ldd	r29, Z+1	; 0x01

    if (*ca_dev)
    11f0:	20 97       	sbiw	r28, 0x00	; 0
    11f2:	39 f0       	breq	.+14     	; 0x1202 <deleteATCADevice+0x22>
    {
        deleteATCACommand(&dev->mCommands);
    11f4:	ce 01       	movw	r24, r28
    11f6:	0e 94 ba 07 	call	0xf74	; 0xf74 <deleteATCACommand>
        deleteATCAIface(&dev->mIface);
    11fa:	ce 01       	movw	r24, r28
    11fc:	02 96       	adiw	r24, 0x02	; 2
    11fe:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <deleteATCAIface>
#ifndef ATCA_INTERFACE_V2
        free(*ca_dev);
#endif
    }

    *ca_dev = NULL;
    1202:	f8 01       	movw	r30, r16
    1204:	10 82       	st	Z, r1
    1206:	11 82       	std	Z+1, r1	; 0x01
}
    1208:	df 91       	pop	r29
    120a:	cf 91       	pop	r28
    120c:	1f 91       	pop	r17
    120e:	0f 91       	pop	r16
    1210:	08 95       	ret

00001212 <atGetExecTime>:
 *  \param[in] opcode  Opcode value of the command
 *  \param[in] ca_cmd  Command object for which the execution times are associated
 *  \return ATCA_SUCCESS
 */
ATCA_STATUS atGetExecTime(uint8_t opcode, ATCACommand ca_cmd)
{
    1212:	cf 93       	push	r28
    1214:	df 93       	push	r29
    1216:	fb 01       	movw	r30, r22
    ATCA_STATUS status = ATCA_SUCCESS;
    const device_execution_time_t *execution_times;
    uint8_t i, no_of_commands;


    switch (ca_cmd->dt)
    1218:	90 81       	ld	r25, Z
    121a:	91 30       	cpi	r25, 0x01	; 1
    121c:	31 f0       	breq	.+12     	; 0x122a <atGetExecTime+0x18>
    121e:	d0 f0       	brcs	.+52     	; 0x1254 <atGetExecTime+0x42>
    1220:	92 30       	cpi	r25, 0x02	; 2
    1222:	39 f0       	breq	.+14     	; 0x1232 <atGetExecTime+0x20>
    1224:	93 30       	cpi	r25, 0x03	; 3
    1226:	49 f0       	breq	.+18     	; 0x123a <atGetExecTime+0x28>
    1228:	11 c0       	rjmp	.+34     	; 0x124c <atGetExecTime+0x3a>
        no_of_commands = sizeof(device_execution_time_204) / sizeof(device_execution_time_t);
        break;

    case ATECC108A:
        execution_times = device_execution_time_108;
        no_of_commands = sizeof(device_execution_time_108) / sizeof(device_execution_time_t);
    122a:	93 e1       	ldi	r25, 0x13	; 19
        execution_times = device_execution_time_204;
        no_of_commands = sizeof(device_execution_time_204) / sizeof(device_execution_time_t);
        break;

    case ATECC108A:
        execution_times = device_execution_time_108;
    122c:	2f ea       	ldi	r18, 0xAF	; 175
    122e:	38 ea       	ldi	r19, 0xA8	; 168
    1230:	1c c0       	rjmp	.+56     	; 0x126a <atGetExecTime+0x58>
        no_of_commands = sizeof(device_execution_time_108) / sizeof(device_execution_time_t);
        break;

    case ATECC508A:
        execution_times = device_execution_time_508;
        no_of_commands = sizeof(device_execution_time_508) / sizeof(device_execution_time_t);
    1232:	94 e1       	ldi	r25, 0x14	; 20
        execution_times = device_execution_time_108;
        no_of_commands = sizeof(device_execution_time_108) / sizeof(device_execution_time_t);
        break;

    case ATECC508A:
        execution_times = device_execution_time_508;
    1234:	23 e7       	ldi	r18, 0x73	; 115
    1236:	38 ea       	ldi	r19, 0xA8	; 168
        no_of_commands = sizeof(device_execution_time_508) / sizeof(device_execution_time_t);
        break;
    1238:	18 c0       	rjmp	.+48     	; 0x126a <atGetExecTime+0x58>

    case ATECC608A:
        if (ca_cmd->clock_divider == ATCA_CHIPMODE_CLOCK_DIV_M1)
    123a:	91 81       	ldd	r25, Z+1	; 0x01
    123c:	98 32       	cpi	r25, 0x28	; 40
    123e:	71 f0       	breq	.+28     	; 0x125c <atGetExecTime+0x4a>
        {
            execution_times = device_execution_time_608_m1;
            no_of_commands = sizeof(device_execution_time_608_m1) / sizeof(device_execution_time_t);
        }
        else if (ca_cmd->clock_divider == ATCA_CHIPMODE_CLOCK_DIV_M2)
    1240:	98 36       	cpi	r25, 0x68	; 104
    1242:	81 f0       	breq	.+32     	; 0x1264 <atGetExecTime+0x52>
        }
        else
        {
            // Assume default M0 clock divider
            execution_times = device_execution_time_608_m0;
            no_of_commands = sizeof(device_execution_time_608_m0) / sizeof(device_execution_time_t);
    1244:	96 e1       	ldi	r25, 0x16	; 22
            no_of_commands = sizeof(device_execution_time_608_m2) / sizeof(device_execution_time_t);
        }
        else
        {
            // Assume default M0 clock divider
            execution_times = device_execution_time_608_m0;
    1246:	21 e3       	ldi	r18, 0x31	; 49
    1248:	38 ea       	ldi	r19, 0xA8	; 168
    124a:	0f c0       	rjmp	.+30     	; 0x126a <atGetExecTime+0x58>
            no_of_commands = sizeof(device_execution_time_608_m0) / sizeof(device_execution_time_t);
        }
        break;

    default:
        no_of_commands = 0;
    124c:	90 e0       	ldi	r25, 0x00	; 0
        execution_times = NULL;
    124e:	20 e0       	ldi	r18, 0x00	; 0
    1250:	30 e0       	ldi	r19, 0x00	; 0
        break;
    1252:	0b c0       	rjmp	.+22     	; 0x126a <atGetExecTime+0x58>

    switch (ca_cmd->dt)
    {
    case ATSHA204A:
        execution_times = device_execution_time_204;
        no_of_commands = sizeof(device_execution_time_204) / sizeof(device_execution_time_t);
    1254:	9e e0       	ldi	r25, 0x0E	; 14


    switch (ca_cmd->dt)
    {
    case ATSHA204A:
        execution_times = device_execution_time_204;
    1256:	28 ee       	ldi	r18, 0xE8	; 232
    1258:	38 ea       	ldi	r19, 0xA8	; 168
    125a:	07 c0       	rjmp	.+14     	; 0x126a <atGetExecTime+0x58>

    case ATECC608A:
        if (ca_cmd->clock_divider == ATCA_CHIPMODE_CLOCK_DIV_M1)
        {
            execution_times = device_execution_time_608_m1;
            no_of_commands = sizeof(device_execution_time_608_m1) / sizeof(device_execution_time_t);
    125c:	96 e1       	ldi	r25, 0x16	; 22
        break;

    case ATECC608A:
        if (ca_cmd->clock_divider == ATCA_CHIPMODE_CLOCK_DIV_M1)
        {
            execution_times = device_execution_time_608_m1;
    125e:	2f ee       	ldi	r18, 0xEF	; 239
    1260:	37 ea       	ldi	r19, 0xA7	; 167
    1262:	03 c0       	rjmp	.+6      	; 0x126a <atGetExecTime+0x58>
            no_of_commands = sizeof(device_execution_time_608_m1) / sizeof(device_execution_time_t);
        }
        else if (ca_cmd->clock_divider == ATCA_CHIPMODE_CLOCK_DIV_M2)
        {
            execution_times = device_execution_time_608_m2;
            no_of_commands = sizeof(device_execution_time_608_m2) / sizeof(device_execution_time_t);
    1264:	96 e1       	ldi	r25, 0x16	; 22
            execution_times = device_execution_time_608_m1;
            no_of_commands = sizeof(device_execution_time_608_m1) / sizeof(device_execution_time_t);
        }
        else if (ca_cmd->clock_divider == ATCA_CHIPMODE_CLOCK_DIV_M2)
        {
            execution_times = device_execution_time_608_m2;
    1266:	2d ea       	ldi	r18, 0xAD	; 173
    1268:	37 ea       	ldi	r19, 0xA7	; 167
        no_of_commands = 0;
        execution_times = NULL;
        break;
    }

    ca_cmd->execution_time_msec = ATCA_UNSUPPORTED_CMD;
    126a:	4f ef       	ldi	r20, 0xFF	; 255
    126c:	5f ef       	ldi	r21, 0xFF	; 255
    126e:	42 83       	std	Z+2, r20	; 0x02
    1270:	53 83       	std	Z+3, r21	; 0x03

    for (i = 0; i < no_of_commands; i++)
    1272:	40 e0       	ldi	r20, 0x00	; 0
    1274:	49 17       	cp	r20, r25
    1276:	89 f0       	breq	.+34     	; 0x129a <atGetExecTime+0x88>
    {
        if (execution_times[i].opcode == opcode)
    1278:	d9 01       	movw	r26, r18
    127a:	2d 5f       	subi	r18, 0xFD	; 253
    127c:	3f 4f       	sbci	r19, 0xFF	; 255
    127e:	e9 01       	movw	r28, r18
    1280:	23 97       	sbiw	r28, 0x03	; 3
    1282:	58 81       	ld	r21, Y
    1284:	58 13       	cpse	r21, r24
    1286:	07 c0       	rjmp	.+14     	; 0x1296 <atGetExecTime+0x84>
        {
            ca_cmd->execution_time_msec = execution_times[i].execution_time_msec;
    1288:	11 96       	adiw	r26, 0x01	; 1
    128a:	8d 91       	ld	r24, X+
    128c:	9c 91       	ld	r25, X
    128e:	12 97       	sbiw	r26, 0x02	; 2
    1290:	82 83       	std	Z+2, r24	; 0x02
    1292:	93 83       	std	Z+3, r25	; 0x03
            break;
    1294:	02 c0       	rjmp	.+4      	; 0x129a <atGetExecTime+0x88>
        break;
    }

    ca_cmd->execution_time_msec = ATCA_UNSUPPORTED_CMD;

    for (i = 0; i < no_of_commands; i++)
    1296:	4f 5f       	subi	r20, 0xFF	; 255
    1298:	ed cf       	rjmp	.-38     	; 0x1274 <atGetExecTime+0x62>
            ca_cmd->execution_time_msec = execution_times[i].execution_time_msec;
            break;
        }
    }

    if (ca_cmd->execution_time_msec == ATCA_UNSUPPORTED_CMD)
    129a:	82 81       	ldd	r24, Z+2	; 0x02
    129c:	93 81       	ldd	r25, Z+3	; 0x03
    129e:	01 96       	adiw	r24, 0x01	; 1
    12a0:	11 f4       	brne	.+4      	; 0x12a6 <atGetExecTime+0x94>
    {
        status = ATCA_BAD_OPCODE;
    12a2:	82 ef       	ldi	r24, 0xF2	; 242
    12a4:	01 c0       	rjmp	.+2      	; 0x12a8 <atGetExecTime+0x96>
 *  \param[in] ca_cmd  Command object for which the execution times are associated
 *  \return ATCA_SUCCESS
 */
ATCA_STATUS atGetExecTime(uint8_t opcode, ATCACommand ca_cmd)
{
    ATCA_STATUS status = ATCA_SUCCESS;
    12a6:	80 e0       	ldi	r24, 0x00	; 0
    {
        status = ATCA_BAD_OPCODE;
    }

    return status;
}
    12a8:	df 91       	pop	r29
    12aa:	cf 91       	pop	r28
    12ac:	08 95       	ret

000012ae <atca_execute_command>:
 * \param[in]    device  CryptoAuthentication device to send the command to.
 *
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atca_execute_command(ATCAPacket* packet, ATCADevice device)
{
    12ae:	af 92       	push	r10
    12b0:	bf 92       	push	r11
    12b2:	cf 92       	push	r12
    12b4:	df 92       	push	r13
    12b6:	ef 92       	push	r14
    12b8:	ff 92       	push	r15
    12ba:	1f 93       	push	r17
    12bc:	cf 93       	push	r28
    12be:	df 93       	push	r29
    12c0:	00 d0       	rcall	.+0      	; 0x12c2 <atca_execute_command+0x14>
    12c2:	cd b7       	in	r28, 0x3d	; 61
    12c4:	de b7       	in	r29, 0x3e	; 62
    12c6:	7c 01       	movw	r14, r24
    12c8:	6b 01       	movw	r12, r22
    uint16_t rxsize;

    do
    {
#ifdef ATCA_NO_POLL
        if ((status = atGetExecTime(packet->opcode, device->mCommands)) != ATCA_SUCCESS)
    12ca:	db 01       	movw	r26, r22
    12cc:	6d 91       	ld	r22, X+
    12ce:	7c 91       	ld	r23, X
    12d0:	fc 01       	movw	r30, r24
    12d2:	82 81       	ldd	r24, Z+2	; 0x02
    12d4:	0e 94 09 09 	call	0x1212	; 0x1212 <atGetExecTime>
    12d8:	81 11       	cpse	r24, r1
    12da:	57 c0       	rjmp	.+174    	; 0x138a <atca_execute_command+0xdc>
        {
            return status;
        }
        execution_or_wait_time = device->mCommands->execution_time_msec;
    12dc:	d6 01       	movw	r26, r12
    12de:	ed 91       	ld	r30, X+
    12e0:	fc 91       	ld	r31, X
    12e2:	11 97       	sbiw	r26, 0x01	; 1
    12e4:	a2 80       	ldd	r10, Z+2	; 0x02
    12e6:	b3 80       	ldd	r11, Z+3	; 0x03
#else
        execution_or_wait_time = ATCA_POLLING_INIT_TIME_MSEC;
        max_delay_count = ATCA_POLLING_MAX_TIME_MSEC / ATCA_POLLING_FREQUENCY_TIME_MSEC;
#endif

        if ((status = atwake(device->mIface)) != ATCA_SUCCESS)
    12e8:	12 96       	adiw	r26, 0x02	; 2
    12ea:	8d 91       	ld	r24, X+
    12ec:	9c 91       	ld	r25, X
    12ee:	13 97       	sbiw	r26, 0x03	; 3
    12f0:	0e 94 dd 09 	call	0x13ba	; 0x13ba <atwake>
    12f4:	18 2f       	mov	r17, r24
    12f6:	81 11       	cpse	r24, r1
    12f8:	42 c0       	rjmp	.+132    	; 0x137e <atca_execute_command+0xd0>
        {
            break;
        }

        // send the command
        if ((status = atsend(device->mIface, (uint8_t*)packet, packet->txsize)) != ATCA_SUCCESS)
    12fa:	f7 01       	movw	r30, r14
    12fc:	41 81       	ldd	r20, Z+1	; 0x01
    12fe:	50 e0       	ldi	r21, 0x00	; 0
    1300:	b7 01       	movw	r22, r14
    1302:	d6 01       	movw	r26, r12
    1304:	12 96       	adiw	r26, 0x02	; 2
    1306:	8d 91       	ld	r24, X+
    1308:	9c 91       	ld	r25, X
    130a:	13 97       	sbiw	r26, 0x03	; 3
    130c:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <atsend>
    1310:	18 2f       	mov	r17, r24
    1312:	81 11       	cpse	r24, r1
    1314:	34 c0       	rjmp	.+104    	; 0x137e <atca_execute_command+0xd0>
        {
            break;
        }

        // Delay for execution time or initial wait before polling
        atca_delay_ms(execution_or_wait_time);
    1316:	b5 01       	movw	r22, r10
    1318:	80 e0       	ldi	r24, 0x00	; 0
    131a:	90 e0       	ldi	r25, 0x00	; 0
    131c:	0e 94 7b 15 	call	0x2af6	; 0x2af6 <atca_delay_ms>

        do
        {
            memset(packet->data, 0, sizeof(packet->data));
    1320:	b6 e0       	ldi	r27, 0x06	; 6
    1322:	eb 0e       	add	r14, r27
    1324:	f1 1c       	adc	r15, r1
    1326:	80 ec       	ldi	r24, 0xC0	; 192
    1328:	f7 01       	movw	r30, r14
    132a:	11 92       	st	Z+, r1
    132c:	8a 95       	dec	r24
    132e:	e9 f7       	brne	.-6      	; 0x132a <atca_execute_command+0x7c>
            // receive the response
            rxsize = sizeof(packet->data);
    1330:	80 ec       	ldi	r24, 0xC0	; 192
    1332:	90 e0       	ldi	r25, 0x00	; 0
    1334:	89 83       	std	Y+1, r24	; 0x01
    1336:	9a 83       	std	Y+2, r25	; 0x02
            if ((status = atreceive(device->mIface, packet->data, &rxsize)) == ATCA_SUCCESS)
    1338:	ae 01       	movw	r20, r28
    133a:	4f 5f       	subi	r20, 0xFF	; 255
    133c:	5f 4f       	sbci	r21, 0xFF	; 255
    133e:	b7 01       	movw	r22, r14
    1340:	d6 01       	movw	r26, r12
    1342:	12 96       	adiw	r26, 0x02	; 2
    1344:	8d 91       	ld	r24, X+
    1346:	9c 91       	ld	r25, X
    1348:	13 97       	sbiw	r26, 0x03	; 3
    134a:	0e 94 d7 09 	call	0x13ae	; 0x13ae <atreceive>
    134e:	18 2f       	mov	r17, r24
            // delay for polling frequency time
            atca_delay_ms(ATCA_POLLING_FREQUENCY_TIME_MSEC);
#endif
        }
        while (max_delay_count-- > 0);
        if (status != ATCA_SUCCESS)
    1350:	81 11       	cpse	r24, r1
    1352:	15 c0       	rjmp	.+42     	; 0x137e <atca_execute_command+0xd0>
        {
            break;
        }

        // Check response size
        if (rxsize < 4)
    1354:	89 81       	ldd	r24, Y+1	; 0x01
    1356:	9a 81       	ldd	r25, Y+2	; 0x02
    1358:	84 30       	cpi	r24, 0x04	; 4
    135a:	91 05       	cpc	r25, r1
    135c:	20 f4       	brcc	.+8      	; 0x1366 <atca_execute_command+0xb8>
        {
            if (rxsize > 0)
    135e:	89 2b       	or	r24, r25
    1360:	69 f4       	brne	.+26     	; 0x137c <atca_execute_command+0xce>
            {
                status = ATCA_RX_FAIL;
            }
            else
            {
                status = ATCA_RX_NO_RESPONSE;
    1362:	17 ee       	ldi	r17, 0xE7	; 231
    1364:	0c c0       	rjmp	.+24     	; 0x137e <atca_execute_command+0xd0>
            }
            break;
        }

        if ((status = atCheckCrc(packet->data)) != ATCA_SUCCESS)
    1366:	c7 01       	movw	r24, r14
    1368:	0e 94 3a 08 	call	0x1074	; 0x1074 <atCheckCrc>
    136c:	18 2f       	mov	r17, r24
    136e:	81 11       	cpse	r24, r1
    1370:	06 c0       	rjmp	.+12     	; 0x137e <atca_execute_command+0xd0>
        {
            break;
        }

        if ((status = isATCAError(packet->data)) != ATCA_SUCCESS)
    1372:	c7 01       	movw	r24, r14
    1374:	0e 94 67 08 	call	0x10ce	; 0x10ce <isATCAError>
    1378:	18 2f       	mov	r17, r24
    137a:	01 c0       	rjmp	.+2      	; 0x137e <atca_execute_command+0xd0>
        // Check response size
        if (rxsize < 4)
        {
            if (rxsize > 0)
            {
                status = ATCA_RX_FAIL;
    137c:	16 ee       	ldi	r17, 0xE6	; 230
            break;
        }
    }
    while (0);

    atidle(device->mIface);
    137e:	f6 01       	movw	r30, r12
    1380:	82 81       	ldd	r24, Z+2	; 0x02
    1382:	93 81       	ldd	r25, Z+3	; 0x03
    1384:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <atidle>
    return status;
    1388:	81 2f       	mov	r24, r17
}
    138a:	0f 90       	pop	r0
    138c:	0f 90       	pop	r0
    138e:	df 91       	pop	r29
    1390:	cf 91       	pop	r28
    1392:	1f 91       	pop	r17
    1394:	ff 90       	pop	r15
    1396:	ef 90       	pop	r14
    1398:	df 90       	pop	r13
    139a:	cf 90       	pop	r12
    139c:	bf 90       	pop	r11
    139e:	af 90       	pop	r10
    13a0:	08 95       	ret

000013a2 <atsend>:
        free(ca_iface);
        ca_iface = NULL;
    }

    return ca_iface;
}
    13a2:	dc 01       	movw	r26, r24
    13a4:	17 96       	adiw	r26, 0x07	; 7
    13a6:	ed 91       	ld	r30, X+
    13a8:	fc 91       	ld	r31, X
    13aa:	18 97       	sbiw	r26, 0x08	; 8
    13ac:	09 94       	ijmp

000013ae <atreceive>:
    13ae:	dc 01       	movw	r26, r24
    13b0:	19 96       	adiw	r26, 0x09	; 9
    13b2:	ed 91       	ld	r30, X+
    13b4:	fc 91       	ld	r31, X
    13b6:	1a 97       	sbiw	r26, 0x0a	; 10
    13b8:	09 94       	ijmp

000013ba <atwake>:
    13ba:	dc 01       	movw	r26, r24
    13bc:	1b 96       	adiw	r26, 0x0b	; 11
    13be:	ed 91       	ld	r30, X+
    13c0:	fc 91       	ld	r31, X
    13c2:	1c 97       	sbiw	r26, 0x0c	; 12
    13c4:	09 94       	ijmp

000013c6 <atidle>:
    13c6:	cf 93       	push	r28
    13c8:	dc 01       	movw	r26, r24
    13ca:	1d 96       	adiw	r26, 0x0d	; 13
    13cc:	ed 91       	ld	r30, X+
    13ce:	fc 91       	ld	r31, X
    13d0:	1e 97       	sbiw	r26, 0x0e	; 14
    13d2:	09 95       	icall
    13d4:	c8 2f       	mov	r28, r24
    13d6:	61 e0       	ldi	r22, 0x01	; 1
    13d8:	70 e0       	ldi	r23, 0x00	; 0
    13da:	80 e0       	ldi	r24, 0x00	; 0
    13dc:	90 e0       	ldi	r25, 0x00	; 0
    13de:	0e 94 7b 15 	call	0x2af6	; 0x2af6 <atca_delay_ms>
    13e2:	8c 2f       	mov	r24, r28
    13e4:	cf 91       	pop	r28
    13e6:	08 95       	ret

000013e8 <deleteATCAIface>:
    13e8:	cf 93       	push	r28
    13ea:	df 93       	push	r29
    13ec:	ec 01       	movw	r28, r24
    13ee:	e8 81       	ld	r30, Y
    13f0:	f9 81       	ldd	r31, Y+1	; 0x01
    13f2:	30 97       	sbiw	r30, 0x00	; 0
    13f4:	29 f0       	breq	.+10     	; 0x1400 <deleteATCAIface+0x18>
    13f6:	61 89       	ldd	r22, Z+17	; 0x11
    13f8:	72 89       	ldd	r23, Z+18	; 0x12
    13fa:	80 81       	ld	r24, Z
    13fc:	0e 94 cf 14 	call	0x299e	; 0x299e <hal_iface_release>
    1400:	18 82       	st	Y, r1
    1402:	19 82       	std	Y+1, r1	; 0x01
    1404:	df 91       	pop	r29
    1406:	cf 91       	pop	r28
    1408:	08 95       	ret

0000140a <_atinit>:
    140a:	0f 93       	push	r16
    140c:	1f 93       	push	r17
    140e:	cf 93       	push	r28
    1410:	df 93       	push	r29
    1412:	ec 01       	movw	r28, r24
    1414:	8b 01       	movw	r16, r22
    1416:	89 81       	ldd	r24, Y+1	; 0x01
    1418:	9a 81       	ldd	r25, Y+2	; 0x02
    141a:	0e 94 a4 14 	call	0x2948	; 0x2948 <hal_iface_init>
    141e:	f8 01       	movw	r30, r16
    1420:	80 81       	ld	r24, Z
    1422:	91 81       	ldd	r25, Z+1	; 0x01
    1424:	8b 83       	std	Y+3, r24	; 0x03
    1426:	9c 83       	std	Y+4, r25	; 0x04
    1428:	82 81       	ldd	r24, Z+2	; 0x02
    142a:	93 81       	ldd	r25, Z+3	; 0x03
    142c:	8d 83       	std	Y+5, r24	; 0x05
    142e:	9e 83       	std	Y+6, r25	; 0x06
    1430:	84 81       	ldd	r24, Z+4	; 0x04
    1432:	95 81       	ldd	r25, Z+5	; 0x05
    1434:	8f 83       	std	Y+7, r24	; 0x07
    1436:	98 87       	std	Y+8, r25	; 0x08
    1438:	86 81       	ldd	r24, Z+6	; 0x06
    143a:	97 81       	ldd	r25, Z+7	; 0x07
    143c:	89 87       	std	Y+9, r24	; 0x09
    143e:	9a 87       	std	Y+10, r25	; 0x0a
    1440:	80 85       	ldd	r24, Z+8	; 0x08
    1442:	91 85       	ldd	r25, Z+9	; 0x09
    1444:	8b 87       	std	Y+11, r24	; 0x0b
    1446:	9c 87       	std	Y+12, r25	; 0x0c
    1448:	84 85       	ldd	r24, Z+12	; 0x0c
    144a:	95 85       	ldd	r25, Z+13	; 0x0d
    144c:	8f 87       	std	Y+15, r24	; 0x0f
    144e:	98 8b       	std	Y+16, r25	; 0x10
    1450:	82 85       	ldd	r24, Z+10	; 0x0a
    1452:	93 85       	ldd	r25, Z+11	; 0x0b
    1454:	8d 87       	std	Y+13, r24	; 0x0d
    1456:	9e 87       	std	Y+14, r25	; 0x0e
    1458:	80 89       	ldd	r24, Z+16	; 0x10
    145a:	91 89       	ldd	r25, Z+17	; 0x11
    145c:	89 8b       	std	Y+17, r24	; 0x11
    145e:	9a 8b       	std	Y+18, r25	; 0x12
    1460:	80 e0       	ldi	r24, 0x00	; 0
    1462:	df 91       	pop	r29
    1464:	cf 91       	pop	r28
    1466:	1f 91       	pop	r17
    1468:	0f 91       	pop	r16
    146a:	08 95       	ret

0000146c <atinit>:
    146c:	0f 93       	push	r16
    146e:	1f 93       	push	r17
    1470:	cf 93       	push	r28
    1472:	df 93       	push	r29
    1474:	cd b7       	in	r28, 0x3d	; 61
    1476:	de b7       	in	r29, 0x3e	; 62
    1478:	62 97       	sbiw	r28, 0x12	; 18
    147a:	cd bf       	out	0x3d, r28	; 61
    147c:	de bf       	out	0x3e, r29	; 62
    147e:	8c 01       	movw	r16, r24
    1480:	be 01       	movw	r22, r28
    1482:	6f 5f       	subi	r22, 0xFF	; 255
    1484:	7f 4f       	sbci	r23, 0xFF	; 255
    1486:	0e 94 05 0a 	call	0x140a	; 0x140a <_atinit>
    148a:	d8 01       	movw	r26, r16
    148c:	11 96       	adiw	r26, 0x01	; 1
    148e:	6d 91       	ld	r22, X+
    1490:	7c 91       	ld	r23, X
    1492:	12 97       	sbiw	r26, 0x02	; 2
    1494:	13 96       	adiw	r26, 0x03	; 3
    1496:	ed 91       	ld	r30, X+
    1498:	fc 91       	ld	r31, X
    149a:	14 97       	sbiw	r26, 0x04	; 4
    149c:	ce 01       	movw	r24, r28
    149e:	01 96       	adiw	r24, 0x01	; 1
    14a0:	09 95       	icall
    14a2:	81 11       	cpse	r24, r1
    14a4:	0a c0       	rjmp	.+20     	; 0x14ba <atinit+0x4e>
    14a6:	89 89       	ldd	r24, Y+17	; 0x11
    14a8:	9a 89       	ldd	r25, Y+18	; 0x12
    14aa:	f8 01       	movw	r30, r16
    14ac:	81 8b       	std	Z+17, r24	; 0x11
    14ae:	92 8b       	std	Z+18, r25	; 0x12
    14b0:	05 80       	ldd	r0, Z+5	; 0x05
    14b2:	f6 81       	ldd	r31, Z+6	; 0x06
    14b4:	e0 2d       	mov	r30, r0
    14b6:	c8 01       	movw	r24, r16
    14b8:	09 95       	icall
    14ba:	62 96       	adiw	r28, 0x12	; 18
    14bc:	cd bf       	out	0x3d, r28	; 61
    14be:	de bf       	out	0x3e, r29	; 62
    14c0:	df 91       	pop	r29
    14c2:	cf 91       	pop	r28
    14c4:	1f 91       	pop	r17
    14c6:	0f 91       	pop	r16
    14c8:	08 95       	ret

000014ca <initATCAIface>:
 * \param[in] ca_iface  Interface structure to initialize. This pointer will
 *                      be returned on success.
 * \return Initialized ca_iface object on success. NULL on failure.
 */
ATCAIface initATCAIface(ATCAIfaceCfg *cfg, ATCAIface ca_iface)  // constructor
{
    14ca:	cf 93       	push	r28
    14cc:	df 93       	push	r29
	if ((ca_iface == NULL) || (cfg == NULL))
    14ce:	61 15       	cp	r22, r1
    14d0:	71 05       	cpc	r23, r1
    14d2:	19 f4       	brne	.+6      	; 0x14da <initATCAIface+0x10>
	{
		return NULL;
    14d4:	80 e0       	ldi	r24, 0x00	; 0
    14d6:	90 e0       	ldi	r25, 0x00	; 0
    14d8:	0e c0       	rjmp	.+28     	; 0x14f6 <initATCAIface+0x2c>
 *                      be returned on success.
 * \return Initialized ca_iface object on success. NULL on failure.
 */
ATCAIface initATCAIface(ATCAIfaceCfg *cfg, ATCAIface ca_iface)  // constructor
{
	if ((ca_iface == NULL) || (cfg == NULL))
    14da:	00 97       	sbiw	r24, 0x00	; 0
    14dc:	d9 f3       	breq	.-10     	; 0x14d4 <initATCAIface+0xa>
    14de:	eb 01       	movw	r28, r22
    14e0:	fc 01       	movw	r30, r24
	{
		return NULL;
	}
	
    ca_iface->mType = cfg->iface_type;
    14e2:	20 81       	ld	r18, Z
    14e4:	28 83       	st	Y, r18
    ca_iface->mIfaceCFG = cfg;
    14e6:	89 83       	std	Y+1, r24	; 0x01
    14e8:	9a 83       	std	Y+2, r25	; 0x02

    if (atinit(ca_iface) != ATCA_SUCCESS)
    14ea:	cb 01       	movw	r24, r22
    14ec:	0e 94 36 0a 	call	0x146c	; 0x146c <atinit>
    14f0:	81 11       	cpse	r24, r1
    14f2:	f0 cf       	rjmp	.-32     	; 0x14d4 <initATCAIface+0xa>
    14f4:	ce 01       	movw	r24, r28
    {
        return NULL;
    }

    return ca_iface;
}
    14f6:	df 91       	pop	r29
    14f8:	cf 91       	pop	r28
    14fa:	08 95       	ret

000014fc <atcab_init>:
/** \brief common cleanup code which idles the device after any operation
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS _atcab_exit(void)
{
    return atcab_idle();
    14fc:	0f 93       	push	r16
    14fe:	1f 93       	push	r17
    1500:	cf 93       	push	r28
    1502:	df 93       	push	r29
    1504:	60 91 0a 2a 	lds	r22, 0x2A0A	; 0x802a0a <_gDevice>
    1508:	70 91 0b 2a 	lds	r23, 0x2A0B	; 0x802a0b <_gDevice+0x1>
    150c:	61 15       	cp	r22, r1
    150e:	71 05       	cpc	r23, r1
    1510:	11 f4       	brne	.+4      	; 0x1516 <atcab_init+0x1a>
    1512:	81 ee       	ldi	r24, 0xE1	; 225
    1514:	2e c0       	rjmp	.+92     	; 0x1572 <atcab_init+0x76>
    1516:	ec 01       	movw	r28, r24
    1518:	0e 94 b9 08 	call	0x1172	; 0x1172 <initATCADevice>
    151c:	80 93 0a 2a 	sts	0x2A0A, r24	; 0x802a0a <_gDevice>
    1520:	90 93 0b 2a 	sts	0x2A0B, r25	; 0x802a0b <_gDevice+0x1>
    1524:	00 97       	sbiw	r24, 0x00	; 0
    1526:	a9 f3       	breq	.-22     	; 0x1512 <atcab_init+0x16>
    1528:	fc 01       	movw	r30, r24
    152a:	22 81       	ldd	r18, Z+2	; 0x02
    152c:	33 81       	ldd	r19, Z+3	; 0x03
    152e:	23 2b       	or	r18, r19
    1530:	81 f3       	breq	.-32     	; 0x1512 <atcab_init+0x16>
    1532:	20 81       	ld	r18, Z
    1534:	31 81       	ldd	r19, Z+1	; 0x01
    1536:	21 15       	cp	r18, r1
    1538:	31 05       	cpc	r19, r1
    153a:	59 f3       	breq	.-42     	; 0x1512 <atcab_init+0x16>
    153c:	89 81       	ldd	r24, Y+1	; 0x01
    153e:	83 30       	cpi	r24, 0x03	; 3
    1540:	b9 f4       	brne	.+46     	; 0x1570 <atcab_init+0x74>
    1542:	2f 5f       	subi	r18, 0xFF	; 255
    1544:	3f 4f       	sbci	r19, 0xFF	; 255
    1546:	01 e0       	ldi	r16, 0x01	; 1
    1548:	10 e0       	ldi	r17, 0x00	; 0
    154a:	43 e1       	ldi	r20, 0x13	; 19
    154c:	50 e0       	ldi	r21, 0x00	; 0
    154e:	60 e0       	ldi	r22, 0x00	; 0
    1550:	70 e0       	ldi	r23, 0x00	; 0
    1552:	80 e0       	ldi	r24, 0x00	; 0
    1554:	0e 94 56 0d 	call	0x1aac	; 0x1aac <atcab_read_bytes_zone>
    1558:	81 11       	cpse	r24, r1
    155a:	0b c0       	rjmp	.+22     	; 0x1572 <atcab_init+0x76>
    155c:	e0 91 0a 2a 	lds	r30, 0x2A0A	; 0x802a0a <_gDevice>
    1560:	f0 91 0b 2a 	lds	r31, 0x2A0B	; 0x802a0b <_gDevice+0x1>
    1564:	01 90       	ld	r0, Z+
    1566:	f0 81       	ld	r31, Z
    1568:	e0 2d       	mov	r30, r0
    156a:	81 81       	ldd	r24, Z+1	; 0x01
    156c:	88 7f       	andi	r24, 0xF8	; 248
    156e:	81 83       	std	Z+1, r24	; 0x01
    1570:	80 e0       	ldi	r24, 0x00	; 0
    1572:	df 91       	pop	r29
    1574:	cf 91       	pop	r28
    1576:	1f 91       	pop	r17
    1578:	0f 91       	pop	r16
    157a:	08 95       	ret

0000157c <atcab_release>:
    157c:	8a e0       	ldi	r24, 0x0A	; 10
    157e:	9a e2       	ldi	r25, 0x2A	; 42
    1580:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <deleteATCADevice>
    1584:	80 e0       	ldi	r24, 0x00	; 0
    1586:	08 95       	ret

00001588 <atcab_init_device>:
    1588:	cf 93       	push	r28
    158a:	df 93       	push	r29
    158c:	00 97       	sbiw	r24, 0x00	; 0
    158e:	d1 f0       	breq	.+52     	; 0x15c4 <atcab_init_device+0x3c>
    1590:	ec 01       	movw	r28, r24
    1592:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <atGetCommands>
    1596:	89 2b       	or	r24, r25
    1598:	11 f4       	brne	.+4      	; 0x159e <atcab_init_device+0x16>
    159a:	81 ee       	ldi	r24, 0xE1	; 225
    159c:	14 c0       	rjmp	.+40     	; 0x15c6 <atcab_init_device+0x3e>
    159e:	ce 01       	movw	r24, r28
    15a0:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <atGetIFace>
    15a4:	89 2b       	or	r24, r25
    15a6:	c9 f3       	breq	.-14     	; 0x159a <atcab_init_device+0x12>
    15a8:	80 91 0a 2a 	lds	r24, 0x2A0A	; 0x802a0a <_gDevice>
    15ac:	90 91 0b 2a 	lds	r25, 0x2A0B	; 0x802a0b <_gDevice+0x1>
    15b0:	89 2b       	or	r24, r25
    15b2:	11 f0       	breq	.+4      	; 0x15b8 <atcab_init_device+0x30>
    15b4:	0e 94 be 0a 	call	0x157c	; 0x157c <atcab_release>
    15b8:	c0 93 0a 2a 	sts	0x2A0A, r28	; 0x802a0a <_gDevice>
    15bc:	d0 93 0b 2a 	sts	0x2A0B, r29	; 0x802a0b <_gDevice+0x1>
    15c0:	80 e0       	ldi	r24, 0x00	; 0
    15c2:	01 c0       	rjmp	.+2      	; 0x15c6 <atcab_init_device+0x3e>
    15c4:	82 ee       	ldi	r24, 0xE2	; 226
    15c6:	df 91       	pop	r29
    15c8:	cf 91       	pop	r28
    15ca:	08 95       	ret

000015cc <atcab_get_addr>:
 *  \param[in] offset Offset Number within the block of data or configuration or OTP zone.
 *  \param[out] addr  Pointer to the address of data or configuration or OTP zone.
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_get_addr(uint8_t zone, uint16_t slot, uint8_t block, uint8_t offset, uint16_t* addr)
{
    15cc:	0f 93       	push	r16
    15ce:	1f 93       	push	r17
    15d0:	f8 01       	movw	r30, r16
    ATCA_STATUS status = ATCA_SUCCESS;
    uint8_t mem_zone = zone & 0x03;

    if (addr == NULL)
    15d2:	30 97       	sbiw	r30, 0x00	; 0
    15d4:	19 f1       	breq	.+70     	; 0x161c <atcab_get_addr+0x50>
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_get_addr(uint8_t zone, uint16_t slot, uint8_t block, uint8_t offset, uint16_t* addr)
{
    ATCA_STATUS status = ATCA_SUCCESS;
    uint8_t mem_zone = zone & 0x03;
    15d6:	83 70       	andi	r24, 0x03	; 3

    if (addr == NULL)
    {
        return ATCA_BAD_PARAM;
    }
    if ((mem_zone != ATCA_ZONE_CONFIG) && (mem_zone != ATCA_ZONE_DATA) && (mem_zone != ATCA_ZONE_OTP))
    15d8:	83 30       	cpi	r24, 0x03	; 3
    15da:	01 f1       	breq	.+64     	; 0x161c <atcab_get_addr+0x50>
        return ATCA_BAD_PARAM;
    }
    do
    {
        // Initialize the addr to 00
        *addr = 0;
    15dc:	10 82       	st	Z, r1
    15de:	11 82       	std	Z+1, r1	; 0x01
        // Mask the offset
        offset = offset & (uint8_t)0x07;
    15e0:	92 2f       	mov	r25, r18
    15e2:	97 70       	andi	r25, 0x07	; 7
    15e4:	50 e0       	ldi	r21, 0x00	; 0
    15e6:	29 2f       	mov	r18, r25
    15e8:	30 e0       	ldi	r19, 0x00	; 0
        if ((mem_zone == ATCA_ZONE_CONFIG) || (mem_zone == ATCA_ZONE_OTP))
    15ea:	82 30       	cpi	r24, 0x02	; 2
    15ec:	41 f0       	breq	.+16     	; 0x15fe <atcab_get_addr+0x32>
        {
            *addr = block << 3;
            *addr |= offset;
    15ee:	63 e0       	ldi	r22, 0x03	; 3
    15f0:	44 0f       	add	r20, r20
    15f2:	55 1f       	adc	r21, r21
    15f4:	6a 95       	dec	r22
    15f6:	e1 f7       	brne	.-8      	; 0x15f0 <atcab_get_addr+0x24>
    15f8:	24 2b       	or	r18, r20
    15fa:	35 2b       	or	r19, r21
    15fc:	0b c0       	rjmp	.+22     	; 0x1614 <atcab_get_addr+0x48>
        }
        else     // ATCA_ZONE_DATA
        {
            *addr = slot << 3;
            *addr  |= offset;
            *addr |= block << 8;
    15fe:	54 2f       	mov	r21, r20
    1600:	44 27       	eor	r20, r20
    1602:	24 2b       	or	r18, r20
    1604:	35 2b       	or	r19, r21
    1606:	93 e0       	ldi	r25, 0x03	; 3
    1608:	66 0f       	add	r22, r22
    160a:	77 1f       	adc	r23, r23
    160c:	9a 95       	dec	r25
    160e:	e1 f7       	brne	.-8      	; 0x1608 <atcab_get_addr+0x3c>
    1610:	26 2b       	or	r18, r22
    1612:	37 2b       	or	r19, r23
    1614:	20 83       	st	Z, r18
    1616:	31 83       	std	Z+1, r19	; 0x01
        }
    }
    while (0);

    return status;
    1618:	80 e0       	ldi	r24, 0x00	; 0
    161a:	01 c0       	rjmp	.+2      	; 0x161e <atcab_get_addr+0x52>
    ATCA_STATUS status = ATCA_SUCCESS;
    uint8_t mem_zone = zone & 0x03;

    if (addr == NULL)
    {
        return ATCA_BAD_PARAM;
    161c:	82 ee       	ldi	r24, 0xE2	; 226
        }
    }
    while (0);

    return status;
}
    161e:	1f 91       	pop	r17
    1620:	0f 91       	pop	r16
    1622:	08 95       	ret

00001624 <atcab_get_zone_size>:
 * \param[out] size  Zone size is returned here.
 *
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_get_zone_size(uint8_t zone, uint16_t slot, size_t* size)
{
    1624:	fa 01       	movw	r30, r20
    ATCA_STATUS status = ATCA_SUCCESS;

    if (size == NULL)
    1626:	30 97       	sbiw	r30, 0x00	; 0
    1628:	e1 f1       	breq	.+120    	; 0x16a2 <atcab_get_zone_size+0x7e>
    {
        return ATCA_BAD_PARAM;
    }

    if (_gDevice->mIface->mIfaceCFG->devtype == ATSHA204A)
    162a:	a0 91 0a 2a 	lds	r26, 0x2A0A	; 0x802a0a <_gDevice>
    162e:	b0 91 0b 2a 	lds	r27, 0x2A0B	; 0x802a0b <_gDevice+0x1>
    1632:	12 96       	adiw	r26, 0x02	; 2
    1634:	0d 90       	ld	r0, X+
    1636:	bc 91       	ld	r27, X
    1638:	a0 2d       	mov	r26, r0
    163a:	11 96       	adiw	r26, 0x01	; 1
    163c:	0d 90       	ld	r0, X+
    163e:	bc 91       	ld	r27, X
    1640:	a0 2d       	mov	r26, r0
    1642:	11 96       	adiw	r26, 0x01	; 1
    1644:	9c 91       	ld	r25, X
    1646:	91 11       	cpse	r25, r1
    1648:	0b c0       	rjmp	.+22     	; 0x1660 <atcab_get_zone_size+0x3c>
    {
        switch (zone)
    164a:	81 30       	cpi	r24, 0x01	; 1
    164c:	91 f0       	breq	.+36     	; 0x1672 <atcab_get_zone_size+0x4e>
    164e:	28 f0       	brcs	.+10     	; 0x165a <atcab_get_zone_size+0x36>
    1650:	82 30       	cpi	r24, 0x02	; 2
    1652:	39 f5       	brne	.+78     	; 0x16a2 <atcab_get_zone_size+0x7e>
        {
        case ATCA_ZONE_CONFIG: *size = 88; break;
        case ATCA_ZONE_OTP:    *size = 64; break;
        case ATCA_ZONE_DATA:   *size = 32; break;
    1654:	80 e2       	ldi	r24, 0x20	; 32
    1656:	90 e0       	ldi	r25, 0x00	; 0
    1658:	1a c0       	rjmp	.+52     	; 0x168e <atcab_get_zone_size+0x6a>

    if (_gDevice->mIface->mIfaceCFG->devtype == ATSHA204A)
    {
        switch (zone)
        {
        case ATCA_ZONE_CONFIG: *size = 88; break;
    165a:	88 e5       	ldi	r24, 0x58	; 88
    165c:	90 e0       	ldi	r25, 0x00	; 0
    165e:	17 c0       	rjmp	.+46     	; 0x168e <atcab_get_zone_size+0x6a>
        default: status = ATCA_BAD_PARAM; break;
        }
    }
    else
    {
        switch (zone)
    1660:	81 30       	cpi	r24, 0x01	; 1
    1662:	39 f0       	breq	.+14     	; 0x1672 <atcab_get_zone_size+0x4e>
    1664:	18 f0       	brcs	.+6      	; 0x166c <atcab_get_zone_size+0x48>
    1666:	82 30       	cpi	r24, 0x02	; 2
    1668:	39 f0       	breq	.+14     	; 0x1678 <atcab_get_zone_size+0x54>
    166a:	1b c0       	rjmp	.+54     	; 0x16a2 <atcab_get_zone_size+0x7e>
        {
        case ATCA_ZONE_CONFIG: *size = 128; break;
    166c:	80 e8       	ldi	r24, 0x80	; 128
    166e:	90 e0       	ldi	r25, 0x00	; 0
    1670:	0e c0       	rjmp	.+28     	; 0x168e <atcab_get_zone_size+0x6a>
        case ATCA_ZONE_OTP:    *size = 64; break;
    1672:	80 e4       	ldi	r24, 0x40	; 64
    1674:	90 e0       	ldi	r25, 0x00	; 0
    1676:	0b c0       	rjmp	.+22     	; 0x168e <atcab_get_zone_size+0x6a>
        case ATCA_ZONE_DATA:
            if (slot < 8)
    1678:	68 30       	cpi	r22, 0x08	; 8
    167a:	71 05       	cpc	r23, r1
    167c:	18 f4       	brcc	.+6      	; 0x1684 <atcab_get_zone_size+0x60>
            {
                *size = 36;
    167e:	84 e2       	ldi	r24, 0x24	; 36
    1680:	90 e0       	ldi	r25, 0x00	; 0
    1682:	05 c0       	rjmp	.+10     	; 0x168e <atcab_get_zone_size+0x6a>
            }
            else if (slot == 8)
    1684:	68 30       	cpi	r22, 0x08	; 8
    1686:	71 05       	cpc	r23, r1
    1688:	31 f4       	brne	.+12     	; 0x1696 <atcab_get_zone_size+0x72>
            {
                *size = 416;
    168a:	80 ea       	ldi	r24, 0xA0	; 160
    168c:	91 e0       	ldi	r25, 0x01	; 1
    168e:	80 83       	st	Z, r24
    1690:	91 83       	std	Z+1, r25	; 0x01
 *
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_get_zone_size(uint8_t zone, uint16_t slot, size_t* size)
{
    ATCA_STATUS status = ATCA_SUCCESS;
    1692:	80 e0       	ldi	r24, 0x00	; 0
    1694:	08 95       	ret
            }
            else if (slot == 8)
            {
                *size = 416;
            }
            else if (slot < 16)
    1696:	60 31       	cpi	r22, 0x10	; 16
    1698:	71 05       	cpc	r23, r1
    169a:	18 f4       	brcc	.+6      	; 0x16a2 <atcab_get_zone_size+0x7e>
            {
                *size = 72;
    169c:	88 e4       	ldi	r24, 0x48	; 72
    169e:	90 e0       	ldi	r25, 0x00	; 0
    16a0:	f6 cf       	rjmp	.-20     	; 0x168e <atcab_get_zone_size+0x6a>
{
    ATCA_STATUS status = ATCA_SUCCESS;

    if (size == NULL)
    {
        return ATCA_BAD_PARAM;
    16a2:	82 ee       	ldi	r24, 0xE2	; 226
        default: status = ATCA_BAD_PARAM; break;
        }
    }

    return status;
}
    16a4:	08 95       	ret

000016a6 <atcab_genkey_base>:
 *
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_genkey(uint16_t key_id, uint8_t *public_key)
{
    return atcab_genkey_base(GENKEY_MODE_PRIVATE, key_id, NULL, public_key);
    16a6:	ef 92       	push	r14
    16a8:	ff 92       	push	r15
    16aa:	1f 93       	push	r17
    16ac:	cf 93       	push	r28
    16ae:	df 93       	push	r29
    16b0:	cd b7       	in	r28, 0x3d	; 61
    16b2:	de b7       	in	r29, 0x3e	; 62
    16b4:	c7 5c       	subi	r28, 0xC7	; 199
    16b6:	d1 09       	sbc	r29, r1
    16b8:	cd bf       	out	0x3d, r28	; 61
    16ba:	de bf       	out	0x3e, r29	; 62
    16bc:	79 01       	movw	r14, r18
    16be:	e0 91 0a 2a 	lds	r30, 0x2A0A	; 0x802a0a <_gDevice>
    16c2:	f0 91 0b 2a 	lds	r31, 0x2A0B	; 0x802a0b <_gDevice+0x1>
    16c6:	20 81       	ld	r18, Z
    16c8:	31 81       	ldd	r19, Z+1	; 0x01
    16ca:	8c 83       	std	Y+4, r24	; 0x04
    16cc:	6d 83       	std	Y+5, r22	; 0x05
    16ce:	7e 83       	std	Y+6, r23	; 0x06
    16d0:	41 15       	cp	r20, r1
    16d2:	51 05       	cpc	r21, r1
    16d4:	41 f0       	breq	.+16     	; 0x16e6 <atcab_genkey_base+0x40>
    16d6:	83 e0       	ldi	r24, 0x03	; 3
    16d8:	fa 01       	movw	r30, r20
    16da:	de 01       	movw	r26, r28
    16dc:	17 96       	adiw	r26, 0x07	; 7
    16de:	01 90       	ld	r0, Z+
    16e0:	0d 92       	st	X+, r0
    16e2:	8a 95       	dec	r24
    16e4:	e1 f7       	brne	.-8      	; 0x16de <atcab_genkey_base+0x38>
    16e6:	be 01       	movw	r22, r28
    16e8:	6f 5f       	subi	r22, 0xFF	; 255
    16ea:	7f 4f       	sbci	r23, 0xFF	; 255
    16ec:	c9 01       	movw	r24, r18
    16ee:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <atGenKey>
    16f2:	18 2f       	mov	r17, r24
    16f4:	81 11       	cpse	r24, r1
    16f6:	1a c0       	rjmp	.+52     	; 0x172c <atcab_genkey_base+0x86>
    16f8:	60 91 0a 2a 	lds	r22, 0x2A0A	; 0x802a0a <_gDevice>
    16fc:	70 91 0b 2a 	lds	r23, 0x2A0B	; 0x802a0b <_gDevice+0x1>
    1700:	ce 01       	movw	r24, r28
    1702:	01 96       	adiw	r24, 0x01	; 1
    1704:	0e 94 57 09 	call	0x12ae	; 0x12ae <atca_execute_command>
    1708:	18 2f       	mov	r17, r24
    170a:	81 11       	cpse	r24, r1
    170c:	0f c0       	rjmp	.+30     	; 0x172c <atcab_genkey_base+0x86>
    170e:	e1 14       	cp	r14, r1
    1710:	f1 04       	cpc	r15, r1
    1712:	61 f0       	breq	.+24     	; 0x172c <atcab_genkey_base+0x86>
    1714:	4f 81       	ldd	r20, Y+7	; 0x07
    1716:	45 30       	cpi	r20, 0x05	; 5
    1718:	48 f0       	brcs	.+18     	; 0x172c <atcab_genkey_base+0x86>
    171a:	50 e0       	ldi	r21, 0x00	; 0
    171c:	43 50       	subi	r20, 0x03	; 3
    171e:	51 09       	sbc	r21, r1
    1720:	be 01       	movw	r22, r28
    1722:	68 5f       	subi	r22, 0xF8	; 248
    1724:	7f 4f       	sbci	r23, 0xFF	; 255
    1726:	c7 01       	movw	r24, r14
    1728:	0e 94 72 2e 	call	0x5ce4	; 0x5ce4 <memcpy>
    172c:	81 2f       	mov	r24, r17
    172e:	c9 53       	subi	r28, 0x39	; 57
    1730:	df 4f       	sbci	r29, 0xFF	; 255
    1732:	cd bf       	out	0x3d, r28	; 61
    1734:	de bf       	out	0x3e, r29	; 62
    1736:	df 91       	pop	r29
    1738:	cf 91       	pop	r28
    173a:	1f 91       	pop	r17
    173c:	ff 90       	pop	r15
    173e:	ef 90       	pop	r14
    1740:	08 95       	ret

00001742 <atcab_get_pubkey>:
 *                          isn't required.
 *
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_get_pubkey(uint16_t key_id, uint8_t *public_key)
{
    1742:	9b 01       	movw	r18, r22
    return atcab_genkey_base(GENKEY_MODE_PUBLIC, key_id, NULL, public_key);
    1744:	40 e0       	ldi	r20, 0x00	; 0
    1746:	50 e0       	ldi	r21, 0x00	; 0
    1748:	bc 01       	movw	r22, r24
    174a:	80 e0       	ldi	r24, 0x00	; 0
    174c:	0c 94 53 0b 	jmp	0x16a6	; 0x16a6 <atcab_genkey_base>

00001750 <atcab_nonce_base>:
 *                          needed.
 *
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_nonce_base(uint8_t mode, uint16_t zero, const uint8_t *num_in, uint8_t* rand_out)
{
    1750:	0f 93       	push	r16
    1752:	1f 93       	push	r17
    1754:	cf 93       	push	r28
    1756:	df 93       	push	r29
    1758:	cd b7       	in	r28, 0x3d	; 61
    175a:	de b7       	in	r29, 0x3e	; 62
    175c:	c7 5c       	subi	r28, 0xC7	; 199
    175e:	d1 09       	sbc	r29, r1
    1760:	cd bf       	out	0x3d, r28	; 61
    1762:	de bf       	out	0x3e, r29	; 62
    1764:	fa 01       	movw	r30, r20
    ATCAPacket packet;
    ATCACommand ca_cmd = _gDevice->mCommands;
    1766:	a0 91 0a 2a 	lds	r26, 0x2A0A	; 0x802a0a <_gDevice>
    176a:	b0 91 0b 2a 	lds	r27, 0x2A0B	; 0x802a0b <_gDevice+0x1>
    176e:	4d 91       	ld	r20, X+
    1770:	5c 91       	ld	r21, X
    ATCA_STATUS status = ATCA_GEN_FAIL;
    uint8_t nonce_mode = mode & NONCE_MODE_MASK;
    1772:	98 2f       	mov	r25, r24
    1774:	93 70       	andi	r25, 0x03	; 3

    do
    {
        // build a nonce command
        packet.param1 = mode;
    1776:	8c 83       	std	Y+4, r24	; 0x04
        packet.param2 = zero;
    1778:	6d 83       	std	Y+5, r22	; 0x05
    177a:	7e 83       	std	Y+6, r23	; 0x06

        // Copy the right amount of NumIn data
        if ((nonce_mode == NONCE_MODE_SEED_UPDATE || nonce_mode == NONCE_MODE_NO_SEED_UPDATE))
    177c:	92 30       	cpi	r25, 0x02	; 2
    177e:	10 f4       	brcc	.+4      	; 0x1784 <atcab_nonce_base+0x34>
        {
            memcpy(packet.data, num_in, NONCE_NUMIN_SIZE);
    1780:	94 e1       	ldi	r25, 0x14	; 20
    1782:	07 c0       	rjmp	.+14     	; 0x1792 <atcab_nonce_base+0x42>
        }
        else if (nonce_mode == NONCE_MODE_PASSTHROUGH)
    1784:	93 30       	cpi	r25, 0x03	; 3
    1786:	69 f5       	brne	.+90     	; 0x17e2 <atcab_nonce_base+0x92>
        {
            if ((mode & NONCE_MODE_INPUT_LEN_MASK) == NONCE_MODE_INPUT_LEN_64)
    1788:	85 ff       	sbrs	r24, 5
    178a:	02 c0       	rjmp	.+4      	; 0x1790 <atcab_nonce_base+0x40>
            {
                memcpy(packet.data, num_in, 64);
    178c:	90 e4       	ldi	r25, 0x40	; 64
    178e:	01 c0       	rjmp	.+2      	; 0x1792 <atcab_nonce_base+0x42>
            }
            else
            {
                memcpy(packet.data, num_in, 32);
    1790:	90 e2       	ldi	r25, 0x20	; 32
    1792:	de 01       	movw	r26, r28
    1794:	17 96       	adiw	r26, 0x07	; 7
    1796:	01 90       	ld	r0, Z+
    1798:	0d 92       	st	X+, r0
    179a:	9a 95       	dec	r25
    179c:	e1 f7       	brne	.-8      	; 0x1796 <atcab_nonce_base+0x46>
    179e:	89 01       	movw	r16, r18
        else
        {
            return ATCA_BAD_PARAM;
        }

        if ((status = atNonce(ca_cmd, &packet)) != ATCA_SUCCESS)
    17a0:	be 01       	movw	r22, r28
    17a2:	6f 5f       	subi	r22, 0xFF	; 255
    17a4:	7f 4f       	sbci	r23, 0xFF	; 255
    17a6:	ca 01       	movw	r24, r20
    17a8:	0e 94 03 08 	call	0x1006	; 0x1006 <atNonce>
    17ac:	81 11       	cpse	r24, r1
    17ae:	1c c0       	rjmp	.+56     	; 0x17e8 <atcab_nonce_base+0x98>
        {
            break;
        }

        if ((status = atca_execute_command(&packet, _gDevice)) != ATCA_SUCCESS)
    17b0:	60 91 0a 2a 	lds	r22, 0x2A0A	; 0x802a0a <_gDevice>
    17b4:	70 91 0b 2a 	lds	r23, 0x2A0B	; 0x802a0b <_gDevice+0x1>
    17b8:	ce 01       	movw	r24, r28
    17ba:	01 96       	adiw	r24, 0x01	; 1
    17bc:	0e 94 57 09 	call	0x12ae	; 0x12ae <atca_execute_command>
    17c0:	81 11       	cpse	r24, r1
    17c2:	12 c0       	rjmp	.+36     	; 0x17e8 <atcab_nonce_base+0x98>
        {
            break;
        }

        if ((rand_out != NULL) && (packet.data[ATCA_COUNT_IDX] >= 35))
    17c4:	01 15       	cp	r16, r1
    17c6:	11 05       	cpc	r17, r1
    17c8:	71 f0       	breq	.+28     	; 0x17e6 <atcab_nonce_base+0x96>
    17ca:	8f 81       	ldd	r24, Y+7	; 0x07
    17cc:	83 32       	cpi	r24, 0x23	; 35
    17ce:	58 f0       	brcs	.+22     	; 0x17e6 <atcab_nonce_base+0x96>
        {
            memcpy(&rand_out[0], &packet.data[ATCA_RSP_DATA_IDX], 32);
    17d0:	80 e2       	ldi	r24, 0x20	; 32
    17d2:	fe 01       	movw	r30, r28
    17d4:	38 96       	adiw	r30, 0x08	; 8
    17d6:	d8 01       	movw	r26, r16
    17d8:	01 90       	ld	r0, Z+
    17da:	0d 92       	st	X+, r0
    17dc:	8a 95       	dec	r24
    17de:	e1 f7       	brne	.-8      	; 0x17d8 <atcab_nonce_base+0x88>
    17e0:	02 c0       	rjmp	.+4      	; 0x17e6 <atcab_nonce_base+0x96>
                memcpy(packet.data, num_in, 32);
            }
        }
        else
        {
            return ATCA_BAD_PARAM;
    17e2:	82 ee       	ldi	r24, 0xE2	; 226
    17e4:	01 c0       	rjmp	.+2      	; 0x17e8 <atcab_nonce_base+0x98>
    17e6:	80 e0       	ldi	r24, 0x00	; 0

    }
    while (0);

    return status;
}
    17e8:	c9 53       	subi	r28, 0x39	; 57
    17ea:	df 4f       	sbci	r29, 0xFF	; 255
    17ec:	cd bf       	out	0x3d, r28	; 61
    17ee:	de bf       	out	0x3e, r29	; 62
    17f0:	df 91       	pop	r29
    17f2:	cf 91       	pop	r28
    17f4:	1f 91       	pop	r17
    17f6:	0f 91       	pop	r16
    17f8:	08 95       	ret

000017fa <atcab_nonce_load>:
 *
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_nonce_load(uint8_t target, const uint8_t *num_in, uint16_t num_in_size)
{
    uint8_t mode = NONCE_MODE_PASSTHROUGH | (NONCE_MODE_TARGET_MASK & target);
    17fa:	80 7c       	andi	r24, 0xC0	; 192

    if (num_in_size == 32)
    17fc:	40 32       	cpi	r20, 0x20	; 32
    17fe:	51 05       	cpc	r21, r1
    1800:	11 f4       	brne	.+4      	; 0x1806 <atcab_nonce_load+0xc>
 *
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_nonce_load(uint8_t target, const uint8_t *num_in, uint16_t num_in_size)
{
    uint8_t mode = NONCE_MODE_PASSTHROUGH | (NONCE_MODE_TARGET_MASK & target);
    1802:	83 60       	ori	r24, 0x03	; 3
    1804:	04 c0       	rjmp	.+8      	; 0x180e <atcab_nonce_load+0x14>

    if (num_in_size == 32)
    {
        mode |= NONCE_MODE_INPUT_LEN_32;
    }
    else if (num_in_size == 64)
    1806:	40 34       	cpi	r20, 0x40	; 64
    1808:	51 05       	cpc	r21, r1
    180a:	41 f4       	brne	.+16     	; 0x181c <atcab_nonce_load+0x22>
    {
        mode |= NONCE_MODE_INPUT_LEN_64;
    180c:	83 62       	ori	r24, 0x23	; 35
    else
    {
        return ATCA_BAD_PARAM;
    }

    return atcab_nonce_base(mode, 0, num_in, NULL);
    180e:	20 e0       	ldi	r18, 0x00	; 0
    1810:	30 e0       	ldi	r19, 0x00	; 0
    1812:	ab 01       	movw	r20, r22
    1814:	60 e0       	ldi	r22, 0x00	; 0
    1816:	70 e0       	ldi	r23, 0x00	; 0
    1818:	0c 94 a8 0b 	jmp	0x1750	; 0x1750 <atcab_nonce_base>
}
    181c:	82 ee       	ldi	r24, 0xE2	; 226
    181e:	08 95       	ret

00001820 <atcab_random>:
 * \param[out] rand_out  32 bytes of random data is returned here.
 *
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_random(uint8_t *rand_out)
{
    1820:	0f 93       	push	r16
    1822:	1f 93       	push	r17
    1824:	cf 93       	push	r28
    1826:	df 93       	push	r29
    1828:	cd b7       	in	r28, 0x3d	; 61
    182a:	de b7       	in	r29, 0x3e	; 62
    182c:	c7 5c       	subi	r28, 0xC7	; 199
    182e:	d1 09       	sbc	r29, r1
    1830:	cd bf       	out	0x3d, r28	; 61
    1832:	de bf       	out	0x3e, r29	; 62
    1834:	8c 01       	movw	r16, r24
    ATCAPacket packet;
    ATCACommand ca_cmd = _gDevice->mCommands;
    1836:	e0 91 0a 2a 	lds	r30, 0x2A0A	; 0x802a0a <_gDevice>
    183a:	f0 91 0b 2a 	lds	r31, 0x2A0B	; 0x802a0b <_gDevice+0x1>
    183e:	80 81       	ld	r24, Z
    1840:	91 81       	ldd	r25, Z+1	; 0x01
    ATCA_STATUS status = ATCA_GEN_FAIL;

    do
    {
        // build an random command
        packet.param1 = RANDOM_SEED_UPDATE;
    1842:	1c 82       	std	Y+4, r1	; 0x04
        packet.param2 = 0x0000;
    1844:	1d 82       	std	Y+5, r1	; 0x05
    1846:	1e 82       	std	Y+6, r1	; 0x06

        if ((status = atRandom(ca_cmd, &packet)) != ATCA_SUCCESS)
    1848:	be 01       	movw	r22, r28
    184a:	6f 5f       	subi	r22, 0xFF	; 255
    184c:	7f 4f       	sbci	r23, 0xFF	; 255
    184e:	0e 94 1c 08 	call	0x1038	; 0x1038 <atRandom>
    1852:	81 11       	cpse	r24, r1
    1854:	1a c0       	rjmp	.+52     	; 0x188a <atcab_random+0x6a>
        {
            break;
        }

        if ((status = atca_execute_command(&packet, _gDevice)) != ATCA_SUCCESS)
    1856:	60 91 0a 2a 	lds	r22, 0x2A0A	; 0x802a0a <_gDevice>
    185a:	70 91 0b 2a 	lds	r23, 0x2A0B	; 0x802a0b <_gDevice+0x1>
    185e:	ce 01       	movw	r24, r28
    1860:	01 96       	adiw	r24, 0x01	; 1
    1862:	0e 94 57 09 	call	0x12ae	; 0x12ae <atca_execute_command>
    1866:	81 11       	cpse	r24, r1
    1868:	10 c0       	rjmp	.+32     	; 0x188a <atcab_random+0x6a>
        {
            break;
        }

        if (packet.data[ATCA_COUNT_IDX] != RANDOM_RSP_SIZE)
    186a:	9f 81       	ldd	r25, Y+7	; 0x07
    186c:	93 32       	cpi	r25, 0x23	; 35
    186e:	61 f4       	brne	.+24     	; 0x1888 <atcab_random+0x68>
        {
            status = ATCA_RX_FAIL;
            break;
        }

        if (rand_out)
    1870:	01 15       	cp	r16, r1
    1872:	11 05       	cpc	r17, r1
    1874:	51 f0       	breq	.+20     	; 0x188a <atcab_random+0x6a>
        {
            memcpy(rand_out, &packet.data[ATCA_RSP_DATA_IDX], RANDOM_NUM_SIZE);
    1876:	90 e2       	ldi	r25, 0x20	; 32
    1878:	fe 01       	movw	r30, r28
    187a:	38 96       	adiw	r30, 0x08	; 8
    187c:	d8 01       	movw	r26, r16
    187e:	01 90       	ld	r0, Z+
    1880:	0d 92       	st	X+, r0
    1882:	9a 95       	dec	r25
    1884:	e1 f7       	brne	.-8      	; 0x187e <atcab_random+0x5e>
    1886:	01 c0       	rjmp	.+2      	; 0x188a <atcab_random+0x6a>
            break;
        }

        if (packet.data[ATCA_COUNT_IDX] != RANDOM_RSP_SIZE)
        {
            status = ATCA_RX_FAIL;
    1888:	86 ee       	ldi	r24, 0xE6	; 230
    }
    while (0);


    return status;
}
    188a:	c9 53       	subi	r28, 0x39	; 57
    188c:	df 4f       	sbci	r29, 0xFF	; 255
    188e:	cd bf       	out	0x3d, r28	; 61
    1890:	de bf       	out	0x3e, r29	; 62
    1892:	df 91       	pop	r29
    1894:	cf 91       	pop	r28
    1896:	1f 91       	pop	r17
    1898:	0f 91       	pop	r16
    189a:	08 95       	ret

0000189c <atcab_read_zone>:
        }
    }
    while (0);

    return status;
}
    189c:	af 92       	push	r10
    189e:	bf 92       	push	r11
    18a0:	cf 92       	push	r12
    18a2:	df 92       	push	r13
    18a4:	ef 92       	push	r14
    18a6:	ff 92       	push	r15
    18a8:	0f 93       	push	r16
    18aa:	1f 93       	push	r17
    18ac:	cf 93       	push	r28
    18ae:	df 93       	push	r29
    18b0:	cd b7       	in	r28, 0x3d	; 61
    18b2:	de b7       	in	r29, 0x3e	; 62
    18b4:	c9 5c       	subi	r28, 0xC9	; 201
    18b6:	d1 09       	sbc	r29, r1
    18b8:	cd bf       	out	0x3d, r28	; 61
    18ba:	de bf       	out	0x3e, r29	; 62
    18bc:	f8 2e       	mov	r15, r24
    18be:	68 01       	movw	r12, r16
    18c0:	01 2b       	or	r16, r17
    18c2:	09 f4       	brne	.+2      	; 0x18c6 <atcab_read_zone+0x2a>
    18c4:	3f c0       	rjmp	.+126    	; 0x1944 <atcab_read_zone+0xa8>
    18c6:	84 e0       	ldi	r24, 0x04	; 4
    18c8:	e8 16       	cp	r14, r24
    18ca:	19 f0       	breq	.+6      	; 0x18d2 <atcab_read_zone+0x36>
    18cc:	80 e2       	ldi	r24, 0x20	; 32
    18ce:	e8 12       	cpse	r14, r24
    18d0:	39 c0       	rjmp	.+114    	; 0x1944 <atcab_read_zone+0xa8>
    18d2:	e0 91 0a 2a 	lds	r30, 0x2A0A	; 0x802a0a <_gDevice>
    18d6:	f0 91 0b 2a 	lds	r31, 0x2A0B	; 0x802a0b <_gDevice+0x1>
    18da:	a0 80       	ld	r10, Z
    18dc:	b1 80       	ldd	r11, Z+1	; 0x01
    18de:	8e 01       	movw	r16, r28
    18e0:	08 53       	subi	r16, 0x38	; 56
    18e2:	1f 4f       	sbci	r17, 0xFF	; 255
    18e4:	8f 2d       	mov	r24, r15
    18e6:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <atcab_get_addr>
    18ea:	81 11       	cpse	r24, r1
    18ec:	2c c0       	rjmp	.+88     	; 0x1946 <atcab_read_zone+0xaa>
    18ee:	80 e2       	ldi	r24, 0x20	; 32
    18f0:	e8 12       	cpse	r14, r24
    18f2:	03 c0       	rjmp	.+6      	; 0x18fa <atcab_read_zone+0x5e>
    18f4:	8f 2d       	mov	r24, r15
    18f6:	80 68       	ori	r24, 0x80	; 128
    18f8:	f8 2e       	mov	r15, r24
    18fa:	fc 82       	std	Y+4, r15	; 0x04
    18fc:	c8 53       	subi	r28, 0x38	; 56
    18fe:	df 4f       	sbci	r29, 0xFF	; 255
    1900:	88 81       	ld	r24, Y
    1902:	99 81       	ldd	r25, Y+1	; 0x01
    1904:	c8 5c       	subi	r28, 0xC8	; 200
    1906:	d0 40       	sbci	r29, 0x00	; 0
    1908:	8d 83       	std	Y+5, r24	; 0x05
    190a:	9e 83       	std	Y+6, r25	; 0x06
    190c:	be 01       	movw	r22, r28
    190e:	6f 5f       	subi	r22, 0xFF	; 255
    1910:	7f 4f       	sbci	r23, 0xFF	; 255
    1912:	c5 01       	movw	r24, r10
    1914:	0e 94 26 08 	call	0x104c	; 0x104c <atRead>
    1918:	81 11       	cpse	r24, r1
    191a:	15 c0       	rjmp	.+42     	; 0x1946 <atcab_read_zone+0xaa>
    191c:	60 91 0a 2a 	lds	r22, 0x2A0A	; 0x802a0a <_gDevice>
    1920:	70 91 0b 2a 	lds	r23, 0x2A0B	; 0x802a0b <_gDevice+0x1>
    1924:	ce 01       	movw	r24, r28
    1926:	01 96       	adiw	r24, 0x01	; 1
    1928:	0e 94 57 09 	call	0x12ae	; 0x12ae <atca_execute_command>
    192c:	81 11       	cpse	r24, r1
    192e:	0b c0       	rjmp	.+22     	; 0x1946 <atcab_read_zone+0xaa>
    1930:	4e 2d       	mov	r20, r14
    1932:	50 e0       	ldi	r21, 0x00	; 0
    1934:	be 01       	movw	r22, r28
    1936:	68 5f       	subi	r22, 0xF8	; 248
    1938:	7f 4f       	sbci	r23, 0xFF	; 255
    193a:	c6 01       	movw	r24, r12
    193c:	0e 94 72 2e 	call	0x5ce4	; 0x5ce4 <memcpy>
    1940:	80 e0       	ldi	r24, 0x00	; 0
    1942:	01 c0       	rjmp	.+2      	; 0x1946 <atcab_read_zone+0xaa>
    1944:	82 ee       	ldi	r24, 0xE2	; 226
    1946:	c7 53       	subi	r28, 0x37	; 55
    1948:	df 4f       	sbci	r29, 0xFF	; 255
    194a:	cd bf       	out	0x3d, r28	; 61
    194c:	de bf       	out	0x3e, r29	; 62
    194e:	df 91       	pop	r29
    1950:	cf 91       	pop	r28
    1952:	1f 91       	pop	r17
    1954:	0f 91       	pop	r16
    1956:	ff 90       	pop	r15
    1958:	ef 90       	pop	r14
    195a:	df 90       	pop	r13
    195c:	cf 90       	pop	r12
    195e:	bf 90       	pop	r11
    1960:	af 90       	pop	r10
    1962:	08 95       	ret

00001964 <atcab_read_serial_number>:
    1964:	cf 92       	push	r12
    1966:	df 92       	push	r13
    1968:	ef 92       	push	r14
    196a:	0f 93       	push	r16
    196c:	1f 93       	push	r17
    196e:	cf 93       	push	r28
    1970:	df 93       	push	r29
    1972:	cd b7       	in	r28, 0x3d	; 61
    1974:	de b7       	in	r29, 0x3e	; 62
    1976:	a0 97       	sbiw	r28, 0x20	; 32
    1978:	cd bf       	out	0x3d, r28	; 61
    197a:	de bf       	out	0x3e, r29	; 62
    197c:	00 97       	sbiw	r24, 0x00	; 0
    197e:	09 f1       	breq	.+66     	; 0x19c2 <atcab_read_serial_number+0x5e>
    1980:	6c 01       	movw	r12, r24
    1982:	80 e2       	ldi	r24, 0x20	; 32
    1984:	e8 2e       	mov	r14, r24
    1986:	8e 01       	movw	r16, r28
    1988:	0f 5f       	subi	r16, 0xFF	; 255
    198a:	1f 4f       	sbci	r17, 0xFF	; 255
    198c:	20 e0       	ldi	r18, 0x00	; 0
    198e:	40 e0       	ldi	r20, 0x00	; 0
    1990:	60 e0       	ldi	r22, 0x00	; 0
    1992:	70 e0       	ldi	r23, 0x00	; 0
    1994:	80 e0       	ldi	r24, 0x00	; 0
    1996:	0e 94 4e 0c 	call	0x189c	; 0x189c <atcab_read_zone>
    199a:	81 11       	cpse	r24, r1
    199c:	13 c0       	rjmp	.+38     	; 0x19c4 <atcab_read_serial_number+0x60>
    199e:	84 e0       	ldi	r24, 0x04	; 4
    19a0:	f8 01       	movw	r30, r16
    19a2:	d6 01       	movw	r26, r12
    19a4:	01 90       	ld	r0, Z+
    19a6:	0d 92       	st	X+, r0
    19a8:	8a 95       	dec	r24
    19aa:	e1 f7       	brne	.-8      	; 0x19a4 <atcab_read_serial_number+0x40>
    19ac:	d6 01       	movw	r26, r12
    19ae:	14 96       	adiw	r26, 0x04	; 4
    19b0:	85 e0       	ldi	r24, 0x05	; 5
    19b2:	fe 01       	movw	r30, r28
    19b4:	39 96       	adiw	r30, 0x09	; 9
    19b6:	01 90       	ld	r0, Z+
    19b8:	0d 92       	st	X+, r0
    19ba:	8a 95       	dec	r24
    19bc:	e1 f7       	brne	.-8      	; 0x19b6 <atcab_read_serial_number+0x52>
    19be:	80 e0       	ldi	r24, 0x00	; 0
    19c0:	01 c0       	rjmp	.+2      	; 0x19c4 <atcab_read_serial_number+0x60>
    19c2:	82 ee       	ldi	r24, 0xE2	; 226
    19c4:	a0 96       	adiw	r28, 0x20	; 32
    19c6:	cd bf       	out	0x3d, r28	; 61
    19c8:	de bf       	out	0x3e, r29	; 62
    19ca:	df 91       	pop	r29
    19cc:	cf 91       	pop	r28
    19ce:	1f 91       	pop	r17
    19d0:	0f 91       	pop	r16
    19d2:	ef 90       	pop	r14
    19d4:	df 90       	pop	r13
    19d6:	cf 90       	pop	r12
    19d8:	08 95       	ret

000019da <atcab_read_pubkey>:
 *                          concatenated.
 *
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_read_pubkey(uint16_t slot, uint8_t *public_key)
{
    19da:	af 92       	push	r10
    19dc:	bf 92       	push	r11
    19de:	cf 92       	push	r12
    19e0:	df 92       	push	r13
    19e2:	ef 92       	push	r14
    19e4:	0f 93       	push	r16
    19e6:	1f 93       	push	r17
    19e8:	cf 93       	push	r28
    19ea:	df 93       	push	r29
    19ec:	cd b7       	in	r28, 0x3d	; 61
    19ee:	de b7       	in	r29, 0x3e	; 62
    19f0:	a0 97       	sbiw	r28, 0x20	; 32
    19f2:	cd bf       	out	0x3d, r28	; 61
    19f4:	de bf       	out	0x3e, r29	; 62
    uint8_t cpy_index = 0;
    uint8_t cpy_size = 0;
    uint8_t read_index = 0;

    // Check the pointers
    if (public_key == NULL)
    19f6:	61 15       	cp	r22, r1
    19f8:	71 05       	cpc	r23, r1
    19fa:	09 f4       	brne	.+2      	; 0x19fe <atcab_read_pubkey+0x24>
    19fc:	49 c0       	rjmp	.+146    	; 0x1a90 <atcab_read_pubkey+0xb6>
    {
        return ATCA_BAD_PARAM;
    }
    // Check the value of the slot
    if (slot < 8 || slot > 0xF)
    19fe:	9c 01       	movw	r18, r24
    1a00:	28 50       	subi	r18, 0x08	; 8
    1a02:	31 09       	sbc	r19, r1
    1a04:	28 30       	cpi	r18, 0x08	; 8
    1a06:	31 05       	cpc	r19, r1
    1a08:	08 f0       	brcs	.+2      	; 0x1a0c <atcab_read_pubkey+0x32>
    1a0a:	42 c0       	rjmp	.+132    	; 0x1a90 <atcab_read_pubkey+0xb6>
    1a0c:	6b 01       	movw	r12, r22
    1a0e:	5c 01       	movw	r10, r24
        // | Block 1                     | Block 2                                      | Block 3       |
        // | Pad: 4 Bytes | PubKey[0:27] | PubKey[28:31] | Pad: 4 Bytes | PubKey[32:55] | PubKey[56:63] |

        // Read the block
        block = 0;
        if ((ret = atcab_read_zone(ATCA_ZONE_DATA, slot, block, offset, read_buf, ATCA_BLOCK_SIZE)) != ATCA_SUCCESS)
    1a10:	80 e2       	ldi	r24, 0x20	; 32
    1a12:	e8 2e       	mov	r14, r24
    1a14:	8e 01       	movw	r16, r28
    1a16:	0f 5f       	subi	r16, 0xFF	; 255
    1a18:	1f 4f       	sbci	r17, 0xFF	; 255
    1a1a:	20 e0       	ldi	r18, 0x00	; 0
    1a1c:	40 e0       	ldi	r20, 0x00	; 0
    1a1e:	b5 01       	movw	r22, r10
    1a20:	82 e0       	ldi	r24, 0x02	; 2
    1a22:	0e 94 4e 0c 	call	0x189c	; 0x189c <atcab_read_zone>
    1a26:	81 11       	cpse	r24, r1
    1a28:	34 c0       	rjmp	.+104    	; 0x1a92 <atcab_read_pubkey+0xb8>
        }

        // Copy.  Account for 4 byte pad
        cpy_size = ATCA_BLOCK_SIZE - ATCA_PUB_KEY_PAD;
        read_index = ATCA_PUB_KEY_PAD;
        memcpy(&public_key[cpy_index], &read_buf[read_index], cpy_size);
    1a2a:	8c e1       	ldi	r24, 0x1C	; 28
    1a2c:	fe 01       	movw	r30, r28
    1a2e:	35 96       	adiw	r30, 0x05	; 5
    1a30:	d6 01       	movw	r26, r12
    1a32:	01 90       	ld	r0, Z+
    1a34:	0d 92       	st	X+, r0
    1a36:	8a 95       	dec	r24
    1a38:	e1 f7       	brne	.-8      	; 0x1a32 <atcab_read_pubkey+0x58>
        cpy_index += cpy_size;

        // Read the next block
        block = 1;
        if ((ret = atcab_read_zone(ATCA_ZONE_DATA, slot, block, offset, read_buf, ATCA_BLOCK_SIZE)) != ATCA_SUCCESS)
    1a3a:	20 e0       	ldi	r18, 0x00	; 0
    1a3c:	41 e0       	ldi	r20, 0x01	; 1
    1a3e:	b5 01       	movw	r22, r10
    1a40:	82 e0       	ldi	r24, 0x02	; 2
    1a42:	0e 94 4e 0c 	call	0x189c	; 0x189c <atcab_read_zone>
    1a46:	81 11       	cpse	r24, r1
    1a48:	24 c0       	rjmp	.+72     	; 0x1a92 <atcab_read_pubkey+0xb8>
        }

        // Copy.  First four bytes
        cpy_size = ATCA_PUB_KEY_PAD;
        read_index = 0;
        memcpy(&public_key[cpy_index], &read_buf[read_index], cpy_size);
    1a4a:	84 e0       	ldi	r24, 0x04	; 4
    1a4c:	f8 01       	movw	r30, r16
    1a4e:	d6 01       	movw	r26, r12
    1a50:	5c 96       	adiw	r26, 0x1c	; 28
    1a52:	01 90       	ld	r0, Z+
    1a54:	0d 92       	st	X+, r0
    1a56:	8a 95       	dec	r24
    1a58:	e1 f7       	brne	.-8      	; 0x1a52 <atcab_read_pubkey+0x78>
        cpy_index += cpy_size;
        // Copy.  Skip four bytes
        read_index = ATCA_PUB_KEY_PAD + ATCA_PUB_KEY_PAD;
        cpy_size = ATCA_BLOCK_SIZE - read_index;
        memcpy(&public_key[cpy_index], &read_buf[read_index], cpy_size);
    1a5a:	88 e1       	ldi	r24, 0x18	; 24
    1a5c:	fe 01       	movw	r30, r28
    1a5e:	39 96       	adiw	r30, 0x09	; 9
    1a60:	d6 01       	movw	r26, r12
    1a62:	90 96       	adiw	r26, 0x20	; 32
    1a64:	01 90       	ld	r0, Z+
    1a66:	0d 92       	st	X+, r0
    1a68:	8a 95       	dec	r24
    1a6a:	e1 f7       	brne	.-8      	; 0x1a64 <atcab_read_pubkey+0x8a>
        cpy_index += cpy_size;

        // Read the next block
        block = 2;
        if ((ret = atcab_read_zone(ATCA_ZONE_DATA, slot, block, offset, read_buf, ATCA_BLOCK_SIZE)) != ATCA_SUCCESS)
    1a6c:	20 e0       	ldi	r18, 0x00	; 0
    1a6e:	42 e0       	ldi	r20, 0x02	; 2
    1a70:	b5 01       	movw	r22, r10
    1a72:	82 e0       	ldi	r24, 0x02	; 2
    1a74:	0e 94 4e 0c 	call	0x189c	; 0x189c <atcab_read_zone>
    1a78:	81 11       	cpse	r24, r1
    1a7a:	0b c0       	rjmp	.+22     	; 0x1a92 <atcab_read_pubkey+0xb8>
        }

        // Copy.  The remaining 8 bytes
        cpy_size = ATCA_PUB_KEY_PAD + ATCA_PUB_KEY_PAD;
        read_index = 0;
        memcpy(&public_key[cpy_index], &read_buf[read_index], cpy_size);
    1a7c:	d6 01       	movw	r26, r12
    1a7e:	d8 96       	adiw	r26, 0x38	; 56
    1a80:	88 e0       	ldi	r24, 0x08	; 8
    1a82:	f8 01       	movw	r30, r16
    1a84:	01 90       	ld	r0, Z+
    1a86:	0d 92       	st	X+, r0
    1a88:	8a 95       	dec	r24
    1a8a:	e1 f7       	brne	.-8      	; 0x1a84 <atcab_read_pubkey+0xaa>
    1a8c:	80 e0       	ldi	r24, 0x00	; 0
    1a8e:	01 c0       	rjmp	.+2      	; 0x1a92 <atcab_read_pubkey+0xb8>
    uint8_t read_index = 0;

    // Check the pointers
    if (public_key == NULL)
    {
        return ATCA_BAD_PARAM;
    1a90:	82 ee       	ldi	r24, 0xE2	; 226

    }
    while (0);

    return ret;
}
    1a92:	a0 96       	adiw	r28, 0x20	; 32
    1a94:	cd bf       	out	0x3d, r28	; 61
    1a96:	de bf       	out	0x3e, r29	; 62
    1a98:	df 91       	pop	r29
    1a9a:	cf 91       	pop	r28
    1a9c:	1f 91       	pop	r17
    1a9e:	0f 91       	pop	r16
    1aa0:	ef 90       	pop	r14
    1aa2:	df 90       	pop	r13
    1aa4:	cf 90       	pop	r12
    1aa6:	bf 90       	pop	r11
    1aa8:	af 90       	pop	r10
    1aaa:	08 95       	ret

00001aac <atcab_read_bytes_zone>:
 *  \param[in]  length  Number of bytes to read starting from the offset.
 *
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_read_bytes_zone(uint8_t zone, uint16_t slot, size_t offset, uint8_t *data, size_t length)
{
    1aac:	2f 92       	push	r2
    1aae:	3f 92       	push	r3
    1ab0:	4f 92       	push	r4
    1ab2:	5f 92       	push	r5
    1ab4:	6f 92       	push	r6
    1ab6:	7f 92       	push	r7
    1ab8:	8f 92       	push	r8
    1aba:	9f 92       	push	r9
    1abc:	af 92       	push	r10
    1abe:	bf 92       	push	r11
    1ac0:	cf 92       	push	r12
    1ac2:	df 92       	push	r13
    1ac4:	ef 92       	push	r14
    1ac6:	ff 92       	push	r15
    1ac8:	0f 93       	push	r16
    1aca:	1f 93       	push	r17
    1acc:	cf 93       	push	r28
    1ace:	df 93       	push	r29
    1ad0:	cd b7       	in	r28, 0x3d	; 61
    1ad2:	de b7       	in	r29, 0x3e	; 62
    1ad4:	a5 97       	sbiw	r28, 0x25	; 37
    1ad6:	cd bf       	out	0x3d, r28	; 61
    1ad8:	de bf       	out	0x3e, r29	; 62
    ATCA_STATUS status = ATCA_GEN_FAIL;
    size_t zone_size = 0;
    1ada:	19 a2       	std	Y+33, r1	; 0x21
    1adc:	1a a2       	std	Y+34, r1	; 0x22
    uint8_t read_size = ATCA_BLOCK_SIZE;
    size_t read_buf_idx = 0;
    size_t copy_length = 0;
    size_t read_offset = 0;

    if (zone != ATCA_ZONE_CONFIG && zone != ATCA_ZONE_OTP && zone != ATCA_ZONE_DATA)
    1ade:	83 30       	cpi	r24, 0x03	; 3
    1ae0:	10 f0       	brcs	.+4      	; 0x1ae6 <atcab_read_bytes_zone+0x3a>
    {
        return ATCA_BAD_PARAM;
    1ae2:	82 ee       	ldi	r24, 0xE2	; 226
    1ae4:	93 c0       	rjmp	.+294    	; 0x1c0c <atcab_read_bytes_zone+0x160>
    }
    if (zone == ATCA_ZONE_DATA && slot > 15)
    1ae6:	82 30       	cpi	r24, 0x02	; 2
    1ae8:	19 f4       	brne	.+6      	; 0x1af0 <atcab_read_bytes_zone+0x44>
    1aea:	60 31       	cpi	r22, 0x10	; 16
    1aec:	71 05       	cpc	r23, r1
    1aee:	c8 f7       	brcc	.-14     	; 0x1ae2 <atcab_read_bytes_zone+0x36>
    {
        return ATCA_BAD_PARAM;
    }
    if (length == 0)
    1af0:	01 15       	cp	r16, r1
    1af2:	11 05       	cpc	r17, r1
    1af4:	11 f4       	brne	.+4      	; 0x1afa <atcab_read_bytes_zone+0x4e>
    {
        return ATCA_SUCCESS;  // Always succeed reading 0 bytes
    1af6:	80 e0       	ldi	r24, 0x00	; 0
    1af8:	89 c0       	rjmp	.+274    	; 0x1c0c <atcab_read_bytes_zone+0x160>
    }
    if (data == NULL)
    1afa:	21 15       	cp	r18, r1
    1afc:	31 05       	cpc	r19, r1
    1afe:	89 f3       	breq	.-30     	; 0x1ae2 <atcab_read_bytes_zone+0x36>
    1b00:	28 01       	movw	r4, r16
    1b02:	2c a3       	std	Y+36, r18	; 0x24
    1b04:	3d a3       	std	Y+37, r19	; 0x25
    1b06:	5a 01       	movw	r10, r20
    1b08:	1b 01       	movw	r2, r22
    1b0a:	f8 2e       	mov	r15, r24
        return ATCA_BAD_PARAM;
    }

    do
    {
        status = atcab_get_zone_size(zone, slot, &zone_size);
    1b0c:	ae 01       	movw	r20, r28
    1b0e:	4f 5d       	subi	r20, 0xDF	; 223
    1b10:	5f 4f       	sbci	r21, 0xFF	; 255
    1b12:	0e 94 12 0b 	call	0x1624	; 0x1624 <atcab_get_zone_size>
        if (status != ATCA_SUCCESS)
    1b16:	81 11       	cpse	r24, r1
    1b18:	79 c0       	rjmp	.+242    	; 0x1c0c <atcab_read_bytes_zone+0x160>
        {
            break;
        }
        if (offset + length > zone_size)
    1b1a:	29 a1       	ldd	r18, Y+33	; 0x21
    1b1c:	3a a1       	ldd	r19, Y+34	; 0x22
    1b1e:	c8 01       	movw	r24, r16
    1b20:	8a 0d       	add	r24, r10
    1b22:	9b 1d       	adc	r25, r11
    1b24:	28 17       	cp	r18, r24
    1b26:	39 07       	cpc	r19, r25
    1b28:	e0 f2       	brcs	.-72     	; 0x1ae2 <atcab_read_bytes_zone+0x36>
        {
            return ATCA_BAD_PARAM; // Can't read past the end of a zone

        }
        cur_block = offset / ATCA_BLOCK_SIZE;
    1b2a:	35 01       	movw	r6, r10
    1b2c:	65 e0       	ldi	r22, 0x05	; 5
    1b2e:	76 94       	lsr	r7
    1b30:	67 94       	ror	r6
    1b32:	6a 95       	dec	r22
    1b34:	e1 f7       	brne	.-8      	; 0x1b2e <atcab_read_bytes_zone+0x82>
    size_t zone_size = 0;
    uint8_t read_buf[32];
    size_t data_idx = 0;
    size_t cur_block = 0;
    size_t cur_offset = 0;
    uint8_t read_size = ATCA_BLOCK_SIZE;
    1b36:	20 e2       	ldi	r18, 0x20	; 32
    1b38:	2b a3       	std	Y+35, r18	; 0x23
    ATCA_STATUS status = ATCA_GEN_FAIL;
    size_t zone_size = 0;
    uint8_t read_buf[32];
    size_t data_idx = 0;
    size_t cur_block = 0;
    size_t cur_offset = 0;
    1b3a:	c1 2c       	mov	r12, r1
    1b3c:	d1 2c       	mov	r13, r1
ATCA_STATUS atcab_read_bytes_zone(uint8_t zone, uint16_t slot, size_t offset, uint8_t *data, size_t length)
{
    ATCA_STATUS status = ATCA_GEN_FAIL;
    size_t zone_size = 0;
    uint8_t read_buf[32];
    size_t data_idx = 0;
    1b3e:	81 2c       	mov	r8, r1
    1b40:	91 2c       	mov	r9, r1
            return ATCA_BAD_PARAM; // Can't read past the end of a zone

        }
        cur_block = offset / ATCA_BLOCK_SIZE;

        while (data_idx < length)
    1b42:	84 14       	cp	r8, r4
    1b44:	95 04       	cpc	r9, r5
    1b46:	b8 f6       	brcc	.-82     	; 0x1af6 <atcab_read_bytes_zone+0x4a>
        {
            if (read_size == ATCA_BLOCK_SIZE && zone_size - cur_block * ATCA_BLOCK_SIZE < ATCA_BLOCK_SIZE)
    1b48:	8b a1       	ldd	r24, Y+35	; 0x23
    1b4a:	80 32       	cpi	r24, 0x20	; 32
    1b4c:	c1 f4       	brne	.+48     	; 0x1b7e <atcab_read_bytes_zone+0xd2>
    1b4e:	89 a1       	ldd	r24, Y+33	; 0x21
    1b50:	9a a1       	ldd	r25, Y+34	; 0x22
    1b52:	93 01       	movw	r18, r6
    1b54:	55 e0       	ldi	r21, 0x05	; 5
    1b56:	22 0f       	add	r18, r18
    1b58:	33 1f       	adc	r19, r19
    1b5a:	5a 95       	dec	r21
    1b5c:	e1 f7       	brne	.-8      	; 0x1b56 <atcab_read_bytes_zone+0xaa>
    1b5e:	82 1b       	sub	r24, r18
    1b60:	93 0b       	sbc	r25, r19
    1b62:	80 97       	sbiw	r24, 0x20	; 32
    1b64:	60 f4       	brcc	.+24     	; 0x1b7e <atcab_read_bytes_zone+0xd2>
            {
                // We have less than a block to read and can't read past the end of the zone, switch to word reads
                read_size = ATCA_WORD_SIZE;
                cur_offset = ((data_idx + offset) / ATCA_WORD_SIZE) % (ATCA_BLOCK_SIZE / ATCA_WORD_SIZE);
    1b66:	64 01       	movw	r12, r8
    1b68:	ca 0c       	add	r12, r10
    1b6a:	db 1c       	adc	r13, r11
    1b6c:	d6 94       	lsr	r13
    1b6e:	c7 94       	ror	r12
    1b70:	d6 94       	lsr	r13
    1b72:	c7 94       	ror	r12
    1b74:	97 e0       	ldi	r25, 0x07	; 7
    1b76:	c9 22       	and	r12, r25
    1b78:	dd 24       	eor	r13, r13
        while (data_idx < length)
        {
            if (read_size == ATCA_BLOCK_SIZE && zone_size - cur_block * ATCA_BLOCK_SIZE < ATCA_BLOCK_SIZE)
            {
                // We have less than a block to read and can't read past the end of the zone, switch to word reads
                read_size = ATCA_WORD_SIZE;
    1b7a:	24 e0       	ldi	r18, 0x04	; 4
    1b7c:	2b a3       	std	Y+35, r18	; 0x23
                cur_offset = ((data_idx + offset) / ATCA_WORD_SIZE) % (ATCA_BLOCK_SIZE / ATCA_WORD_SIZE);
            }

            // Read next chunk of data
            status = atcab_read_zone(
    1b7e:	eb a0       	ldd	r14, Y+35	; 0x23
    1b80:	8e 01       	movw	r16, r28
    1b82:	0f 5f       	subi	r16, 0xFF	; 255
    1b84:	1f 4f       	sbci	r17, 0xFF	; 255
    1b86:	2c 2d       	mov	r18, r12
    1b88:	46 2d       	mov	r20, r6
    1b8a:	b1 01       	movw	r22, r2
    1b8c:	8f 2d       	mov	r24, r15
    1b8e:	0e 94 4e 0c 	call	0x189c	; 0x189c <atcab_read_zone>
                slot,
                (uint8_t)cur_block,
                (uint8_t)cur_offset,
                read_buf,
                read_size);
            if (status != ATCA_SUCCESS)
    1b92:	81 11       	cpse	r24, r1
    1b94:	3b c0       	rjmp	.+118    	; 0x1c0c <atcab_read_bytes_zone+0x160>
            {
                break;
            }

            // Calculate where in the read buffer we need data from
            read_offset = cur_block * ATCA_BLOCK_SIZE + cur_offset * ATCA_WORD_SIZE;
    1b96:	c3 01       	movw	r24, r6
    1b98:	23 e0       	ldi	r18, 0x03	; 3
    1b9a:	88 0f       	add	r24, r24
    1b9c:	99 1f       	adc	r25, r25
    1b9e:	2a 95       	dec	r18
    1ba0:	e1 f7       	brne	.-8      	; 0x1b9a <atcab_read_bytes_zone+0xee>
    1ba2:	8c 0d       	add	r24, r12
    1ba4:	9d 1d       	adc	r25, r13
    1ba6:	88 0f       	add	r24, r24
    1ba8:	99 1f       	adc	r25, r25
    1baa:	88 0f       	add	r24, r24
    1bac:	99 1f       	adc	r25, r25
            if (read_offset < offset)
    1bae:	8a 15       	cp	r24, r10
    1bb0:	9b 05       	cpc	r25, r11
    1bb2:	20 f4       	brcc	.+8      	; 0x1bbc <atcab_read_bytes_zone+0x110>
            {
                read_buf_idx = offset - read_offset;  // Read data starts before the requested chunk
    1bb4:	b5 01       	movw	r22, r10
    1bb6:	68 1b       	sub	r22, r24
    1bb8:	79 0b       	sbc	r23, r25
    1bba:	02 c0       	rjmp	.+4      	; 0x1bc0 <atcab_read_bytes_zone+0x114>
            }
            else
            {
                read_buf_idx = 0;                     // Read data is within the requested chunk
    1bbc:	60 e0       	ldi	r22, 0x00	; 0
    1bbe:	70 e0       	ldi	r23, 0x00	; 0

            }
            // Calculate how much data from the read buffer we want to copy
            if (length - data_idx < read_size - read_buf_idx)
    1bc0:	2b a1       	ldd	r18, Y+35	; 0x23
    1bc2:	82 2f       	mov	r24, r18
    1bc4:	90 e0       	ldi	r25, 0x00	; 0
    1bc6:	86 1b       	sub	r24, r22
    1bc8:	97 0b       	sbc	r25, r23
    1bca:	82 01       	movw	r16, r4
    1bcc:	08 19       	sub	r16, r8
    1bce:	19 09       	sbc	r17, r9
    1bd0:	80 17       	cp	r24, r16
    1bd2:	91 07       	cpc	r25, r17
    1bd4:	08 f4       	brcc	.+2      	; 0x1bd8 <atcab_read_bytes_zone+0x12c>
    1bd6:	8c 01       	movw	r16, r24
            else
            {
                copy_length = read_size - read_buf_idx;
            }

            memcpy(&data[data_idx], &read_buf[read_buf_idx], copy_length);
    1bd8:	81 e0       	ldi	r24, 0x01	; 1
    1bda:	90 e0       	ldi	r25, 0x00	; 0
    1bdc:	8c 0f       	add	r24, r28
    1bde:	9d 1f       	adc	r25, r29
    1be0:	68 0f       	add	r22, r24
    1be2:	79 1f       	adc	r23, r25
    1be4:	a8 01       	movw	r20, r16
    1be6:	8c a1       	ldd	r24, Y+36	; 0x24
    1be8:	9d a1       	ldd	r25, Y+37	; 0x25
    1bea:	88 0d       	add	r24, r8
    1bec:	99 1d       	adc	r25, r9
    1bee:	0e 94 72 2e 	call	0x5ce4	; 0x5ce4 <memcpy>
            data_idx += copy_length;
    1bf2:	80 0e       	add	r8, r16
    1bf4:	91 1e       	adc	r9, r17
            if (read_size == ATCA_BLOCK_SIZE)
    1bf6:	9b a1       	ldd	r25, Y+35	; 0x23
    1bf8:	90 32       	cpi	r25, 0x20	; 32
    1bfa:	21 f4       	brne	.+8      	; 0x1c04 <atcab_read_bytes_zone+0x158>
            {
                cur_block += 1;
    1bfc:	2f ef       	ldi	r18, 0xFF	; 255
    1bfe:	62 1a       	sub	r6, r18
    1c00:	72 0a       	sbc	r7, r18
    1c02:	9f cf       	rjmp	.-194    	; 0x1b42 <atcab_read_bytes_zone+0x96>
            }
            else
            {
                cur_offset += 1;
    1c04:	8f ef       	ldi	r24, 0xFF	; 255
    1c06:	c8 1a       	sub	r12, r24
    1c08:	d8 0a       	sbc	r13, r24
    1c0a:	9b cf       	rjmp	.-202    	; 0x1b42 <atcab_read_bytes_zone+0x96>
        }
    }
    while (false);

    return status;
}
    1c0c:	a5 96       	adiw	r28, 0x25	; 37
    1c0e:	cd bf       	out	0x3d, r28	; 61
    1c10:	de bf       	out	0x3e, r29	; 62
    1c12:	df 91       	pop	r29
    1c14:	cf 91       	pop	r28
    1c16:	1f 91       	pop	r17
    1c18:	0f 91       	pop	r16
    1c1a:	ff 90       	pop	r15
    1c1c:	ef 90       	pop	r14
    1c1e:	df 90       	pop	r13
    1c20:	cf 90       	pop	r12
    1c22:	bf 90       	pop	r11
    1c24:	af 90       	pop	r10
    1c26:	9f 90       	pop	r9
    1c28:	8f 90       	pop	r8
    1c2a:	7f 90       	pop	r7
    1c2c:	6f 90       	pop	r6
    1c2e:	5f 90       	pop	r5
    1c30:	4f 90       	pop	r4
    1c32:	3f 90       	pop	r3
    1c34:	2f 90       	pop	r2
    1c36:	08 95       	ret

00001c38 <atcab_sign_base>:
 *                        curve.
 *
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_sign_base(uint8_t mode, uint16_t key_id, uint8_t *signature)
{
    1c38:	0f 93       	push	r16
    1c3a:	1f 93       	push	r17
    1c3c:	cf 93       	push	r28
    1c3e:	df 93       	push	r29
    1c40:	cd b7       	in	r28, 0x3d	; 61
    1c42:	de b7       	in	r29, 0x3e	; 62
    1c44:	c7 5c       	subi	r28, 0xC7	; 199
    1c46:	d1 09       	sbc	r29, r1
    1c48:	cd bf       	out	0x3d, r28	; 61
    1c4a:	de bf       	out	0x3e, r29	; 62
    ATCAPacket packet;
    ATCACommand ca_cmd = _gDevice->mCommands;
    ATCA_STATUS status = ATCA_GEN_FAIL;

    if (signature == NULL)
    1c4c:	41 15       	cp	r20, r1
    1c4e:	51 05       	cpc	r21, r1
    1c50:	49 f1       	breq	.+82     	; 0x1ca4 <atcab_sign_base+0x6c>
    1c52:	8a 01       	movw	r16, r20
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_sign_base(uint8_t mode, uint16_t key_id, uint8_t *signature)
{
    ATCAPacket packet;
    ATCACommand ca_cmd = _gDevice->mCommands;
    1c54:	e0 91 0a 2a 	lds	r30, 0x2A0A	; 0x802a0a <_gDevice>
    1c58:	f0 91 0b 2a 	lds	r31, 0x2A0B	; 0x802a0b <_gDevice+0x1>
    1c5c:	20 81       	ld	r18, Z
    1c5e:	31 81       	ldd	r19, Z+1	; 0x01
    }

    do
    {
        // Build sign command
        packet.param1 = mode;
    1c60:	8c 83       	std	Y+4, r24	; 0x04
        packet.param2 = key_id;
    1c62:	6d 83       	std	Y+5, r22	; 0x05
    1c64:	7e 83       	std	Y+6, r23	; 0x06
        if ((status = atSign(ca_cmd, &packet)) != ATCA_SUCCESS)
    1c66:	be 01       	movw	r22, r28
    1c68:	6f 5f       	subi	r22, 0xFF	; 255
    1c6a:	7f 4f       	sbci	r23, 0xFF	; 255
    1c6c:	c9 01       	movw	r24, r18
    1c6e:	0e 94 30 08 	call	0x1060	; 0x1060 <atSign>
    1c72:	81 11       	cpse	r24, r1
    1c74:	1a c0       	rjmp	.+52     	; 0x1caa <atcab_sign_base+0x72>
        {
            break;
        }

        if ((status = atca_execute_command(&packet, _gDevice)) != ATCA_SUCCESS)
    1c76:	60 91 0a 2a 	lds	r22, 0x2A0A	; 0x802a0a <_gDevice>
    1c7a:	70 91 0b 2a 	lds	r23, 0x2A0B	; 0x802a0b <_gDevice+0x1>
    1c7e:	ce 01       	movw	r24, r28
    1c80:	01 96       	adiw	r24, 0x01	; 1
    1c82:	0e 94 57 09 	call	0x12ae	; 0x12ae <atca_execute_command>
    1c86:	81 11       	cpse	r24, r1
    1c88:	10 c0       	rjmp	.+32     	; 0x1caa <atcab_sign_base+0x72>
        {
            break;
        }

        if (packet.data[ATCA_COUNT_IDX] > 4)
    1c8a:	4f 81       	ldd	r20, Y+7	; 0x07
    1c8c:	45 30       	cpi	r20, 0x05	; 5
    1c8e:	60 f0       	brcs	.+24     	; 0x1ca8 <atcab_sign_base+0x70>
        {
            memcpy(signature, &packet.data[ATCA_RSP_DATA_IDX], packet.data[ATCA_COUNT_IDX] - ATCA_PACKET_OVERHEAD);
    1c90:	50 e0       	ldi	r21, 0x00	; 0
    1c92:	43 50       	subi	r20, 0x03	; 3
    1c94:	51 09       	sbc	r21, r1
    1c96:	be 01       	movw	r22, r28
    1c98:	68 5f       	subi	r22, 0xF8	; 248
    1c9a:	7f 4f       	sbci	r23, 0xFF	; 255
    1c9c:	c8 01       	movw	r24, r16
    1c9e:	0e 94 72 2e 	call	0x5ce4	; 0x5ce4 <memcpy>
    1ca2:	02 c0       	rjmp	.+4      	; 0x1ca8 <atcab_sign_base+0x70>
    ATCACommand ca_cmd = _gDevice->mCommands;
    ATCA_STATUS status = ATCA_GEN_FAIL;

    if (signature == NULL)
    {
        return ATCA_BAD_PARAM;
    1ca4:	82 ee       	ldi	r24, 0xE2	; 226
    1ca6:	01 c0       	rjmp	.+2      	; 0x1caa <atcab_sign_base+0x72>
    1ca8:	80 e0       	ldi	r24, 0x00	; 0

    }
    while (0);

    return status;
}
    1caa:	c9 53       	subi	r28, 0x39	; 57
    1cac:	df 4f       	sbci	r29, 0xFF	; 255
    1cae:	cd bf       	out	0x3d, r28	; 61
    1cb0:	de bf       	out	0x3e, r29	; 62
    1cb2:	df 91       	pop	r29
    1cb4:	cf 91       	pop	r28
    1cb6:	1f 91       	pop	r17
    1cb8:	0f 91       	pop	r16
    1cba:	08 95       	ret

00001cbc <atcab_sign>:
 *                         curve.
 *
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_sign(uint16_t key_id, const uint8_t *msg, uint8_t *signature)
{
    1cbc:	cf 92       	push	r12
    1cbe:	df 92       	push	r13
    1cc0:	ef 92       	push	r14
    1cc2:	ff 92       	push	r15
    1cc4:	0f 93       	push	r16
    1cc6:	1f 93       	push	r17
    1cc8:	cf 93       	push	r28
    1cca:	8c 01       	movw	r16, r24
    1ccc:	6b 01       	movw	r12, r22
    1cce:	7a 01       	movw	r14, r20
    uint8_t sign_source = SIGN_MODE_SOURCE_TEMPKEY;

    do
    {
        // Make sure RNG has updated its seed
        if ((status = atcab_random(NULL)) != ATCA_SUCCESS)
    1cd0:	80 e0       	ldi	r24, 0x00	; 0
    1cd2:	90 e0       	ldi	r25, 0x00	; 0
    1cd4:	0e 94 10 0c 	call	0x1820	; 0x1820 <atcab_random>
    1cd8:	81 11       	cpse	r24, r1
    1cda:	23 c0       	rjmp	.+70     	; 0x1d22 <atcab_sign+0x66>
        {
            break;
        }

        // Load message into device
        if (_gDevice->mCommands->dt == ATECC608A)
    1cdc:	e0 91 0a 2a 	lds	r30, 0x2A0A	; 0x802a0a <_gDevice>
    1ce0:	f0 91 0b 2a 	lds	r31, 0x2A0B	; 0x802a0b <_gDevice+0x1>
    1ce4:	01 90       	ld	r0, Z+
    1ce6:	f0 81       	ld	r31, Z
    1ce8:	e0 2d       	mov	r30, r0
    1cea:	80 81       	ld	r24, Z
    1cec:	83 30       	cpi	r24, 0x03	; 3
    1cee:	19 f4       	brne	.+6      	; 0x1cf6 <atcab_sign+0x3a>
        {
            // Use the Message Digest Buffer for the ATECC608A
            nonce_target = NONCE_MODE_TARGET_MSGDIGBUF;
            sign_source = SIGN_MODE_SOURCE_MSGDIGBUF;
    1cf0:	c0 e2       	ldi	r28, 0x20	; 32

        // Load message into device
        if (_gDevice->mCommands->dt == ATECC608A)
        {
            // Use the Message Digest Buffer for the ATECC608A
            nonce_target = NONCE_MODE_TARGET_MSGDIGBUF;
    1cf2:	80 e4       	ldi	r24, 0x40	; 64
    1cf4:	02 c0       	rjmp	.+4      	; 0x1cfa <atcab_sign+0x3e>
 */
ATCA_STATUS atcab_sign(uint16_t key_id, const uint8_t *msg, uint8_t *signature)
{
    ATCA_STATUS status = ATCA_GEN_FAIL;
    uint8_t nonce_target = NONCE_MODE_TARGET_TEMPKEY;
    uint8_t sign_source = SIGN_MODE_SOURCE_TEMPKEY;
    1cf6:	c0 e0       	ldi	r28, 0x00	; 0
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_sign(uint16_t key_id, const uint8_t *msg, uint8_t *signature)
{
    ATCA_STATUS status = ATCA_GEN_FAIL;
    uint8_t nonce_target = NONCE_MODE_TARGET_TEMPKEY;
    1cf8:	80 e0       	ldi	r24, 0x00	; 0
        {
            // Use the Message Digest Buffer for the ATECC608A
            nonce_target = NONCE_MODE_TARGET_MSGDIGBUF;
            sign_source = SIGN_MODE_SOURCE_MSGDIGBUF;
        }
        if ((status = atcab_nonce_load(nonce_target, msg, 32)) != ATCA_SUCCESS)
    1cfa:	40 e2       	ldi	r20, 0x20	; 32
    1cfc:	50 e0       	ldi	r21, 0x00	; 0
    1cfe:	b6 01       	movw	r22, r12
    1d00:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <atcab_nonce_load>
    1d04:	81 11       	cpse	r24, r1
    1d06:	0d c0       	rjmp	.+26     	; 0x1d22 <atcab_sign+0x66>
        {
            break;
        }

        // Sign the message
        if ((status = atcab_sign_base(SIGN_MODE_EXTERNAL | sign_source, key_id, signature)) != ATCA_SUCCESS)
    1d08:	a7 01       	movw	r20, r14
    1d0a:	b8 01       	movw	r22, r16
    1d0c:	8c 2f       	mov	r24, r28
    1d0e:	80 68       	ori	r24, 0x80	; 128
        }
    }
    while (0);

    return status;
}
    1d10:	cf 91       	pop	r28
    1d12:	1f 91       	pop	r17
    1d14:	0f 91       	pop	r16
    1d16:	ff 90       	pop	r15
    1d18:	ef 90       	pop	r14
    1d1a:	df 90       	pop	r13
    1d1c:	cf 90       	pop	r12
        {
            break;
        }

        // Sign the message
        if ((status = atcab_sign_base(SIGN_MODE_EXTERNAL | sign_source, key_id, signature)) != ATCA_SUCCESS)
    1d1e:	0c 94 1c 0e 	jmp	0x1c38	; 0x1c38 <atcab_sign_base>
        }
    }
    while (0);

    return status;
}
    1d22:	cf 91       	pop	r28
    1d24:	1f 91       	pop	r17
    1d26:	0f 91       	pop	r16
    1d28:	ff 90       	pop	r15
    1d2a:	ef 90       	pop	r14
    1d2c:	df 90       	pop	r13
    1d2e:	cf 90       	pop	r12
    1d30:	08 95       	ret

00001d32 <atcac_sw_sha2_256>:
 * \param[out] digest     result
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */

int atcac_sw_sha2_256(const uint8_t* data, size_t data_size, uint8_t digest[ATCA_SHA2_256_DIGEST_SIZE])
{
    1d32:	cf 92       	push	r12
    1d34:	df 92       	push	r13
    1d36:	ef 92       	push	r14
    1d38:	ff 92       	push	r15
    1d3a:	0f 93       	push	r16
    1d3c:	1f 93       	push	r17
    1d3e:	cf 93       	push	r28
    1d40:	df 93       	push	r29
    1d42:	cd b7       	in	r28, 0x3d	; 61
    1d44:	de b7       	in	r29, 0x3e	; 62
    1d46:	c0 5c       	subi	r28, 0xC0	; 192
    1d48:	d1 09       	sbc	r29, r1
    1d4a:	cd bf       	out	0x3d, r28	; 61
    1d4c:	de bf       	out	0x3e, r29	; 62
    1d4e:	6c 01       	movw	r12, r24
    1d50:	8b 01       	movw	r16, r22
    1d52:	7a 01       	movw	r14, r20
{
    if (sizeof(sw_sha256_ctx) > sizeof(atcac_sha2_256_ctx))
    {
        return ATCA_ASSERT_FAILURE;  // atcac_sha1_ctx isn't large enough for this implementation
    }
    sw_sha256_init((sw_sha256_ctx*)ctx);
    1d54:	ce 01       	movw	r24, r28
    1d56:	01 96       	adiw	r24, 0x01	; 1
    1d58:	0e 94 15 13 	call	0x262a	; 0x262a <sw_sha256_init>
    \return ATCA_SUCCESS
 */

int atcac_sw_sha2_256_update(atcac_sha2_256_ctx* ctx, const uint8_t* data, size_t data_size)
{
    sw_sha256_update((sw_sha256_ctx*)ctx, data, (uint32_t)data_size);
    1d5c:	98 01       	movw	r18, r16
    1d5e:	40 e0       	ldi	r20, 0x00	; 0
    1d60:	50 e0       	ldi	r21, 0x00	; 0
    1d62:	b6 01       	movw	r22, r12
    1d64:	ce 01       	movw	r24, r28
    1d66:	01 96       	adiw	r24, 0x01	; 1
    1d68:	0e 94 2d 13 	call	0x265a	; 0x265a <sw_sha256_update>
 * \return ATCA_SUCCESS
 */

int atcac_sw_sha2_256_finish(atcac_sha2_256_ctx* ctx, uint8_t digest[ATCA_SHA2_256_DIGEST_SIZE])
{
    sw_sha256_final((sw_sha256_ctx*)ctx, digest);
    1d6c:	b7 01       	movw	r22, r14
    1d6e:	ce 01       	movw	r24, r28
    1d70:	01 96       	adiw	r24, 0x01	; 1
    1d72:	0e 94 e5 13 	call	0x27ca	; 0x27ca <sw_sha256_final>
    {
        return ret;
    }

    return ATCA_SUCCESS;
    1d76:	80 e0       	ldi	r24, 0x00	; 0
    1d78:	90 e0       	ldi	r25, 0x00	; 0
    1d7a:	c0 54       	subi	r28, 0x40	; 64
    1d7c:	df 4f       	sbci	r29, 0xFF	; 255
    1d7e:	cd bf       	out	0x3d, r28	; 61
    1d80:	de bf       	out	0x3e, r29	; 62
    1d82:	df 91       	pop	r29
    1d84:	cf 91       	pop	r28
    1d86:	1f 91       	pop	r17
    1d88:	0f 91       	pop	r16
    1d8a:	ff 90       	pop	r15
    1d8c:	ef 90       	pop	r14
    1d8e:	df 90       	pop	r13
    1d90:	cf 90       	pop	r12
    1d92:	08 95       	ret

00001d94 <sw_sha256_process>:
 * \param[in] ctx          SHA256 hash context
 * \param[in] blocks       Raw blocks to be processed
 * \param[in] block_count  Number of 64-byte blocks to process
 */
static void sw_sha256_process(sw_sha256_ctx* ctx, const uint8_t* blocks, uint32_t block_count)
{
    1d94:	2f 92       	push	r2
    1d96:	3f 92       	push	r3
    1d98:	4f 92       	push	r4
    1d9a:	5f 92       	push	r5
    1d9c:	6f 92       	push	r6
    1d9e:	7f 92       	push	r7
    1da0:	8f 92       	push	r8
    1da2:	9f 92       	push	r9
    1da4:	af 92       	push	r10
    1da6:	bf 92       	push	r11
    1da8:	cf 92       	push	r12
    1daa:	df 92       	push	r13
    1dac:	ef 92       	push	r14
    1dae:	ff 92       	push	r15
    1db0:	0f 93       	push	r16
    1db2:	1f 93       	push	r17
    1db4:	cf 93       	push	r28
    1db6:	df 93       	push	r29
    1db8:	cd b7       	in	r28, 0x3d	; 61
    1dba:	de b7       	in	r29, 0x3e	; 62
    1dbc:	c4 55       	subi	r28, 0x54	; 84
    1dbe:	d1 40       	sbci	r29, 0x01	; 1
    1dc0:	cd bf       	out	0x3d, r28	; 61
    1dc2:	de bf       	out	0x3e, r29	; 62
    1dc4:	c5 5b       	subi	r28, 0xB5	; 181
    1dc6:	de 4f       	sbci	r29, 0xFE	; 254
    1dc8:	88 83       	st	Y, r24
    1dca:	99 83       	std	Y+1, r25	; 0x01
    1dcc:	cb 54       	subi	r28, 0x4B	; 75
    1dce:	d1 40       	sbci	r29, 0x01	; 1
    1dd0:	c1 5b       	subi	r28, 0xB1	; 177
    1dd2:	de 4f       	sbci	r29, 0xFE	; 254
    1dd4:	28 83       	st	Y, r18
    1dd6:	39 83       	std	Y+1, r19	; 0x01
    1dd8:	4a 83       	std	Y+2, r20	; 0x02
    1dda:	5b 83       	std	Y+3, r21	; 0x03
    1ddc:	cf 54       	subi	r28, 0x4F	; 79
    1dde:	d1 40       	sbci	r29, 0x01	; 1
    1de0:	cb 5c       	subi	r28, 0xCB	; 203
    1de2:	de 4f       	sbci	r29, 0xFE	; 254
    1de4:	68 83       	st	Y, r22
    1de6:	c5 53       	subi	r28, 0x35	; 53
    1de8:	d1 40       	sbci	r29, 0x01	; 1
    1dea:	ca 5c       	subi	r28, 0xCA	; 202
    1dec:	de 4f       	sbci	r29, 0xFE	; 254
    1dee:	78 83       	st	Y, r23
    1df0:	c6 53       	subi	r28, 0x36	; 54
    1df2:	d1 40       	sbci	r29, 0x01	; 1
        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
    };

    // Loop through all the blocks to process
    for (block = 0; block < block_count; block++)
    1df4:	cf 5b       	subi	r28, 0xBF	; 191
    1df6:	de 4f       	sbci	r29, 0xFE	; 254
    1df8:	18 82       	st	Y, r1
    1dfa:	19 82       	std	Y+1, r1	; 0x01
    1dfc:	1a 82       	std	Y+2, r1	; 0x02
    1dfe:	1b 82       	std	Y+3, r1	; 0x03
    1e00:	c1 54       	subi	r28, 0x41	; 65
    1e02:	d1 40       	sbci	r29, 0x01	; 1
    1e04:	9e 01       	movw	r18, r28
    1e06:	2f 5b       	subi	r18, 0xBF	; 191
    1e08:	3f 4f       	sbci	r19, 0xFF	; 255
    1e0a:	cf 5d       	subi	r28, 0xDF	; 223
    1e0c:	de 4f       	sbci	r29, 0xFE	; 254
    1e0e:	28 83       	st	Y, r18
    1e10:	39 83       	std	Y+1, r19	; 0x01
    1e12:	c1 52       	subi	r28, 0x21	; 33
    1e14:	d1 40       	sbci	r29, 0x01	; 1
    1e16:	ae 01       	movw	r20, r28
    1e18:	4f 53       	subi	r20, 0x3F	; 63
    1e1a:	5f 4f       	sbci	r21, 0xFF	; 255
    1e1c:	cd 5d       	subi	r28, 0xDD	; 221
    1e1e:	de 4f       	sbci	r29, 0xFE	; 254
    1e20:	48 83       	st	Y, r20
    1e22:	59 83       	std	Y+1, r21	; 0x01
    1e24:	c3 52       	subi	r28, 0x23	; 35
    1e26:	d1 40       	sbci	r29, 0x01	; 1
    1e28:	88 55       	subi	r24, 0x58	; 88
    1e2a:	9f 4f       	sbci	r25, 0xFF	; 255
    1e2c:	c3 5b       	subi	r28, 0xB3	; 179
    1e2e:	de 4f       	sbci	r29, 0xFE	; 254
    1e30:	88 83       	st	Y, r24
    1e32:	99 83       	std	Y+1, r25	; 0x01
    1e34:	cd 54       	subi	r28, 0x4D	; 77
    1e36:	d1 40       	sbci	r29, 0x01	; 1
    1e38:	cf 5b       	subi	r28, 0xBF	; 191
    1e3a:	de 4f       	sbci	r29, 0xFE	; 254
    1e3c:	68 81       	ld	r22, Y
    1e3e:	79 81       	ldd	r23, Y+1	; 0x01
    1e40:	8a 81       	ldd	r24, Y+2	; 0x02
    1e42:	9b 81       	ldd	r25, Y+3	; 0x03
    1e44:	c1 54       	subi	r28, 0x41	; 65
    1e46:	d1 40       	sbci	r29, 0x01	; 1
    1e48:	c1 5b       	subi	r28, 0xB1	; 177
    1e4a:	de 4f       	sbci	r29, 0xFE	; 254
    1e4c:	48 80       	ld	r4, Y
    1e4e:	59 80       	ldd	r5, Y+1	; 0x01
    1e50:	6a 80       	ldd	r6, Y+2	; 0x02
    1e52:	7b 80       	ldd	r7, Y+3	; 0x03
    1e54:	cf 54       	subi	r28, 0x4F	; 79
    1e56:	d1 40       	sbci	r29, 0x01	; 1
    1e58:	64 15       	cp	r22, r4
    1e5a:	75 05       	cpc	r23, r5
    1e5c:	86 05       	cpc	r24, r6
    1e5e:	97 05       	cpc	r25, r7
    1e60:	09 f4       	brne	.+2      	; 0x1e64 <sw_sha256_process+0xd0>
    1e62:	cc c3       	rjmp	.+1944   	; 0x25fc <sw_sha256_process+0x868>
    1e64:	be 01       	movw	r22, r28
    1e66:	6f 5f       	subi	r22, 0xFF	; 255
    1e68:	7f 4f       	sbci	r23, 0xFF	; 255
    1e6a:	c9 5c       	subi	r28, 0xC9	; 201
    1e6c:	de 4f       	sbci	r29, 0xFE	; 254
    1e6e:	68 83       	st	Y, r22
    1e70:	79 83       	std	Y+1, r23	; 0x01
    1e72:	c7 53       	subi	r28, 0x37	; 55
    1e74:	d1 40       	sbci	r29, 0x01	; 1
    1e76:	fb 01       	movw	r30, r22
    1e78:	cb 5c       	subi	r28, 0xCB	; 203
    1e7a:	de 4f       	sbci	r29, 0xFE	; 254
    1e7c:	a8 81       	ld	r26, Y
    1e7e:	b9 81       	ldd	r27, Y+1	; 0x01
    1e80:	c5 53       	subi	r28, 0x35	; 53
    1e82:	d1 40       	sbci	r29, 0x01	; 1
        const uint8_t* cur_msg_block = &blocks[block * SHA256_BLOCK_SIZE];

        // Swap word bytes
        for (i = 0; i < SHA256_BLOCK_SIZE; i += 4)
        {
            w_union.w_byte[i + 3] = cur_msg_block[i + 0];
    1e84:	8c 91       	ld	r24, X
    1e86:	83 83       	std	Z+3, r24	; 0x03
            w_union.w_byte[i + 2] = cur_msg_block[i + 1];
    1e88:	11 96       	adiw	r26, 0x01	; 1
    1e8a:	8c 91       	ld	r24, X
    1e8c:	11 97       	sbiw	r26, 0x01	; 1
    1e8e:	82 83       	std	Z+2, r24	; 0x02
            w_union.w_byte[i + 1] = cur_msg_block[i + 2];
    1e90:	12 96       	adiw	r26, 0x02	; 2
    1e92:	8c 91       	ld	r24, X
    1e94:	12 97       	sbiw	r26, 0x02	; 2
    1e96:	81 83       	std	Z+1, r24	; 0x01
            w_union.w_byte[i + 0] = cur_msg_block[i + 3];
    1e98:	13 96       	adiw	r26, 0x03	; 3
    1e9a:	8c 91       	ld	r24, X
    1e9c:	13 97       	sbiw	r26, 0x03	; 3
    1e9e:	80 83       	st	Z, r24
    1ea0:	14 96       	adiw	r26, 0x04	; 4
    1ea2:	34 96       	adiw	r30, 0x04	; 4
        uint32_t maj, ch;
        uint32_t rotate_register[8];
        const uint8_t* cur_msg_block = &blocks[block * SHA256_BLOCK_SIZE];

        // Swap word bytes
        for (i = 0; i < SHA256_BLOCK_SIZE; i += 4)
    1ea4:	cf 5d       	subi	r28, 0xDF	; 223
    1ea6:	de 4f       	sbci	r29, 0xFE	; 254
    1ea8:	88 81       	ld	r24, Y
    1eaa:	99 81       	ldd	r25, Y+1	; 0x01
    1eac:	c1 52       	subi	r28, 0x21	; 33
    1eae:	d1 40       	sbci	r29, 0x01	; 1
    1eb0:	e8 17       	cp	r30, r24
    1eb2:	f9 07       	cpc	r31, r25
    1eb4:	39 f7       	brne	.-50     	; 0x1e84 <sw_sha256_process+0xf0>
    1eb6:	c9 5c       	subi	r28, 0xC9	; 201
    1eb8:	de 4f       	sbci	r29, 0xFE	; 254
    1eba:	28 80       	ld	r2, Y
    1ebc:	39 80       	ldd	r3, Y+1	; 0x01
    1ebe:	c7 53       	subi	r28, 0x37	; 55
    1ec0:	d1 40       	sbci	r29, 0x01	; 1
    1ec2:	31 01       	movw	r6, r2

        w_index = 16;
        while (w_index < SHA256_BLOCK_SIZE)
        {
            // right rotate for 32-bit variable in C: (value >> places) | (value << 32 - places)
            word_value = w_union.w_word[w_index - 15];
    1ec4:	d1 01       	movw	r26, r2
    1ec6:	14 96       	adiw	r26, 0x04	; 4
    1ec8:	4d 91       	ld	r20, X+
    1eca:	5d 91       	ld	r21, X+
    1ecc:	6d 91       	ld	r22, X+
    1ece:	7c 91       	ld	r23, X
    1ed0:	17 97       	sbiw	r26, 0x07	; 7
            s0 = rotate_right(word_value, 7) ^ rotate_right(word_value, 18) ^ (word_value >> 3);

            word_value = w_union.w_word[w_index - 2];
    1ed2:	d8 96       	adiw	r26, 0x38	; 56
    1ed4:	8d 91       	ld	r24, X+
    1ed6:	9d 91       	ld	r25, X+
    1ed8:	0d 90       	ld	r0, X+
    1eda:	bc 91       	ld	r27, X
    1edc:	a0 2d       	mov	r26, r0
    1ede:	e4 e0       	ldi	r30, 0x04	; 4
    1ee0:	2e 0e       	add	r2, r30
    1ee2:	31 1c       	adc	r3, r1
            s1 = rotate_right(word_value, 17) ^ rotate_right(word_value, 19) ^ (word_value >> 10);

            w_union.w_word[w_index] = w_union.w_word[w_index - 16] + s0 + w_union.w_word[w_index - 7] + s1;
    1ee4:	6a 01       	movw	r12, r20
    1ee6:	7b 01       	movw	r14, r22
    1ee8:	17 e0       	ldi	r17, 0x07	; 7
    1eea:	f6 94       	lsr	r15
    1eec:	e7 94       	ror	r14
    1eee:	d7 94       	ror	r13
    1ef0:	c7 94       	ror	r12
    1ef2:	1a 95       	dec	r17
    1ef4:	d1 f7       	brne	.-12     	; 0x1eea <sw_sha256_process+0x156>
    1ef6:	8a 01       	movw	r16, r20
    1ef8:	9b 01       	movw	r18, r22
    1efa:	e9 e1       	ldi	r30, 0x19	; 25
    1efc:	00 0f       	add	r16, r16
    1efe:	11 1f       	adc	r17, r17
    1f00:	22 1f       	adc	r18, r18
    1f02:	33 1f       	adc	r19, r19
    1f04:	ea 95       	dec	r30
    1f06:	d1 f7       	brne	.-12     	; 0x1efc <sw_sha256_process+0x168>
    1f08:	c0 2a       	or	r12, r16
    1f0a:	d1 2a       	or	r13, r17
    1f0c:	e2 2a       	or	r14, r18
    1f0e:	f3 2a       	or	r15, r19
    1f10:	4a 01       	movw	r8, r20
    1f12:	5b 01       	movw	r10, r22
    1f14:	fe e0       	ldi	r31, 0x0E	; 14
    1f16:	88 0c       	add	r8, r8
    1f18:	99 1c       	adc	r9, r9
    1f1a:	aa 1c       	adc	r10, r10
    1f1c:	bb 1c       	adc	r11, r11
    1f1e:	fa 95       	dec	r31
    1f20:	d1 f7       	brne	.-12     	; 0x1f16 <sw_sha256_process+0x182>
    1f22:	8a 01       	movw	r16, r20
    1f24:	9b 01       	movw	r18, r22
    1f26:	e2 e1       	ldi	r30, 0x12	; 18
    1f28:	36 95       	lsr	r19
    1f2a:	27 95       	ror	r18
    1f2c:	17 95       	ror	r17
    1f2e:	07 95       	ror	r16
    1f30:	ea 95       	dec	r30
    1f32:	d1 f7       	brne	.-12     	; 0x1f28 <sw_sha256_process+0x194>
    1f34:	08 29       	or	r16, r8
    1f36:	19 29       	or	r17, r9
    1f38:	2a 29       	or	r18, r10
    1f3a:	3b 29       	or	r19, r11
    1f3c:	0c 25       	eor	r16, r12
    1f3e:	1d 25       	eor	r17, r13
    1f40:	2e 25       	eor	r18, r14
    1f42:	3f 25       	eor	r19, r15
    1f44:	6a 01       	movw	r12, r20
    1f46:	7b 01       	movw	r14, r22
    1f48:	f3 e0       	ldi	r31, 0x03	; 3
    1f4a:	f6 94       	lsr	r15
    1f4c:	e7 94       	ror	r14
    1f4e:	d7 94       	ror	r13
    1f50:	c7 94       	ror	r12
    1f52:	fa 95       	dec	r31
    1f54:	d1 f7       	brne	.-12     	; 0x1f4a <sw_sha256_process+0x1b6>
    1f56:	0c 25       	eor	r16, r12
    1f58:	1d 25       	eor	r17, r13
    1f5a:	2e 25       	eor	r18, r14
    1f5c:	3f 25       	eor	r19, r15
    1f5e:	f3 01       	movw	r30, r6
    1f60:	c0 80       	ld	r12, Z
    1f62:	d1 80       	ldd	r13, Z+1	; 0x01
    1f64:	e2 80       	ldd	r14, Z+2	; 0x02
    1f66:	f3 80       	ldd	r15, Z+3	; 0x03
    1f68:	f1 01       	movw	r30, r2
    1f6a:	40 a1       	ldd	r20, Z+32	; 0x20
    1f6c:	51 a1       	ldd	r21, Z+33	; 0x21
    1f6e:	62 a1       	ldd	r22, Z+34	; 0x22
    1f70:	73 a1       	ldd	r23, Z+35	; 0x23
    1f72:	c4 0e       	add	r12, r20
    1f74:	d5 1e       	adc	r13, r21
    1f76:	e6 1e       	adc	r14, r22
    1f78:	f7 1e       	adc	r15, r23
    1f7a:	c0 0e       	add	r12, r16
    1f7c:	d1 1e       	adc	r13, r17
    1f7e:	e2 1e       	adc	r14, r18
    1f80:	f3 1e       	adc	r15, r19
    1f82:	8c 01       	movw	r16, r24
    1f84:	9d 01       	movw	r18, r26
    1f86:	4f e0       	ldi	r20, 0x0F	; 15
    1f88:	00 0f       	add	r16, r16
    1f8a:	11 1f       	adc	r17, r17
    1f8c:	22 1f       	adc	r18, r18
    1f8e:	33 1f       	adc	r19, r19
    1f90:	4a 95       	dec	r20
    1f92:	d1 f7       	brne	.-12     	; 0x1f88 <sw_sha256_process+0x1f4>
    1f94:	ac 01       	movw	r20, r24
    1f96:	bd 01       	movw	r22, r26
    1f98:	e1 e1       	ldi	r30, 0x11	; 17
    1f9a:	76 95       	lsr	r23
    1f9c:	67 95       	ror	r22
    1f9e:	57 95       	ror	r21
    1fa0:	47 95       	ror	r20
    1fa2:	ea 95       	dec	r30
    1fa4:	d1 f7       	brne	.-12     	; 0x1f9a <sw_sha256_process+0x206>
    1fa6:	04 2b       	or	r16, r20
    1fa8:	15 2b       	or	r17, r21
    1faa:	26 2b       	or	r18, r22
    1fac:	37 2b       	or	r19, r23
    1fae:	ac 01       	movw	r20, r24
    1fb0:	bd 01       	movw	r22, r26
    1fb2:	fd e0       	ldi	r31, 0x0D	; 13
    1fb4:	44 0f       	add	r20, r20
    1fb6:	55 1f       	adc	r21, r21
    1fb8:	66 1f       	adc	r22, r22
    1fba:	77 1f       	adc	r23, r23
    1fbc:	fa 95       	dec	r31
    1fbe:	d1 f7       	brne	.-12     	; 0x1fb4 <sw_sha256_process+0x220>
    1fc0:	2c 01       	movw	r4, r24
    1fc2:	3d 01       	movw	r6, r26
    1fc4:	e3 e1       	ldi	r30, 0x13	; 19
    1fc6:	76 94       	lsr	r7
    1fc8:	67 94       	ror	r6
    1fca:	57 94       	ror	r5
    1fcc:	47 94       	ror	r4
    1fce:	ea 95       	dec	r30
    1fd0:	d1 f7       	brne	.-12     	; 0x1fc6 <sw_sha256_process+0x232>
    1fd2:	44 2a       	or	r4, r20
    1fd4:	55 2a       	or	r5, r21
    1fd6:	66 2a       	or	r6, r22
    1fd8:	77 2a       	or	r7, r23
    1fda:	40 26       	eor	r4, r16
    1fdc:	51 26       	eor	r5, r17
    1fde:	62 26       	eor	r6, r18
    1fe0:	73 26       	eor	r7, r19
    1fe2:	fa e0       	ldi	r31, 0x0A	; 10
    1fe4:	b6 95       	lsr	r27
    1fe6:	a7 95       	ror	r26
    1fe8:	97 95       	ror	r25
    1fea:	87 95       	ror	r24
    1fec:	fa 95       	dec	r31
    1fee:	d1 f7       	brne	.-12     	; 0x1fe4 <sw_sha256_process+0x250>
    1ff0:	48 26       	eor	r4, r24
    1ff2:	59 26       	eor	r5, r25
    1ff4:	6a 26       	eor	r6, r26
    1ff6:	7b 26       	eor	r7, r27
    1ff8:	4c 0c       	add	r4, r12
    1ffa:	5d 1c       	adc	r5, r13
    1ffc:	6e 1c       	adc	r6, r14
    1ffe:	7f 1c       	adc	r7, r15
    2000:	d1 01       	movw	r26, r2
    2002:	dc 96       	adiw	r26, 0x3c	; 60
    2004:	4d 92       	st	X+, r4
    2006:	5d 92       	st	X+, r5
    2008:	6d 92       	st	X+, r6
    200a:	7c 92       	st	X, r7
    200c:	df 97       	sbiw	r26, 0x3f	; 63
            w_union.w_byte[i + 1] = cur_msg_block[i + 2];
            w_union.w_byte[i + 0] = cur_msg_block[i + 3];
        }

        w_index = 16;
        while (w_index < SHA256_BLOCK_SIZE)
    200e:	cd 5d       	subi	r28, 0xDD	; 221
    2010:	de 4f       	sbci	r29, 0xFE	; 254
    2012:	e8 81       	ld	r30, Y
    2014:	f9 81       	ldd	r31, Y+1	; 0x01
    2016:	c3 52       	subi	r28, 0x23	; 35
    2018:	d1 40       	sbci	r29, 0x01	; 1
    201a:	2e 16       	cp	r2, r30
    201c:	3f 06       	cpc	r3, r31
    201e:	09 f0       	breq	.+2      	; 0x2022 <sw_sha256_process+0x28e>
    2020:	50 cf       	rjmp	.-352    	; 0x1ec2 <sw_sha256_process+0x12e>
    2022:	c5 5b       	subi	r28, 0xB5	; 181
    2024:	de 4f       	sbci	r29, 0xFE	; 254
    2026:	28 80       	ld	r2, Y
    2028:	39 80       	ldd	r3, Y+1	; 0x01
    202a:	cb 54       	subi	r28, 0x4B	; 75
    202c:	d1 40       	sbci	r29, 0x01	; 1
    202e:	f8 e8       	ldi	r31, 0x88	; 136
    2030:	2f 0e       	add	r2, r31
    2032:	31 1c       	adc	r3, r1
    2034:	9e 01       	movw	r18, r28
    2036:	2f 5f       	subi	r18, 0xFF	; 255
    2038:	3e 4f       	sbci	r19, 0xFE	; 254
    203a:	cd 5a       	subi	r28, 0xAD	; 173
    203c:	de 4f       	sbci	r29, 0xFE	; 254
    203e:	28 83       	st	Y, r18
    2040:	39 83       	std	Y+1, r19	; 0x01
    2042:	c3 55       	subi	r28, 0x53	; 83
    2044:	d1 40       	sbci	r29, 0x01	; 1
    2046:	c9 01       	movw	r24, r18
    2048:	f1 01       	movw	r30, r2
        }

        // Initialize hash value for this chunk.
        for (i = 0; i < 8; i++)
        {
            rotate_register[i] = ctx->hash[i];
    204a:	41 91       	ld	r20, Z+
    204c:	51 91       	ld	r21, Z+
    204e:	61 91       	ld	r22, Z+
    2050:	71 91       	ld	r23, Z+
    2052:	dc 01       	movw	r26, r24
    2054:	4d 93       	st	X+, r20
    2056:	5d 93       	st	X+, r21
    2058:	6d 93       	st	X+, r22
    205a:	7d 93       	st	X+, r23
    205c:	cd 01       	movw	r24, r26

            w_index++;
        }

        // Initialize hash value for this chunk.
        for (i = 0; i < 8; i++)
    205e:	c3 5b       	subi	r28, 0xB3	; 179
    2060:	de 4f       	sbci	r29, 0xFE	; 254
    2062:	48 80       	ld	r4, Y
    2064:	59 80       	ldd	r5, Y+1	; 0x01
    2066:	cd 54       	subi	r28, 0x4D	; 77
    2068:	d1 40       	sbci	r29, 0x01	; 1
    206a:	e4 15       	cp	r30, r4
    206c:	f5 05       	cpc	r31, r5
    206e:	69 f7       	brne	.-38     	; 0x204a <sw_sha256_process+0x2b6>
    2070:	cd 5a       	subi	r28, 0xAD	; 173
    2072:	de 4f       	sbci	r29, 0xFE	; 254
    2074:	a8 81       	ld	r26, Y
    2076:	b9 81       	ldd	r27, Y+1	; 0x01
    2078:	c3 55       	subi	r28, 0x53	; 83
    207a:	d1 40       	sbci	r29, 0x01	; 1
    207c:	5c 96       	adiw	r26, 0x1c	; 28
    207e:	6d 90       	ld	r6, X+
    2080:	7d 90       	ld	r7, X+
    2082:	8d 90       	ld	r8, X+
    2084:	9c 90       	ld	r9, X
    2086:	5f 97       	sbiw	r26, 0x1f	; 31
    2088:	c9 5b       	subi	r28, 0xB9	; 185
    208a:	de 4f       	sbci	r29, 0xFE	; 254
    208c:	68 82       	st	Y, r6
    208e:	79 82       	std	Y+1, r7	; 0x01
    2090:	8a 82       	std	Y+2, r8	; 0x02
    2092:	9b 82       	std	Y+3, r9	; 0x03
    2094:	c7 54       	subi	r28, 0x47	; 71
    2096:	d1 40       	sbci	r29, 0x01	; 1
    2098:	58 96       	adiw	r26, 0x18	; 24
    209a:	4d 90       	ld	r4, X+
    209c:	5d 90       	ld	r5, X+
    209e:	6d 90       	ld	r6, X+
    20a0:	7c 90       	ld	r7, X
    20a2:	5b 97       	sbiw	r26, 0x1b	; 27
    20a4:	c3 5c       	subi	r28, 0xC3	; 195
    20a6:	de 4f       	sbci	r29, 0xFE	; 254
    20a8:	48 82       	st	Y, r4
    20aa:	59 82       	std	Y+1, r5	; 0x01
    20ac:	6a 82       	std	Y+2, r6	; 0x02
    20ae:	7b 82       	std	Y+3, r7	; 0x03
    20b0:	cd 53       	subi	r28, 0x3D	; 61
    20b2:	d1 40       	sbci	r29, 0x01	; 1
    20b4:	54 96       	adiw	r26, 0x14	; 20
    20b6:	4d 90       	ld	r4, X+
    20b8:	5d 90       	ld	r5, X+
    20ba:	6d 90       	ld	r6, X+
    20bc:	7c 90       	ld	r7, X
    20be:	57 97       	sbiw	r26, 0x17	; 23
    20c0:	c7 5c       	subi	r28, 0xC7	; 199
    20c2:	de 4f       	sbci	r29, 0xFE	; 254
    20c4:	48 82       	st	Y, r4
    20c6:	59 82       	std	Y+1, r5	; 0x01
    20c8:	6a 82       	std	Y+2, r6	; 0x02
    20ca:	7b 82       	std	Y+3, r7	; 0x03
    20cc:	c9 53       	subi	r28, 0x39	; 57
    20ce:	d1 40       	sbci	r29, 0x01	; 1
    20d0:	50 96       	adiw	r26, 0x10	; 16
    20d2:	8d 91       	ld	r24, X+
    20d4:	9d 91       	ld	r25, X+
    20d6:	0d 90       	ld	r0, X+
    20d8:	bc 91       	ld	r27, X
    20da:	a0 2d       	mov	r26, r0
    20dc:	cd 5a       	subi	r28, 0xAD	; 173
    20de:	de 4f       	sbci	r29, 0xFE	; 254
    20e0:	e8 81       	ld	r30, Y
    20e2:	f9 81       	ldd	r31, Y+1	; 0x01
    20e4:	c3 55       	subi	r28, 0x53	; 83
    20e6:	d1 40       	sbci	r29, 0x01	; 1
    20e8:	44 84       	ldd	r4, Z+12	; 0x0c
    20ea:	55 84       	ldd	r5, Z+13	; 0x0d
    20ec:	66 84       	ldd	r6, Z+14	; 0x0e
    20ee:	77 84       	ldd	r7, Z+15	; 0x0f
    20f0:	cb 5d       	subi	r28, 0xDB	; 219
    20f2:	de 4f       	sbci	r29, 0xFE	; 254
    20f4:	48 82       	st	Y, r4
    20f6:	59 82       	std	Y+1, r5	; 0x01
    20f8:	6a 82       	std	Y+2, r6	; 0x02
    20fa:	7b 82       	std	Y+3, r7	; 0x03
    20fc:	c5 52       	subi	r28, 0x25	; 37
    20fe:	d1 40       	sbci	r29, 0x01	; 1
    2100:	40 84       	ldd	r4, Z+8	; 0x08
    2102:	51 84       	ldd	r5, Z+9	; 0x09
    2104:	62 84       	ldd	r6, Z+10	; 0x0a
    2106:	73 84       	ldd	r7, Z+11	; 0x0b
    2108:	cf 5c       	subi	r28, 0xCF	; 207
    210a:	de 4f       	sbci	r29, 0xFE	; 254
    210c:	48 82       	st	Y, r4
    210e:	59 82       	std	Y+1, r5	; 0x01
    2110:	6a 82       	std	Y+2, r6	; 0x02
    2112:	7b 82       	std	Y+3, r7	; 0x03
    2114:	c1 53       	subi	r28, 0x31	; 49
    2116:	d1 40       	sbci	r29, 0x01	; 1
    2118:	44 80       	ldd	r4, Z+4	; 0x04
    211a:	55 80       	ldd	r5, Z+5	; 0x05
    211c:	66 80       	ldd	r6, Z+6	; 0x06
    211e:	77 80       	ldd	r7, Z+7	; 0x07
    2120:	c3 5d       	subi	r28, 0xD3	; 211
    2122:	de 4f       	sbci	r29, 0xFE	; 254
    2124:	48 82       	st	Y, r4
    2126:	59 82       	std	Y+1, r5	; 0x01
    2128:	6a 82       	std	Y+2, r6	; 0x02
    212a:	7b 82       	std	Y+3, r7	; 0x03
    212c:	cd 52       	subi	r28, 0x2D	; 45
    212e:	d1 40       	sbci	r29, 0x01	; 1
    2130:	00 81       	ld	r16, Z
    2132:	11 81       	ldd	r17, Z+1	; 0x01
    2134:	22 81       	ldd	r18, Z+2	; 0x02
    2136:	33 81       	ldd	r19, Z+3	; 0x03
    2138:	42 e1       	ldi	r20, 0x12	; 18
    213a:	59 ea       	ldi	r21, 0xA9	; 169
    213c:	cb 5b       	subi	r28, 0xBB	; 187
    213e:	de 4f       	sbci	r29, 0xFE	; 254
    2140:	48 83       	st	Y, r20
    2142:	59 83       	std	Y+1, r21	; 0x01
    2144:	c5 54       	subi	r28, 0x45	; 69
    2146:	d1 40       	sbci	r29, 0x01	; 1
            s1 = rotate_right(rotate_register[4], 6)
                 ^ rotate_right(rotate_register[4], 11)
                 ^ rotate_right(rotate_register[4], 25);
            ch = (rotate_register[4] & rotate_register[5])
                 ^ (~rotate_register[4] & rotate_register[6]);
            t1 = rotate_register[7] + s1 + ch + k[i] + w_union.w_word[i];
    2148:	cb 5b       	subi	r28, 0xBB	; 187
    214a:	de 4f       	sbci	r29, 0xFE	; 254
    214c:	e8 81       	ld	r30, Y
    214e:	f9 81       	ldd	r31, Y+1	; 0x01
    2150:	c5 54       	subi	r28, 0x45	; 69
    2152:	d1 40       	sbci	r29, 0x01	; 1
    2154:	41 91       	ld	r20, Z+
    2156:	51 91       	ld	r21, Z+
    2158:	61 91       	ld	r22, Z+
    215a:	71 91       	ld	r23, Z+
    215c:	cb 5b       	subi	r28, 0xBB	; 187
    215e:	de 4f       	sbci	r29, 0xFE	; 254
    2160:	e8 83       	st	Y, r30
    2162:	f9 83       	std	Y+1, r31	; 0x01
    2164:	c5 54       	subi	r28, 0x45	; 69
    2166:	d1 40       	sbci	r29, 0x01	; 1
    2168:	4c 01       	movw	r8, r24
    216a:	5d 01       	movw	r10, r26
    216c:	ea e1       	ldi	r30, 0x1A	; 26
    216e:	88 0c       	add	r8, r8
    2170:	99 1c       	adc	r9, r9
    2172:	aa 1c       	adc	r10, r10
    2174:	bb 1c       	adc	r11, r11
    2176:	ea 95       	dec	r30
    2178:	d1 f7       	brne	.-12     	; 0x216e <sw_sha256_process+0x3da>
    217a:	6c 01       	movw	r12, r24
    217c:	7d 01       	movw	r14, r26
    217e:	f6 e0       	ldi	r31, 0x06	; 6
    2180:	f6 94       	lsr	r15
    2182:	e7 94       	ror	r14
    2184:	d7 94       	ror	r13
    2186:	c7 94       	ror	r12
    2188:	fa 95       	dec	r31
    218a:	d1 f7       	brne	.-12     	; 0x2180 <sw_sha256_process+0x3ec>
    218c:	c8 28       	or	r12, r8
    218e:	d9 28       	or	r13, r9
    2190:	ea 28       	or	r14, r10
    2192:	fb 28       	or	r15, r11
    2194:	2c 01       	movw	r4, r24
    2196:	3d 01       	movw	r6, r26
    2198:	e5 e1       	ldi	r30, 0x15	; 21
    219a:	44 0c       	add	r4, r4
    219c:	55 1c       	adc	r5, r5
    219e:	66 1c       	adc	r6, r6
    21a0:	77 1c       	adc	r7, r7
    21a2:	ea 95       	dec	r30
    21a4:	d1 f7       	brne	.-12     	; 0x219a <sw_sha256_process+0x406>
    21a6:	4c 01       	movw	r8, r24
    21a8:	5d 01       	movw	r10, r26
    21aa:	fb e0       	ldi	r31, 0x0B	; 11
    21ac:	b6 94       	lsr	r11
    21ae:	a7 94       	ror	r10
    21b0:	97 94       	ror	r9
    21b2:	87 94       	ror	r8
    21b4:	fa 95       	dec	r31
    21b6:	d1 f7       	brne	.-12     	; 0x21ac <sw_sha256_process+0x418>
    21b8:	84 28       	or	r8, r4
    21ba:	95 28       	or	r9, r5
    21bc:	a6 28       	or	r10, r6
    21be:	b7 28       	or	r11, r7
    21c0:	8c 24       	eor	r8, r12
    21c2:	9d 24       	eor	r9, r13
    21c4:	ae 24       	eor	r10, r14
    21c6:	bf 24       	eor	r11, r15
    21c8:	6c 01       	movw	r12, r24
    21ca:	7d 01       	movw	r14, r26
    21cc:	e9 e1       	ldi	r30, 0x19	; 25
    21ce:	f6 94       	lsr	r15
    21d0:	e7 94       	ror	r14
    21d2:	d7 94       	ror	r13
    21d4:	c7 94       	ror	r12
    21d6:	ea 95       	dec	r30
    21d8:	d1 f7       	brne	.-12     	; 0x21ce <sw_sha256_process+0x43a>
    21da:	2c 01       	movw	r4, r24
    21dc:	3d 01       	movw	r6, r26
    21de:	f7 e0       	ldi	r31, 0x07	; 7
    21e0:	44 0c       	add	r4, r4
    21e2:	55 1c       	adc	r5, r5
    21e4:	66 1c       	adc	r6, r6
    21e6:	77 1c       	adc	r7, r7
    21e8:	fa 95       	dec	r31
    21ea:	d1 f7       	brne	.-12     	; 0x21e0 <sw_sha256_process+0x44c>
    21ec:	c4 28       	or	r12, r4
    21ee:	d5 28       	or	r13, r5
    21f0:	e6 28       	or	r14, r6
    21f2:	f7 28       	or	r15, r7
    21f4:	c8 24       	eor	r12, r8
    21f6:	d9 24       	eor	r13, r9
    21f8:	ea 24       	eor	r14, r10
    21fa:	fb 24       	eor	r15, r11
    21fc:	c9 5c       	subi	r28, 0xC9	; 201
    21fe:	de 4f       	sbci	r29, 0xFE	; 254
    2200:	e8 81       	ld	r30, Y
    2202:	f9 81       	ldd	r31, Y+1	; 0x01
    2204:	c7 53       	subi	r28, 0x37	; 55
    2206:	d1 40       	sbci	r29, 0x01	; 1
    2208:	81 90       	ld	r8, Z+
    220a:	91 90       	ld	r9, Z+
    220c:	a1 90       	ld	r10, Z+
    220e:	b1 90       	ld	r11, Z+
    2210:	c9 5c       	subi	r28, 0xC9	; 201
    2212:	de 4f       	sbci	r29, 0xFE	; 254
    2214:	e8 83       	st	Y, r30
    2216:	f9 83       	std	Y+1, r31	; 0x01
    2218:	c7 53       	subi	r28, 0x37	; 55
    221a:	d1 40       	sbci	r29, 0x01	; 1
    221c:	48 0d       	add	r20, r8
    221e:	59 1d       	adc	r21, r9
    2220:	6a 1d       	adc	r22, r10
    2222:	7b 1d       	adc	r23, r11
    2224:	4c 0d       	add	r20, r12
    2226:	5d 1d       	adc	r21, r13
    2228:	6e 1d       	adc	r22, r14
    222a:	7f 1d       	adc	r23, r15
    222c:	2c 01       	movw	r4, r24
    222e:	3d 01       	movw	r6, r26
    2230:	40 94       	com	r4
    2232:	50 94       	com	r5
    2234:	60 94       	com	r6
    2236:	70 94       	com	r7
    2238:	c3 5c       	subi	r28, 0xC3	; 195
    223a:	de 4f       	sbci	r29, 0xFE	; 254
    223c:	88 80       	ld	r8, Y
    223e:	99 80       	ldd	r9, Y+1	; 0x01
    2240:	aa 80       	ldd	r10, Y+2	; 0x02
    2242:	bb 80       	ldd	r11, Y+3	; 0x03
    2244:	cd 53       	subi	r28, 0x3D	; 61
    2246:	d1 40       	sbci	r29, 0x01	; 1
    2248:	48 20       	and	r4, r8
    224a:	59 20       	and	r5, r9
    224c:	6a 20       	and	r6, r10
    224e:	7b 20       	and	r7, r11
    2250:	c7 5c       	subi	r28, 0xC7	; 199
    2252:	de 4f       	sbci	r29, 0xFE	; 254
    2254:	c8 80       	ld	r12, Y
    2256:	d9 80       	ldd	r13, Y+1	; 0x01
    2258:	ea 80       	ldd	r14, Y+2	; 0x02
    225a:	fb 80       	ldd	r15, Y+3	; 0x03
    225c:	c9 53       	subi	r28, 0x39	; 57
    225e:	d1 40       	sbci	r29, 0x01	; 1
    2260:	c8 22       	and	r12, r24
    2262:	d9 22       	and	r13, r25
    2264:	ea 22       	and	r14, r26
    2266:	fb 22       	and	r15, r27
    2268:	c4 24       	eor	r12, r4
    226a:	d5 24       	eor	r13, r5
    226c:	e6 24       	eor	r14, r6
    226e:	f7 24       	eor	r15, r7
    2270:	4c 0d       	add	r20, r12
    2272:	5d 1d       	adc	r21, r13
    2274:	6e 1d       	adc	r22, r14
    2276:	7f 1d       	adc	r23, r15
    2278:	c9 5b       	subi	r28, 0xB9	; 185
    227a:	de 4f       	sbci	r29, 0xFE	; 254
    227c:	a8 80       	ld	r10, Y
    227e:	b9 80       	ldd	r11, Y+1	; 0x01
    2280:	ca 80       	ldd	r12, Y+2	; 0x02
    2282:	db 80       	ldd	r13, Y+3	; 0x03
    2284:	c7 54       	subi	r28, 0x47	; 71
    2286:	d1 40       	sbci	r29, 0x01	; 1
    2288:	4a 0d       	add	r20, r10
    228a:	5b 1d       	adc	r21, r11
    228c:	6c 1d       	adc	r22, r12
    228e:	7d 1d       	adc	r23, r13

            rotate_register[7] = rotate_register[6];
            rotate_register[6] = rotate_register[5];
            rotate_register[5] = rotate_register[4];
            rotate_register[4] = rotate_register[3] + t1;
    2290:	cb 5d       	subi	r28, 0xDB	; 219
    2292:	de 4f       	sbci	r29, 0xFE	; 254
    2294:	c8 80       	ld	r12, Y
    2296:	d9 80       	ldd	r13, Y+1	; 0x01
    2298:	ea 80       	ldd	r14, Y+2	; 0x02
    229a:	fb 80       	ldd	r15, Y+3	; 0x03
    229c:	c5 52       	subi	r28, 0x25	; 37
    229e:	d1 40       	sbci	r29, 0x01	; 1
    22a0:	c4 0e       	add	r12, r20
    22a2:	d5 1e       	adc	r13, r21
    22a4:	e6 1e       	adc	r14, r22
    22a6:	f7 1e       	adc	r15, r23
    22a8:	c7 5d       	subi	r28, 0xD7	; 215
    22aa:	de 4f       	sbci	r29, 0xFE	; 254
    22ac:	c8 82       	st	Y, r12
    22ae:	d9 82       	std	Y+1, r13	; 0x01
    22b0:	ea 82       	std	Y+2, r14	; 0x02
    22b2:	fb 82       	std	Y+3, r15	; 0x03
    22b4:	c9 52       	subi	r28, 0x29	; 41
    22b6:	d1 40       	sbci	r29, 0x01	; 1
            rotate_register[3] = rotate_register[2];
            rotate_register[2] = rotate_register[1];
            rotate_register[1] = rotate_register[0];
            rotate_register[0] = t1 + t2;
    22b8:	48 01       	movw	r8, r16
    22ba:	59 01       	movw	r10, r18
    22bc:	ee e1       	ldi	r30, 0x1E	; 30
    22be:	88 0c       	add	r8, r8
    22c0:	99 1c       	adc	r9, r9
    22c2:	aa 1c       	adc	r10, r10
    22c4:	bb 1c       	adc	r11, r11
    22c6:	ea 95       	dec	r30
    22c8:	d1 f7       	brne	.-12     	; 0x22be <sw_sha256_process+0x52a>
    22ca:	68 01       	movw	r12, r16
    22cc:	79 01       	movw	r14, r18
    22ce:	f2 e0       	ldi	r31, 0x02	; 2
    22d0:	f6 94       	lsr	r15
    22d2:	e7 94       	ror	r14
    22d4:	d7 94       	ror	r13
    22d6:	c7 94       	ror	r12
    22d8:	fa 95       	dec	r31
    22da:	d1 f7       	brne	.-12     	; 0x22d0 <sw_sha256_process+0x53c>
    22dc:	c8 28       	or	r12, r8
    22de:	d9 28       	or	r13, r9
    22e0:	ea 28       	or	r14, r10
    22e2:	fb 28       	or	r15, r11
    22e4:	28 01       	movw	r4, r16
    22e6:	39 01       	movw	r6, r18
    22e8:	e3 e1       	ldi	r30, 0x13	; 19
    22ea:	44 0c       	add	r4, r4
    22ec:	55 1c       	adc	r5, r5
    22ee:	66 1c       	adc	r6, r6
    22f0:	77 1c       	adc	r7, r7
    22f2:	ea 95       	dec	r30
    22f4:	d1 f7       	brne	.-12     	; 0x22ea <sw_sha256_process+0x556>
    22f6:	48 01       	movw	r8, r16
    22f8:	59 01       	movw	r10, r18
    22fa:	fd e0       	ldi	r31, 0x0D	; 13
    22fc:	b6 94       	lsr	r11
    22fe:	a7 94       	ror	r10
    2300:	97 94       	ror	r9
    2302:	87 94       	ror	r8
    2304:	fa 95       	dec	r31
    2306:	d1 f7       	brne	.-12     	; 0x22fc <sw_sha256_process+0x568>
    2308:	48 28       	or	r4, r8
    230a:	59 28       	or	r5, r9
    230c:	6a 28       	or	r6, r10
    230e:	7b 28       	or	r7, r11
    2310:	c4 24       	eor	r12, r4
    2312:	d5 24       	eor	r13, r5
    2314:	e6 24       	eor	r14, r6
    2316:	f7 24       	eor	r15, r7
    2318:	28 01       	movw	r4, r16
    231a:	39 01       	movw	r6, r18
    231c:	e6 e1       	ldi	r30, 0x16	; 22
    231e:	76 94       	lsr	r7
    2320:	67 94       	ror	r6
    2322:	57 94       	ror	r5
    2324:	47 94       	ror	r4
    2326:	ea 95       	dec	r30
    2328:	d1 f7       	brne	.-12     	; 0x231e <sw_sha256_process+0x58a>
    232a:	48 01       	movw	r8, r16
    232c:	59 01       	movw	r10, r18
    232e:	fa e0       	ldi	r31, 0x0A	; 10
    2330:	88 0c       	add	r8, r8
    2332:	99 1c       	adc	r9, r9
    2334:	aa 1c       	adc	r10, r10
    2336:	bb 1c       	adc	r11, r11
    2338:	fa 95       	dec	r31
    233a:	d1 f7       	brne	.-12     	; 0x2330 <sw_sha256_process+0x59c>
    233c:	84 28       	or	r8, r4
    233e:	95 28       	or	r9, r5
    2340:	a6 28       	or	r10, r6
    2342:	b7 28       	or	r11, r7
    2344:	24 01       	movw	r4, r8
    2346:	35 01       	movw	r6, r10
    2348:	4c 24       	eor	r4, r12
    234a:	5d 24       	eor	r5, r13
    234c:	6e 24       	eor	r6, r14
    234e:	7f 24       	eor	r7, r15
    2350:	cb 5d       	subi	r28, 0xDB	; 219
    2352:	de 4f       	sbci	r29, 0xFE	; 254
    2354:	48 82       	st	Y, r4
    2356:	59 82       	std	Y+1, r5	; 0x01
    2358:	6a 82       	std	Y+2, r6	; 0x02
    235a:	7b 82       	std	Y+3, r7	; 0x03
    235c:	c5 52       	subi	r28, 0x25	; 37
    235e:	d1 40       	sbci	r29, 0x01	; 1
    2360:	c3 5d       	subi	r28, 0xD3	; 211
    2362:	de 4f       	sbci	r29, 0xFE	; 254
    2364:	48 80       	ld	r4, Y
    2366:	59 80       	ldd	r5, Y+1	; 0x01
    2368:	6a 80       	ldd	r6, Y+2	; 0x02
    236a:	7b 80       	ldd	r7, Y+3	; 0x03
    236c:	cd 52       	subi	r28, 0x2D	; 45
    236e:	d1 40       	sbci	r29, 0x01	; 1
    2370:	cf 5c       	subi	r28, 0xCF	; 207
    2372:	de 4f       	sbci	r29, 0xFE	; 254
    2374:	88 80       	ld	r8, Y
    2376:	99 80       	ldd	r9, Y+1	; 0x01
    2378:	aa 80       	ldd	r10, Y+2	; 0x02
    237a:	bb 80       	ldd	r11, Y+3	; 0x03
    237c:	c1 53       	subi	r28, 0x31	; 49
    237e:	d1 40       	sbci	r29, 0x01	; 1
    2380:	48 24       	eor	r4, r8
    2382:	59 24       	eor	r5, r9
    2384:	6a 24       	eor	r6, r10
    2386:	7b 24       	eor	r7, r11
    2388:	40 22       	and	r4, r16
    238a:	51 22       	and	r5, r17
    238c:	62 22       	and	r6, r18
    238e:	73 22       	and	r7, r19
    2390:	c3 5d       	subi	r28, 0xD3	; 211
    2392:	de 4f       	sbci	r29, 0xFE	; 254
    2394:	c8 80       	ld	r12, Y
    2396:	d9 80       	ldd	r13, Y+1	; 0x01
    2398:	ea 80       	ldd	r14, Y+2	; 0x02
    239a:	fb 80       	ldd	r15, Y+3	; 0x03
    239c:	cd 52       	subi	r28, 0x2D	; 45
    239e:	d1 40       	sbci	r29, 0x01	; 1
    23a0:	c8 20       	and	r12, r8
    23a2:	d9 20       	and	r13, r9
    23a4:	ea 20       	and	r14, r10
    23a6:	fb 20       	and	r15, r11
    23a8:	c4 24       	eor	r12, r4
    23aa:	d5 24       	eor	r13, r5
    23ac:	e6 24       	eor	r14, r6
    23ae:	f7 24       	eor	r15, r7
    23b0:	cb 5d       	subi	r28, 0xDB	; 219
    23b2:	de 4f       	sbci	r29, 0xFE	; 254
    23b4:	48 80       	ld	r4, Y
    23b6:	59 80       	ldd	r5, Y+1	; 0x01
    23b8:	6a 80       	ldd	r6, Y+2	; 0x02
    23ba:	7b 80       	ldd	r7, Y+3	; 0x03
    23bc:	c5 52       	subi	r28, 0x25	; 37
    23be:	d1 40       	sbci	r29, 0x01	; 1
    23c0:	c4 0c       	add	r12, r4
    23c2:	d5 1c       	adc	r13, r5
    23c4:	e6 1c       	adc	r14, r6
    23c6:	f7 1c       	adc	r15, r7
    23c8:	c4 0e       	add	r12, r20
    23ca:	d5 1e       	adc	r13, r21
    23cc:	e6 1e       	adc	r14, r22
    23ce:	f7 1e       	adc	r15, r23
    23d0:	c3 5c       	subi	r28, 0xC3	; 195
    23d2:	de 4f       	sbci	r29, 0xFE	; 254
    23d4:	68 80       	ld	r6, Y
    23d6:	79 80       	ldd	r7, Y+1	; 0x01
    23d8:	8a 80       	ldd	r8, Y+2	; 0x02
    23da:	9b 80       	ldd	r9, Y+3	; 0x03
    23dc:	cd 53       	subi	r28, 0x3D	; 61
    23de:	d1 40       	sbci	r29, 0x01	; 1
    23e0:	c9 5b       	subi	r28, 0xB9	; 185
    23e2:	de 4f       	sbci	r29, 0xFE	; 254
    23e4:	68 82       	st	Y, r6
    23e6:	79 82       	std	Y+1, r7	; 0x01
    23e8:	8a 82       	std	Y+2, r8	; 0x02
    23ea:	9b 82       	std	Y+3, r9	; 0x03
    23ec:	c7 54       	subi	r28, 0x47	; 71
    23ee:	d1 40       	sbci	r29, 0x01	; 1
    23f0:	cf 5c       	subi	r28, 0xCF	; 207
    23f2:	de 4f       	sbci	r29, 0xFE	; 254
    23f4:	88 80       	ld	r8, Y
    23f6:	99 80       	ldd	r9, Y+1	; 0x01
    23f8:	aa 80       	ldd	r10, Y+2	; 0x02
    23fa:	bb 80       	ldd	r11, Y+3	; 0x03
    23fc:	c1 53       	subi	r28, 0x31	; 49
    23fe:	d1 40       	sbci	r29, 0x01	; 1
    2400:	cb 5d       	subi	r28, 0xDB	; 219
    2402:	de 4f       	sbci	r29, 0xFE	; 254
    2404:	88 82       	st	Y, r8
    2406:	99 82       	std	Y+1, r9	; 0x01
    2408:	aa 82       	std	Y+2, r10	; 0x02
    240a:	bb 82       	std	Y+3, r11	; 0x03
    240c:	c5 52       	subi	r28, 0x25	; 37
    240e:	d1 40       	sbci	r29, 0x01	; 1
        {
            rotate_register[i] = ctx->hash[i];
        }

        // hash calculation loop
        for (i = 0; i < SHA256_BLOCK_SIZE; i++)
    2410:	cb 5b       	subi	r28, 0xBB	; 187
    2412:	de 4f       	sbci	r29, 0xFE	; 254
    2414:	48 81       	ld	r20, Y
    2416:	59 81       	ldd	r21, Y+1	; 0x01
    2418:	c5 54       	subi	r28, 0x45	; 69
    241a:	d1 40       	sbci	r29, 0x01	; 1
    241c:	42 51       	subi	r20, 0x12	; 18
    241e:	5a 4a       	sbci	r21, 0xAA	; 170
    2420:	d9 f1       	breq	.+118    	; 0x2498 <sw_sha256_process+0x704>
    2422:	c7 5c       	subi	r28, 0xC7	; 199
    2424:	de 4f       	sbci	r29, 0xFE	; 254
    2426:	48 80       	ld	r4, Y
    2428:	59 80       	ldd	r5, Y+1	; 0x01
    242a:	6a 80       	ldd	r6, Y+2	; 0x02
    242c:	7b 80       	ldd	r7, Y+3	; 0x03
    242e:	c9 53       	subi	r28, 0x39	; 57
    2430:	d1 40       	sbci	r29, 0x01	; 1
    2432:	c3 5c       	subi	r28, 0xC3	; 195
    2434:	de 4f       	sbci	r29, 0xFE	; 254
    2436:	48 82       	st	Y, r4
    2438:	59 82       	std	Y+1, r5	; 0x01
    243a:	6a 82       	std	Y+2, r6	; 0x02
    243c:	7b 82       	std	Y+3, r7	; 0x03
    243e:	cd 53       	subi	r28, 0x3D	; 61
    2440:	d1 40       	sbci	r29, 0x01	; 1
    2442:	c7 5c       	subi	r28, 0xC7	; 199
    2444:	de 4f       	sbci	r29, 0xFE	; 254
    2446:	88 83       	st	Y, r24
    2448:	99 83       	std	Y+1, r25	; 0x01
    244a:	aa 83       	std	Y+2, r26	; 0x02
    244c:	bb 83       	std	Y+3, r27	; 0x03
    244e:	c9 53       	subi	r28, 0x39	; 57
    2450:	d1 40       	sbci	r29, 0x01	; 1
            t1 = rotate_register[7] + s1 + ch + k[i] + w_union.w_word[i];

            rotate_register[7] = rotate_register[6];
            rotate_register[6] = rotate_register[5];
            rotate_register[5] = rotate_register[4];
            rotate_register[4] = rotate_register[3] + t1;
    2452:	c7 5d       	subi	r28, 0xD7	; 215
    2454:	de 4f       	sbci	r29, 0xFE	; 254
    2456:	88 81       	ld	r24, Y
    2458:	99 81       	ldd	r25, Y+1	; 0x01
    245a:	aa 81       	ldd	r26, Y+2	; 0x02
    245c:	bb 81       	ldd	r27, Y+3	; 0x03
    245e:	c9 52       	subi	r28, 0x29	; 41
    2460:	d1 40       	sbci	r29, 0x01	; 1
    2462:	c3 5d       	subi	r28, 0xD3	; 211
    2464:	de 4f       	sbci	r29, 0xFE	; 254
    2466:	68 80       	ld	r6, Y
    2468:	79 80       	ldd	r7, Y+1	; 0x01
    246a:	8a 80       	ldd	r8, Y+2	; 0x02
    246c:	9b 80       	ldd	r9, Y+3	; 0x03
    246e:	cd 52       	subi	r28, 0x2D	; 45
    2470:	d1 40       	sbci	r29, 0x01	; 1
    2472:	cf 5c       	subi	r28, 0xCF	; 207
    2474:	de 4f       	sbci	r29, 0xFE	; 254
    2476:	68 82       	st	Y, r6
    2478:	79 82       	std	Y+1, r7	; 0x01
    247a:	8a 82       	std	Y+2, r8	; 0x02
    247c:	9b 82       	std	Y+3, r9	; 0x03
    247e:	c1 53       	subi	r28, 0x31	; 49
    2480:	d1 40       	sbci	r29, 0x01	; 1
    2482:	c3 5d       	subi	r28, 0xD3	; 211
    2484:	de 4f       	sbci	r29, 0xFE	; 254
    2486:	08 83       	st	Y, r16
    2488:	19 83       	std	Y+1, r17	; 0x01
    248a:	2a 83       	std	Y+2, r18	; 0x02
    248c:	3b 83       	std	Y+3, r19	; 0x03
    248e:	cd 52       	subi	r28, 0x2D	; 45
    2490:	d1 40       	sbci	r29, 0x01	; 1
            rotate_register[3] = rotate_register[2];
            rotate_register[2] = rotate_register[1];
            rotate_register[1] = rotate_register[0];
            rotate_register[0] = t1 + t2;
    2492:	97 01       	movw	r18, r14
    2494:	86 01       	movw	r16, r12
    2496:	58 ce       	rjmp	.-848    	; 0x2148 <sw_sha256_process+0x3b4>
    2498:	cf 5f       	subi	r28, 0xFF	; 255
    249a:	de 4f       	sbci	r29, 0xFE	; 254
    249c:	c8 82       	st	Y, r12
    249e:	d9 82       	std	Y+1, r13	; 0x01
    24a0:	ea 82       	std	Y+2, r14	; 0x02
    24a2:	fb 82       	std	Y+3, r15	; 0x03
    24a4:	c1 50       	subi	r28, 0x01	; 1
    24a6:	d1 40       	sbci	r29, 0x01	; 1
    24a8:	cb 5f       	subi	r28, 0xFB	; 251
    24aa:	de 4f       	sbci	r29, 0xFE	; 254
    24ac:	08 83       	st	Y, r16
    24ae:	19 83       	std	Y+1, r17	; 0x01
    24b0:	2a 83       	std	Y+2, r18	; 0x02
    24b2:	3b 83       	std	Y+3, r19	; 0x03
    24b4:	c5 50       	subi	r28, 0x05	; 5
    24b6:	d1 40       	sbci	r29, 0x01	; 1
    24b8:	c3 5d       	subi	r28, 0xD3	; 211
    24ba:	de 4f       	sbci	r29, 0xFE	; 254
    24bc:	48 80       	ld	r4, Y
    24be:	59 80       	ldd	r5, Y+1	; 0x01
    24c0:	6a 80       	ldd	r6, Y+2	; 0x02
    24c2:	7b 80       	ldd	r7, Y+3	; 0x03
    24c4:	cd 52       	subi	r28, 0x2D	; 45
    24c6:	d1 40       	sbci	r29, 0x01	; 1
    24c8:	c7 5f       	subi	r28, 0xF7	; 247
    24ca:	de 4f       	sbci	r29, 0xFE	; 254
    24cc:	48 82       	st	Y, r4
    24ce:	59 82       	std	Y+1, r5	; 0x01
    24d0:	6a 82       	std	Y+2, r6	; 0x02
    24d2:	7b 82       	std	Y+3, r7	; 0x03
    24d4:	c9 50       	subi	r28, 0x09	; 9
    24d6:	d1 40       	sbci	r29, 0x01	; 1
    24d8:	c7 5d       	subi	r28, 0xD7	; 215
    24da:	de 4f       	sbci	r29, 0xFE	; 254
    24dc:	68 80       	ld	r6, Y
    24de:	79 80       	ldd	r7, Y+1	; 0x01
    24e0:	8a 80       	ldd	r8, Y+2	; 0x02
    24e2:	9b 80       	ldd	r9, Y+3	; 0x03
    24e4:	c9 52       	subi	r28, 0x29	; 41
    24e6:	d1 40       	sbci	r29, 0x01	; 1
    24e8:	cf 5e       	subi	r28, 0xEF	; 239
    24ea:	de 4f       	sbci	r29, 0xFE	; 254
    24ec:	68 82       	st	Y, r6
    24ee:	79 82       	std	Y+1, r7	; 0x01
    24f0:	8a 82       	std	Y+2, r8	; 0x02
    24f2:	9b 82       	std	Y+3, r9	; 0x03
    24f4:	c1 51       	subi	r28, 0x11	; 17
    24f6:	d1 40       	sbci	r29, 0x01	; 1
    24f8:	cb 5e       	subi	r28, 0xEB	; 235
    24fa:	de 4f       	sbci	r29, 0xFE	; 254
    24fc:	88 83       	st	Y, r24
    24fe:	99 83       	std	Y+1, r25	; 0x01
    2500:	aa 83       	std	Y+2, r26	; 0x02
    2502:	bb 83       	std	Y+3, r27	; 0x03
    2504:	c5 51       	subi	r28, 0x15	; 21
    2506:	d1 40       	sbci	r29, 0x01	; 1
    2508:	c7 5c       	subi	r28, 0xC7	; 199
    250a:	de 4f       	sbci	r29, 0xFE	; 254
    250c:	88 80       	ld	r8, Y
    250e:	99 80       	ldd	r9, Y+1	; 0x01
    2510:	aa 80       	ldd	r10, Y+2	; 0x02
    2512:	bb 80       	ldd	r11, Y+3	; 0x03
    2514:	c9 53       	subi	r28, 0x39	; 57
    2516:	d1 40       	sbci	r29, 0x01	; 1
    2518:	c7 5e       	subi	r28, 0xE7	; 231
    251a:	de 4f       	sbci	r29, 0xFE	; 254
    251c:	88 82       	st	Y, r8
    251e:	99 82       	std	Y+1, r9	; 0x01
    2520:	aa 82       	std	Y+2, r10	; 0x02
    2522:	bb 82       	std	Y+3, r11	; 0x03
    2524:	c9 51       	subi	r28, 0x19	; 25
    2526:	d1 40       	sbci	r29, 0x01	; 1
    2528:	c3 5c       	subi	r28, 0xC3	; 195
    252a:	de 4f       	sbci	r29, 0xFE	; 254
    252c:	a8 80       	ld	r10, Y
    252e:	b9 80       	ldd	r11, Y+1	; 0x01
    2530:	ca 80       	ldd	r12, Y+2	; 0x02
    2532:	db 80       	ldd	r13, Y+3	; 0x03
    2534:	cd 53       	subi	r28, 0x3D	; 61
    2536:	d1 40       	sbci	r29, 0x01	; 1
    2538:	c3 5e       	subi	r28, 0xE3	; 227
    253a:	de 4f       	sbci	r29, 0xFE	; 254
    253c:	a8 82       	st	Y, r10
    253e:	b9 82       	std	Y+1, r11	; 0x01
    2540:	ca 82       	std	Y+2, r12	; 0x02
    2542:	db 82       	std	Y+3, r13	; 0x03
    2544:	cd 51       	subi	r28, 0x1D	; 29
    2546:	d1 40       	sbci	r29, 0x01	; 1
    2548:	cf 5c       	subi	r28, 0xCF	; 207
    254a:	de 4f       	sbci	r29, 0xFE	; 254
    254c:	c8 80       	ld	r12, Y
    254e:	d9 80       	ldd	r13, Y+1	; 0x01
    2550:	ea 80       	ldd	r14, Y+2	; 0x02
    2552:	fb 80       	ldd	r15, Y+3	; 0x03
    2554:	c1 53       	subi	r28, 0x31	; 49
    2556:	d1 40       	sbci	r29, 0x01	; 1
    2558:	c3 5f       	subi	r28, 0xF3	; 243
    255a:	de 4f       	sbci	r29, 0xFE	; 254
    255c:	c8 82       	st	Y, r12
    255e:	d9 82       	std	Y+1, r13	; 0x01
    2560:	ea 82       	std	Y+2, r14	; 0x02
    2562:	fb 82       	std	Y+3, r15	; 0x03
    2564:	cd 50       	subi	r28, 0x0D	; 13
    2566:	d1 40       	sbci	r29, 0x01	; 1
        }

        // Add the hash of this block to current result.
        for (i = 0; i < 8; i++)
        {
            ctx->hash[i] += rotate_register[i];
    2568:	cd 5a       	subi	r28, 0xAD	; 173
    256a:	de 4f       	sbci	r29, 0xFE	; 254
    256c:	e8 81       	ld	r30, Y
    256e:	f9 81       	ldd	r31, Y+1	; 0x01
    2570:	c3 55       	subi	r28, 0x53	; 83
    2572:	d1 40       	sbci	r29, 0x01	; 1
    2574:	81 91       	ld	r24, Z+
    2576:	91 91       	ld	r25, Z+
    2578:	a1 91       	ld	r26, Z+
    257a:	b1 91       	ld	r27, Z+
    257c:	cd 5a       	subi	r28, 0xAD	; 173
    257e:	de 4f       	sbci	r29, 0xFE	; 254
    2580:	e8 83       	st	Y, r30
    2582:	f9 83       	std	Y+1, r31	; 0x01
    2584:	c3 55       	subi	r28, 0x53	; 83
    2586:	d1 40       	sbci	r29, 0x01	; 1
    2588:	f1 01       	movw	r30, r2
    258a:	40 81       	ld	r20, Z
    258c:	51 81       	ldd	r21, Z+1	; 0x01
    258e:	62 81       	ldd	r22, Z+2	; 0x02
    2590:	73 81       	ldd	r23, Z+3	; 0x03
    2592:	84 0f       	add	r24, r20
    2594:	95 1f       	adc	r25, r21
    2596:	a6 1f       	adc	r26, r22
    2598:	b7 1f       	adc	r27, r23
    259a:	81 93       	st	Z+, r24
    259c:	91 93       	st	Z+, r25
    259e:	a1 93       	st	Z+, r26
    25a0:	b1 93       	st	Z+, r27
    25a2:	1f 01       	movw	r2, r30
            rotate_register[1] = rotate_register[0];
            rotate_register[0] = t1 + t2;
        }

        // Add the hash of this block to current result.
        for (i = 0; i < 8; i++)
    25a4:	c3 5b       	subi	r28, 0xB3	; 179
    25a6:	de 4f       	sbci	r29, 0xFE	; 254
    25a8:	48 80       	ld	r4, Y
    25aa:	59 80       	ldd	r5, Y+1	; 0x01
    25ac:	cd 54       	subi	r28, 0x4D	; 77
    25ae:	d1 40       	sbci	r29, 0x01	; 1
    25b0:	4e 16       	cp	r4, r30
    25b2:	5f 06       	cpc	r5, r31
    25b4:	c9 f6       	brne	.-78     	; 0x2568 <sw_sha256_process+0x7d4>
        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
    };

    // Loop through all the blocks to process
    for (block = 0; block < block_count; block++)
    25b6:	cf 5b       	subi	r28, 0xBF	; 191
    25b8:	de 4f       	sbci	r29, 0xFE	; 254
    25ba:	28 81       	ld	r18, Y
    25bc:	39 81       	ldd	r19, Y+1	; 0x01
    25be:	4a 81       	ldd	r20, Y+2	; 0x02
    25c0:	5b 81       	ldd	r21, Y+3	; 0x03
    25c2:	c1 54       	subi	r28, 0x41	; 65
    25c4:	d1 40       	sbci	r29, 0x01	; 1
    25c6:	2f 5f       	subi	r18, 0xFF	; 255
    25c8:	3f 4f       	sbci	r19, 0xFF	; 255
    25ca:	4f 4f       	sbci	r20, 0xFF	; 255
    25cc:	5f 4f       	sbci	r21, 0xFF	; 255
    25ce:	cf 5b       	subi	r28, 0xBF	; 191
    25d0:	de 4f       	sbci	r29, 0xFE	; 254
    25d2:	28 83       	st	Y, r18
    25d4:	39 83       	std	Y+1, r19	; 0x01
    25d6:	4a 83       	std	Y+2, r20	; 0x02
    25d8:	5b 83       	std	Y+3, r21	; 0x03
    25da:	c1 54       	subi	r28, 0x41	; 65
    25dc:	d1 40       	sbci	r29, 0x01	; 1
    25de:	cb 5c       	subi	r28, 0xCB	; 203
    25e0:	de 4f       	sbci	r29, 0xFE	; 254
    25e2:	48 81       	ld	r20, Y
    25e4:	59 81       	ldd	r21, Y+1	; 0x01
    25e6:	c5 53       	subi	r28, 0x35	; 53
    25e8:	d1 40       	sbci	r29, 0x01	; 1
    25ea:	40 5c       	subi	r20, 0xC0	; 192
    25ec:	5f 4f       	sbci	r21, 0xFF	; 255
    25ee:	cb 5c       	subi	r28, 0xCB	; 203
    25f0:	de 4f       	sbci	r29, 0xFE	; 254
    25f2:	48 83       	st	Y, r20
    25f4:	59 83       	std	Y+1, r21	; 0x01
    25f6:	c5 53       	subi	r28, 0x35	; 53
    25f8:	d1 40       	sbci	r29, 0x01	; 1
    25fa:	1e cc       	rjmp	.-1988   	; 0x1e38 <sw_sha256_process+0xa4>
        for (i = 0; i < 8; i++)
        {
            ctx->hash[i] += rotate_register[i];
        }
    }
}
    25fc:	cc 5a       	subi	r28, 0xAC	; 172
    25fe:	de 4f       	sbci	r29, 0xFE	; 254
    2600:	cd bf       	out	0x3d, r28	; 61
    2602:	de bf       	out	0x3e, r29	; 62
    2604:	df 91       	pop	r29
    2606:	cf 91       	pop	r28
    2608:	1f 91       	pop	r17
    260a:	0f 91       	pop	r16
    260c:	ff 90       	pop	r15
    260e:	ef 90       	pop	r14
    2610:	df 90       	pop	r13
    2612:	cf 90       	pop	r12
    2614:	bf 90       	pop	r11
    2616:	af 90       	pop	r10
    2618:	9f 90       	pop	r9
    261a:	8f 90       	pop	r8
    261c:	7f 90       	pop	r7
    261e:	6f 90       	pop	r6
    2620:	5f 90       	pop	r5
    2622:	4f 90       	pop	r4
    2624:	3f 90       	pop	r3
    2626:	2f 90       	pop	r2
    2628:	08 95       	ret

0000262a <sw_sha256_init>:
        0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,
        0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19
    };
    int i;

    memset(ctx, 0, sizeof(*ctx));
    262a:	28 ea       	ldi	r18, 0xA8	; 168
    262c:	fc 01       	movw	r30, r24
    262e:	11 92       	st	Z+, r1
    2630:	2a 95       	dec	r18
    2632:	e9 f7       	brne	.-6      	; 0x262e <sw_sha256_init+0x4>
    2634:	a2 e1       	ldi	r26, 0x12	; 18
    2636:	ba ea       	ldi	r27, 0xAA	; 170
    2638:	fc 01       	movw	r30, r24
    263a:	e8 57       	subi	r30, 0x78	; 120
    263c:	ff 4f       	sbci	r31, 0xFF	; 255
    263e:	88 55       	subi	r24, 0x58	; 88
    2640:	9f 4f       	sbci	r25, 0xFF	; 255
    for (i = 0; i < 8; i++)
    {
        ctx->hash[i] = hash_init[i];
    2642:	4d 91       	ld	r20, X+
    2644:	5d 91       	ld	r21, X+
    2646:	6d 91       	ld	r22, X+
    2648:	7d 91       	ld	r23, X+
    264a:	41 93       	st	Z+, r20
    264c:	51 93       	st	Z+, r21
    264e:	61 93       	st	Z+, r22
    2650:	71 93       	st	Z+, r23
        0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19
    };
    int i;

    memset(ctx, 0, sizeof(*ctx));
    for (i = 0; i < 8; i++)
    2652:	e8 17       	cp	r30, r24
    2654:	f9 07       	cpc	r31, r25
    2656:	a9 f7       	brne	.-22     	; 0x2642 <sw_sha256_init+0x18>
    {
        ctx->hash[i] = hash_init[i];
    }
}
    2658:	08 95       	ret

0000265a <sw_sha256_update>:
 * \param[in] ctx          SHA256 hash context
 * \param[in] msg          Raw blocks to be processed
 * \param[in] msg_size     The size of the message passed
 */
void sw_sha256_update(sw_sha256_ctx* ctx, const uint8_t* msg, uint32_t msg_size)
{
    265a:	2f 92       	push	r2
    265c:	3f 92       	push	r3
    265e:	4f 92       	push	r4
    2660:	5f 92       	push	r5
    2662:	6f 92       	push	r6
    2664:	7f 92       	push	r7
    2666:	8f 92       	push	r8
    2668:	9f 92       	push	r9
    266a:	af 92       	push	r10
    266c:	bf 92       	push	r11
    266e:	cf 92       	push	r12
    2670:	df 92       	push	r13
    2672:	ef 92       	push	r14
    2674:	ff 92       	push	r15
    2676:	0f 93       	push	r16
    2678:	1f 93       	push	r17
    267a:	cf 93       	push	r28
    267c:	df 93       	push	r29
    267e:	ec 01       	movw	r28, r24
    2680:	8b 01       	movw	r16, r22
    2682:	49 01       	movw	r8, r18
    2684:	5a 01       	movw	r10, r20
    uint32_t block_count;
    uint32_t rem_size = SHA256_BLOCK_SIZE - ctx->block_size;
    2686:	8c 81       	ldd	r24, Y+4	; 0x04
    2688:	9d 81       	ldd	r25, Y+5	; 0x05
    268a:	ae 81       	ldd	r26, Y+6	; 0x06
    268c:	bf 81       	ldd	r27, Y+7	; 0x07
    uint32_t copy_size = msg_size > rem_size ? rem_size : msg_size;
    268e:	40 e4       	ldi	r20, 0x40	; 64
    2690:	c4 2e       	mov	r12, r20
    2692:	d1 2c       	mov	r13, r1
    2694:	e1 2c       	mov	r14, r1
    2696:	f1 2c       	mov	r15, r1
    2698:	c8 1a       	sub	r12, r24
    269a:	d9 0a       	sbc	r13, r25
    269c:	ea 0a       	sbc	r14, r26
    269e:	fb 0a       	sbc	r15, r27
    26a0:	8c 14       	cp	r8, r12
    26a2:	9d 04       	cpc	r9, r13
    26a4:	ae 04       	cpc	r10, r14
    26a6:	bf 04       	cpc	r11, r15
    26a8:	10 f4       	brcc	.+4      	; 0x26ae <sw_sha256_update+0x54>
    26aa:	75 01       	movw	r14, r10
    26ac:	64 01       	movw	r12, r8

    // Copy data into current block
    memcpy(&ctx->block[ctx->block_size], msg, copy_size);
    26ae:	08 96       	adiw	r24, 0x08	; 8
    26b0:	a6 01       	movw	r20, r12
    26b2:	b8 01       	movw	r22, r16
    26b4:	8c 0f       	add	r24, r28
    26b6:	9d 1f       	adc	r25, r29
    26b8:	0e 94 72 2e 	call	0x5ce4	; 0x5ce4 <memcpy>

    if (ctx->block_size + msg_size < SHA256_BLOCK_SIZE)
    26bc:	8c 81       	ldd	r24, Y+4	; 0x04
    26be:	9d 81       	ldd	r25, Y+5	; 0x05
    26c0:	ae 81       	ldd	r26, Y+6	; 0x06
    26c2:	bf 81       	ldd	r27, Y+7	; 0x07
    26c4:	88 0d       	add	r24, r8
    26c6:	99 1d       	adc	r25, r9
    26c8:	aa 1d       	adc	r26, r10
    26ca:	bb 1d       	adc	r27, r11
    26cc:	80 34       	cpi	r24, 0x40	; 64
    26ce:	91 05       	cpc	r25, r1
    26d0:	a1 05       	cpc	r26, r1
    26d2:	b1 05       	cpc	r27, r1
    26d4:	b8 f4       	brcc	.+46     	; 0x2704 <sw_sha256_update+0xaa>
    {
        // Not enough data to finish off the current block
        ctx->block_size += msg_size;
    26d6:	8c 83       	std	Y+4, r24	; 0x04
    26d8:	9d 83       	std	Y+5, r25	; 0x05
    26da:	ae 83       	std	Y+6, r26	; 0x06
    26dc:	bf 83       	std	Y+7, r27	; 0x07

    // Save any remaining data
    ctx->total_msg_size += (block_count + 1) * SHA256_BLOCK_SIZE;
    ctx->block_size = msg_size % SHA256_BLOCK_SIZE;
    memcpy(ctx->block, &msg[copy_size + block_count * SHA256_BLOCK_SIZE], ctx->block_size);
}
    26de:	df 91       	pop	r29
    26e0:	cf 91       	pop	r28
    26e2:	1f 91       	pop	r17
    26e4:	0f 91       	pop	r16
    26e6:	ff 90       	pop	r15
    26e8:	ef 90       	pop	r14
    26ea:	df 90       	pop	r13
    26ec:	cf 90       	pop	r12
    26ee:	bf 90       	pop	r11
    26f0:	af 90       	pop	r10
    26f2:	9f 90       	pop	r9
    26f4:	8f 90       	pop	r8
    26f6:	7f 90       	pop	r7
    26f8:	6f 90       	pop	r6
    26fa:	5f 90       	pop	r5
    26fc:	4f 90       	pop	r4
    26fe:	3f 90       	pop	r3
    2700:	2f 90       	pop	r2
    2702:	08 95       	ret
        ctx->block_size += msg_size;
        return;
    }

    // Process the current block
    sw_sha256_process(ctx, ctx->block, 1);
    2704:	1e 01       	movw	r2, r28
    2706:	88 e0       	ldi	r24, 0x08	; 8
    2708:	28 0e       	add	r2, r24
    270a:	31 1c       	adc	r3, r1
    270c:	21 e0       	ldi	r18, 0x01	; 1
    270e:	30 e0       	ldi	r19, 0x00	; 0
    2710:	40 e0       	ldi	r20, 0x00	; 0
    2712:	50 e0       	ldi	r21, 0x00	; 0
    2714:	b1 01       	movw	r22, r2
    2716:	ce 01       	movw	r24, r28
    2718:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <sw_sha256_process>

    // Process any additional blocks
    msg_size -= copy_size; // Adjust to the remaining message bytes
    271c:	8c 18       	sub	r8, r12
    271e:	9d 08       	sbc	r9, r13
    2720:	ae 08       	sbc	r10, r14
    2722:	bf 08       	sbc	r11, r15
    block_count = msg_size / SHA256_BLOCK_SIZE;
    2724:	24 01       	movw	r4, r8
    2726:	35 01       	movw	r6, r10
    2728:	86 e0       	ldi	r24, 0x06	; 6
    272a:	76 94       	lsr	r7
    272c:	67 94       	ror	r6
    272e:	57 94       	ror	r5
    2730:	47 94       	ror	r4
    2732:	8a 95       	dec	r24
    2734:	d1 f7       	brne	.-12     	; 0x272a <sw_sha256_update+0xd0>
    sw_sha256_process(ctx, &msg[copy_size], block_count);
    2736:	b8 01       	movw	r22, r16
    2738:	6c 0d       	add	r22, r12
    273a:	7d 1d       	adc	r23, r13
    273c:	a3 01       	movw	r20, r6
    273e:	92 01       	movw	r18, r4
    2740:	ce 01       	movw	r24, r28
    2742:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <sw_sha256_process>

    // Save any remaining data
    ctx->total_msg_size += (block_count + 1) * SHA256_BLOCK_SIZE;
    2746:	d3 01       	movw	r26, r6
    2748:	c2 01       	movw	r24, r4
    274a:	01 96       	adiw	r24, 0x01	; 1
    274c:	a1 1d       	adc	r26, r1
    274e:	b1 1d       	adc	r27, r1
    2750:	26 e0       	ldi	r18, 0x06	; 6
    2752:	88 0f       	add	r24, r24
    2754:	99 1f       	adc	r25, r25
    2756:	aa 1f       	adc	r26, r26
    2758:	bb 1f       	adc	r27, r27
    275a:	2a 95       	dec	r18
    275c:	d1 f7       	brne	.-12     	; 0x2752 <sw_sha256_update+0xf8>
    275e:	48 81       	ld	r20, Y
    2760:	59 81       	ldd	r21, Y+1	; 0x01
    2762:	6a 81       	ldd	r22, Y+2	; 0x02
    2764:	7b 81       	ldd	r23, Y+3	; 0x03
    2766:	84 0f       	add	r24, r20
    2768:	95 1f       	adc	r25, r21
    276a:	a6 1f       	adc	r26, r22
    276c:	b7 1f       	adc	r27, r23
    276e:	88 83       	st	Y, r24
    2770:	99 83       	std	Y+1, r25	; 0x01
    2772:	aa 83       	std	Y+2, r26	; 0x02
    2774:	bb 83       	std	Y+3, r27	; 0x03
    ctx->block_size = msg_size % SHA256_BLOCK_SIZE;
    2776:	b5 01       	movw	r22, r10
    2778:	a4 01       	movw	r20, r8
    277a:	4f 73       	andi	r20, 0x3F	; 63
    277c:	55 27       	eor	r21, r21
    277e:	66 27       	eor	r22, r22
    2780:	77 27       	eor	r23, r23
    2782:	4c 83       	std	Y+4, r20	; 0x04
    2784:	5d 83       	std	Y+5, r21	; 0x05
    2786:	6e 83       	std	Y+6, r22	; 0x06
    2788:	7f 83       	std	Y+7, r23	; 0x07
    memcpy(ctx->block, &msg[copy_size + block_count * SHA256_BLOCK_SIZE], ctx->block_size);
    278a:	36 e0       	ldi	r19, 0x06	; 6
    278c:	44 0c       	add	r4, r4
    278e:	55 1c       	adc	r5, r5
    2790:	3a 95       	dec	r19
    2792:	e1 f7       	brne	.-8      	; 0x278c <sw_sha256_update+0x132>
    2794:	c4 0c       	add	r12, r4
    2796:	d5 1c       	adc	r13, r5
    2798:	c8 01       	movw	r24, r16
    279a:	8c 0d       	add	r24, r12
    279c:	9d 1d       	adc	r25, r13
    279e:	bc 01       	movw	r22, r24
    27a0:	c1 01       	movw	r24, r2
}
    27a2:	df 91       	pop	r29
    27a4:	cf 91       	pop	r28
    27a6:	1f 91       	pop	r17
    27a8:	0f 91       	pop	r16
    27aa:	ff 90       	pop	r15
    27ac:	ef 90       	pop	r14
    27ae:	df 90       	pop	r13
    27b0:	cf 90       	pop	r12
    27b2:	bf 90       	pop	r11
    27b4:	af 90       	pop	r10
    27b6:	9f 90       	pop	r9
    27b8:	8f 90       	pop	r8
    27ba:	7f 90       	pop	r7
    27bc:	6f 90       	pop	r6
    27be:	5f 90       	pop	r5
    27c0:	4f 90       	pop	r4
    27c2:	3f 90       	pop	r3
    27c4:	2f 90       	pop	r2
    sw_sha256_process(ctx, &msg[copy_size], block_count);

    // Save any remaining data
    ctx->total_msg_size += (block_count + 1) * SHA256_BLOCK_SIZE;
    ctx->block_size = msg_size % SHA256_BLOCK_SIZE;
    memcpy(ctx->block, &msg[copy_size + block_count * SHA256_BLOCK_SIZE], ctx->block_size);
    27c6:	0c 94 72 2e 	jmp	0x5ce4	; 0x5ce4 <memcpy>

000027ca <sw_sha256_final>:
/** \brief completes the final SHA256 calculation and returns the final digest/hash
 * \param[in]  ctx     ptr to context data structure
 * \param[out] digest  receives the computed digest of the SHA 256
 */
void sw_sha256_final(sw_sha256_ctx* ctx, uint8_t digest[SHA256_DIGEST_SIZE])
{
    27ca:	8f 92       	push	r8
    27cc:	9f 92       	push	r9
    27ce:	af 92       	push	r10
    27d0:	bf 92       	push	r11
    27d2:	cf 92       	push	r12
    27d4:	df 92       	push	r13
    27d6:	ef 92       	push	r14
    27d8:	ff 92       	push	r15
    27da:	0f 93       	push	r16
    27dc:	1f 93       	push	r17
    27de:	cf 93       	push	r28
    27e0:	df 93       	push	r29
    27e2:	ec 01       	movw	r28, r24
    27e4:	8b 01       	movw	r16, r22
    int i, j;
    uint32_t msg_size_bits;
    uint32_t pad_zero_count;

    // Calculate the total message size in bits
    ctx->total_msg_size += ctx->block_size;
    27e6:	4c 81       	ldd	r20, Y+4	; 0x04
    27e8:	5d 81       	ldd	r21, Y+5	; 0x05
    27ea:	6e 81       	ldd	r22, Y+6	; 0x06
    27ec:	7f 81       	ldd	r23, Y+7	; 0x07
    27ee:	c8 80       	ld	r12, Y
    27f0:	d9 80       	ldd	r13, Y+1	; 0x01
    27f2:	ea 80       	ldd	r14, Y+2	; 0x02
    27f4:	fb 80       	ldd	r15, Y+3	; 0x03
    27f6:	c4 0e       	add	r12, r20
    27f8:	d5 1e       	adc	r13, r21
    27fa:	e6 1e       	adc	r14, r22
    27fc:	f7 1e       	adc	r15, r23
    27fe:	c8 82       	st	Y, r12
    2800:	d9 82       	std	Y+1, r13	; 0x01
    2802:	ea 82       	std	Y+2, r14	; 0x02
    2804:	fb 82       	std	Y+3, r15	; 0x03
    msg_size_bits = ctx->total_msg_size * 8;
    2806:	83 e0       	ldi	r24, 0x03	; 3
    2808:	cc 0c       	add	r12, r12
    280a:	dd 1c       	adc	r13, r13
    280c:	ee 1c       	adc	r14, r14
    280e:	ff 1c       	adc	r15, r15
    2810:	8a 95       	dec	r24
    2812:	d1 f7       	brne	.-12     	; 0x2808 <sw_sha256_final+0x3e>

    // Calculate the number of padding zero bytes required between the 1 bit byte and the 64 bit message size in bits.
    pad_zero_count = (SHA256_BLOCK_SIZE - ((ctx->block_size + 9) % SHA256_BLOCK_SIZE)) % SHA256_BLOCK_SIZE;
    2814:	87 ef       	ldi	r24, 0xF7	; 247
    2816:	9f ef       	ldi	r25, 0xFF	; 255
    2818:	af ef       	ldi	r26, 0xFF	; 255
    281a:	bf ef       	ldi	r27, 0xFF	; 255
    281c:	84 1b       	sub	r24, r20
    281e:	95 0b       	sbc	r25, r21
    2820:	a6 0b       	sbc	r26, r22
    2822:	b7 0b       	sbc	r27, r23
    2824:	4c 01       	movw	r8, r24
    2826:	5d 01       	movw	r10, r26
    2828:	2f e3       	ldi	r18, 0x3F	; 63
    282a:	82 22       	and	r8, r18
    282c:	99 24       	eor	r9, r9
    282e:	aa 24       	eor	r10, r10
    2830:	bb 24       	eor	r11, r11

    // Append a single 1 bit
    ctx->block[ctx->block_size++] = 0x80;
    2832:	db 01       	movw	r26, r22
    2834:	ca 01       	movw	r24, r20
    2836:	01 96       	adiw	r24, 0x01	; 1
    2838:	a1 1d       	adc	r26, r1
    283a:	b1 1d       	adc	r27, r1
    283c:	8c 83       	std	Y+4, r24	; 0x04
    283e:	9d 83       	std	Y+5, r25	; 0x05
    2840:	ae 83       	std	Y+6, r26	; 0x06
    2842:	bf 83       	std	Y+7, r27	; 0x07
    2844:	fe 01       	movw	r30, r28
    2846:	e4 0f       	add	r30, r20
    2848:	f5 1f       	adc	r31, r21
    284a:	20 e8       	ldi	r18, 0x80	; 128
    284c:	20 87       	std	Z+8, r18	; 0x08

    // Add padding zeros plus upper 4 bytes of total msg size in bits (only supporting 32bit message bit counts)
    memset(&ctx->block[ctx->block_size], 0, pad_zero_count + 4);
    284e:	a4 01       	movw	r20, r8
    2850:	4c 5f       	subi	r20, 0xFC	; 252
    2852:	5f 4f       	sbci	r21, 0xFF	; 255
    2854:	08 96       	adiw	r24, 0x08	; 8
    2856:	60 e0       	ldi	r22, 0x00	; 0
    2858:	70 e0       	ldi	r23, 0x00	; 0
    285a:	8c 0f       	add	r24, r28
    285c:	9d 1f       	adc	r25, r29
    285e:	0e 94 8d 2e 	call	0x5d1a	; 0x5d1a <memset>
    ctx->block_size += pad_zero_count + 4;
    2862:	8c 81       	ldd	r24, Y+4	; 0x04
    2864:	9d 81       	ldd	r25, Y+5	; 0x05
    2866:	ae 81       	ldd	r26, Y+6	; 0x06
    2868:	bf 81       	ldd	r27, Y+7	; 0x07
    286a:	88 0d       	add	r24, r8
    286c:	99 1d       	adc	r25, r9
    286e:	aa 1d       	adc	r26, r10
    2870:	bb 1d       	adc	r27, r11

    // Add the total message size in bits to the end of the current block. Technically this is
    // supposed to be 8 bytes. This shortcut will reduce the max message size to 536,870,911 bytes.
    ctx->block[ctx->block_size++] = (uint8_t)(msg_size_bits >> 24);
    2872:	ac 01       	movw	r20, r24
    2874:	bd 01       	movw	r22, r26
    2876:	4c 5f       	subi	r20, 0xFC	; 252
    2878:	5f 4f       	sbci	r21, 0xFF	; 255
    287a:	6f 4f       	sbci	r22, 0xFF	; 255
    287c:	7f 4f       	sbci	r23, 0xFF	; 255
    287e:	fe 01       	movw	r30, r28
    2880:	e4 0f       	add	r30, r20
    2882:	f5 1f       	adc	r31, r21
    2884:	f0 86       	std	Z+8, r15	; 0x08
    ctx->block[ctx->block_size++] = (uint8_t)(msg_size_bits >> 16);
    2886:	ac 01       	movw	r20, r24
    2888:	bd 01       	movw	r22, r26
    288a:	4b 5f       	subi	r20, 0xFB	; 251
    288c:	5f 4f       	sbci	r21, 0xFF	; 255
    288e:	6f 4f       	sbci	r22, 0xFF	; 255
    2890:	7f 4f       	sbci	r23, 0xFF	; 255
    2892:	fe 01       	movw	r30, r28
    2894:	e4 0f       	add	r30, r20
    2896:	f5 1f       	adc	r31, r21
    2898:	e0 86       	std	Z+8, r14	; 0x08
    ctx->block[ctx->block_size++] = (uint8_t)(msg_size_bits >> 8);
    289a:	ac 01       	movw	r20, r24
    289c:	bd 01       	movw	r22, r26
    289e:	4a 5f       	subi	r20, 0xFA	; 250
    28a0:	5f 4f       	sbci	r21, 0xFF	; 255
    28a2:	6f 4f       	sbci	r22, 0xFF	; 255
    28a4:	7f 4f       	sbci	r23, 0xFF	; 255
    28a6:	fe 01       	movw	r30, r28
    28a8:	e4 0f       	add	r30, r20
    28aa:	f5 1f       	adc	r31, r21
    28ac:	d0 86       	std	Z+8, r13	; 0x08
    ctx->block[ctx->block_size++] = (uint8_t)(msg_size_bits >> 0);
    28ae:	ac 01       	movw	r20, r24
    28b0:	bd 01       	movw	r22, r26
    28b2:	48 5f       	subi	r20, 0xF8	; 248
    28b4:	5f 4f       	sbci	r21, 0xFF	; 255
    28b6:	6f 4f       	sbci	r22, 0xFF	; 255
    28b8:	7f 4f       	sbci	r23, 0xFF	; 255
    28ba:	4c 83       	std	Y+4, r20	; 0x04
    28bc:	5d 83       	std	Y+5, r21	; 0x05
    28be:	6e 83       	std	Y+6, r22	; 0x06
    28c0:	7f 83       	std	Y+7, r23	; 0x07
    28c2:	07 96       	adiw	r24, 0x07	; 7
    28c4:	a1 1d       	adc	r26, r1
    28c6:	b1 1d       	adc	r27, r1
    28c8:	fe 01       	movw	r30, r28
    28ca:	e8 0f       	add	r30, r24
    28cc:	f9 1f       	adc	r31, r25
    28ce:	c0 86       	std	Z+8, r12	; 0x08

    sw_sha256_process(ctx, ctx->block, ctx->block_size / SHA256_BLOCK_SIZE);
    28d0:	9a 01       	movw	r18, r20
    28d2:	ab 01       	movw	r20, r22
    28d4:	96 e0       	ldi	r25, 0x06	; 6
    28d6:	56 95       	lsr	r21
    28d8:	47 95       	ror	r20
    28da:	37 95       	ror	r19
    28dc:	27 95       	ror	r18
    28de:	9a 95       	dec	r25
    28e0:	d1 f7       	brne	.-12     	; 0x28d6 <sw_sha256_final+0x10c>
    28e2:	be 01       	movw	r22, r28
    28e4:	68 5f       	subi	r22, 0xF8	; 248
    28e6:	7f 4f       	sbci	r23, 0xFF	; 255
    28e8:	ce 01       	movw	r24, r28
    28ea:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <sw_sha256_process>
    28ee:	c8 01       	movw	r24, r16
    28f0:	fe 01       	movw	r30, r28
    28f2:	e8 57       	subi	r30, 0x78	; 120
    28f4:	ff 4f       	sbci	r31, 0xFF	; 255
    28f6:	c8 55       	subi	r28, 0x58	; 88
    28f8:	df 4f       	sbci	r29, 0xFF	; 255
    28fa:	9c 01       	movw	r18, r24
    28fc:	2c 5f       	subi	r18, 0xFC	; 252
    28fe:	3f 4f       	sbci	r19, 0xFF	; 255
/** \brief completes the final SHA256 calculation and returns the final digest/hash
 * \param[in]  ctx     ptr to context data structure
 * \param[out] digest  receives the computed digest of the SHA 256
 */
void sw_sha256_final(sw_sha256_ctx* ctx, uint8_t digest[SHA256_DIGEST_SIZE])
{
    2900:	d9 01       	movw	r26, r18
    // Concatenate the hashes to produce digest, MSB of every hash first.
    for (i = 0; i < 8; i++)
    {
        for (j = sizeof(int32_t) - 1; j >= 0; j--, ctx->hash[i] >>= 8)
        {
            digest[i * sizeof(int32_t) + j] = ctx->hash[i] & 0xFF;
    2902:	40 81       	ld	r20, Z
    2904:	4e 93       	st	-X, r20

    // All blocks have been processed.
    // Concatenate the hashes to produce digest, MSB of every hash first.
    for (i = 0; i < 8; i++)
    {
        for (j = sizeof(int32_t) - 1; j >= 0; j--, ctx->hash[i] >>= 8)
    2906:	40 81       	ld	r20, Z
    2908:	51 81       	ldd	r21, Z+1	; 0x01
    290a:	62 81       	ldd	r22, Z+2	; 0x02
    290c:	73 81       	ldd	r23, Z+3	; 0x03
    290e:	45 2f       	mov	r20, r21
    2910:	56 2f       	mov	r21, r22
    2912:	67 2f       	mov	r22, r23
    2914:	77 27       	eor	r23, r23
    2916:	40 83       	st	Z, r20
    2918:	51 83       	std	Z+1, r21	; 0x01
    291a:	62 83       	std	Z+2, r22	; 0x02
    291c:	73 83       	std	Z+3, r23	; 0x03
    291e:	a8 17       	cp	r26, r24
    2920:	b9 07       	cpc	r27, r25
    2922:	79 f7       	brne	.-34     	; 0x2902 <sw_sha256_final+0x138>
    2924:	34 96       	adiw	r30, 0x04	; 4
    2926:	c9 01       	movw	r24, r18

    sw_sha256_process(ctx, ctx->block, ctx->block_size / SHA256_BLOCK_SIZE);

    // All blocks have been processed.
    // Concatenate the hashes to produce digest, MSB of every hash first.
    for (i = 0; i < 8; i++)
    2928:	ec 17       	cp	r30, r28
    292a:	fd 07       	cpc	r31, r29
    292c:	31 f7       	brne	.-52     	; 0x28fa <sw_sha256_final+0x130>
        for (j = sizeof(int32_t) - 1; j >= 0; j--, ctx->hash[i] >>= 8)
        {
            digest[i * sizeof(int32_t) + j] = ctx->hash[i] & 0xFF;
        }
    }
}
    292e:	df 91       	pop	r29
    2930:	cf 91       	pop	r28
    2932:	1f 91       	pop	r17
    2934:	0f 91       	pop	r16
    2936:	ff 90       	pop	r15
    2938:	ef 90       	pop	r14
    293a:	df 90       	pop	r13
    293c:	cf 90       	pop	r12
    293e:	bf 90       	pop	r11
    2940:	af 90       	pop	r10
    2942:	9f 90       	pop	r9
    2944:	8f 90       	pop	r8
    2946:	08 95       	ret

00002948 <hal_iface_init>:
 * \param[in] hal pointer to ATCAHAL_t intermediate data structure
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */

ATCA_STATUS hal_iface_init(ATCAIfaceCfg *cfg, ATCAHAL_t *hal)
{
    2948:	fb 01       	movw	r30, r22
    // The key here is to provide the flexibility to include just the types of interfaces you want/need without breaking the
    // object model.  The former is needed so in an embedded, constrained memory environment, you don't have to pay the price
    // (in terms of memory) for interfaces you don't use in your application.
    ATCA_STATUS status = ATCA_COMM_FAIL;

    switch (cfg->iface_type)
    294a:	dc 01       	movw	r26, r24
    294c:	8c 91       	ld	r24, X
    294e:	81 11       	cpse	r24, r1
    2950:	24 c0       	rjmp	.+72     	; 0x299a <hal_iface_init+0x52>
    {
    case ATCA_I2C_IFACE:
        #ifdef ATCA_HAL_I2C
        hal->halinit = &hal_i2c_init;
    2952:	86 ed       	ldi	r24, 0xD6	; 214
    2954:	94 e1       	ldi	r25, 0x14	; 20
    2956:	80 83       	st	Z, r24
    2958:	91 83       	std	Z+1, r25	; 0x01
        hal->halpostinit = &hal_i2c_post_init;
    295a:	8a ed       	ldi	r24, 0xDA	; 218
    295c:	94 e1       	ldi	r25, 0x14	; 20
    295e:	82 83       	std	Z+2, r24	; 0x02
    2960:	93 83       	std	Z+3, r25	; 0x03
        hal->halreceive = &hal_i2c_receive;
    2962:	86 ee       	ldi	r24, 0xE6	; 230
    2964:	94 e1       	ldi	r25, 0x14	; 20
    2966:	86 83       	std	Z+6, r24	; 0x06
    2968:	97 83       	std	Z+7, r25	; 0x07
        hal->halsend = &hal_i2c_send;
    296a:	8c ed       	ldi	r24, 0xDC	; 220
    296c:	94 e1       	ldi	r25, 0x14	; 20
    296e:	84 83       	std	Z+4, r24	; 0x04
    2970:	95 83       	std	Z+5, r25	; 0x05
        hal->halsleep = &hal_i2c_sleep;
    2972:	82 e0       	ldi	r24, 0x02	; 2
    2974:	95 e1       	ldi	r25, 0x15	; 21
    2976:	84 87       	std	Z+12, r24	; 0x0c
    2978:	95 87       	std	Z+13, r25	; 0x0d
        hal->halwake = &hal_i2c_wake;
    297a:	88 e3       	ldi	r24, 0x38	; 56
    297c:	95 e1       	ldi	r25, 0x15	; 21
    297e:	80 87       	std	Z+8, r24	; 0x08
    2980:	91 87       	std	Z+9, r25	; 0x09
        hal->halidle = &hal_i2c_idle;
    2982:	8e ee       	ldi	r24, 0xEE	; 238
    2984:	94 e1       	ldi	r25, 0x14	; 20
    2986:	82 87       	std	Z+10, r24	; 0x0a
    2988:	93 87       	std	Z+11, r25	; 0x0b
        hal->halrelease = &hal_i2c_release;
    298a:	89 e7       	ldi	r24, 0x79	; 121
    298c:	95 e1       	ldi	r25, 0x15	; 21
    298e:	86 87       	std	Z+14, r24	; 0x0e
    2990:	97 87       	std	Z+15, r25	; 0x0f
        hal->hal_data = NULL;
    2992:	10 8a       	std	Z+16, r1	; 0x10
    2994:	11 8a       	std	Z+17, r1	; 0x11

        status = ATCA_SUCCESS;
    2996:	80 e0       	ldi	r24, 0x00	; 0
        #endif
        break;
    2998:	08 95       	ret
{
    // Because C isn't a real object oriented language or dynamically typed, some switch in the overall system is unavoidable
    // The key here is to provide the flexibility to include just the types of interfaces you want/need without breaking the
    // object model.  The former is needed so in an embedded, constrained memory environment, you don't have to pay the price
    // (in terms of memory) for interfaces you don't use in your application.
    ATCA_STATUS status = ATCA_COMM_FAIL;
    299a:	80 ef       	ldi	r24, 0xF0	; 240
        break;
    default:
        break;
    }
    return status;
}
    299c:	08 95       	ret

0000299e <hal_iface_release>:

ATCA_STATUS hal_iface_release(ATCAIfaceType iface_type, void *hal_data)
{
    ATCA_STATUS status = ATCA_GEN_FAIL;

    switch (iface_type)
    299e:	81 11       	cpse	r24, r1
    29a0:	03 c0       	rjmp	.+6      	; 0x29a8 <hal_iface_release+0xa>
    {
    case ATCA_I2C_IFACE:
#ifdef ATCA_HAL_I2C
        status = hal_i2c_release(hal_data);
    29a2:	cb 01       	movw	r24, r22
    29a4:	0c 94 79 15 	jmp	0x2af2	; 0x2af2 <hal_i2c_release>
    default:
        break;
    }

    return status;
}
    29a8:	81 ee       	ldi	r24, 0xE1	; 225
    29aa:	08 95       	ret

000029ac <hal_i2c_init>:
 * \param[in] hal - opaque ptr to HAL data
 * \param[in] cfg - interface configuration
 */
ATCA_STATUS hal_i2c_init(void *hal, ATCAIfaceCfg *cfg)
{
	I2C_0_init();
    29ac:	0e 94 58 19 	call	0x32b0	; 0x32b0 <I2C_0_init>
	
	return ATCA_SUCCESS;
}
    29b0:	80 e0       	ldi	r24, 0x00	; 0
    29b2:	08 95       	ret

000029b4 <hal_i2c_post_init>:
    29b4:	80 e0       	ldi	r24, 0x00	; 0
    29b6:	08 95       	ret

000029b8 <hal_i2c_send>:
 * \return ATCA_STATUS
 */

ATCA_STATUS hal_i2c_send(ATCAIface iface, uint8_t *txdata, int txlength)
{
	txdata[0] = 0x03; // insert the Word Address Value, Command token
    29b8:	83 e0       	ldi	r24, 0x03	; 3
    29ba:	fb 01       	movw	r30, r22
    29bc:	80 83       	st	Z, r24
	txlength++;       // account for word address value byte.

	I2C_0_writeNBytes(0x58, txdata, txlength);
    29be:	4f 5f       	subi	r20, 0xFF	; 255
    29c0:	5f 4f       	sbci	r21, 0xFF	; 255
    29c2:	88 e5       	ldi	r24, 0x58	; 88
    29c4:	0e 94 2e 1a 	call	0x345c	; 0x345c <I2C_0_writeNBytes>

	return ATCA_SUCCESS;
}
    29c8:	80 e0       	ldi	r24, 0x00	; 0
    29ca:	08 95       	ret

000029cc <hal_i2c_receive>:
 * \return ATCA_STATUS
 */

ATCA_STATUS hal_i2c_receive(ATCAIface iface, uint8_t *rxdata, uint16_t *rxlength)
{
	I2C_0_readNBytes(0x58, rxdata, *rxlength);
    29cc:	fa 01       	movw	r30, r20
    29ce:	40 81       	ld	r20, Z
    29d0:	51 81       	ldd	r21, Z+1	; 0x01
    29d2:	88 e5       	ldi	r24, 0x58	; 88
    29d4:	0e 94 51 1a 	call	0x34a2	; 0x34a2 <I2C_0_readNBytes>

	return ATCA_SUCCESS;
}
    29d8:	80 e0       	ldi	r24, 0x00	; 0
    29da:	08 95       	ret

000029dc <hal_i2c_idle>:
/** \brief idle CryptoAuth device using I2C bus
 * \param[in] iface  interface to logical device to idle
 */

ATCA_STATUS hal_i2c_idle(ATCAIface iface)
{
    29dc:	cf 93       	push	r28
    29de:	df 93       	push	r29
    29e0:	1f 92       	push	r1
    29e2:	cd b7       	in	r28, 0x3d	; 61
    29e4:	de b7       	in	r29, 0x3e	; 62
	uint8_t data = 0x02;
    29e6:	82 e0       	ldi	r24, 0x02	; 2
    29e8:	89 83       	std	Y+1, r24	; 0x01

	I2C_0_writeNBytes(0x58, &data, 1);
    29ea:	41 e0       	ldi	r20, 0x01	; 1
    29ec:	50 e0       	ldi	r21, 0x00	; 0
    29ee:	be 01       	movw	r22, r28
    29f0:	6f 5f       	subi	r22, 0xFF	; 255
    29f2:	7f 4f       	sbci	r23, 0xFF	; 255
    29f4:	88 e5       	ldi	r24, 0x58	; 88
    29f6:	0e 94 2e 1a 	call	0x345c	; 0x345c <I2C_0_writeNBytes>

	return ATCA_SUCCESS;
}
    29fa:	80 e0       	ldi	r24, 0x00	; 0
    29fc:	0f 90       	pop	r0
    29fe:	df 91       	pop	r29
    2a00:	cf 91       	pop	r28
    2a02:	08 95       	ret

00002a04 <hal_i2c_sleep>:
/** \brief sleep CryptoAuth device using I2C bus
 * \param[in] iface  interface to logical device to sleep
 */

ATCA_STATUS hal_i2c_sleep(ATCAIface iface)
{
    2a04:	cf 93       	push	r28
    2a06:	df 93       	push	r29
    2a08:	1f 92       	push	r1
    2a0a:	cd b7       	in	r28, 0x3d	; 61
    2a0c:	de b7       	in	r29, 0x3e	; 62
	uint8_t data = 0x01;
    2a0e:	81 e0       	ldi	r24, 0x01	; 1
    2a10:	89 83       	std	Y+1, r24	; 0x01

	I2C_0_writeNBytes(0x58, &data, 1);
    2a12:	41 e0       	ldi	r20, 0x01	; 1
    2a14:	50 e0       	ldi	r21, 0x00	; 0
    2a16:	be 01       	movw	r22, r28
    2a18:	6f 5f       	subi	r22, 0xFF	; 255
    2a1a:	7f 4f       	sbci	r23, 0xFF	; 255
    2a1c:	88 e5       	ldi	r24, 0x58	; 88
    2a1e:	0e 94 2e 1a 	call	0x345c	; 0x345c <I2C_0_writeNBytes>

	return ATCA_SUCCESS;
}
    2a22:	80 e0       	ldi	r24, 0x00	; 0
    2a24:	0f 90       	pop	r0
    2a26:	df 91       	pop	r29
    2a28:	cf 91       	pop	r28
    2a2a:	08 95       	ret

00002a2c <I2C_0_wake_up>:

void I2C_0_wake_up(uint8_t adr, uint8_t *data, uint8_t size)
{
    2a2c:	cf 93       	push	r28
    2a2e:	df 93       	push	r29
    2a30:	1f 92       	push	r1
    2a32:	cd b7       	in	r28, 0x3d	; 61
    2a34:	de b7       	in	r29, 0x3e	; 62
    2a36:	89 83       	std	Y+1, r24	; 0x01
	//transfer_descriptor_t d = {data, size};
	while (!I2C_0_open(adr))
    2a38:	89 81       	ldd	r24, Y+1	; 0x01
    2a3a:	0e 94 60 19 	call	0x32c0	; 0x32c0 <I2C_0_open>
    2a3e:	88 23       	and	r24, r24
    2a40:	d9 f3       	breq	.-10     	; 0x2a38 <I2C_0_wake_up+0xc>
	; // sit here until we get the bus..
	
	I2C_0_set_data_complete_callback(i2c_cb_return_stop, NULL);
    2a42:	60 e0       	ldi	r22, 0x00	; 0
    2a44:	70 e0       	ldi	r23, 0x00	; 0
    2a46:	8e e6       	ldi	r24, 0x6E	; 110
    2a48:	9a e1       	ldi	r25, 0x1A	; 26
    2a4a:	0e 94 4e 19 	call	0x329c	; 0x329c <I2C_0_set_data_complete_callback>
	//I2C_0_set_address_nack_callback(i2c_cb_return_stop, NULL);

	// Transmit specified number of bytes
	I2C_0_set_buffer((void *)&adr, 1);
    2a4e:	61 e0       	ldi	r22, 0x01	; 1
    2a50:	70 e0       	ldi	r23, 0x00	; 0
    2a52:	ce 01       	movw	r24, r28
    2a54:	01 96       	adiw	r24, 0x01	; 1
    2a56:	0e 94 de 19 	call	0x33bc	; 0x33bc <I2C_0_set_buffer>
	// Start a Write operation
	I2C_0_master_operation(false);
    2a5a:	80 e0       	ldi	r24, 0x00	; 0
    2a5c:	0e 94 f0 19 	call	0x33e0	; 0x33e0 <I2C_0_master_operation>
	while (I2C_BUSY == I2C_0_close())
    2a60:	0e 94 b9 19 	call	0x3372	; 0x3372 <I2C_0_close>
    2a64:	81 30       	cpi	r24, 0x01	; 1
    2a66:	e1 f3       	breq	.-8      	; 0x2a60 <I2C_0_wake_up+0x34>
	; // sit here until the entire chained operation has finished
}
    2a68:	0f 90       	pop	r0
    2a6a:	df 91       	pop	r29
    2a6c:	cf 91       	pop	r28
    2a6e:	08 95       	ret

00002a70 <hal_i2c_wake>:
/** \brief wake up CryptoAuth device using I2C bus
 * \param[in] iface  interface to logical device to wakeup
 */

ATCA_STATUS hal_i2c_wake(ATCAIface iface)
{
    2a70:	cf 93       	push	r28
    2a72:	df 93       	push	r29
    2a74:	cd b7       	in	r28, 0x3d	; 61
    2a76:	de b7       	in	r29, 0x3e	; 62
    2a78:	28 97       	sbiw	r28, 0x08	; 8
    2a7a:	cd bf       	out	0x3d, r28	; 61
    2a7c:	de bf       	out	0x3e, r29	; 62
	I2C_0_wake_up(0x0, 0x0, 1);
    2a7e:	41 e0       	ldi	r20, 0x01	; 1
    2a80:	60 e0       	ldi	r22, 0x00	; 0
    2a82:	70 e0       	ldi	r23, 0x00	; 0
    2a84:	80 e0       	ldi	r24, 0x00	; 0
    2a86:	0e 94 16 15 	call	0x2a2c	; 0x2a2c <I2C_0_wake_up>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2a8a:	87 e8       	ldi	r24, 0x87	; 135
    2a8c:	93 e1       	ldi	r25, 0x13	; 19
    2a8e:	01 97       	sbiw	r24, 0x01	; 1
    2a90:	f1 f7       	brne	.-4      	; 0x2a8e <hal_i2c_wake+0x1e>
    2a92:	00 c0       	rjmp	.+0      	; 0x2a94 <hal_i2c_wake+0x24>
    2a94:	00 00       	nop
	
	_delay_ms (2*1);
	
	uint8_t init_data[4];
	uint8_t verif_data[4] = { 0x04, 0x11, 0x33, 0x43 };
    2a96:	80 91 62 a3 	lds	r24, 0xA362	; 0x80a362 <__bss_end+0x69c9>
    2a9a:	90 91 63 a3 	lds	r25, 0xA363	; 0x80a363 <__bss_end+0x69ca>
    2a9e:	a0 91 64 a3 	lds	r26, 0xA364	; 0x80a364 <__bss_end+0x69cb>
    2aa2:	b0 91 65 a3 	lds	r27, 0xA365	; 0x80a365 <__bss_end+0x69cc>
    2aa6:	89 83       	std	Y+1, r24	; 0x01
    2aa8:	9a 83       	std	Y+2, r25	; 0x02
    2aaa:	ab 83       	std	Y+3, r26	; 0x03
    2aac:	bc 83       	std	Y+4, r27	; 0x04
	uint8_t verification = true;
	
	I2C_0_readNBytes(0x58, &init_data, 4);
    2aae:	44 e0       	ldi	r20, 0x04	; 4
    2ab0:	50 e0       	ldi	r21, 0x00	; 0
    2ab2:	be 01       	movw	r22, r28
    2ab4:	6b 5f       	subi	r22, 0xFB	; 251
    2ab6:	7f 4f       	sbci	r23, 0xFF	; 255
    2ab8:	88 e5       	ldi	r24, 0x58	; 88
    2aba:	0e 94 51 1a 	call	0x34a2	; 0x34a2 <I2C_0_readNBytes>
    2abe:	fe 01       	movw	r30, r28
    2ac0:	35 96       	adiw	r30, 0x05	; 5
    2ac2:	de 01       	movw	r26, r28
    2ac4:	11 96       	adiw	r26, 0x01	; 1
    2ac6:	9e 01       	movw	r18, r28
    2ac8:	27 5f       	subi	r18, 0xF7	; 247
    2aca:	3f 4f       	sbci	r19, 0xFF	; 255
	
	_delay_ms (2*1);
	
	uint8_t init_data[4];
	uint8_t verif_data[4] = { 0x04, 0x11, 0x33, 0x43 };
	uint8_t verification = true;
    2acc:	81 e0       	ldi	r24, 0x01	; 1
	
	I2C_0_readNBytes(0x58, &init_data, 4);

	for (uint8_t i=0; i<4; i++)
		{
			if (init_data[i] != verif_data[i])
    2ace:	41 91       	ld	r20, Z+
    2ad0:	9d 91       	ld	r25, X+
    2ad2:	49 13       	cpse	r20, r25
				verification = false;
    2ad4:	80 e0       	ldi	r24, 0x00	; 0
	uint8_t verif_data[4] = { 0x04, 0x11, 0x33, 0x43 };
	uint8_t verification = true;
	
	I2C_0_readNBytes(0x58, &init_data, 4);

	for (uint8_t i=0; i<4; i++)
    2ad6:	e2 17       	cp	r30, r18
    2ad8:	f3 07       	cpc	r31, r19
    2ada:	c9 f7       	brne	.-14     	; 0x2ace <hal_i2c_wake+0x5e>
		{
			if (init_data[i] != verif_data[i])
				verification = false;
		}
	
	if (verification)
    2adc:	81 11       	cpse	r24, r1
    2ade:	02 c0       	rjmp	.+4      	; 0x2ae4 <hal_i2c_wake+0x74>
		return ATCA_SUCCESS;
	else
		return ATCA_COMM_FAIL;
    2ae0:	80 ef       	ldi	r24, 0xF0	; 240
    2ae2:	01 c0       	rjmp	.+2      	; 0x2ae6 <hal_i2c_wake+0x76>
			if (init_data[i] != verif_data[i])
				verification = false;
		}
	
	if (verification)
		return ATCA_SUCCESS;
    2ae4:	80 e0       	ldi	r24, 0x00	; 0
	else
		return ATCA_COMM_FAIL;

}
    2ae6:	28 96       	adiw	r28, 0x08	; 8
    2ae8:	cd bf       	out	0x3d, r28	; 61
    2aea:	de bf       	out	0x3e, r29	; 62
    2aec:	df 91       	pop	r29
    2aee:	cf 91       	pop	r28
    2af0:	08 95       	ret

00002af2 <hal_i2c_release>:
ATCA_STATUS hal_i2c_release(void *hal_data)
{
    //TODO: For the moment, don't do anything

    return ATCA_SUCCESS;
}
    2af2:	80 e0       	ldi	r24, 0x00	; 0
    2af4:	08 95       	ret

00002af6 <atca_delay_ms>:
 * \param[in] delay number of milliseconds to delay
 */
void atca_delay_ms(uint32_t delay)
{
	/*Here you can write your own delay routine*/
	while (delay) {
    2af6:	61 15       	cp	r22, r1
    2af8:	71 05       	cpc	r23, r1
    2afa:	81 05       	cpc	r24, r1
    2afc:	91 05       	cpc	r25, r1
    2afe:	59 f0       	breq	.+22     	; 0x2b16 <atca_delay_ms+0x20>
    2b00:	e3 ec       	ldi	r30, 0xC3	; 195
    2b02:	f9 e0       	ldi	r31, 0x09	; 9
    2b04:	31 97       	sbiw	r30, 0x01	; 1
    2b06:	f1 f7       	brne	.-4      	; 0x2b04 <atca_delay_ms+0xe>
    2b08:	00 c0       	rjmp	.+0      	; 0x2b0a <atca_delay_ms+0x14>
    2b0a:	00 00       	nop
		_delay_ms(1);
		delay--;
    2b0c:	61 50       	subi	r22, 0x01	; 1
    2b0e:	71 09       	sbc	r23, r1
    2b10:	81 09       	sbc	r24, r1
    2b12:	91 09       	sbc	r25, r1
    2b14:	f0 cf       	rjmp	.-32     	; 0x2af6 <atca_delay_ms>
	}
}
    2b16:	08 95       	ret

00002b18 <atcatls_get_sn>:
    ATCA_STATUS status = ATCA_SUCCESS;

    do
    {
        // Call the basic API to get the serial number
        if ((status = atcab_read_serial_number(sn_out)) != ATCA_SUCCESS)
    2b18:	0c 94 b2 0c 	jmp	0x1964	; 0x1964 <atcab_read_serial_number>

00002b1c <cryptoauthlib_init>:

void cryptoauthlib_init(void)
{
    uint8_t rv;
    
    atcab_init_device(&_gMyDevice);
    2b1c:	81 e9       	ldi	r24, 0x91	; 145
    2b1e:	99 e2       	ldi	r25, 0x29	; 41
    2b20:	0e 94 c4 0a 	call	0x1588	; 0x1588 <atcab_init_device>
    
    rv = atcab_init(&cfg_ateccx08a_i2c_custom);
    2b24:	8b e6       	ldi	r24, 0x6B	; 107
    2b26:	99 e2       	ldi	r25, 0x29	; 41
    2b28:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <atcab_init>
    if (rv != ATCA_SUCCESS)
    2b2c:	81 11       	cpse	r24, r1
    {
        cryptoDeviceInitialized = false;
    2b2e:	10 92 6a 29 	sts	0x296A, r1	; 0x80296a <cryptoDeviceInitialized>
    2b32:	08 95       	ret

00002b34 <main>:
        WINC_CERTS_initBuffer();
    }
}

int main(void)
{	
    2b34:	cf 93       	push	r28
    2b36:	df 93       	push	r29
    2b38:	cd b7       	in	r28, 0x3d	; 61
    2b3a:	de b7       	in	r29, 0x3e	; 62
    2b3c:	c7 5c       	subi	r28, 0xC7	; 199
    2b3e:	d4 40       	sbci	r29, 0x04	; 4
    2b40:	cd bf       	out	0x3d, r28	; 61
    2b42:	de bf       	out	0x3e, r29	; 62
    char c;     
	char kitMessage[MAX_MESSAGE_SIZE];
    uint16_t idx = 0;
    tstrWifiInitParam wifi_paramaters;
    
    atmel_start_init();
    2b44:	0e 94 fd 00 	call	0x1fa	; 0x1fa <atmel_start_init>
    Enable_global_interrupt();
    2b48:	78 94       	sei
    cryptoauthlib_init();
    2b4a:	0e 94 8e 15 	call	0x2b1c	; 0x2b1c <cryptoauthlib_init>
    
    nm_bsp_init();
    2b4e:	0e 94 10 1b 	call	0x3620	; 0x3620 <nm_bsp_init>
    // Need to initialize the WIFI for the certificate transfer to work.
    m2m_memset((uint8*)&wifi_paramaters, 0, sizeof(wifi_paramaters));
    2b52:	2e e0       	ldi	r18, 0x0E	; 14
    2b54:	30 e0       	ldi	r19, 0x00	; 0
    2b56:	40 e0       	ldi	r20, 0x00	; 0
    2b58:	50 e0       	ldi	r21, 0x00	; 0
    2b5a:	60 e0       	ldi	r22, 0x00	; 0
    2b5c:	ce 01       	movw	r24, r28
    2b5e:	8f 54       	subi	r24, 0x4F	; 79
    2b60:	9b 4f       	sbci	r25, 0xFB	; 251
    2b62:	0e 94 ac 1b 	call	0x3758	; 0x3758 <m2m_memset>
    m2m_wifi_init(&wifi_paramaters);
    2b66:	ce 01       	movw	r24, r28
    2b68:	8f 54       	subi	r24, 0x4F	; 79
    2b6a:	9b 4f       	sbci	r25, 0xFB	; 251
    2b6c:	0e 94 3f 20 	call	0x407e	; 0x407e <m2m_wifi_init>

static void addSerialNumToCSR(void)
{
	uint8_t g_serial_number[ATCA_SERIAL_NUM_SIZE];
	
	ATCA_STATUS status = atcatls_get_sn(g_serial_number);
    2b70:	ce 01       	movw	r24, r28
    2b72:	81 54       	subi	r24, 0x41	; 65
    2b74:	9b 4f       	sbci	r25, 0xFB	; 251
    2b76:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <atcatls_get_sn>
	
	uint8_t index = 0;
	
	char *commonName = g_csr_def_3_device.cert_template + 43;
    2b7a:	e0 90 4a 28 	lds	r14, 0x284A	; 0x80284a <g_csr_def_3_device+0x44>
    2b7e:	f0 90 4b 28 	lds	r15, 0x284B	; 0x80284b <g_csr_def_3_device+0x45>
    2b82:	8b e2       	ldi	r24, 0x2B	; 43
    2b84:	e8 0e       	add	r14, r24
    2b86:	f1 1c       	adc	r15, r1
    2b88:	fe 01       	movw	r30, r28
    2b8a:	e1 54       	subi	r30, 0x41	; 65
    2b8c:	fb 4f       	sbci	r31, 0xFB	; 251
    2b8e:	6f 01       	movw	r12, r30
    2b90:	8e 01       	movw	r16, r28
    2b92:	0f 5f       	subi	r16, 0xFF	; 255
    2b94:	1f 4f       	sbci	r17, 0xFF	; 255
    2b96:	4f 01       	movw	r8, r30
    2b98:	f9 e0       	ldi	r31, 0x09	; 9
    2b9a:	8f 0e       	add	r8, r31
    2b9c:	91 1c       	adc	r9, r1
    2b9e:	38 01       	movw	r6, r16
	
	char commonNameAscii[18];
	
	for(index = 0; index < ATCA_SERIAL_NUM_SIZE; index ++)
	{
		sprintf(commonNameAscii+2*index,"%02X", g_serial_number[index]);
    2ba0:	32 e3       	ldi	r19, 0x32	; 50
    2ba2:	a3 2e       	mov	r10, r19
    2ba4:	3a ea       	ldi	r19, 0xAA	; 170
    2ba6:	b3 2e       	mov	r11, r19
    2ba8:	f6 01       	movw	r30, r12
    2baa:	81 91       	ld	r24, Z+
    2bac:	6f 01       	movw	r12, r30
    2bae:	1f 92       	push	r1
    2bb0:	8f 93       	push	r24
    2bb2:	bf 92       	push	r11
    2bb4:	af 92       	push	r10
    2bb6:	1f 93       	push	r17
    2bb8:	0f 93       	push	r16
    2bba:	0e 94 c9 2e 	call	0x5d92	; 0x5d92 <sprintf>
    2bbe:	0e 5f       	subi	r16, 0xFE	; 254
    2bc0:	1f 4f       	sbci	r17, 0xFF	; 255
	
	char *commonName = g_csr_def_3_device.cert_template + 43;
	
	char commonNameAscii[18];
	
	for(index = 0; index < ATCA_SERIAL_NUM_SIZE; index ++)
    2bc2:	0f 90       	pop	r0
    2bc4:	0f 90       	pop	r0
    2bc6:	0f 90       	pop	r0
    2bc8:	0f 90       	pop	r0
    2bca:	0f 90       	pop	r0
    2bcc:	0f 90       	pop	r0
    2bce:	c8 14       	cp	r12, r8
    2bd0:	d9 04       	cpc	r13, r9
    2bd2:	51 f7       	brne	.-44     	; 0x2ba8 <main+0x74>
	{
		sprintf(commonNameAscii+2*index,"%02X", g_serial_number[index]);
		/*commonNameAscii += 2;*/
	}
	
	strncpy(commonName, commonNameAscii, 18);
    2bd4:	42 e1       	ldi	r20, 0x12	; 18
    2bd6:	50 e0       	ldi	r21, 0x00	; 0
    2bd8:	b3 01       	movw	r22, r6
    2bda:	c7 01       	movw	r24, r14
    2bdc:	0e 94 ba 2e 	call	0x5d74	; 0x5d74 <strncpy>

	asm("nop");	
    2be0:	00 00       	nop
    m2m_memset((uint8*)&wifi_paramaters, 0, sizeof(wifi_paramaters));
    m2m_wifi_init(&wifi_paramaters);
	
	addSerialNumToCSR();
	
	asm("nop");
    2be2:	00 00       	nop

int main(void)
{	
    char c;     
	char kitMessage[MAX_MESSAGE_SIZE];
    uint16_t idx = 0;
    2be4:	00 e0       	ldi	r16, 0x00	; 0
    2be6:	10 e0       	ldi	r17, 0x00	; 0
    }
    
    if (strcmp(message_method, GENERATE_CSR) == 0)
    {
        uint8_t *csr_buffer = (uint8_t*) sector_buffer;
        size_t csr_buffer_length = CSR_BUFFER_LENGTH;
    2be8:	9c ed       	ldi	r25, 0xDC	; 220
    2bea:	c9 2e       	mov	r12, r25
    2bec:	95 e0       	ldi	r25, 0x05	; 5
    2bee:	d9 2e       	mov	r13, r25
    argument = argument + 1;

    if (strcmp(message_method, RECEIVE_CA_PUB_KEY) == 0)
    {
        CONVERTIONS_hexToBinary(strlen(argument), argument); 
        signer_ca_public_key_size = 64;
    2bf0:	20 e4       	ldi	r18, 0x40	; 64
    2bf2:	82 2e       	mov	r8, r18
    2bf4:	91 2c       	mov	r9, r1
    2bf6:	a1 2c       	mov	r10, r1
    2bf8:	b1 2c       	mov	r11, r1
    }
}

static char kitComReadChar()
{
    return (char)USART_0_read();
    2bfa:	0e 94 a2 1a 	call	0x3544	; 0x3544 <USART_0_read>
	while (1) 
	{
        c = kitComReadChar();	
        if(c != '\0')
        {
            kitMessage[idx++] = c;
    2bfe:	f3 01       	movw	r30, r6
    2c00:	e0 0f       	add	r30, r16
    2c02:	f1 1f       	adc	r31, r17
	asm("nop");
   
	while (1) 
	{
        c = kitComReadChar();	
        if(c != '\0')
    2c04:	88 23       	and	r24, r24
    2c06:	21 f0       	breq	.+8      	; 0x2c10 <main+0xdc>
        {
            kitMessage[idx++] = c;
    2c08:	80 83       	st	Z, r24
    2c0a:	0f 5f       	subi	r16, 0xFF	; 255
    2c0c:	1f 4f       	sbci	r17, 0xFF	; 255
    2c0e:	f5 cf       	rjmp	.-22     	; 0x2bfa <main+0xc6>
        }
        else
        {
            kitMessage[idx++] = '\0';
    2c10:	10 82       	st	Z, r1
{
    char *message_method;
    char *argument;
    
    message_method = message;
    argument = strchr(message, ARGUMENT_DELIMITER);
    2c12:	6a e3       	ldi	r22, 0x3A	; 58
    2c14:	70 e0       	ldi	r23, 0x00	; 0
    2c16:	c3 01       	movw	r24, r6
    2c18:	0e 94 9f 2e 	call	0x5d3e	; 0x5d3e <strchr>
    *argument = NULL;
    2c1c:	fc 01       	movw	r30, r24
    2c1e:	11 92       	st	Z+, r1
    2c20:	8f 01       	movw	r16, r30
    argument = argument + 1;

    if (strcmp(message_method, RECEIVE_CA_PUB_KEY) == 0)
    2c22:	67 e3       	ldi	r22, 0x37	; 55
    2c24:	7a ea       	ldi	r23, 0xAA	; 170
    2c26:	c3 01       	movw	r24, r6
    2c28:	0e 94 aa 2e 	call	0x5d54	; 0x5d54 <strcmp>
    2c2c:	89 2b       	or	r24, r25
    2c2e:	19 f5       	brne	.+70     	; 0x2c76 <main+0x142>
    {
        CONVERTIONS_hexToBinary(strlen(argument), argument); 
    2c30:	f8 01       	movw	r30, r16
    2c32:	01 90       	ld	r0, Z+
    2c34:	00 20       	and	r0, r0
    2c36:	e9 f7       	brne	.-6      	; 0x2c32 <main+0xfe>
    2c38:	cf 01       	movw	r24, r30
    2c3a:	01 97       	sbiw	r24, 0x01	; 1
    2c3c:	b8 01       	movw	r22, r16
    2c3e:	80 1b       	sub	r24, r16
    2c40:	91 0b       	sbc	r25, r17
    2c42:	0e 94 13 01 	call	0x226	; 0x226 <CONVERTIONS_hexToBinary>
        signer_ca_public_key_size = 64;
    2c46:	80 92 3c 2b 	sts	0x2B3C, r8	; 0x802b3c <signer_ca_public_key_size>
    2c4a:	90 92 3d 2b 	sts	0x2B3D, r9	; 0x802b3d <signer_ca_public_key_size+0x1>
    2c4e:	a0 92 3e 2b 	sts	0x2B3E, r10	; 0x802b3e <signer_ca_public_key_size+0x2>
    2c52:	b0 92 3f 2b 	sts	0x2B3F, r11	; 0x802b3f <signer_ca_public_key_size+0x3>
        memcpy(g_signer_1_ca_public_key, &argument[0], 64);
    2c56:	80 e4       	ldi	r24, 0x40	; 64
    2c58:	f8 01       	movw	r30, r16
    2c5a:	aa ec       	ldi	r26, 0xCA	; 202
    2c5c:	b9 e2       	ldi	r27, 0x29	; 41
    2c5e:	01 90       	ld	r0, Z+
    2c60:	0d 92       	st	X+, r0
    2c62:	8a 95       	dec	r24
    2c64:	e1 f7       	brne	.-8      	; 0x2c5e <main+0x12a>
        memcpy(message, MESSAGE_EXECUTED, sizeof(MESSAGE_EXECUTED));
    2c66:	87 e0       	ldi	r24, 0x07	; 7
    2c68:	e6 e6       	ldi	r30, 0x66	; 102
    2c6a:	f3 ea       	ldi	r31, 0xA3	; 163
    2c6c:	d3 01       	movw	r26, r6
    2c6e:	01 90       	ld	r0, Z+
    2c70:	0d 92       	st	X+, r0
    2c72:	8a 95       	dec	r24
    2c74:	e1 f7       	brne	.-8      	; 0x2c6e <main+0x13a>
    }
    
    if (strcmp(message_method, RECEIVE_CA_CERT) == 0)
    2c76:	60 e4       	ldi	r22, 0x40	; 64
    2c78:	7a ea       	ldi	r23, 0xAA	; 170
    2c7a:	c3 01       	movw	r24, r6
    2c7c:	0e 94 aa 2e 	call	0x5d54	; 0x5d54 <strcmp>
    2c80:	89 2b       	or	r24, r25
    2c82:	01 f5       	brne	.+64     	; 0x2cc4 <main+0x190>
    {
        uint16_t cert_size;  
        cert_size = CONVERTIONS_hexToBinary(strlen(argument), argument);   
    2c84:	f8 01       	movw	r30, r16
    2c86:	01 90       	ld	r0, Z+
    2c88:	00 20       	and	r0, r0
    2c8a:	e9 f7       	brne	.-6      	; 0x2c86 <main+0x152>
    2c8c:	cf 01       	movw	r24, r30
    2c8e:	01 97       	sbiw	r24, 0x01	; 1
    2c90:	b8 01       	movw	r22, r16
    2c92:	80 1b       	sub	r24, r16
    2c94:	91 0b       	sbc	r25, r17
    2c96:	0e 94 13 01 	call	0x226	; 0x226 <CONVERTIONS_hexToBinary>
    2c9a:	7c 01       	movw	r14, r24
        memcpy(signer_cert, argument, cert_size);
    2c9c:	ac 01       	movw	r20, r24
    2c9e:	b8 01       	movw	r22, r16
    2ca0:	80 91 48 2b 	lds	r24, 0x2B48	; 0x802b48 <signer_cert>
    2ca4:	90 91 49 2b 	lds	r25, 0x2B49	; 0x802b49 <signer_cert+0x1>
    2ca8:	0e 94 72 2e 	call	0x5ce4	; 0x5ce4 <memcpy>
        signer_cert_size = cert_size;     
    2cac:	e0 92 7b 2b 	sts	0x2B7B, r14	; 0x802b7b <signer_cert_size>
    2cb0:	f0 92 7c 2b 	sts	0x2B7C, r15	; 0x802b7c <signer_cert_size+0x1>
        memcpy(message, MESSAGE_EXECUTED, sizeof(MESSAGE_EXECUTED));
    2cb4:	87 e0       	ldi	r24, 0x07	; 7
    2cb6:	e6 e6       	ldi	r30, 0x66	; 102
    2cb8:	f3 ea       	ldi	r31, 0xA3	; 163
    2cba:	d3 01       	movw	r26, r6
    2cbc:	01 90       	ld	r0, Z+
    2cbe:	0d 92       	st	X+, r0
    2cc0:	8a 95       	dec	r24
    2cc2:	e1 f7       	brne	.-8      	; 0x2cbc <main+0x188>
    }
    
    if (strcmp(message_method, RECEIVE_DEVICE_CERT) == 0)
    2cc4:	67 e4       	ldi	r22, 0x47	; 71
    2cc6:	7a ea       	ldi	r23, 0xAA	; 170
    2cc8:	c3 01       	movw	r24, r6
    2cca:	0e 94 aa 2e 	call	0x5d54	; 0x5d54 <strcmp>
    2cce:	89 2b       	or	r24, r25
    2cd0:	01 f5       	brne	.+64     	; 0x2d12 <main+0x1de>
    {
        uint16_t cert_size;     
        cert_size = CONVERTIONS_hexToBinary(strlen(argument), argument);
    2cd2:	f8 01       	movw	r30, r16
    2cd4:	01 90       	ld	r0, Z+
    2cd6:	00 20       	and	r0, r0
    2cd8:	e9 f7       	brne	.-6      	; 0x2cd4 <main+0x1a0>
    2cda:	cf 01       	movw	r24, r30
    2cdc:	01 97       	sbiw	r24, 0x01	; 1
    2cde:	b8 01       	movw	r22, r16
    2ce0:	80 1b       	sub	r24, r16
    2ce2:	91 0b       	sbc	r25, r17
    2ce4:	0e 94 13 01 	call	0x226	; 0x226 <CONVERTIONS_hexToBinary>
    2ce8:	7c 01       	movw	r14, r24
        memcpy(device_cert, argument, cert_size);
    2cea:	ac 01       	movw	r20, r24
    2cec:	b8 01       	movw	r22, r16
    2cee:	80 91 46 2b 	lds	r24, 0x2B46	; 0x802b46 <device_cert>
    2cf2:	90 91 47 2b 	lds	r25, 0x2B47	; 0x802b47 <device_cert+0x1>
    2cf6:	0e 94 72 2e 	call	0x5ce4	; 0x5ce4 <memcpy>
        device_cert_size = cert_size;        
    2cfa:	e0 92 8d 39 	sts	0x398D, r14	; 0x80398d <device_cert_size>
    2cfe:	f0 92 8e 39 	sts	0x398E, r15	; 0x80398e <device_cert_size+0x1>
        memcpy(message, MESSAGE_EXECUTED, sizeof(MESSAGE_EXECUTED));
    2d02:	87 e0       	ldi	r24, 0x07	; 7
    2d04:	e6 e6       	ldi	r30, 0x66	; 102
    2d06:	f3 ea       	ldi	r31, 0xA3	; 163
    2d08:	d3 01       	movw	r26, r6
    2d0a:	01 90       	ld	r0, Z+
    2d0c:	0d 92       	st	X+, r0
    2d0e:	8a 95       	dec	r24
    2d10:	e1 f7       	brne	.-8      	; 0x2d0a <main+0x1d6>
    }
	

    if (strcmp(message_method, TRANSFERT_TO_WINC) == 0)
    2d12:	62 e5       	ldi	r22, 0x52	; 82
    2d14:	7a ea       	ldi	r23, 0xAA	; 170
    2d16:	c3 01       	movw	r24, r6
    2d18:	0e 94 aa 2e 	call	0x5d54	; 0x5d54 <strcmp>
    2d1c:	89 2b       	or	r24, r25
    2d1e:	71 f4       	brne	.+28     	; 0x2d3c <main+0x208>
    {
        cryptoauthlib_init();
    2d20:	0e 94 8e 15 	call	0x2b1c	; 0x2b1c <cryptoauthlib_init>
        WINC_CERTS_transfer(NULL);
    2d24:	80 e0       	ldi	r24, 0x00	; 0
    2d26:	90 e0       	ldi	r25, 0x00	; 0
    2d28:	0e 94 34 2c 	call	0x5868	; 0x5868 <WINC_CERTS_transfer>
        memcpy(message, MESSAGE_EXECUTED, sizeof(MESSAGE_EXECUTED));
    2d2c:	87 e0       	ldi	r24, 0x07	; 7
    2d2e:	e6 e6       	ldi	r30, 0x66	; 102
    2d30:	f3 ea       	ldi	r31, 0xA3	; 163
    2d32:	d3 01       	movw	r26, r6
    2d34:	01 90       	ld	r0, Z+
    2d36:	0d 92       	st	X+, r0
    2d38:	8a 95       	dec	r24
    2d3a:	e1 f7       	brne	.-8      	; 0x2d34 <main+0x200>
    }
    
    if (strcmp(message_method, GENERATE_CSR) == 0)
    2d3c:	67 e6       	ldi	r22, 0x67	; 103
    2d3e:	7a ea       	ldi	r23, 0xAA	; 170
    2d40:	c3 01       	movw	r24, r6
    2d42:	0e 94 aa 2e 	call	0x5d54	; 0x5d54 <strcmp>
    2d46:	89 2b       	or	r24, r25
    2d48:	71 f5       	brne	.+92     	; 0x2da6 <main+0x272>
    {
        uint8_t *csr_buffer = (uint8_t*) sector_buffer;
        size_t csr_buffer_length = CSR_BUFFER_LENGTH;
    2d4a:	c1 54       	subi	r28, 0x41	; 65
    2d4c:	db 4f       	sbci	r29, 0xFB	; 251
    2d4e:	c8 82       	st	Y, r12
    2d50:	d9 82       	std	Y+1, r13	; 0x01
    2d52:	cf 5b       	subi	r28, 0xBF	; 191
    2d54:	d4 40       	sbci	r29, 0x04	; 4
        
        atcacert_create_csr(&g_csr_def_3_device, csr_buffer, &csr_buffer_length);
    2d56:	ae 01       	movw	r20, r28
    2d58:	41 54       	subi	r20, 0x41	; 65
    2d5a:	5b 4f       	sbci	r21, 0xFB	; 251
    2d5c:	6d e7       	ldi	r22, 0x7D	; 125
    2d5e:	7b e2       	ldi	r23, 0x2B	; 43
    2d60:	86 e0       	ldi	r24, 0x06	; 6
    2d62:	98 e2       	ldi	r25, 0x28	; 40
    2d64:	0e 94 ac 01 	call	0x358	; 0x358 <atcacert_create_csr>
        CONVERTIONS_binaryToHex((uint16_t)csr_buffer_length, csr_buffer);
    2d68:	6d e7       	ldi	r22, 0x7D	; 125
    2d6a:	7b e2       	ldi	r23, 0x2B	; 43
    2d6c:	c1 54       	subi	r28, 0x41	; 65
    2d6e:	db 4f       	sbci	r29, 0xFB	; 251
    2d70:	88 81       	ld	r24, Y
    2d72:	99 81       	ldd	r25, Y+1	; 0x01
    2d74:	cf 5b       	subi	r28, 0xBF	; 191
    2d76:	d4 40       	sbci	r29, 0x04	; 4
    2d78:	0e 94 4f 01 	call	0x29e	; 0x29e <CONVERTIONS_binaryToHex>
        csr_buffer[2 * csr_buffer_length] = NULL;
    2d7c:	c1 54       	subi	r28, 0x41	; 65
    2d7e:	db 4f       	sbci	r29, 0xFB	; 251
    2d80:	48 81       	ld	r20, Y
    2d82:	59 81       	ldd	r21, Y+1	; 0x01
    2d84:	cf 5b       	subi	r28, 0xBF	; 191
    2d86:	d4 40       	sbci	r29, 0x04	; 4
    2d88:	44 0f       	add	r20, r20
    2d8a:	55 1f       	adc	r21, r21
    2d8c:	fa 01       	movw	r30, r20
    2d8e:	e3 58       	subi	r30, 0x83	; 131
    2d90:	f4 4d       	sbci	r31, 0xD4	; 212
    2d92:	10 82       	st	Z, r1
        
        memcpy(message, csr_buffer, 2 * csr_buffer_length + 1);
    2d94:	4f 5f       	subi	r20, 0xFF	; 255
    2d96:	5f 4f       	sbci	r21, 0xFF	; 255
    2d98:	6d e7       	ldi	r22, 0x7D	; 125
    2d9a:	7b e2       	ldi	r23, 0x2B	; 43
    2d9c:	c3 01       	movw	r24, r6
    2d9e:	0e 94 72 2e 	call	0x5ce4	; 0x5ce4 <memcpy>
        
        // Certificate buffer space is also used to generate the CSR 
        // so only initialize it after the CSR was generated 
        WINC_CERTS_initBuffer();
    2da2:	0e 94 fa 2b 	call	0x57f4	; 0x57f4 <WINC_CERTS_initBuffer>

int main(void)
{	
    char c;     
	char kitMessage[MAX_MESSAGE_SIZE];
    uint16_t idx = 0;
    2da6:	83 01       	movw	r16, r6
}


static void kitComWriteString(char * str)
{
    for(size_t i = 0; i <= strlen(str); i++)
    2da8:	f3 01       	movw	r30, r6
    2daa:	01 90       	ld	r0, Z+
    2dac:	00 20       	and	r0, r0
    2dae:	e9 f7       	brne	.-6      	; 0x2daa <main+0x276>
    2db0:	31 97       	sbiw	r30, 0x01	; 1
    2db2:	e6 19       	sub	r30, r6
    2db4:	f7 09       	sbc	r31, r7
    2db6:	c8 01       	movw	r24, r16
    2db8:	86 19       	sub	r24, r6
    2dba:	97 09       	sbc	r25, r7
    2dbc:	e8 17       	cp	r30, r24
    2dbe:	f9 07       	cpc	r31, r25
    2dc0:	30 f0       	brcs	.+12     	; 0x2dce <main+0x29a>
    {
        USART_0_write(str[i]);
    2dc2:	f8 01       	movw	r30, r16
    2dc4:	81 91       	ld	r24, Z+
    2dc6:	8f 01       	movw	r16, r30
    2dc8:	0e 94 a9 1a 	call	0x3552	; 0x3552 <USART_0_write>
    2dcc:	ed cf       	rjmp	.-38     	; 0x2da8 <main+0x274>
            kitMessage[idx++] = '\0';
            
            processMessage((uint8_t*)kitMessage, &idx);
            kitComWriteString(kitMessage);

            idx = 0;    
    2dce:	00 e0       	ldi	r16, 0x00	; 0
    2dd0:	10 e0       	ldi	r17, 0x00	; 0
    2dd2:	13 cf       	rjmp	.-474    	; 0x2bfa <main+0xc6>

00002dd4 <BOD_init>:
	//		 | BOD_VLMCFG_ABOVE_gc; /* Interrupt when supply goes above VLM level */

	// BOD.VLMCTRLA = BOD_VLMLVL_5ABOVE_gc; /* VLM threshold 5% above BOD level */

	return 0;
}
    2dd4:	80 e0       	ldi	r24, 0x00	; 0
    2dd6:	08 95       	ret

00002dd8 <CLKCTRL_init>:
 *       on calling convention. The memory model is not visible to the
 *       preprocessor, so it must be defined in the Assembler preprocessor directives.
 */
static inline void ccp_write_io(void *addr, uint8_t value)
{
	protected_write_io(addr, CCP_IOREG_gc, value);
    2dd8:	41 e0       	ldi	r20, 0x01	; 1
    2dda:	68 ed       	ldi	r22, 0xD8	; 216
    2ddc:	81 e6       	ldi	r24, 0x61	; 97
    2dde:	90 e0       	ldi	r25, 0x00	; 0
    2de0:	0e 94 72 1a 	call	0x34e4	; 0x34e4 <protected_write_io>
	//		 | 0 << CLKCTRL_CLKOUT_bp /* System clock out: disabled */);

	// ccp_write_io((void*)&(CLKCTRL.MCLKLOCK),0 << CLKCTRL_LOCKEN_bp /* lock enable: disabled */);

	return 0;
}
    2de4:	80 e0       	ldi	r24, 0x00	; 0
    2de6:	08 95       	ret

00002de8 <CPUINT_init>:
	// CPUINT.LVL0PRI = 0x0 << CPUINT_LVL0PRI_gp; /* Interrupt Level Priority: 0x0 */

	// CPUINT.LVL1VEC = 0x0 << CPUINT_LVL1VEC_gp; /* Interrupt Vector with High Priority: 0x0 */

	return 0;
}
    2de8:	80 e0       	ldi	r24, 0x00	; 0
    2dea:	08 95       	ret

00002dec <mcu_init>:
#ifdef __cplusplus
extern "C" {
#endif

void mcu_init(void)
{
    2dec:	e0 e1       	ldi	r30, 0x10	; 16
    2dee:	f4 e0       	ldi	r31, 0x04	; 4
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    2df0:	80 81       	ld	r24, Z
    2df2:	88 60       	ori	r24, 0x08	; 8
    2df4:	81 93       	st	Z+, r24
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
    2df6:	e8 31       	cpi	r30, 0x18	; 24
    2df8:	84 e0       	ldi	r24, 0x04	; 4
    2dfa:	f8 07       	cpc	r31, r24
    2dfc:	c9 f7       	brne	.-14     	; 0x2df0 <mcu_init+0x4>
    2dfe:	e0 e3       	ldi	r30, 0x30	; 48
    2e00:	f4 e0       	ldi	r31, 0x04	; 4
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    2e02:	80 81       	ld	r24, Z
    2e04:	88 60       	ori	r24, 0x08	; 8
    2e06:	81 93       	st	Z+, r24

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    2e08:	e8 33       	cpi	r30, 0x38	; 56
    2e0a:	84 e0       	ldi	r24, 0x04	; 4
    2e0c:	f8 07       	cpc	r31, r24
    2e0e:	c9 f7       	brne	.-14     	; 0x2e02 <mcu_init+0x16>
    2e10:	e0 e5       	ldi	r30, 0x50	; 80
    2e12:	f4 e0       	ldi	r31, 0x04	; 4
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    2e14:	80 81       	ld	r24, Z
    2e16:	88 60       	ori	r24, 0x08	; 8
    2e18:	81 93       	st	Z+, r24

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    2e1a:	e8 35       	cpi	r30, 0x58	; 88
    2e1c:	84 e0       	ldi	r24, 0x04	; 4
    2e1e:	f8 07       	cpc	r31, r24
    2e20:	c9 f7       	brne	.-14     	; 0x2e14 <mcu_init+0x28>
    2e22:	e0 e7       	ldi	r30, 0x70	; 112
    2e24:	f4 e0       	ldi	r31, 0x04	; 4
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    2e26:	80 81       	ld	r24, Z
    2e28:	88 60       	ori	r24, 0x08	; 8
    2e2a:	81 93       	st	Z+, r24

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    2e2c:	e8 37       	cpi	r30, 0x78	; 120
    2e2e:	84 e0       	ldi	r24, 0x04	; 4
    2e30:	f8 07       	cpc	r31, r24
    2e32:	c9 f7       	brne	.-14     	; 0x2e26 <mcu_init+0x3a>
    2e34:	e0 e9       	ldi	r30, 0x90	; 144
    2e36:	f4 e0       	ldi	r31, 0x04	; 4
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    2e38:	80 81       	ld	r24, Z
    2e3a:	88 60       	ori	r24, 0x08	; 8
    2e3c:	81 93       	st	Z+, r24

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    2e3e:	e8 39       	cpi	r30, 0x98	; 152
    2e40:	84 e0       	ldi	r24, 0x04	; 4
    2e42:	f8 07       	cpc	r31, r24
    2e44:	c9 f7       	brne	.-14     	; 0x2e38 <mcu_init+0x4c>
    2e46:	e0 eb       	ldi	r30, 0xB0	; 176
    2e48:	f4 e0       	ldi	r31, 0x04	; 4
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    2e4a:	80 81       	ld	r24, Z
    2e4c:	88 60       	ori	r24, 0x08	; 8
    2e4e:	81 93       	st	Z+, r24

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    2e50:	e8 3b       	cpi	r30, 0xB8	; 184
    2e52:	84 e0       	ldi	r24, 0x04	; 4
    2e54:	f8 07       	cpc	r31, r24
    2e56:	c9 f7       	brne	.-14     	; 0x2e4a <mcu_init+0x5e>
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}
}
    2e58:	08 95       	ret

00002e5a <USART_0_initialization>:
 */
static inline void PORTF_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTF.DIR &= ~(1 << pin);
    2e5a:	a1 98       	cbi	0x14, 1	; 20
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTF + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
    2e5c:	e1 eb       	ldi	r30, 0xB1	; 177
    2e5e:	f4 e0       	ldi	r31, 0x04	; 4
    2e60:	80 81       	ld	r24, Z
    2e62:	87 7f       	andi	r24, 0xF7	; 247
    2e64:	80 83       	st	Z, r24
	switch (dir) {
	case PORT_DIR_IN:
		VPORTF.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTF.DIR |= (1 << pin);
    2e66:	a0 9a       	sbi	0x14, 0	; 20
static inline void PORTF_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTF.OUT |= (1 << pin);
	} else {
		VPORTF.OUT &= ~(1 << pin);
    2e68:	a8 98       	cbi	0x15, 0	; 21
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	USART_0_init();
    2e6a:	0c 94 92 1a 	jmp	0x3524	; 0x3524 <USART_0_init>

00002e6e <SPI_0_initialization>:
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
    2e6e:	05 98       	cbi	0x00, 5	; 0
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
    2e70:	e5 e1       	ldi	r30, 0x15	; 21
    2e72:	f4 e0       	ldi	r31, 0x04	; 4
    2e74:	80 81       	ld	r24, Z
    2e76:	87 7f       	andi	r24, 0xF7	; 247
    2e78:	80 83       	st	Z, r24
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
    2e7a:	04 9a       	sbi	0x00, 4	; 0
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
    2e7c:	0c 98       	cbi	0x01, 4	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
    2e7e:	06 9a       	sbi	0x00, 6	; 0
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
    2e80:	0e 98       	cbi	0x01, 6	; 1
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	SPI_0_init();
    2e82:	0c 94 78 1a 	jmp	0x34f0	; 0x34f0 <SPI_0_init>

00002e86 <I2C_0_initialization>:
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
    2e86:	03 9a       	sbi	0x00, 3	; 0
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
    2e88:	0b 98       	cbi	0x01, 3	; 1
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
    2e8a:	e3 e1       	ldi	r30, 0x13	; 19
    2e8c:	f4 e0       	ldi	r31, 0x04	; 4
    2e8e:	80 81       	ld	r24, Z
    2e90:	87 7f       	andi	r24, 0xF7	; 247
    2e92:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (inverted) {
		*port_pin_ctrl |= PORT_INVEN_bm;
	} else {
		*port_pin_ctrl &= ~PORT_INVEN_bm;
    2e94:	80 81       	ld	r24, Z
    2e96:	8f 77       	andi	r24, 0x7F	; 127
    2e98:	80 83       	st	Z, r24
 */
static inline void PORTA_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
    2e9a:	80 81       	ld	r24, Z
    2e9c:	88 7f       	andi	r24, 0xF8	; 248
    2e9e:	80 83       	st	Z, r24
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
    2ea0:	02 9a       	sbi	0x00, 2	; 0
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
    2ea2:	0a 98       	cbi	0x01, 2	; 1
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
    2ea4:	e2 e1       	ldi	r30, 0x12	; 18
    2ea6:	f4 e0       	ldi	r31, 0x04	; 4
    2ea8:	80 81       	ld	r24, Z
    2eaa:	87 7f       	andi	r24, 0xF7	; 247
    2eac:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (inverted) {
		*port_pin_ctrl |= PORT_INVEN_bm;
	} else {
		*port_pin_ctrl &= ~PORT_INVEN_bm;
    2eae:	80 81       	ld	r24, Z
    2eb0:	8f 77       	andi	r24, 0x7F	; 127
    2eb2:	80 83       	st	Z, r24
 */
static inline void PORTA_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
    2eb4:	80 81       	ld	r24, Z
    2eb6:	88 7f       	andi	r24, 0xF8	; 248
    2eb8:	80 83       	st	Z, r24
	    // <PORT_ISC_FALLING_gc"> Sense Falling Edge
	    // <PORT_ISC_INPUT_DISABLE_gc"> Digital Input Buffer disabled
	    // <PORT_ISC_LEVEL_gc"> Sense low Level
	    PORT_ISC_INTDISABLE_gc);

	I2C_0_init();
    2eba:	0c 94 58 19 	jmp	0x32b0	; 0x32b0 <I2C_0_init>

00002ebe <system_init>:
/**
 * \brief System initialization
 */
void system_init()
{
	mcu_init();
    2ebe:	0e 94 f6 16 	call	0x2dec	; 0x2dec <mcu_init>
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
    2ec2:	01 9a       	sbi	0x00, 1	; 0
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
    2ec4:	09 98       	cbi	0x01, 1	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
    2ec6:	07 9a       	sbi	0x00, 7	; 0
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
    2ec8:	0f 9a       	sbi	0x01, 7	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTD.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTD.DIR |= (1 << pin);
    2eca:	60 9a       	sbi	0x0c, 0	; 12
 *                  false = Pin level set to "low" state
 */
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTD.OUT |= (1 << pin);
    2ecc:	68 9a       	sbi	0x0d, 0	; 13
	switch (dir) {
	case PORT_DIR_IN:
		VPORTD.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTD.DIR |= (1 << pin);
    2ece:	61 9a       	sbi	0x0c, 1	; 12
 *                  false = Pin level set to "low" state
 */
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTD.OUT |= (1 << pin);
    2ed0:	69 9a       	sbi	0x0d, 1	; 13
	switch (dir) {
	case PORT_DIR_IN:
		VPORTD.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTD.DIR |= (1 << pin);
    2ed2:	62 9a       	sbi	0x0c, 2	; 12
 *                  false = Pin level set to "low" state
 */
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTD.OUT |= (1 << pin);
    2ed4:	6a 9a       	sbi	0x0d, 2	; 13
	switch (dir) {
	case PORT_DIR_IN:
		VPORTD.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTD.DIR |= (1 << pin);
    2ed6:	63 9a       	sbi	0x0c, 3	; 12
 *                  false = Pin level set to "low" state
 */
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTD.OUT |= (1 << pin);
    2ed8:	6b 9a       	sbi	0x0d, 3	; 13
 */
static inline void PORTF_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTF.DIR &= ~(1 << pin);
    2eda:	a2 98       	cbi	0x14, 2	; 20
static inline void PORTF_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTF.OUT |= (1 << pin);
	} else {
		VPORTF.OUT &= ~(1 << pin);
    2edc:	aa 98       	cbi	0x15, 2	; 21
static inline void PORTF_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTF + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
    2ede:	e2 eb       	ldi	r30, 0xB2	; 178
    2ee0:	f4 e0       	ldi	r31, 0x04	; 4
    2ee2:	80 81       	ld	r24, Z
    2ee4:	88 60       	ori	r24, 0x08	; 8
    2ee6:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTF + 0x10 + pin);

	if (inverted) {
		*port_pin_ctrl |= PORT_INVEN_bm;
	} else {
		*port_pin_ctrl &= ~PORT_INVEN_bm;
    2ee8:	80 81       	ld	r24, Z
    2eea:	8f 77       	andi	r24, 0x7F	; 127
    2eec:	80 83       	st	Z, r24
 */
static inline void PORTF_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTF + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
    2eee:	80 81       	ld	r24, Z
    2ef0:	88 7f       	andi	r24, 0xF8	; 248
    2ef2:	83 60       	ori	r24, 0x03	; 3
    2ef4:	80 83       	st	Z, r24
	switch (dir) {
	case PORT_DIR_IN:
		VPORTF.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTF.DIR |= (1 << pin);
    2ef6:	a3 9a       	sbi	0x14, 3	; 20
static inline void PORTF_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTF.OUT |= (1 << pin);
	} else {
		VPORTF.OUT &= ~(1 << pin);
    2ef8:	ab 98       	cbi	0x15, 3	; 21
	switch (dir) {
	case PORT_DIR_IN:
		VPORTF.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTF.DIR |= (1 << pin);
    2efa:	a4 9a       	sbi	0x14, 4	; 20
static inline void PORTF_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTF.OUT |= (1 << pin);
	} else {
		VPORTF.OUT &= ~(1 << pin);
    2efc:	ac 98       	cbi	0x15, 4	; 21
 */
static inline void PORTF_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTF.DIR &= ~(1 << pin);
    2efe:	a5 98       	cbi	0x14, 5	; 20
static inline void PORTF_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTF + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
    2f00:	e5 eb       	ldi	r30, 0xB5	; 181
    2f02:	f4 e0       	ldi	r31, 0x04	; 4
    2f04:	80 81       	ld	r24, Z
    2f06:	88 60       	ori	r24, 0x08	; 8
    2f08:	80 83       	st	Z, r24
 */
static inline void PORTF_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTF.DIR &= ~(1 << pin);
    2f0a:	a6 98       	cbi	0x14, 6	; 20
static inline void PORTF_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTF + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
    2f0c:	e6 eb       	ldi	r30, 0xB6	; 182
    2f0e:	f4 e0       	ldi	r31, 0x04	; 4
    2f10:	80 81       	ld	r24, Z
    2f12:	88 60       	ori	r24, 0x08	; 8
    2f14:	80 83       	st	Z, r24
	    // <id> pad_pull_config
	    // <PORT_PULL_OFF"> Off
	    // <PORT_PULL_UP"> Pull-up
	    PORT_PULL_UP);

	CLKCTRL_init();
    2f16:	0e 94 ec 16 	call	0x2dd8	; 0x2dd8 <CLKCTRL_init>

	USART_0_initialization();
    2f1a:	0e 94 2d 17 	call	0x2e5a	; 0x2e5a <USART_0_initialization>

	SPI_0_initialization();
    2f1e:	0e 94 37 17 	call	0x2e6e	; 0x2e6e <SPI_0_initialization>

	CPUINT_init();
    2f22:	0e 94 f4 16 	call	0x2de8	; 0x2de8 <CPUINT_init>

	SLPCTRL_init();
    2f26:	0e 94 76 1a 	call	0x34ec	; 0x34ec <SLPCTRL_init>

	I2C_0_initialization();
    2f2a:	0e 94 43 17 	call	0x2e86	; 0x2e86 <I2C_0_initialization>

	BOD_init();
    2f2e:	0c 94 ea 16 	jmp	0x2dd4	; 0x2dd4 <BOD_init>

00002f32 <I2C_0_do_I2C_RESET>:
 */
void I2C_0_set_timeout(uint8_t to)
{
	TWI0.MCTRLA &= ~(TWI_RIEN_bm | TWI_WIEN_bm);
	I2C_0_status.timeout_value = to;
	TWI0.MCTRLA |= (TWI_RIEN_bm | TWI_WIEN_bm);
    2f32:	e0 ea       	ldi	r30, 0xA0	; 160
    2f34:	f8 e0       	ldi	r31, 0x08	; 8
    2f36:	84 81       	ldd	r24, Z+4	; 0x04
    2f38:	88 60       	ori	r24, 0x08	; 8
    2f3a:	84 83       	std	Z+4, r24	; 0x04
    2f3c:	85 81       	ldd	r24, Z+5	; 0x05
    2f3e:	81 60       	ori	r24, 0x01	; 1
    2f40:	85 83       	std	Z+5, r24	; 0x05
    2f42:	ec e0       	ldi	r30, 0x0C	; 12
    2f44:	fa e2       	ldi	r31, 0x2A	; 42
    2f46:	80 81       	ld	r24, Z
    2f48:	8e 7f       	andi	r24, 0xFE	; 254
    2f4a:	80 83       	st	Z, r24
    2f4c:	13 86       	std	Z+11, r1	; 0x0b
    2f4e:	8e e0       	ldi	r24, 0x0E	; 14
    2f50:	08 95       	ret

00002f52 <I2C_0_do_I2C_IDLE>:
    2f52:	ec e0       	ldi	r30, 0x0C	; 12
    2f54:	fa e2       	ldi	r31, 0x2A	; 42
    2f56:	80 81       	ld	r24, Z
    2f58:	8e 7f       	andi	r24, 0xFE	; 254
    2f5a:	80 83       	st	Z, r24
    2f5c:	13 86       	std	Z+11, r1	; 0x0b
    2f5e:	80 e0       	ldi	r24, 0x00	; 0
    2f60:	08 95       	ret

00002f62 <I2C_0_do_I2C_SEND_STOP>:
    2f62:	e0 ea       	ldi	r30, 0xA0	; 160
    2f64:	f8 e0       	ldi	r31, 0x08	; 8
    2f66:	84 81       	ldd	r24, Z+4	; 0x04
    2f68:	83 60       	ori	r24, 0x03	; 3
    2f6a:	84 83       	std	Z+4, r24	; 0x04
    2f6c:	ec e0       	ldi	r30, 0x0C	; 12
    2f6e:	fa e2       	ldi	r31, 0x2A	; 42
    2f70:	80 81       	ld	r24, Z
    2f72:	8e 7f       	andi	r24, 0xFE	; 254
    2f74:	80 83       	st	Z, r24
    2f76:	13 86       	std	Z+11, r1	; 0x0b
    2f78:	80 e0       	ldi	r24, 0x00	; 0
    2f7a:	08 95       	ret

00002f7c <I2C_0_do_I2C_SEND_ADR_READ>:
    2f7c:	ec e0       	ldi	r30, 0x0C	; 12
    2f7e:	fa e2       	ldi	r31, 0x2A	; 42
    2f80:	80 81       	ld	r24, Z
    2f82:	88 60       	ori	r24, 0x08	; 8
    2f84:	80 83       	st	Z, r24
    2f86:	81 81       	ldd	r24, Z+1	; 0x01
    2f88:	88 0f       	add	r24, r24
    2f8a:	81 60       	ori	r24, 0x01	; 1
    2f8c:	80 93 a7 08 	sts	0x08A7, r24	; 0x8008a7 <__TEXT_REGION_LENGTH__+0x7008a7>
    2f90:	84 e0       	ldi	r24, 0x04	; 4
    2f92:	08 95       	ret

00002f94 <I2C_0_do_I2C_SEND_RESTART>:
    2f94:	0c 94 be 17 	jmp	0x2f7c	; 0x2f7c <I2C_0_do_I2C_SEND_ADR_READ>

00002f98 <I2C_0_do_I2C_SEND_ADR_WRITE>:
    2f98:	ec e0       	ldi	r30, 0x0C	; 12
    2f9a:	fa e2       	ldi	r31, 0x2A	; 42
    2f9c:	80 81       	ld	r24, Z
    2f9e:	88 60       	ori	r24, 0x08	; 8
    2fa0:	80 83       	st	Z, r24
    2fa2:	81 81       	ldd	r24, Z+1	; 0x01
    2fa4:	88 0f       	add	r24, r24
    2fa6:	80 93 a7 08 	sts	0x08A7, r24	; 0x8008a7 <__TEXT_REGION_LENGTH__+0x7008a7>
    2faa:	83 e0       	ldi	r24, 0x03	; 3
    2fac:	08 95       	ret

00002fae <I2C_0_do_I2C_SEND_RESTART_WRITE>:
    2fae:	0c 94 cc 17 	jmp	0x2f98	; 0x2f98 <I2C_0_do_I2C_SEND_ADR_WRITE>

00002fb2 <I2C_0_do_I2C_DO_ADDRESS_NACK>:
    2fb2:	80 91 0c 2a 	lds	r24, 0x2A0C	; 0x802a0c <I2C_0_status>
    2fb6:	87 7f       	andi	r24, 0xF7	; 247
    2fb8:	80 93 0c 2a 	sts	0x2A0C, r24	; 0x802a0c <I2C_0_status>
    2fbc:	82 e0       	ldi	r24, 0x02	; 2
    2fbe:	80 93 17 2a 	sts	0x2A17, r24	; 0x802a17 <I2C_0_status+0xb>
    2fc2:	e0 91 1c 2a 	lds	r30, 0x2A1C	; 0x802a1c <I2C_0_status+0x10>
    2fc6:	f0 91 1d 2a 	lds	r31, 0x2A1D	; 0x802a1d <I2C_0_status+0x11>
    2fca:	80 91 28 2a 	lds	r24, 0x2A28	; 0x802a28 <I2C_0_status+0x1c>
    2fce:	90 91 29 2a 	lds	r25, 0x2A29	; 0x802a29 <I2C_0_status+0x1d>
    2fd2:	09 95       	icall
    2fd4:	82 30       	cpi	r24, 0x02	; 2
    2fd6:	21 f0       	breq	.+8      	; 0x2fe0 <I2C_0_do_I2C_DO_ADDRESS_NACK+0x2e>
    2fd8:	83 30       	cpi	r24, 0x03	; 3
    2fda:	21 f4       	brne	.+8      	; 0x2fe4 <I2C_0_do_I2C_DO_ADDRESS_NACK+0x32>
    2fdc:	0c 94 cc 17 	jmp	0x2f98	; 0x2f98 <I2C_0_do_I2C_SEND_ADR_WRITE>
    2fe0:	0c 94 be 17 	jmp	0x2f7c	; 0x2f7c <I2C_0_do_I2C_SEND_ADR_READ>
    2fe4:	0c 94 b1 17 	jmp	0x2f62	; 0x2f62 <I2C_0_do_I2C_SEND_STOP>

00002fe8 <I2C_0_do_I2C_RX_DO_ACK>:
    2fe8:	e0 ea       	ldi	r30, 0xA0	; 160
    2fea:	f8 e0       	ldi	r31, 0x08	; 8
    2fec:	84 81       	ldd	r24, Z+4	; 0x04
    2fee:	8b 7f       	andi	r24, 0xFB	; 251
    2ff0:	84 83       	std	Z+4, r24	; 0x04
    2ff2:	84 e0       	ldi	r24, 0x04	; 4
    2ff4:	08 95       	ret

00002ff6 <I2C_0_do_I2C_TX_DO_ACK>:
    2ff6:	e0 ea       	ldi	r30, 0xA0	; 160
    2ff8:	f8 e0       	ldi	r31, 0x08	; 8
    2ffa:	84 81       	ldd	r24, Z+4	; 0x04
    2ffc:	8b 7f       	andi	r24, 0xFB	; 251
    2ffe:	84 83       	std	Z+4, r24	; 0x04
    3000:	83 e0       	ldi	r24, 0x03	; 3
    3002:	08 95       	ret

00003004 <I2C_0_do_I2C_DO_NACK_STOP>:
    3004:	e0 ea       	ldi	r30, 0xA0	; 160
    3006:	f8 e0       	ldi	r31, 0x08	; 8
    3008:	84 81       	ldd	r24, Z+4	; 0x04
    300a:	84 60       	ori	r24, 0x04	; 4
    300c:	84 83       	std	Z+4, r24	; 0x04
    300e:	84 81       	ldd	r24, Z+4	; 0x04
    3010:	83 60       	ori	r24, 0x03	; 3
    3012:	84 83       	std	Z+4, r24	; 0x04
    3014:	ec e0       	ldi	r30, 0x0C	; 12
    3016:	fa e2       	ldi	r31, 0x2A	; 42
    3018:	80 81       	ld	r24, Z
    301a:	8e 7f       	andi	r24, 0xFE	; 254
    301c:	80 83       	st	Z, r24
    301e:	13 86       	std	Z+11, r1	; 0x0b
    3020:	80 e0       	ldi	r24, 0x00	; 0
    3022:	08 95       	ret

00003024 <I2C_0_do_I2C_DO_NACK_RESTART>:
    3024:	e0 ea       	ldi	r30, 0xA0	; 160
    3026:	f8 e0       	ldi	r31, 0x08	; 8
    3028:	84 81       	ldd	r24, Z+4	; 0x04
    302a:	84 60       	ori	r24, 0x04	; 4
    302c:	84 83       	std	Z+4, r24	; 0x04
    302e:	88 e0       	ldi	r24, 0x08	; 8
    3030:	08 95       	ret

00003032 <I2C_0_do_I2C_BUS_COLLISION>:
    3032:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7008a5>
    3036:	88 60       	ori	r24, 0x08	; 8
    3038:	80 93 a5 08 	sts	0x08A5, r24	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7008a5>
    303c:	82 e0       	ldi	r24, 0x02	; 2
    303e:	80 93 17 2a 	sts	0x2A17, r24	; 0x802a17 <I2C_0_status+0xb>
    3042:	e0 91 1a 2a 	lds	r30, 0x2A1A	; 0x802a1a <I2C_0_status+0xe>
    3046:	f0 91 1b 2a 	lds	r31, 0x2A1B	; 0x802a1b <I2C_0_status+0xf>
    304a:	80 91 26 2a 	lds	r24, 0x2A26	; 0x802a26 <I2C_0_status+0x1a>
    304e:	90 91 27 2a 	lds	r25, 0x2A27	; 0x802a27 <I2C_0_status+0x1b>
    3052:	09 95       	icall
    3054:	82 30       	cpi	r24, 0x02	; 2
    3056:	21 f0       	breq	.+8      	; 0x3060 <I2C_0_do_I2C_BUS_COLLISION+0x2e>
    3058:	83 30       	cpi	r24, 0x03	; 3
    305a:	21 f4       	brne	.+8      	; 0x3064 <I2C_0_do_I2C_BUS_COLLISION+0x32>
    305c:	0c 94 cc 17 	jmp	0x2f98	; 0x2f98 <I2C_0_do_I2C_SEND_ADR_WRITE>
    3060:	0c 94 be 17 	jmp	0x2f7c	; 0x2f7c <I2C_0_do_I2C_SEND_ADR_READ>
    3064:	0c 94 99 17 	jmp	0x2f32	; 0x2f32 <I2C_0_do_I2C_RESET>

00003068 <I2C_0_do_I2C_BUS_ERROR>:
    3068:	e0 ea       	ldi	r30, 0xA0	; 160
    306a:	f8 e0       	ldi	r31, 0x08	; 8
    306c:	84 81       	ldd	r24, Z+4	; 0x04
    306e:	88 60       	ori	r24, 0x08	; 8
    3070:	84 83       	std	Z+4, r24	; 0x04
    3072:	85 81       	ldd	r24, Z+5	; 0x05
    3074:	81 60       	ori	r24, 0x01	; 1
    3076:	85 83       	std	Z+5, r24	; 0x05
    3078:	ec e0       	ldi	r30, 0x0C	; 12
    307a:	fa e2       	ldi	r31, 0x2A	; 42
    307c:	80 81       	ld	r24, Z
    307e:	8e 7f       	andi	r24, 0xFE	; 254
    3080:	80 83       	st	Z, r24
    3082:	82 e0       	ldi	r24, 0x02	; 2
    3084:	83 87       	std	Z+11, r24	; 0x0b
    3086:	8e e0       	ldi	r24, 0x0E	; 14
    3088:	08 95       	ret

0000308a <I2C_0_master_isr>:
    308a:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7008a5>
    308e:	80 6c       	ori	r24, 0xC0	; 192
    3090:	80 93 a5 08 	sts	0x08A5, r24	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7008a5>
    3094:	80 91 0c 2a 	lds	r24, 0x2A0C	; 0x802a0c <I2C_0_status>
    3098:	83 ff       	sbrs	r24, 3
    309a:	07 c0       	rjmp	.+14     	; 0x30aa <I2C_0_master_isr+0x20>
    309c:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7008a5>
    30a0:	84 ff       	sbrs	r24, 4
    30a2:	03 c0       	rjmp	.+6      	; 0x30aa <I2C_0_master_isr+0x20>
    30a4:	8f e0       	ldi	r24, 0x0F	; 15
    30a6:	80 93 16 2a 	sts	0x2A16, r24	; 0x802a16 <I2C_0_status+0xa>
    30aa:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7008a5>
    30ae:	83 ff       	sbrs	r24, 3
    30b0:	03 c0       	rjmp	.+6      	; 0x30b8 <I2C_0_master_isr+0x2e>
    30b2:	80 e1       	ldi	r24, 0x10	; 16
    30b4:	80 93 16 2a 	sts	0x2A16, r24	; 0x802a16 <I2C_0_status+0xa>
    30b8:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7008a5>
    30bc:	82 ff       	sbrs	r24, 2
    30be:	03 c0       	rjmp	.+6      	; 0x30c6 <I2C_0_master_isr+0x3c>
    30c0:	81 e1       	ldi	r24, 0x11	; 17
    30c2:	80 93 16 2a 	sts	0x2A16, r24	; 0x802a16 <I2C_0_status+0xa>
    30c6:	e0 91 16 2a 	lds	r30, 0x2A16	; 0x802a16 <I2C_0_status+0xa>
    30ca:	f0 e0       	ldi	r31, 0x00	; 0
    30cc:	ee 0f       	add	r30, r30
    30ce:	ff 1f       	adc	r31, r31
    30d0:	eb 56       	subi	r30, 0x6B	; 107
    30d2:	f6 4d       	sbci	r31, 0xD6	; 214
    30d4:	01 90       	ld	r0, Z+
    30d6:	f0 81       	ld	r31, Z
    30d8:	e0 2d       	mov	r30, r0
    30da:	09 95       	icall
    30dc:	80 93 16 2a 	sts	0x2A16, r24	; 0x802a16 <I2C_0_status+0xa>
    30e0:	08 95       	ret

000030e2 <I2C_0_return_stop>:
    30e2:	81 e0       	ldi	r24, 0x01	; 1
    30e4:	08 95       	ret

000030e6 <I2C_0_return_reset>:
    30e6:	85 e0       	ldi	r24, 0x05	; 5
    30e8:	08 95       	ret

000030ea <I2C_0_set_callback>:
    30ea:	90 e0       	ldi	r25, 0x00	; 0
    30ec:	fc 01       	movw	r30, r24
    30ee:	ee 0f       	add	r30, r30
    30f0:	ff 1f       	adc	r31, r31
    30f2:	e8 5e       	subi	r30, 0xE8	; 232
    30f4:	f5 4d       	sbci	r31, 0xD5	; 213
    30f6:	61 15       	cp	r22, r1
    30f8:	71 05       	cpc	r23, r1
    30fa:	51 f0       	breq	.+20     	; 0x3110 <I2C_0_set_callback+0x26>
    30fc:	60 83       	st	Z, r22
    30fe:	71 83       	std	Z+1, r23	; 0x01
    3100:	88 0f       	add	r24, r24
    3102:	99 1f       	adc	r25, r25
    3104:	fc 01       	movw	r30, r24
    3106:	ec 5d       	subi	r30, 0xDC	; 220
    3108:	f5 4d       	sbci	r31, 0xD5	; 213
    310a:	40 83       	st	Z, r20
    310c:	51 83       	std	Z+1, r21	; 0x01
    310e:	08 95       	ret
    3110:	21 e7       	ldi	r18, 0x71	; 113
    3112:	38 e1       	ldi	r19, 0x18	; 24
    3114:	20 83       	st	Z, r18
    3116:	31 83       	std	Z+1, r19	; 0x01
    3118:	88 0f       	add	r24, r24
    311a:	99 1f       	adc	r25, r25
    311c:	fc 01       	movw	r30, r24
    311e:	ec 5d       	subi	r30, 0xDC	; 220
    3120:	f5 4d       	sbci	r31, 0xD5	; 213
    3122:	10 82       	st	Z, r1
    3124:	11 82       	std	Z+1, r1	; 0x01
    3126:	08 95       	ret

00003128 <I2C_0_do_I2C_TX>:
    3128:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7008a5>
    312c:	84 ff       	sbrs	r24, 4
    312e:	13 c0       	rjmp	.+38     	; 0x3156 <I2C_0_do_I2C_TX+0x2e>
    3130:	e0 91 1e 2a 	lds	r30, 0x2A1E	; 0x802a1e <I2C_0_status+0x12>
    3134:	f0 91 1f 2a 	lds	r31, 0x2A1F	; 0x802a1f <I2C_0_status+0x13>
    3138:	80 91 2a 2a 	lds	r24, 0x2A2A	; 0x802a2a <I2C_0_status+0x1e>
    313c:	90 91 2b 2a 	lds	r25, 0x2A2B	; 0x802a2b <I2C_0_status+0x1f>
    3140:	09 95       	icall
    3142:	82 30       	cpi	r24, 0x02	; 2
    3144:	21 f0       	breq	.+8      	; 0x314e <I2C_0_do_I2C_TX+0x26>
    3146:	83 30       	cpi	r24, 0x03	; 3
    3148:	21 f4       	brne	.+8      	; 0x3152 <I2C_0_do_I2C_TX+0x2a>
    314a:	0c 94 cc 17 	jmp	0x2f98	; 0x2f98 <I2C_0_do_I2C_SEND_ADR_WRITE>
    314e:	0c 94 be 17 	jmp	0x2f7c	; 0x2f7c <I2C_0_do_I2C_SEND_ADR_READ>
    3152:	0c 94 b1 17 	jmp	0x2f62	; 0x2f62 <I2C_0_do_I2C_SEND_STOP>
    3156:	80 91 0c 2a 	lds	r24, 0x2A0C	; 0x802a0c <I2C_0_status>
    315a:	87 7f       	andi	r24, 0xF7	; 247
    315c:	80 93 0c 2a 	sts	0x2A0C, r24	; 0x802a0c <I2C_0_status>
    3160:	e0 91 0e 2a 	lds	r30, 0x2A0E	; 0x802a0e <I2C_0_status+0x2>
    3164:	f0 91 0f 2a 	lds	r31, 0x2A0F	; 0x802a0f <I2C_0_status+0x3>
    3168:	cf 01       	movw	r24, r30
    316a:	01 96       	adiw	r24, 0x01	; 1
    316c:	80 93 0e 2a 	sts	0x2A0E, r24	; 0x802a0e <I2C_0_status+0x2>
    3170:	90 93 0f 2a 	sts	0x2A0F, r25	; 0x802a0f <I2C_0_status+0x3>
    3174:	80 81       	ld	r24, Z
    3176:	80 93 a8 08 	sts	0x08A8, r24	; 0x8008a8 <__TEXT_REGION_LENGTH__+0x7008a8>
    317a:	80 91 10 2a 	lds	r24, 0x2A10	; 0x802a10 <I2C_0_status+0x4>
    317e:	90 91 11 2a 	lds	r25, 0x2A11	; 0x802a11 <I2C_0_status+0x5>
    3182:	01 97       	sbiw	r24, 0x01	; 1
    3184:	80 93 10 2a 	sts	0x2A10, r24	; 0x802a10 <I2C_0_status+0x4>
    3188:	90 93 11 2a 	sts	0x2A11, r25	; 0x802a11 <I2C_0_status+0x5>
    318c:	89 2b       	or	r24, r25
    318e:	11 f4       	brne	.+4      	; 0x3194 <I2C_0_do_I2C_TX+0x6c>
    3190:	85 e0       	ldi	r24, 0x05	; 5
    3192:	08 95       	ret
    3194:	83 e0       	ldi	r24, 0x03	; 3
    3196:	08 95       	ret

00003198 <I2C_0_do_I2C_RX>:
    3198:	80 91 0c 2a 	lds	r24, 0x2A0C	; 0x802a0c <I2C_0_status>
    319c:	87 7f       	andi	r24, 0xF7	; 247
    319e:	80 93 0c 2a 	sts	0x2A0C, r24	; 0x802a0c <I2C_0_status>
    31a2:	80 91 10 2a 	lds	r24, 0x2A10	; 0x802a10 <I2C_0_status+0x4>
    31a6:	90 91 11 2a 	lds	r25, 0x2A11	; 0x802a11 <I2C_0_status+0x5>
    31aa:	20 91 a4 08 	lds	r18, 0x08A4	; 0x8008a4 <__TEXT_REGION_LENGTH__+0x7008a4>
    31ae:	81 30       	cpi	r24, 0x01	; 1
    31b0:	91 05       	cpc	r25, r1
    31b2:	11 f4       	brne	.+4      	; 0x31b8 <I2C_0_do_I2C_RX+0x20>
    31b4:	24 60       	ori	r18, 0x04	; 4
    31b6:	01 c0       	rjmp	.+2      	; 0x31ba <I2C_0_do_I2C_RX+0x22>
    31b8:	2b 7f       	andi	r18, 0xFB	; 251
    31ba:	20 93 a4 08 	sts	0x08A4, r18	; 0x8008a4 <__TEXT_REGION_LENGTH__+0x7008a4>
    31be:	01 97       	sbiw	r24, 0x01	; 1
    31c0:	80 93 10 2a 	sts	0x2A10, r24	; 0x802a10 <I2C_0_status+0x4>
    31c4:	90 93 11 2a 	sts	0x2A11, r25	; 0x802a11 <I2C_0_status+0x5>
    31c8:	e0 91 0e 2a 	lds	r30, 0x2A0E	; 0x802a0e <I2C_0_status+0x2>
    31cc:	f0 91 0f 2a 	lds	r31, 0x2A0F	; 0x802a0f <I2C_0_status+0x3>
    31d0:	89 2b       	or	r24, r25
    31d2:	09 f5       	brne	.+66     	; 0x3216 <I2C_0_do_I2C_RX+0x7e>
    31d4:	80 91 a8 08 	lds	r24, 0x08A8	; 0x8008a8 <__TEXT_REGION_LENGTH__+0x7008a8>
    31d8:	80 83       	st	Z, r24
    31da:	80 91 0e 2a 	lds	r24, 0x2A0E	; 0x802a0e <I2C_0_status+0x2>
    31de:	90 91 0f 2a 	lds	r25, 0x2A0F	; 0x802a0f <I2C_0_status+0x3>
    31e2:	01 96       	adiw	r24, 0x01	; 1
    31e4:	80 93 0e 2a 	sts	0x2A0E, r24	; 0x802a0e <I2C_0_status+0x2>
    31e8:	90 93 0f 2a 	sts	0x2A0F, r25	; 0x802a0f <I2C_0_status+0x3>
    31ec:	80 91 0c 2a 	lds	r24, 0x2A0C	; 0x802a0c <I2C_0_status>
    31f0:	84 60       	ori	r24, 0x04	; 4
    31f2:	80 93 0c 2a 	sts	0x2A0C, r24	; 0x802a0c <I2C_0_status>
    31f6:	e0 91 18 2a 	lds	r30, 0x2A18	; 0x802a18 <I2C_0_status+0xc>
    31fa:	f0 91 19 2a 	lds	r31, 0x2A19	; 0x802a19 <I2C_0_status+0xd>
    31fe:	80 91 24 2a 	lds	r24, 0x2A24	; 0x802a24 <I2C_0_status+0x18>
    3202:	90 91 25 2a 	lds	r25, 0x2A25	; 0x802a25 <I2C_0_status+0x19>
    3206:	09 95       	icall
    3208:	82 50       	subi	r24, 0x02	; 2
    320a:	82 30       	cpi	r24, 0x02	; 2
    320c:	10 f4       	brcc	.+4      	; 0x3212 <I2C_0_do_I2C_RX+0x7a>
    320e:	0c 94 12 18 	jmp	0x3024	; 0x3024 <I2C_0_do_I2C_DO_NACK_RESTART>
    3212:	0c 94 02 18 	jmp	0x3004	; 0x3004 <I2C_0_do_I2C_DO_NACK_STOP>
    3216:	80 91 a8 08 	lds	r24, 0x08A8	; 0x8008a8 <__TEXT_REGION_LENGTH__+0x7008a8>
    321a:	80 83       	st	Z, r24
    321c:	80 91 0e 2a 	lds	r24, 0x2A0E	; 0x802a0e <I2C_0_status+0x2>
    3220:	90 91 0f 2a 	lds	r25, 0x2A0F	; 0x802a0f <I2C_0_status+0x3>
    3224:	01 96       	adiw	r24, 0x01	; 1
    3226:	80 93 0e 2a 	sts	0x2A0E, r24	; 0x802a0e <I2C_0_status+0x2>
    322a:	90 93 0f 2a 	sts	0x2A0F, r25	; 0x802a0f <I2C_0_status+0x3>
    322e:	80 91 a4 08 	lds	r24, 0x08A4	; 0x8008a4 <__TEXT_REGION_LENGTH__+0x7008a4>
    3232:	82 60       	ori	r24, 0x02	; 2
    3234:	80 93 a4 08 	sts	0x08A4, r24	; 0x8008a4 <__TEXT_REGION_LENGTH__+0x7008a4>
    3238:	84 e0       	ldi	r24, 0x04	; 4
    323a:	08 95       	ret

0000323c <I2C_0_do_I2C_TX_EMPTY>:
    323c:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7008a5>
    3240:	84 ff       	sbrs	r24, 4
    3242:	0e c0       	rjmp	.+28     	; 0x3260 <I2C_0_do_I2C_TX_EMPTY+0x24>
    3244:	e0 91 1e 2a 	lds	r30, 0x2A1E	; 0x802a1e <I2C_0_status+0x12>
    3248:	f0 91 1f 2a 	lds	r31, 0x2A1F	; 0x802a1f <I2C_0_status+0x13>
    324c:	80 91 2a 2a 	lds	r24, 0x2A2A	; 0x802a2a <I2C_0_status+0x1e>
    3250:	90 91 2b 2a 	lds	r25, 0x2A2B	; 0x802a2b <I2C_0_status+0x1f>
    3254:	09 95       	icall
    3256:	82 30       	cpi	r24, 0x02	; 2
    3258:	b9 f0       	breq	.+46     	; 0x3288 <I2C_0_do_I2C_TX_EMPTY+0x4c>
    325a:	83 30       	cpi	r24, 0x03	; 3
    325c:	b9 f0       	breq	.+46     	; 0x328c <I2C_0_do_I2C_TX_EMPTY+0x50>
    325e:	1a c0       	rjmp	.+52     	; 0x3294 <I2C_0_do_I2C_TX_EMPTY+0x58>
    3260:	80 91 0c 2a 	lds	r24, 0x2A0C	; 0x802a0c <I2C_0_status>
    3264:	84 60       	ori	r24, 0x04	; 4
    3266:	80 93 0c 2a 	sts	0x2A0C, r24	; 0x802a0c <I2C_0_status>
    326a:	e0 91 18 2a 	lds	r30, 0x2A18	; 0x802a18 <I2C_0_status+0xc>
    326e:	f0 91 19 2a 	lds	r31, 0x2A19	; 0x802a19 <I2C_0_status+0xd>
    3272:	80 91 24 2a 	lds	r24, 0x2A24	; 0x802a24 <I2C_0_status+0x18>
    3276:	90 91 25 2a 	lds	r25, 0x2A25	; 0x802a25 <I2C_0_status+0x19>
    327a:	09 95       	icall
    327c:	83 30       	cpi	r24, 0x03	; 3
    327e:	31 f0       	breq	.+12     	; 0x328c <I2C_0_do_I2C_TX_EMPTY+0x50>
    3280:	84 30       	cpi	r24, 0x04	; 4
    3282:	31 f0       	breq	.+12     	; 0x3290 <I2C_0_do_I2C_TX_EMPTY+0x54>
    3284:	82 30       	cpi	r24, 0x02	; 2
    3286:	31 f4       	brne	.+12     	; 0x3294 <I2C_0_do_I2C_TX_EMPTY+0x58>
    3288:	0c 94 be 17 	jmp	0x2f7c	; 0x2f7c <I2C_0_do_I2C_SEND_ADR_READ>
    328c:	0c 94 cc 17 	jmp	0x2f98	; 0x2f98 <I2C_0_do_I2C_SEND_ADR_WRITE>
    3290:	0c 94 94 18 	jmp	0x3128	; 0x3128 <I2C_0_do_I2C_TX>
    3294:	0c 94 b1 17 	jmp	0x2f62	; 0x2f62 <I2C_0_do_I2C_SEND_STOP>

00003298 <I2C_0_do_I2C_SEND_RESTART_READ>:
    3298:	0c 94 be 17 	jmp	0x2f7c	; 0x2f7c <I2C_0_do_I2C_SEND_ADR_READ>

0000329c <I2C_0_set_data_complete_callback>:
    329c:	ab 01       	movw	r20, r22
    329e:	bc 01       	movw	r22, r24
    32a0:	80 e0       	ldi	r24, 0x00	; 0
    32a2:	0c 94 75 18 	jmp	0x30ea	; 0x30ea <I2C_0_set_callback>

000032a6 <I2C_0_set_address_nack_callback>:
    32a6:	ab 01       	movw	r20, r22
    32a8:	bc 01       	movw	r22, r24
    32aa:	82 e0       	ldi	r24, 0x02	; 2
    32ac:	0c 94 75 18 	jmp	0x30ea	; 0x30ea <I2C_0_set_callback>

000032b0 <I2C_0_init>:
    32b0:	e0 ea       	ldi	r30, 0xA0	; 160
    32b2:	f8 e0       	ldi	r31, 0x08	; 8
    32b4:	8d e2       	ldi	r24, 0x2D	; 45
    32b6:	86 83       	std	Z+6, r24	; 0x06
    32b8:	81 ec       	ldi	r24, 0xC1	; 193
    32ba:	83 83       	std	Z+3, r24	; 0x03
    32bc:	15 82       	std	Z+5, r1	; 0x05
    32be:	08 95       	ret

000032c0 <I2C_0_open>:
    32c0:	90 91 0c 2a 	lds	r25, 0x2A0C	; 0x802a0c <I2C_0_status>
    32c4:	91 fd       	sbrc	r25, 1
    32c6:	53 c0       	rjmp	.+166    	; 0x336e <I2C_0_open+0xae>
    32c8:	80 93 0d 2a 	sts	0x2A0D, r24	; 0x802a0d <I2C_0_status+0x1>
    32cc:	89 2f       	mov	r24, r25
    32ce:	84 7f       	andi	r24, 0xF4	; 244
    32d0:	9e e0       	ldi	r25, 0x0E	; 14
    32d2:	90 93 16 2a 	sts	0x2A16, r25	; 0x802a16 <I2C_0_status+0xa>
    32d6:	24 ef       	ldi	r18, 0xF4	; 244
    32d8:	31 e0       	ldi	r19, 0x01	; 1
    32da:	20 93 14 2a 	sts	0x2A14, r18	; 0x802a14 <I2C_0_status+0x8>
    32de:	30 93 15 2a 	sts	0x2A15, r19	; 0x802a15 <I2C_0_status+0x9>
    32e2:	82 60       	ori	r24, 0x02	; 2
    32e4:	84 60       	ori	r24, 0x04	; 4
    32e6:	80 93 0c 2a 	sts	0x2A0C, r24	; 0x802a0c <I2C_0_status>
    32ea:	81 e7       	ldi	r24, 0x71	; 113
    32ec:	98 e1       	ldi	r25, 0x18	; 24
    32ee:	80 93 18 2a 	sts	0x2A18, r24	; 0x802a18 <I2C_0_status+0xc>
    32f2:	90 93 19 2a 	sts	0x2A19, r25	; 0x802a19 <I2C_0_status+0xd>
    32f6:	10 92 24 2a 	sts	0x2A24, r1	; 0x802a24 <I2C_0_status+0x18>
    32fa:	10 92 25 2a 	sts	0x2A25, r1	; 0x802a25 <I2C_0_status+0x19>
    32fe:	80 93 1a 2a 	sts	0x2A1A, r24	; 0x802a1a <I2C_0_status+0xe>
    3302:	90 93 1b 2a 	sts	0x2A1B, r25	; 0x802a1b <I2C_0_status+0xf>
    3306:	10 92 26 2a 	sts	0x2A26, r1	; 0x802a26 <I2C_0_status+0x1a>
    330a:	10 92 27 2a 	sts	0x2A27, r1	; 0x802a27 <I2C_0_status+0x1b>
    330e:	80 93 1c 2a 	sts	0x2A1C, r24	; 0x802a1c <I2C_0_status+0x10>
    3312:	90 93 1d 2a 	sts	0x2A1D, r25	; 0x802a1d <I2C_0_status+0x11>
    3316:	10 92 28 2a 	sts	0x2A28, r1	; 0x802a28 <I2C_0_status+0x1c>
    331a:	10 92 29 2a 	sts	0x2A29, r1	; 0x802a29 <I2C_0_status+0x1d>
    331e:	80 93 1e 2a 	sts	0x2A1E, r24	; 0x802a1e <I2C_0_status+0x12>
    3322:	90 93 1f 2a 	sts	0x2A1F, r25	; 0x802a1f <I2C_0_status+0x13>
    3326:	10 92 2a 2a 	sts	0x2A2A, r1	; 0x802a2a <I2C_0_status+0x1e>
    332a:	10 92 2b 2a 	sts	0x2A2B, r1	; 0x802a2b <I2C_0_status+0x1f>
    332e:	83 e7       	ldi	r24, 0x73	; 115
    3330:	98 e1       	ldi	r25, 0x18	; 24
    3332:	80 93 20 2a 	sts	0x2A20, r24	; 0x802a20 <I2C_0_status+0x14>
    3336:	90 93 21 2a 	sts	0x2A21, r25	; 0x802a21 <I2C_0_status+0x15>
    333a:	10 92 2c 2a 	sts	0x2A2C, r1	; 0x802a2c <I2C_0_status+0x20>
    333e:	10 92 2d 2a 	sts	0x2A2D, r1	; 0x802a2d <I2C_0_status+0x21>
    3342:	80 91 a4 08 	lds	r24, 0x08A4	; 0x8008a4 <__TEXT_REGION_LENGTH__+0x7008a4>
    3346:	88 60       	ori	r24, 0x08	; 8
    3348:	80 93 a4 08 	sts	0x08A4, r24	; 0x8008a4 <__TEXT_REGION_LENGTH__+0x7008a4>
    334c:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7008a5>
    3350:	81 60       	ori	r24, 0x01	; 1
    3352:	80 93 a5 08 	sts	0x08A5, r24	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7008a5>
    3356:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7008a5>
    335a:	80 6c       	ori	r24, 0xC0	; 192
    335c:	80 93 a5 08 	sts	0x08A5, r24	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7008a5>
    3360:	80 91 a3 08 	lds	r24, 0x08A3	; 0x8008a3 <__TEXT_REGION_LENGTH__+0x7008a3>
    3364:	80 6c       	ori	r24, 0xC0	; 192
    3366:	80 93 a3 08 	sts	0x08A3, r24	; 0x8008a3 <__TEXT_REGION_LENGTH__+0x7008a3>
    336a:	80 e0       	ldi	r24, 0x00	; 0
    336c:	08 95       	ret
    336e:	81 e0       	ldi	r24, 0x01	; 1
    3370:	08 95       	ret

00003372 <I2C_0_close>:
    3372:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7008a5>
    3376:	82 ff       	sbrs	r24, 2
    3378:	08 c0       	rjmp	.+16     	; 0x338a <I2C_0_close+0x18>
    337a:	80 91 0c 2a 	lds	r24, 0x2A0C	; 0x802a0c <I2C_0_status>
    337e:	8e 7f       	andi	r24, 0xFE	; 254
    3380:	80 93 0c 2a 	sts	0x2A0C, r24	; 0x802a0c <I2C_0_status>
    3384:	82 e0       	ldi	r24, 0x02	; 2
    3386:	80 93 17 2a 	sts	0x2A17, r24	; 0x802a17 <I2C_0_status+0xb>
    338a:	80 91 0c 2a 	lds	r24, 0x2A0C	; 0x802a0c <I2C_0_status>
    338e:	80 fd       	sbrc	r24, 0
    3390:	13 c0       	rjmp	.+38     	; 0x33b8 <I2C_0_close+0x46>
    3392:	8d 7f       	andi	r24, 0xFD	; 253
    3394:	80 93 0c 2a 	sts	0x2A0C, r24	; 0x802a0c <I2C_0_status>
    3398:	8f ef       	ldi	r24, 0xFF	; 255
    339a:	80 93 0d 2a 	sts	0x2A0D, r24	; 0x802a0d <I2C_0_status+0x1>
    339e:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7008a5>
    33a2:	80 6c       	ori	r24, 0xC0	; 192
    33a4:	80 93 a5 08 	sts	0x08A5, r24	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7008a5>
    33a8:	80 91 a3 08 	lds	r24, 0x08A3	; 0x8008a3 <__TEXT_REGION_LENGTH__+0x7008a3>
    33ac:	8f 73       	andi	r24, 0x3F	; 63
    33ae:	80 93 a3 08 	sts	0x08A3, r24	; 0x8008a3 <__TEXT_REGION_LENGTH__+0x7008a3>
    33b2:	80 91 17 2a 	lds	r24, 0x2A17	; 0x802a17 <I2C_0_status+0xb>
    33b6:	08 95       	ret
    33b8:	81 e0       	ldi	r24, 0x01	; 1
    33ba:	08 95       	ret

000033bc <I2C_0_set_buffer>:
 * \param[in] bufferSize Number of bytes to read or write from slave
 *
 * \return Nothing
 */
void I2C_0_set_buffer(void *buffer, size_t bufferSize)
{
    33bc:	9c 01       	movw	r18, r24
	if (I2C_0_status.bufferFree) {
    33be:	90 91 0c 2a 	lds	r25, 0x2A0C	; 0x802a0c <I2C_0_status>
    33c2:	92 ff       	sbrs	r25, 2
    33c4:	0c c0       	rjmp	.+24     	; 0x33de <I2C_0_set_buffer+0x22>
		I2C_0_status.data_ptr    = buffer;
    33c6:	20 93 0e 2a 	sts	0x2A0E, r18	; 0x802a0e <I2C_0_status+0x2>
    33ca:	30 93 0f 2a 	sts	0x2A0F, r19	; 0x802a0f <I2C_0_status+0x3>
		I2C_0_status.data_length = bufferSize;
    33ce:	60 93 10 2a 	sts	0x2A10, r22	; 0x802a10 <I2C_0_status+0x4>
    33d2:	70 93 11 2a 	sts	0x2A11, r23	; 0x802a11 <I2C_0_status+0x5>
		I2C_0_status.bufferFree  = false;
    33d6:	89 2f       	mov	r24, r25
    33d8:	8b 7f       	andi	r24, 0xFB	; 251
    33da:	80 93 0c 2a 	sts	0x2A0C, r24	; 0x802a0c <I2C_0_status>
    33de:	08 95       	ret

000033e0 <I2C_0_master_operation>:
 * \retval I2C_FAIL  The I2C open failed with an error
 */
i2c_error_t I2C_0_master_operation(bool read)
{
	i2c_error_t ret = I2C_BUSY;
	if (!I2C_0_status.busy) {
    33e0:	90 91 0c 2a 	lds	r25, 0x2A0C	; 0x802a0c <I2C_0_status>
    33e4:	90 fd       	sbrc	r25, 0
    33e6:	0e c0       	rjmp	.+28     	; 0x3404 <I2C_0_master_operation+0x24>
		I2C_0_status.busy = true;
    33e8:	91 60       	ori	r25, 0x01	; 1
    33ea:	90 93 0c 2a 	sts	0x2A0C, r25	; 0x802a0c <I2C_0_status>
		ret               = I2C_NOERR;

		if (read) {
    33ee:	88 23       	and	r24, r24
    33f0:	11 f0       	breq	.+4      	; 0x33f6 <I2C_0_master_operation+0x16>
			I2C_0_status.state = I2C_SEND_ADR_READ;
    33f2:	81 e0       	ldi	r24, 0x01	; 1
    33f4:	01 c0       	rjmp	.+2      	; 0x33f8 <I2C_0_master_operation+0x18>
		} else {
			I2C_0_status.state = I2C_SEND_ADR_WRITE;
    33f6:	82 e0       	ldi	r24, 0x02	; 2
    33f8:	80 93 16 2a 	sts	0x2A16, r24	; 0x802a16 <I2C_0_status+0xa>
		}
		I2C_0_master_isr();
    33fc:	0e 94 45 18 	call	0x308a	; 0x308a <I2C_0_master_isr>
    3400:	80 e0       	ldi	r24, 0x00	; 0
    3402:	08 95       	ret
 * \retval I2C_BUSY  The I2C open failed because the interface is busy
 * \retval I2C_FAIL  The I2C open failed with an error
 */
i2c_error_t I2C_0_master_operation(bool read)
{
	i2c_error_t ret = I2C_BUSY;
    3404:	81 e0       	ldi	r24, 0x01	; 1
			I2C_0_status.state = I2C_SEND_ADR_WRITE;
		}
		I2C_0_master_isr();
	}
	return ret;
}
    3406:	08 95       	ret

00003408 <I2C_0_master_read>:
/**
 * \brief Identical to I2C_0_master_operation(true);
 */
i2c_error_t I2C_0_master_read(void)
{
	return I2C_0_master_operation(true);
    3408:	81 e0       	ldi	r24, 0x01	; 1
    340a:	0c 94 f0 19 	jmp	0x33e0	; 0x33e0 <I2C_0_master_operation>

0000340e <I2C_0_master_write>:
/**
 * \brief Identical to I2C_0_master_operation(false);
 */
i2c_error_t I2C_0_master_write(void)
{
	return I2C_0_master_operation(false);
    340e:	80 e0       	ldi	r24, 0x00	; 0
    3410:	0c 94 f0 19 	jmp	0x33e0	; 0x33e0 <I2C_0_master_operation>

00003414 <__vector_15>:
    I2C_0_do_I2C_BUS_COLLISION,      // I2C_BUS_COLLISION
    I2C_0_do_I2C_BUS_ERROR           // I2C_BUS_ERROR
};

ISR(TWI0_TWIM_vect)
{
    3414:	1f 92       	push	r1
    3416:	0f 92       	push	r0
    3418:	0f b6       	in	r0, 0x3f	; 63
    341a:	0f 92       	push	r0
    341c:	11 24       	eor	r1, r1
    341e:	2f 93       	push	r18
    3420:	3f 93       	push	r19
    3422:	4f 93       	push	r20
    3424:	5f 93       	push	r21
    3426:	6f 93       	push	r22
    3428:	7f 93       	push	r23
    342a:	8f 93       	push	r24
    342c:	9f 93       	push	r25
    342e:	af 93       	push	r26
    3430:	bf 93       	push	r27
    3432:	ef 93       	push	r30
    3434:	ff 93       	push	r31
	I2C_0_master_isr();
    3436:	0e 94 45 18 	call	0x308a	; 0x308a <I2C_0_master_isr>
}
    343a:	ff 91       	pop	r31
    343c:	ef 91       	pop	r30
    343e:	bf 91       	pop	r27
    3440:	af 91       	pop	r26
    3442:	9f 91       	pop	r25
    3444:	8f 91       	pop	r24
    3446:	7f 91       	pop	r23
    3448:	6f 91       	pop	r22
    344a:	5f 91       	pop	r21
    344c:	4f 91       	pop	r20
    344e:	3f 91       	pop	r19
    3450:	2f 91       	pop	r18
    3452:	0f 90       	pop	r0
    3454:	0f be       	out	0x3f, r0	; 63
    3456:	0f 90       	pop	r0
    3458:	1f 90       	pop	r1
    345a:	18 95       	reti

0000345c <I2C_0_writeNBytes>:
	I2C_0_set_buffer(&reg, 1);
	I2C_0_set_address_nack_callback(i2c_cb_restart_write, NULL); // NACK polling?
	I2C_0_master_write();
	while (I2C_BUSY == I2C_0_close())
		; // sit here until finished.
}
    345c:	ff 92       	push	r15
    345e:	0f 93       	push	r16
    3460:	1f 93       	push	r17
    3462:	cf 93       	push	r28
    3464:	df 93       	push	r29
    3466:	f8 2e       	mov	r15, r24
    3468:	eb 01       	movw	r28, r22
    346a:	8a 01       	movw	r16, r20
    346c:	8f 2d       	mov	r24, r15
    346e:	0e 94 60 19 	call	0x32c0	; 0x32c0 <I2C_0_open>
    3472:	88 23       	and	r24, r24
    3474:	d9 f3       	breq	.-10     	; 0x346c <I2C_0_writeNBytes+0x10>
    3476:	b8 01       	movw	r22, r16
    3478:	ce 01       	movw	r24, r28
    347a:	0e 94 de 19 	call	0x33bc	; 0x33bc <I2C_0_set_buffer>
    347e:	60 e0       	ldi	r22, 0x00	; 0
    3480:	70 e0       	ldi	r23, 0x00	; 0
    3482:	80 e7       	ldi	r24, 0x70	; 112
    3484:	9a e1       	ldi	r25, 0x1A	; 26
    3486:	0e 94 53 19 	call	0x32a6	; 0x32a6 <I2C_0_set_address_nack_callback>
    348a:	0e 94 07 1a 	call	0x340e	; 0x340e <I2C_0_master_write>
    348e:	0e 94 b9 19 	call	0x3372	; 0x3372 <I2C_0_close>
    3492:	81 30       	cpi	r24, 0x01	; 1
    3494:	e1 f3       	breq	.-8      	; 0x348e <I2C_0_writeNBytes+0x32>
    3496:	df 91       	pop	r29
    3498:	cf 91       	pop	r28
    349a:	1f 91       	pop	r17
    349c:	0f 91       	pop	r16
    349e:	ff 90       	pop	r15
    34a0:	08 95       	ret

000034a2 <I2C_0_readNBytes>:

void I2C_0_readNBytes(i2c_address_t address, void *data, size_t len)
{
    34a2:	ff 92       	push	r15
    34a4:	0f 93       	push	r16
    34a6:	1f 93       	push	r17
    34a8:	cf 93       	push	r28
    34aa:	df 93       	push	r29
    34ac:	f8 2e       	mov	r15, r24
    34ae:	eb 01       	movw	r28, r22
    34b0:	8a 01       	movw	r16, r20
	while (!I2C_0_open(address))
    34b2:	8f 2d       	mov	r24, r15
    34b4:	0e 94 60 19 	call	0x32c0	; 0x32c0 <I2C_0_open>
    34b8:	88 23       	and	r24, r24
    34ba:	d9 f3       	breq	.-10     	; 0x34b2 <I2C_0_readNBytes+0x10>
		; // sit here until we get the bus..
	I2C_0_set_buffer(data, len);
    34bc:	b8 01       	movw	r22, r16
    34be:	ce 01       	movw	r24, r28
    34c0:	0e 94 de 19 	call	0x33bc	; 0x33bc <I2C_0_set_buffer>
	I2C_0_master_read();
    34c4:	0e 94 04 1a 	call	0x3408	; 0x3408 <I2C_0_master_read>
	while (I2C_BUSY == I2C_0_close())
    34c8:	0e 94 b9 19 	call	0x3372	; 0x3372 <I2C_0_close>
    34cc:	81 30       	cpi	r24, 0x01	; 1
    34ce:	e1 f3       	breq	.-8      	; 0x34c8 <I2C_0_readNBytes+0x26>
		; // sit here until finished.
}
    34d0:	df 91       	pop	r29
    34d2:	cf 91       	pop	r28
    34d4:	1f 91       	pop	r17
    34d6:	0f 91       	pop	r16
    34d8:	ff 90       	pop	r15
    34da:	08 95       	ret

000034dc <i2c_cb_return_stop>:
}

i2c_operations_t i2c_cb_return_reset(void *p)
{
	return i2c_reset_link;
}
    34dc:	81 e0       	ldi	r24, 0x01	; 1
    34de:	08 95       	ret

000034e0 <i2c_cb_restart_write>:

i2c_operations_t i2c_cb_restart_write(void *p)
{
	return i2c_restart_write;
}
    34e0:	83 e0       	ldi	r24, 0x03	; 3
    34e2:	08 95       	ret

000034e4 <protected_write_io>:
#if defined(__GNUC__)
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
#endif
	movw    r30, r24                // Load addr into Z
    34e4:	fc 01       	movw	r30, r24
	out     CCP, r22                // Start CCP handshake
    34e6:	64 bf       	out	0x34, r22	; 52
	st      Z, r20                  // Write value to I/O register
    34e8:	40 83       	st	Z, r20
	ret                             // Return to caller
    34ea:	08 95       	ret

000034ec <SLPCTRL_init>:

	// SLPCTRL.CTRLA = 0 << SLPCTRL_SEN_bp /* Sleep enable: disabled */
	//		 | SLPCTRL_SMODE_IDLE_gc; /* Idle mode */

	return 0;
}
    34ec:	80 e0       	ldi	r24, 0x00	; 0
    34ee:	08 95       	ret

000034f0 <SPI_0_init>:
 *
 * \return Nothing
 */
void SPI_0_disable()
{
	SPI0.CTRLA &= ~SPI_ENABLE_bm;
    34f0:	81 e2       	ldi	r24, 0x21	; 33
    34f2:	80 93 c0 08 	sts	0x08C0, r24	; 0x8008c0 <__TEXT_REGION_LENGTH__+0x7008c0>
    34f6:	10 92 30 2a 	sts	0x2A30, r1	; 0x802a30 <SPI_0_desc>
    34fa:	08 95       	ret

000034fc <SPI_0_enable>:
    34fc:	e0 ec       	ldi	r30, 0xC0	; 192
    34fe:	f8 e0       	ldi	r31, 0x08	; 8
    3500:	80 81       	ld	r24, Z
    3502:	81 60       	ori	r24, 0x01	; 1
    3504:	80 83       	st	Z, r24
    3506:	08 95       	ret

00003508 <SPI_0_exchange_byte>:
 */
uint8_t SPI_0_exchange_byte(uint8_t data)
{
	// Blocking wait for SPI free makes the function work
	// seamlessly also with IRQ drivers.
	while (SPI_0_desc.status == SPI_BUSY)
    3508:	90 91 30 2a 	lds	r25, 0x2A30	; 0x802a30 <SPI_0_desc>
    350c:	92 30       	cpi	r25, 0x02	; 2
    350e:	09 f4       	brne	.+2      	; 0x3512 <SPI_0_exchange_byte+0xa>
    3510:	ff cf       	rjmp	.-2      	; 0x3510 <SPI_0_exchange_byte+0x8>
		;
	SPI0.DATA = data;
    3512:	80 93 c4 08 	sts	0x08C4, r24	; 0x8008c4 <__TEXT_REGION_LENGTH__+0x7008c4>
	while (!(SPI0.INTFLAGS & SPI_RXCIF_bm))
    3516:	80 91 c3 08 	lds	r24, 0x08C3	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
    351a:	87 ff       	sbrs	r24, 7
    351c:	fc cf       	rjmp	.-8      	; 0x3516 <SPI_0_exchange_byte+0xe>
		;
	return SPI0.DATA;
    351e:	80 91 c4 08 	lds	r24, 0x08C4	; 0x8008c4 <__TEXT_REGION_LENGTH__+0x7008c4>
}
    3522:	08 95       	ret

00003524 <USART_0_init>:
 * \retval false Data completely shifted out if the USART shift register
 */
bool USART_0_is_tx_busy()
{
	return (!(USART2.STATUS & USART_TXCIF_bm));
}
    3524:	e0 e4       	ldi	r30, 0x40	; 64
    3526:	f8 e0       	ldi	r31, 0x08	; 8
    3528:	8b e5       	ldi	r24, 0x5B	; 91
    352a:	91 e0       	ldi	r25, 0x01	; 1
    352c:	80 87       	std	Z+8, r24	; 0x08
    352e:	91 87       	std	Z+9, r25	; 0x09
    3530:	80 ec       	ldi	r24, 0xC0	; 192
    3532:	86 83       	std	Z+6, r24	; 0x06
    3534:	89 eb       	ldi	r24, 0xB9	; 185
    3536:	99 e2       	ldi	r25, 0x29	; 41
    3538:	80 93 95 39 	sts	0x3995, r24	; 0x803995 <__iob+0x2>
    353c:	90 93 96 39 	sts	0x3996, r25	; 0x803996 <__iob+0x3>
    3540:	80 e0       	ldi	r24, 0x00	; 0
    3542:	08 95       	ret

00003544 <USART_0_read>:
 *
 * \return Data read from the USART_0 module
 */
uint8_t USART_0_read()
{
	while (!(USART2.STATUS & USART_RXCIF_bm))
    3544:	80 91 44 08 	lds	r24, 0x0844	; 0x800844 <__TEXT_REGION_LENGTH__+0x700844>
    3548:	87 ff       	sbrs	r24, 7
    354a:	fc cf       	rjmp	.-8      	; 0x3544 <USART_0_read>
		;
	return USART2.RXDATAL;
    354c:	80 91 40 08 	lds	r24, 0x0840	; 0x800840 <__TEXT_REGION_LENGTH__+0x700840>
}
    3550:	08 95       	ret

00003552 <USART_0_write>:
 *
 * \return Nothing
 */
void USART_0_write(const uint8_t data)
{
	while (!(USART2.STATUS & USART_DREIF_bm))
    3552:	90 91 44 08 	lds	r25, 0x0844	; 0x800844 <__TEXT_REGION_LENGTH__+0x700844>
    3556:	95 ff       	sbrs	r25, 5
    3558:	fc cf       	rjmp	.-8      	; 0x3552 <USART_0_write>
		;
	USART2.TXDATAL = data;
    355a:	80 93 42 08 	sts	0x0842, r24	; 0x800842 <__TEXT_REGION_LENGTH__+0x700842>
    355e:	08 95       	ret

00003560 <USART_0_printCHAR>:

#if defined(__GNUC__)

int USART_0_printCHAR(char character, FILE *stream)
{
	USART_0_write(character);
    3560:	0e 94 a9 1a 	call	0x3552	; 0x3552 <USART_0_write>
	return 0;
}
    3564:	80 e0       	ldi	r24, 0x00	; 0
    3566:	90 e0       	ldi	r25, 0x00	; 0
    3568:	08 95       	ret

0000356a <CONF_WIFI_M2M_INT_PIN_set_isc>:
 *	@return	0 in case of success and -1 in case of failure
 */
sint8 nm_bsp_deinit(void)
{
	return M2M_SUCCESS;
}
    356a:	e2 eb       	ldi	r30, 0xB2	; 178
    356c:	f4 e0       	ldi	r31, 0x04	; 4
    356e:	90 81       	ld	r25, Z
    3570:	98 7f       	andi	r25, 0xF8	; 248
    3572:	89 2b       	or	r24, r25
    3574:	80 83       	st	Z, r24
    3576:	08 95       	ret

00003578 <__vector_29>:
    3578:	1f 92       	push	r1
    357a:	0f 92       	push	r0
    357c:	0f b6       	in	r0, 0x3f	; 63
    357e:	0f 92       	push	r0
    3580:	11 24       	eor	r1, r1
    3582:	2f 93       	push	r18
    3584:	3f 93       	push	r19
    3586:	4f 93       	push	r20
    3588:	5f 93       	push	r21
    358a:	6f 93       	push	r22
    358c:	7f 93       	push	r23
    358e:	8f 93       	push	r24
    3590:	9f 93       	push	r25
    3592:	af 93       	push	r26
    3594:	bf 93       	push	r27
    3596:	ef 93       	push	r30
    3598:	ff 93       	push	r31
    359a:	b2 99       	sbic	0x16, 2	; 22
    359c:	07 c0       	rjmp	.+14     	; 0x35ac <__vector_29+0x34>
    359e:	e0 91 31 2a 	lds	r30, 0x2A31	; 0x802a31 <gpfIsr>
    35a2:	f0 91 32 2a 	lds	r31, 0x2A32	; 0x802a32 <gpfIsr+0x1>
    35a6:	30 97       	sbiw	r30, 0x00	; 0
    35a8:	09 f0       	breq	.+2      	; 0x35ac <__vector_29+0x34>
    35aa:	09 95       	icall
    35ac:	84 e0       	ldi	r24, 0x04	; 4
    35ae:	87 bb       	out	0x17, r24	; 23
    35b0:	ff 91       	pop	r31
    35b2:	ef 91       	pop	r30
    35b4:	bf 91       	pop	r27
    35b6:	af 91       	pop	r26
    35b8:	9f 91       	pop	r25
    35ba:	8f 91       	pop	r24
    35bc:	7f 91       	pop	r23
    35be:	6f 91       	pop	r22
    35c0:	5f 91       	pop	r21
    35c2:	4f 91       	pop	r20
    35c4:	3f 91       	pop	r19
    35c6:	2f 91       	pop	r18
    35c8:	0f 90       	pop	r0
    35ca:	0f be       	out	0x3f, r0	; 63
    35cc:	0f 90       	pop	r0
    35ce:	1f 90       	pop	r1
    35d0:	18 95       	reti

000035d2 <nm_bsp_sleep>:
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
	while (u32TimeMsec--) {
    35d2:	61 15       	cp	r22, r1
    35d4:	71 05       	cpc	r23, r1
    35d6:	81 05       	cpc	r24, r1
    35d8:	91 05       	cpc	r25, r1
    35da:	59 f0       	breq	.+22     	; 0x35f2 <nm_bsp_sleep+0x20>
    35dc:	e3 ec       	ldi	r30, 0xC3	; 195
    35de:	f9 e0       	ldi	r31, 0x09	; 9
    35e0:	31 97       	sbiw	r30, 0x01	; 1
    35e2:	f1 f7       	brne	.-4      	; 0x35e0 <nm_bsp_sleep+0xe>
    35e4:	00 c0       	rjmp	.+0      	; 0x35e6 <nm_bsp_sleep+0x14>
    35e6:	00 00       	nop
    35e8:	61 50       	subi	r22, 0x01	; 1
    35ea:	71 09       	sbc	r23, r1
    35ec:	81 09       	sbc	r24, r1
    35ee:	91 09       	sbc	r25, r1
    35f0:	f0 cf       	rjmp	.-32     	; 0x35d2 <nm_bsp_sleep>
		_delay_ms(1);
	}
}
    35f2:	08 95       	ret

000035f4 <nm_bsp_reset>:
static inline void PORTF_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTF.OUT |= (1 << pin);
	} else {
		VPORTF.OUT &= ~(1 << pin);
    35f4:	ab 98       	cbi	0x15, 3	; 21
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
    35f6:	09 98       	cbi	0x01, 1	; 1
 */
void nm_bsp_reset(void)
{
	CONF_WIFI_M2M_CHIP_ENABLE_PIN_set_level(false);
	CONF_WIFI_M2M_RESET_PIN_set_level(false);
	nm_bsp_sleep(10);
    35f8:	6a e0       	ldi	r22, 0x0A	; 10
    35fa:	70 e0       	ldi	r23, 0x00	; 0
    35fc:	80 e0       	ldi	r24, 0x00	; 0
    35fe:	90 e0       	ldi	r25, 0x00	; 0
    3600:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <nm_bsp_sleep>
 *                  false = Pin level set to "low" state
 */
static inline void PORTF_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTF.OUT |= (1 << pin);
    3604:	ab 9a       	sbi	0x15, 3	; 21
	CONF_WIFI_M2M_CHIP_ENABLE_PIN_set_level(true);
	nm_bsp_sleep(20);
    3606:	64 e1       	ldi	r22, 0x14	; 20
    3608:	70 e0       	ldi	r23, 0x00	; 0
    360a:	80 e0       	ldi	r24, 0x00	; 0
    360c:	90 e0       	ldi	r25, 0x00	; 0
    360e:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <nm_bsp_sleep>
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
    3612:	09 9a       	sbi	0x01, 1	; 1
	CONF_WIFI_M2M_RESET_PIN_set_level(true);
	nm_bsp_sleep(100);
    3614:	64 e6       	ldi	r22, 0x64	; 100
    3616:	70 e0       	ldi	r23, 0x00	; 0
    3618:	80 e0       	ldi	r24, 0x00	; 0
    361a:	90 e0       	ldi	r25, 0x00	; 0
    361c:	0c 94 e9 1a 	jmp	0x35d2	; 0x35d2 <nm_bsp_sleep>

00003620 <nm_bsp_init>:
 *	@brief	Initialize BSP
 *	@return	0 in case of success and -1 in case of failure
 */
sint8 nm_bsp_init(void)
{
	gpfIsr = NULL;
    3620:	10 92 31 2a 	sts	0x2A31, r1	; 0x802a31 <gpfIsr>
    3624:	10 92 32 2a 	sts	0x2A32, r1	; 0x802a32 <gpfIsr+0x1>
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
    3628:	01 9a       	sbi	0x00, 1	; 0
	switch (dir) {
	case PORT_DIR_IN:
		VPORTF.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTF.DIR |= (1 << pin);
    362a:	a3 9a       	sbi	0x14, 3	; 20
    362c:	a4 9a       	sbi	0x14, 4	; 20

	/* Initialize chip IOs. */
	init_chip_pins();

	/* Perform chip reset. */
	nm_bsp_reset();
    362e:	0e 94 fa 1a 	call	0x35f4	; 0x35f4 <nm_bsp_reset>

	cpu_irq_enable();
    3632:	78 94       	sei

	return M2M_SUCCESS;
}
    3634:	80 e0       	ldi	r24, 0x00	; 0
    3636:	08 95       	ret

00003638 <nm_bsp_register_isr>:
 *	@param[IN]	pfIsr
 *				Pointer to ISR handler
 */
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
	gpfIsr = pfIsr;
    3638:	80 93 31 2a 	sts	0x2A31, r24	; 0x802a31 <gpfIsr>
    363c:	90 93 32 2a 	sts	0x2A32, r25	; 0x802a32 <gpfIsr+0x1>
 */
static inline void PORTF_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTF.DIR &= ~(1 << pin);
    3640:	a2 98       	cbi	0x14, 2	; 20
static inline void PORTF_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTF + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
    3642:	e2 eb       	ldi	r30, 0xB2	; 178
    3644:	f4 e0       	ldi	r31, 0x04	; 4
    3646:	80 81       	ld	r24, Z
    3648:	88 60       	ori	r24, 0x08	; 8
    364a:	80 83       	st	Z, r24

	CONF_WIFI_M2M_INT_PIN_set_dir(PORT_DIR_IN);
	CONF_WIFI_M2M_INT_PIN_set_pull_mode(PORT_PULL_UP);
	CONF_WIFI_M2M_INT_PIN_set_isc(PORT_ISC_FALLING_gc);
    364c:	83 e0       	ldi	r24, 0x03	; 3
    364e:	0e 94 b5 1a 	call	0x356a	; 0x356a <CONF_WIFI_M2M_INT_PIN_set_isc>

	/* Enable interrupt */
	CONF_WIFI_M2M_INT_PIN_set_isc(PORT_ISC_FALLING_gc);
    3652:	83 e0       	ldi	r24, 0x03	; 3
    3654:	0c 94 b5 1a 	jmp	0x356a	; 0x356a <CONF_WIFI_M2M_INT_PIN_set_isc>

00003658 <nm_bsp_interrupt_ctrl>:
 *	@param[IN]	u8Enable
 *				'0' disable interrupts. '1' enable interrupts
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
	if (u8Enable) {
    3658:	88 23       	and	r24, r24
    365a:	11 f0       	breq	.+4      	; 0x3660 <nm_bsp_interrupt_ctrl+0x8>
		CONF_WIFI_M2M_INT_PIN_set_isc(PORT_ISC_FALLING_gc);
    365c:	83 e0       	ldi	r24, 0x03	; 3
    365e:	01 c0       	rjmp	.+2      	; 0x3662 <nm_bsp_interrupt_ctrl+0xa>
	} else {
		CONF_WIFI_M2M_INT_PIN_set_isc(PORT_ISC_INTDISABLE_gc);
    3660:	80 e0       	ldi	r24, 0x00	; 0
    3662:	0c 94 b5 1a 	jmp	0x356a	; 0x356a <CONF_WIFI_M2M_INT_PIN_set_isc>

00003666 <nm_bus_init>:
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
    3666:	07 9a       	sbi	0x00, 7	; 0
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
    3668:	0f 9a       	sbi	0x01, 7	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
    366a:	04 9a       	sbi	0x00, 4	; 0
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
    366c:	0c 9a       	sbi	0x01, 4	; 1
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
    366e:	05 98       	cbi	0x00, 5	; 0
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
    3670:	06 9a       	sbi	0x00, 6	; 0
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
    3672:	0e 98       	cbi	0x01, 6	; 1
	// struct spi_device spi_device_conf;
	// spi_device_conf.id = CONF_WIFI_M2M_SPI_CS_PIN;

	/* Configure the SPI master. */
	// spi_master_init(CONF_WIFI_M2M_SPI_MODULE);
	SPI_0_init();
    3674:	0e 94 78 1a 	call	0x34f0	; 0x34f0 <SPI_0_init>

	// spi_master_setup_device(CONF_WIFI_M2M_SPI_MODULE, &spi_device_conf, SPI_MODE_0, CONF_WIFI_M2M_SPI_BAUDRATE, 0);

	/* Enable the SPI master. */
	// spi_enable(CONF_WIFI_M2M_SPI_MODULE);
	SPI_0_enable();
    3678:	0e 94 7e 1a 	call	0x34fc	; 0x34fc <SPI_0_enable>

	nm_bsp_reset();
    367c:	0e 94 fa 1a 	call	0x35f4	; 0x35f4 <nm_bsp_reset>
	nm_bsp_sleep(1);
    3680:	61 e0       	ldi	r22, 0x01	; 1
    3682:	70 e0       	ldi	r23, 0x00	; 0
    3684:	80 e0       	ldi	r24, 0x00	; 0
    3686:	90 e0       	ldi	r25, 0x00	; 0
    3688:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <nm_bsp_sleep>
#endif
	return result;
}
    368c:	80 e0       	ldi	r24, 0x00	; 0
    368e:	08 95       	ret

00003690 <nm_bus_ioctl>:
 *					Arbitrary parameter depenging on IOCTL
 *	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
 *	@note	For SPI only, it's important to be able to send/receive at the same time
 */
sint8 nm_bus_ioctl(uint8 u8Cmd, void *pvParameter)
{
    3690:	af 92       	push	r10
    3692:	bf 92       	push	r11
    3694:	cf 92       	push	r12
    3696:	df 92       	push	r13
    3698:	ef 92       	push	r14
    369a:	ff 92       	push	r15
    369c:	0f 93       	push	r16
    369e:	1f 93       	push	r17
    36a0:	cf 93       	push	r28
    36a2:	df 93       	push	r29
    36a4:	1f 92       	push	r1
    36a6:	cd b7       	in	r28, 0x3d	; 61
    36a8:	de b7       	in	r29, 0x3e	; 62
    36aa:	fb 01       	movw	r30, r22
	sint8 s8Ret = 0;
	switch (u8Cmd) {
    36ac:	83 30       	cpi	r24, 0x03	; 3
    36ae:	a9 f5       	brne	.+106    	; 0x371a <nm_bus_ioctl+0x8a>
		s8Ret = nm_i2c_write_special(pstrParam->pu8Buf1, pstrParam->u16Sz1, pstrParam->pu8Buf2, pstrParam->u16Sz2);
	} break;
#elif defined CONF_WINC_USE_SPI
	case NM_BUS_IOCTL_RW: {
		tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
		s8Ret                  = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
    36b0:	c4 80       	ldd	r12, Z+4	; 0x04
    36b2:	d5 80       	ldd	r13, Z+5	; 0x05
    36b4:	e2 80       	ldd	r14, Z+2	; 0x02
    36b6:	f3 80       	ldd	r15, Z+3	; 0x03
    36b8:	00 81       	ld	r16, Z
    36ba:	11 81       	ldd	r17, Z+1	; 0x01
#ifdef CONF_WINC_USE_SPI
static sint8 spi_rw(uint8 *pu8Mosi, uint8 *pu8Miso, uint16 u16Sz)
{
	// struct spi_device spi_device_conf;
	// spi_device_conf.id = CONF_WIFI_M2M_SPI_CS_PIN;
	uint8    u8Dummy    = 0;
    36bc:	19 82       	std	Y+1, r1	; 0x01
	uint8    u8SkipMosi = 0, u8SkipMiso = 0;
	uint16_t txd_data = 0;
	uint16_t rxd_data = 0;

	if (!pu8Mosi) {
    36be:	01 15       	cp	r16, r1
    36c0:	11 05       	cpc	r17, r1
    36c2:	49 f0       	breq	.+18     	; 0x36d6 <nm_bus_ioctl+0x46>
		pu8Mosi    = &u8Dummy;
		u8SkipMosi = 1;
	} else if (!pu8Miso) {
    36c4:	ef 28       	or	r14, r15
    36c6:	39 f5       	brne	.+78     	; 0x3716 <nm_bus_ioctl+0x86>
		pu8Miso    = &u8Dummy;
		u8SkipMiso = 1;
    36c8:	bb 24       	eor	r11, r11
    36ca:	b3 94       	inc	r11
static sint8 spi_rw(uint8 *pu8Mosi, uint8 *pu8Miso, uint16 u16Sz)
{
	// struct spi_device spi_device_conf;
	// spi_device_conf.id = CONF_WIFI_M2M_SPI_CS_PIN;
	uint8    u8Dummy    = 0;
	uint8    u8SkipMosi = 0, u8SkipMiso = 0;
    36cc:	a1 2c       	mov	r10, r1

	if (!pu8Mosi) {
		pu8Mosi    = &u8Dummy;
		u8SkipMosi = 1;
	} else if (!pu8Miso) {
		pu8Miso    = &u8Dummy;
    36ce:	ce 01       	movw	r24, r28
    36d0:	01 96       	adiw	r24, 0x01	; 1
    36d2:	7c 01       	movw	r14, r24
    36d4:	06 c0       	rjmp	.+12     	; 0x36e2 <nm_bus_ioctl+0x52>
static sint8 spi_rw(uint8 *pu8Mosi, uint8 *pu8Miso, uint16 u16Sz)
{
	// struct spi_device spi_device_conf;
	// spi_device_conf.id = CONF_WIFI_M2M_SPI_CS_PIN;
	uint8    u8Dummy    = 0;
	uint8    u8SkipMosi = 0, u8SkipMiso = 0;
    36d6:	b1 2c       	mov	r11, r1
	uint16_t txd_data = 0;
	uint16_t rxd_data = 0;

	if (!pu8Mosi) {
		pu8Mosi    = &u8Dummy;
		u8SkipMosi = 1;
    36d8:	aa 24       	eor	r10, r10
    36da:	a3 94       	inc	r10
	uint8    u8SkipMosi = 0, u8SkipMiso = 0;
	uint16_t txd_data = 0;
	uint16_t rxd_data = 0;

	if (!pu8Mosi) {
		pu8Mosi    = &u8Dummy;
    36dc:	8e 01       	movw	r16, r28
    36de:	0f 5f       	subi	r16, 0xFF	; 255
    36e0:	1f 4f       	sbci	r17, 0xFF	; 255
    36e2:	0f 98       	cbi	0x01, 7	; 1
	}

	// spi_select_device(CONF_WIFI_M2M_SPI_MODULE, &spi_device_conf);
	CONF_WIFI_M2M_SPI_CS_PIN_set_level(false);

	while (u16Sz) {
    36e4:	c1 14       	cp	r12, r1
    36e6:	d1 04       	cpc	r13, r1
    36e8:	99 f0       	breq	.+38     	; 0x3710 <nm_bus_ioctl+0x80>
		txd_data = *pu8Mosi;
		/* Write one byte */
		rxd_data = SPI_0_exchange_byte(txd_data);
    36ea:	f8 01       	movw	r30, r16
    36ec:	80 81       	ld	r24, Z
    36ee:	0e 94 84 1a 	call	0x3508	; 0x3508 <SPI_0_exchange_byte>

		*pu8Miso = rxd_data;
    36f2:	f7 01       	movw	r30, r14
    36f4:	80 83       	st	Z, r24

		u16Sz--;
    36f6:	f1 e0       	ldi	r31, 0x01	; 1
    36f8:	cf 1a       	sub	r12, r31
    36fa:	d1 08       	sbc	r13, r1
		if (!u8SkipMiso)
    36fc:	b1 10       	cpse	r11, r1
    36fe:	03 c0       	rjmp	.+6      	; 0x3706 <nm_bus_ioctl+0x76>
			pu8Miso++;
    3700:	8f ef       	ldi	r24, 0xFF	; 255
    3702:	e8 1a       	sub	r14, r24
    3704:	f8 0a       	sbc	r15, r24
		if (!u8SkipMosi)
    3706:	a1 10       	cpse	r10, r1
    3708:	ed cf       	rjmp	.-38     	; 0x36e4 <nm_bus_ioctl+0x54>
			pu8Mosi++;
    370a:	0f 5f       	subi	r16, 0xFF	; 255
    370c:	1f 4f       	sbci	r17, 0xFF	; 255
    370e:	ea cf       	rjmp	.-44     	; 0x36e4 <nm_bus_ioctl+0x54>
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
    3710:	0f 9a       	sbi	0x01, 7	; 1
	}
	CONF_WIFI_M2M_SPI_CS_PIN_set_level(true);

	return M2M_SUCCESS;
    3712:	80 e0       	ldi	r24, 0x00	; 0
    3714:	03 c0       	rjmp	.+6      	; 0x371c <nm_bus_ioctl+0x8c>
		u8SkipMosi = 1;
	} else if (!pu8Miso) {
		pu8Miso    = &u8Dummy;
		u8SkipMiso = 1;
	} else {
		return M2M_ERR_BUS_FAIL;
    3716:	8a ef       	ldi	r24, 0xFA	; 250
	} break;
#elif defined CONF_WINC_USE_SPI
	case NM_BUS_IOCTL_RW: {
		tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
		s8Ret                  = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
	} break;
    3718:	01 c0       	rjmp	.+2      	; 0x371c <nm_bus_ioctl+0x8c>
#endif
	default:
		s8Ret = -1;
    371a:	8f ef       	ldi	r24, 0xFF	; 255
		M2M_ERR("invalide ioclt cmd\n");
		break;
	}

	return s8Ret;
}
    371c:	0f 90       	pop	r0
    371e:	df 91       	pop	r29
    3720:	cf 91       	pop	r28
    3722:	1f 91       	pop	r17
    3724:	0f 91       	pop	r16
    3726:	ff 90       	pop	r15
    3728:	ef 90       	pop	r14
    372a:	df 90       	pop	r13
    372c:	cf 90       	pop	r12
    372e:	bf 90       	pop	r11
    3730:	af 90       	pop	r10
    3732:	08 95       	ret

00003734 <nm_bus_deinit>:
 *	@brief	De-initialize the bus wrapper
 */
sint8 nm_bus_deinit(void)
{
	return M2M_SUCCESS;
}
    3734:	80 e0       	ldi	r24, 0x00	; 0
    3736:	08 95       	ret

00003738 <m2m_memcpy>:
		cs ^= *buf;
		buf++;
	}

	return cs;
}
    3738:	21 15       	cp	r18, r1
    373a:	31 05       	cpc	r19, r1
    373c:	41 05       	cpc	r20, r1
    373e:	51 05       	cpc	r21, r1
    3740:	51 f0       	breq	.+20     	; 0x3756 <m2m_memcpy+0x1e>
    3742:	fb 01       	movw	r30, r22
    3744:	61 91       	ld	r22, Z+
    3746:	dc 01       	movw	r26, r24
    3748:	6d 93       	st	X+, r22
    374a:	cd 01       	movw	r24, r26
    374c:	21 50       	subi	r18, 0x01	; 1
    374e:	31 09       	sbc	r19, r1
    3750:	41 09       	sbc	r20, r1
    3752:	51 09       	sbc	r21, r1
    3754:	b9 f7       	brne	.-18     	; 0x3744 <m2m_memcpy+0xc>
    3756:	08 95       	ret

00003758 <m2m_memset>:

void m2m_memset(uint8 *pBuf, uint8 val, uint32 sz)
{
	if (sz == 0)
    3758:	21 15       	cp	r18, r1
    375a:	31 05       	cpc	r19, r1
    375c:	41 05       	cpc	r20, r1
    375e:	51 05       	cpc	r21, r1
    3760:	41 f0       	breq	.+16     	; 0x3772 <m2m_memset+0x1a>
		return;
	do {
		*pBuf = val;
    3762:	fc 01       	movw	r30, r24
    3764:	61 93       	st	Z+, r22
    3766:	cf 01       	movw	r24, r30
		pBuf++;
	} while (--sz);
    3768:	21 50       	subi	r18, 0x01	; 1
    376a:	31 09       	sbc	r19, r1
    376c:	41 09       	sbc	r20, r1
    376e:	51 09       	sbc	r21, r1
    3770:	f3 cf       	rjmp	.-26     	; 0x3758 <m2m_memset>
    3772:	08 95       	ret

00003774 <m2m_strlen>:
}

uint16 m2m_strlen(uint8 *pcStr)
{
	uint16 u16StrLen = 0;
	while (*pcStr) {
    3774:	fc 01       	movw	r30, r24
    3776:	9f 01       	movw	r18, r30
    3778:	28 1b       	sub	r18, r24
    377a:	39 0b       	sbc	r19, r25
    377c:	41 91       	ld	r20, Z+
    377e:	41 11       	cpse	r20, r1
    3780:	fa cf       	rjmp	.-12     	; 0x3776 <m2m_strlen+0x2>
		u16StrLen++;
		pcStr++;
	}
	return u16StrLen;
}
    3782:	c9 01       	movw	r24, r18
    3784:	08 95       	ret

00003786 <isr>:
			}
		}
	}

	return ret;
}
    3786:	e1 e6       	ldi	r30, 0x61	; 97
    3788:	fb e2       	ldi	r31, 0x2B	; 43
    378a:	83 81       	ldd	r24, Z+3	; 0x03
    378c:	8f 5f       	subi	r24, 0xFF	; 255
    378e:	83 83       	std	Z+3, r24	; 0x03
    3790:	08 95       	ret

00003792 <m2m_hif_cb>:
    3792:	08 95       	ret

00003794 <hif_set_rx_done>:
    3794:	cf 93       	push	r28
    3796:	df 93       	push	r29
    3798:	00 d0       	rcall	.+0      	; 0x379a <hif_set_rx_done+0x6>
    379a:	00 d0       	rcall	.+0      	; 0x379c <hif_set_rx_done+0x8>
    379c:	cd b7       	in	r28, 0x3d	; 61
    379e:	de b7       	in	r29, 0x3e	; 62
    37a0:	10 92 63 2b 	sts	0x2B63, r1	; 0x802b63 <gstrHifCxt+0x2>
    37a4:	81 e0       	ldi	r24, 0x01	; 1
    37a6:	0e 94 2c 1b 	call	0x3658	; 0x3658 <nm_bsp_interrupt_ctrl>
    37aa:	ae 01       	movw	r20, r28
    37ac:	4f 5f       	subi	r20, 0xFF	; 255
    37ae:	5f 4f       	sbci	r21, 0xFF	; 255
    37b0:	60 e7       	ldi	r22, 0x70	; 112
    37b2:	70 e1       	ldi	r23, 0x10	; 16
    37b4:	80 e0       	ldi	r24, 0x00	; 0
    37b6:	90 e0       	ldi	r25, 0x00	; 0
    37b8:	0e 94 b7 23 	call	0x476e	; 0x476e <nm_read_reg_with_ret>
    37bc:	81 11       	cpse	r24, r1
    37be:	11 c0       	rjmp	.+34     	; 0x37e2 <hif_set_rx_done+0x4e>
    37c0:	89 81       	ldd	r24, Y+1	; 0x01
    37c2:	9a 81       	ldd	r25, Y+2	; 0x02
    37c4:	ab 81       	ldd	r26, Y+3	; 0x03
    37c6:	bc 81       	ldd	r27, Y+4	; 0x04
    37c8:	9c 01       	movw	r18, r24
    37ca:	ad 01       	movw	r20, r26
    37cc:	22 60       	ori	r18, 0x02	; 2
    37ce:	29 83       	std	Y+1, r18	; 0x01
    37d0:	3a 83       	std	Y+2, r19	; 0x02
    37d2:	4b 83       	std	Y+3, r20	; 0x03
    37d4:	5c 83       	std	Y+4, r21	; 0x04
    37d6:	60 e7       	ldi	r22, 0x70	; 112
    37d8:	70 e1       	ldi	r23, 0x10	; 16
    37da:	80 e0       	ldi	r24, 0x00	; 0
    37dc:	90 e0       	ldi	r25, 0x00	; 0
    37de:	0e 94 b9 23 	call	0x4772	; 0x4772 <nm_write_reg>
    37e2:	24 96       	adiw	r28, 0x04	; 4
    37e4:	cd bf       	out	0x3d, r28	; 61
    37e6:	de bf       	out	0x3e, r29	; 62
    37e8:	df 91       	pop	r29
    37ea:	cf 91       	pop	r28
    37ec:	08 95       	ret

000037ee <hif_chip_wake>:
    37ee:	80 91 63 2b 	lds	r24, 0x2B63	; 0x802b63 <gstrHifCxt+0x2>
    37f2:	81 11       	cpse	r24, r1
    37f4:	13 c0       	rjmp	.+38     	; 0x381c <hif_chip_wake+0x2e>
    37f6:	80 91 62 2b 	lds	r24, 0x2B62	; 0x802b62 <gstrHifCxt+0x1>
    37fa:	88 23       	and	r24, r24
    37fc:	31 f0       	breq	.+12     	; 0x380a <hif_chip_wake+0x1c>
    37fe:	80 91 62 2b 	lds	r24, 0x2B62	; 0x802b62 <gstrHifCxt+0x1>
    3802:	8f 5f       	subi	r24, 0xFF	; 255
    3804:	80 93 62 2b 	sts	0x2B62, r24	; 0x802b62 <gstrHifCxt+0x1>
    3808:	09 c0       	rjmp	.+18     	; 0x381c <hif_chip_wake+0x2e>
    380a:	80 91 61 2b 	lds	r24, 0x2B61	; 0x802b61 <gstrHifCxt>
    380e:	88 23       	and	r24, r24
    3810:	b1 f3       	breq	.-20     	; 0x37fe <hif_chip_wake+0x10>
    3812:	0e 94 05 22 	call	0x440a	; 0x440a <chip_wake>
    3816:	88 23       	and	r24, r24
    3818:	91 f3       	breq	.-28     	; 0x37fe <hif_chip_wake+0x10>
    381a:	08 95       	ret
    381c:	80 e0       	ldi	r24, 0x00	; 0
    381e:	08 95       	ret

00003820 <hif_chip_sleep_sc>:
    3820:	80 91 62 2b 	lds	r24, 0x2B62	; 0x802b62 <gstrHifCxt+0x1>
    3824:	88 23       	and	r24, r24
    3826:	29 f0       	breq	.+10     	; 0x3832 <hif_chip_sleep_sc+0x12>
    3828:	80 91 62 2b 	lds	r24, 0x2B62	; 0x802b62 <gstrHifCxt+0x1>
    382c:	81 50       	subi	r24, 0x01	; 1
    382e:	80 93 62 2b 	sts	0x2B62, r24	; 0x802b62 <gstrHifCxt+0x1>
    3832:	80 e0       	ldi	r24, 0x00	; 0
    3834:	08 95       	ret

00003836 <hif_chip_sleep>:
    3836:	80 91 62 2b 	lds	r24, 0x2B62	; 0x802b62 <gstrHifCxt+0x1>
    383a:	88 23       	and	r24, r24
    383c:	29 f0       	breq	.+10     	; 0x3848 <hif_chip_sleep+0x12>
    383e:	80 91 62 2b 	lds	r24, 0x2B62	; 0x802b62 <gstrHifCxt+0x1>
    3842:	81 50       	subi	r24, 0x01	; 1
    3844:	80 93 62 2b 	sts	0x2B62, r24	; 0x802b62 <gstrHifCxt+0x1>
    3848:	80 91 62 2b 	lds	r24, 0x2B62	; 0x802b62 <gstrHifCxt+0x1>
    384c:	81 11       	cpse	r24, r1
    384e:	05 c0       	rjmp	.+10     	; 0x385a <hif_chip_sleep+0x24>
    3850:	80 91 61 2b 	lds	r24, 0x2B61	; 0x802b61 <gstrHifCxt>
    3854:	81 11       	cpse	r24, r1
    3856:	0c 94 ab 21 	jmp	0x4356	; 0x4356 <chip_sleep>
    385a:	80 e0       	ldi	r24, 0x00	; 0
    385c:	08 95       	ret

0000385e <hif_init>:
    385e:	2a e1       	ldi	r18, 0x1A	; 26
    3860:	30 e0       	ldi	r19, 0x00	; 0
    3862:	40 e0       	ldi	r20, 0x00	; 0
    3864:	50 e0       	ldi	r21, 0x00	; 0
    3866:	60 e0       	ldi	r22, 0x00	; 0
    3868:	81 e6       	ldi	r24, 0x61	; 97
    386a:	9b e2       	ldi	r25, 0x2B	; 43
    386c:	0e 94 ac 1b 	call	0x3758	; 0x3758 <m2m_memset>
    3870:	83 ec       	ldi	r24, 0xC3	; 195
    3872:	9b e1       	ldi	r25, 0x1B	; 27
    3874:	0e 94 1c 1b 	call	0x3638	; 0x3638 <nm_bsp_register_isr>
    3878:	89 ec       	ldi	r24, 0xC9	; 201
    387a:	9b e1       	ldi	r25, 0x1B	; 27
    387c:	80 93 75 2b 	sts	0x2B75, r24	; 0x802b75 <gstrHifCxt+0x14>
    3880:	90 93 76 2b 	sts	0x2B76, r25	; 0x802b76 <gstrHifCxt+0x15>
    3884:	80 e0       	ldi	r24, 0x00	; 0
    3886:	08 95       	ret

00003888 <hif_send>:
    3888:	2f 92       	push	r2
    388a:	3f 92       	push	r3
    388c:	4f 92       	push	r4
    388e:	5f 92       	push	r5
    3890:	6f 92       	push	r6
    3892:	7f 92       	push	r7
    3894:	8f 92       	push	r8
    3896:	9f 92       	push	r9
    3898:	af 92       	push	r10
    389a:	bf 92       	push	r11
    389c:	cf 92       	push	r12
    389e:	df 92       	push	r13
    38a0:	ef 92       	push	r14
    38a2:	ff 92       	push	r15
    38a4:	0f 93       	push	r16
    38a6:	1f 93       	push	r17
    38a8:	cf 93       	push	r28
    38aa:	df 93       	push	r29
    38ac:	cd b7       	in	r28, 0x3d	; 61
    38ae:	de b7       	in	r29, 0x3e	; 62
    38b0:	62 97       	sbiw	r28, 0x12	; 18
    38b2:	cd bf       	out	0x3d, r28	; 61
    38b4:	de bf       	out	0x3e, r29	; 62
    38b6:	48 2e       	mov	r4, r24
    38b8:	56 2e       	mov	r5, r22
    38ba:	3a 01       	movw	r6, r20
    38bc:	49 01       	movw	r8, r18
    38be:	58 01       	movw	r10, r16
    38c0:	86 2f       	mov	r24, r22
    38c2:	8f 77       	andi	r24, 0x7F	; 127
    38c4:	8e 87       	std	Y+14, r24	; 0x0e
    38c6:	4d 86       	std	Y+13, r4	; 0x0d
    38c8:	88 e0       	ldi	r24, 0x08	; 8
    38ca:	90 e0       	ldi	r25, 0x00	; 0
    38cc:	8f 87       	std	Y+15, r24	; 0x0f
    38ce:	98 8b       	std	Y+16, r25	; 0x10
    38d0:	8f 85       	ldd	r24, Y+15	; 0x0f
    38d2:	98 89       	ldd	r25, Y+16	; 0x10
    38d4:	01 2b       	or	r16, r17
    38d6:	29 f0       	breq	.+10     	; 0x38e2 <hif_send+0x5a>
    38d8:	8e 0d       	add	r24, r14
    38da:	9f 1d       	adc	r25, r15
    38dc:	8c 0d       	add	r24, r12
    38de:	9d 1d       	adc	r25, r13
    38e0:	02 c0       	rjmp	.+4      	; 0x38e6 <hif_send+0x5e>
    38e2:	82 0f       	add	r24, r18
    38e4:	93 1f       	adc	r25, r19
    38e6:	8f 87       	std	Y+15, r24	; 0x0f
    38e8:	98 8b       	std	Y+16, r25	; 0x10
    38ea:	0e 94 f7 1b 	call	0x37ee	; 0x37ee <hif_chip_wake>
    38ee:	81 11       	cpse	r24, r1
    38f0:	40 c1       	rjmp	.+640    	; 0x3b72 <hif_send+0x2ea>
    38f2:	1d 82       	std	Y+5, r1	; 0x05
    38f4:	1e 82       	std	Y+6, r1	; 0x06
    38f6:	1f 82       	std	Y+7, r1	; 0x07
    38f8:	18 86       	std	Y+8, r1	; 0x08
    38fa:	19 8a       	std	Y+17, r1	; 0x11
    38fc:	1a 8a       	std	Y+18, r1	; 0x12
    38fe:	19 86       	std	Y+9, r1	; 0x09
    3900:	1a 86       	std	Y+10, r1	; 0x0a
    3902:	1b 86       	std	Y+11, r1	; 0x0b
    3904:	1c 86       	std	Y+12, r1	; 0x0c
    3906:	89 85       	ldd	r24, Y+9	; 0x09
    3908:	9a 85       	ldd	r25, Y+10	; 0x0a
    390a:	ab 85       	ldd	r26, Y+11	; 0x0b
    390c:	bc 85       	ldd	r27, Y+12	; 0x0c
    390e:	84 29       	or	r24, r4
    3910:	89 87       	std	Y+9, r24	; 0x09
    3912:	9a 87       	std	Y+10, r25	; 0x0a
    3914:	ab 87       	std	Y+11, r26	; 0x0b
    3916:	bc 87       	std	Y+12, r27	; 0x0c
    3918:	89 85       	ldd	r24, Y+9	; 0x09
    391a:	9a 85       	ldd	r25, Y+10	; 0x0a
    391c:	ab 85       	ldd	r26, Y+11	; 0x0b
    391e:	bc 85       	ldd	r27, Y+12	; 0x0c
    3920:	95 29       	or	r25, r5
    3922:	89 87       	std	Y+9, r24	; 0x09
    3924:	9a 87       	std	Y+10, r25	; 0x0a
    3926:	ab 87       	std	Y+11, r26	; 0x0b
    3928:	bc 87       	std	Y+12, r27	; 0x0c
    392a:	2f 85       	ldd	r18, Y+15	; 0x0f
    392c:	38 89       	ldd	r19, Y+16	; 0x10
    392e:	49 85       	ldd	r20, Y+9	; 0x09
    3930:	5a 85       	ldd	r21, Y+10	; 0x0a
    3932:	6b 85       	ldd	r22, Y+11	; 0x0b
    3934:	7c 85       	ldd	r23, Y+12	; 0x0c
    3936:	c9 01       	movw	r24, r18
    3938:	a0 e0       	ldi	r26, 0x00	; 0
    393a:	b0 e0       	ldi	r27, 0x00	; 0
    393c:	dc 01       	movw	r26, r24
    393e:	99 27       	eor	r25, r25
    3940:	88 27       	eor	r24, r24
    3942:	84 2b       	or	r24, r20
    3944:	95 2b       	or	r25, r21
    3946:	a6 2b       	or	r26, r22
    3948:	b7 2b       	or	r27, r23
    394a:	89 87       	std	Y+9, r24	; 0x09
    394c:	9a 87       	std	Y+10, r25	; 0x0a
    394e:	ab 87       	std	Y+11, r26	; 0x0b
    3950:	bc 87       	std	Y+12, r27	; 0x0c
    3952:	29 85       	ldd	r18, Y+9	; 0x09
    3954:	3a 85       	ldd	r19, Y+10	; 0x0a
    3956:	4b 85       	ldd	r20, Y+11	; 0x0b
    3958:	5c 85       	ldd	r21, Y+12	; 0x0c
    395a:	6c e8       	ldi	r22, 0x8C	; 140
    395c:	70 e1       	ldi	r23, 0x10	; 16
    395e:	80 e0       	ldi	r24, 0x00	; 0
    3960:	90 e0       	ldi	r25, 0x00	; 0
    3962:	0e 94 b9 23 	call	0x4772	; 0x4772 <nm_write_reg>
    3966:	18 2f       	mov	r17, r24
    3968:	81 11       	cpse	r24, r1
    396a:	00 c1       	rjmp	.+512    	; 0x3b6c <hif_send+0x2e4>
    396c:	19 86       	std	Y+9, r1	; 0x09
    396e:	1a 86       	std	Y+10, r1	; 0x0a
    3970:	1b 86       	std	Y+11, r1	; 0x0b
    3972:	1c 86       	std	Y+12, r1	; 0x0c
    3974:	89 85       	ldd	r24, Y+9	; 0x09
    3976:	9a 85       	ldd	r25, Y+10	; 0x0a
    3978:	ab 85       	ldd	r26, Y+11	; 0x0b
    397a:	bc 85       	ldd	r27, Y+12	; 0x0c
    397c:	82 60       	ori	r24, 0x02	; 2
    397e:	89 87       	std	Y+9, r24	; 0x09
    3980:	9a 87       	std	Y+10, r25	; 0x0a
    3982:	ab 87       	std	Y+11, r26	; 0x0b
    3984:	bc 87       	std	Y+12, r27	; 0x0c
    3986:	29 85       	ldd	r18, Y+9	; 0x09
    3988:	3a 85       	ldd	r19, Y+10	; 0x0a
    398a:	4b 85       	ldd	r20, Y+11	; 0x0b
    398c:	5c 85       	ldd	r21, Y+12	; 0x0c
    398e:	68 e7       	ldi	r22, 0x78	; 120
    3990:	70 e1       	ldi	r23, 0x10	; 16
    3992:	80 e0       	ldi	r24, 0x00	; 0
    3994:	90 e0       	ldi	r25, 0x00	; 0
    3996:	0e 94 b9 23 	call	0x4772	; 0x4772 <nm_write_reg>
    399a:	18 2f       	mov	r17, r24
    399c:	81 11       	cpse	r24, r1
    399e:	e6 c0       	rjmp	.+460    	; 0x3b6c <hif_send+0x2e4>
    39a0:	1d 82       	std	Y+5, r1	; 0x05
    39a2:	1e 82       	std	Y+6, r1	; 0x06
    39a4:	1f 82       	std	Y+7, r1	; 0x07
    39a6:	18 86       	std	Y+8, r1	; 0x08
    39a8:	19 8a       	std	Y+17, r1	; 0x11
    39aa:	1a 8a       	std	Y+18, r1	; 0x12
    39ac:	89 89       	ldd	r24, Y+17	; 0x11
    39ae:	9a 89       	ldd	r25, Y+18	; 0x12
    39b0:	88 3e       	cpi	r24, 0xE8	; 232
    39b2:	93 40       	sbci	r25, 0x03	; 3
    39b4:	58 f4       	brcc	.+22     	; 0x39cc <hif_send+0x144>
    39b6:	ae 01       	movw	r20, r28
    39b8:	47 5f       	subi	r20, 0xF7	; 247
    39ba:	5f 4f       	sbci	r21, 0xFF	; 255
    39bc:	68 e7       	ldi	r22, 0x78	; 120
    39be:	70 e1       	ldi	r23, 0x10	; 16
    39c0:	80 e0       	ldi	r24, 0x00	; 0
    39c2:	90 e0       	ldi	r25, 0x00	; 0
    39c4:	0e 94 b7 23 	call	0x476e	; 0x476e <nm_read_reg_with_ret>
    39c8:	88 23       	and	r24, r24
    39ca:	49 f0       	breq	.+18     	; 0x39de <hif_send+0x156>
    39cc:	8d 81       	ldd	r24, Y+5	; 0x05
    39ce:	9e 81       	ldd	r25, Y+6	; 0x06
    39d0:	af 81       	ldd	r26, Y+7	; 0x07
    39d2:	b8 85       	ldd	r27, Y+8	; 0x08
    39d4:	89 2b       	or	r24, r25
    39d6:	8a 2b       	or	r24, r26
    39d8:	8b 2b       	or	r24, r27
    39da:	59 f5       	brne	.+86     	; 0x3a32 <hif_send+0x1aa>
    39dc:	c3 c0       	rjmp	.+390    	; 0x3b64 <hif_send+0x2dc>
    39de:	89 89       	ldd	r24, Y+17	; 0x11
    39e0:	9a 89       	ldd	r25, Y+18	; 0x12
    39e2:	84 3f       	cpi	r24, 0xF4	; 244
    39e4:	91 40       	sbci	r25, 0x01	; 1
    39e6:	40 f0       	brcs	.+16     	; 0x39f8 <hif_send+0x170>
    39e8:	89 89       	ldd	r24, Y+17	; 0x11
    39ea:	9a 89       	ldd	r25, Y+18	; 0x12
    39ec:	61 e0       	ldi	r22, 0x01	; 1
    39ee:	70 e0       	ldi	r23, 0x00	; 0
    39f0:	80 e0       	ldi	r24, 0x00	; 0
    39f2:	90 e0       	ldi	r25, 0x00	; 0
    39f4:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <nm_bsp_sleep>
    39f8:	89 85       	ldd	r24, Y+9	; 0x09
    39fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    39fc:	ab 85       	ldd	r26, Y+11	; 0x0b
    39fe:	bc 85       	ldd	r27, Y+12	; 0x0c
    3a00:	81 fd       	sbrc	r24, 1
    3a02:	11 c0       	rjmp	.+34     	; 0x3a26 <hif_send+0x19e>
    3a04:	ae 01       	movw	r20, r28
    3a06:	4b 5f       	subi	r20, 0xFB	; 251
    3a08:	5f 4f       	sbci	r21, 0xFF	; 255
    3a0a:	60 e0       	ldi	r22, 0x00	; 0
    3a0c:	74 e0       	ldi	r23, 0x04	; 4
    3a0e:	85 e1       	ldi	r24, 0x15	; 21
    3a10:	90 e0       	ldi	r25, 0x00	; 0
    3a12:	0e 94 b7 23 	call	0x476e	; 0x476e <nm_read_reg_with_ret>
    3a16:	18 2f       	mov	r17, r24
    3a18:	88 23       	and	r24, r24
    3a1a:	c1 f2       	breq	.-80     	; 0x39cc <hif_send+0x144>
    3a1c:	1d 82       	std	Y+5, r1	; 0x05
    3a1e:	1e 82       	std	Y+6, r1	; 0x06
    3a20:	1f 82       	std	Y+7, r1	; 0x07
    3a22:	18 86       	std	Y+8, r1	; 0x08
    3a24:	a3 c0       	rjmp	.+326    	; 0x3b6c <hif_send+0x2e4>
    3a26:	89 89       	ldd	r24, Y+17	; 0x11
    3a28:	9a 89       	ldd	r25, Y+18	; 0x12
    3a2a:	01 96       	adiw	r24, 0x01	; 1
    3a2c:	89 8b       	std	Y+17, r24	; 0x11
    3a2e:	9a 8b       	std	Y+18, r25	; 0x12
    3a30:	bd cf       	rjmp	.-134    	; 0x39ac <hif_send+0x124>
    3a32:	8d 81       	ldd	r24, Y+5	; 0x05
    3a34:	9e 81       	ldd	r25, Y+6	; 0x06
    3a36:	af 81       	ldd	r26, Y+7	; 0x07
    3a38:	b8 85       	ldd	r27, Y+8	; 0x08
    3a3a:	89 83       	std	Y+1, r24	; 0x01
    3a3c:	9a 83       	std	Y+2, r25	; 0x02
    3a3e:	ab 83       	std	Y+3, r26	; 0x03
    3a40:	bc 83       	std	Y+4, r27	; 0x04
    3a42:	8f 85       	ldd	r24, Y+15	; 0x0f
    3a44:	98 89       	ldd	r25, Y+16	; 0x10
    3a46:	8f 87       	std	Y+15, r24	; 0x0f
    3a48:	98 8b       	std	Y+16, r25	; 0x10
    3a4a:	69 81       	ldd	r22, Y+1	; 0x01
    3a4c:	7a 81       	ldd	r23, Y+2	; 0x02
    3a4e:	8b 81       	ldd	r24, Y+3	; 0x03
    3a50:	9c 81       	ldd	r25, Y+4	; 0x04
    3a52:	08 e0       	ldi	r16, 0x08	; 8
    3a54:	10 e0       	ldi	r17, 0x00	; 0
    3a56:	20 e0       	ldi	r18, 0x00	; 0
    3a58:	30 e0       	ldi	r19, 0x00	; 0
    3a5a:	ae 01       	movw	r20, r28
    3a5c:	43 5f       	subi	r20, 0xF3	; 243
    3a5e:	5f 4f       	sbci	r21, 0xFF	; 255
    3a60:	0e 94 38 24 	call	0x4870	; 0x4870 <nm_write_block>
    3a64:	18 2f       	mov	r17, r24
    3a66:	81 11       	cpse	r24, r1
    3a68:	81 c0       	rjmp	.+258    	; 0x3b6c <hif_send+0x2e4>
    3a6a:	89 81       	ldd	r24, Y+1	; 0x01
    3a6c:	9a 81       	ldd	r25, Y+2	; 0x02
    3a6e:	ab 81       	ldd	r26, Y+3	; 0x03
    3a70:	bc 81       	ldd	r27, Y+4	; 0x04
    3a72:	08 96       	adiw	r24, 0x08	; 8
    3a74:	a1 1d       	adc	r26, r1
    3a76:	b1 1d       	adc	r27, r1
    3a78:	89 83       	std	Y+1, r24	; 0x01
    3a7a:	9a 83       	std	Y+2, r25	; 0x02
    3a7c:	ab 83       	std	Y+3, r26	; 0x03
    3a7e:	bc 83       	std	Y+4, r27	; 0x04
    3a80:	61 14       	cp	r6, r1
    3a82:	71 04       	cpc	r7, r1
    3a84:	d9 f0       	breq	.+54     	; 0x3abc <hif_send+0x234>
    3a86:	14 01       	movw	r2, r8
    3a88:	41 2c       	mov	r4, r1
    3a8a:	51 2c       	mov	r5, r1
    3a8c:	69 81       	ldd	r22, Y+1	; 0x01
    3a8e:	7a 81       	ldd	r23, Y+2	; 0x02
    3a90:	8b 81       	ldd	r24, Y+3	; 0x03
    3a92:	9c 81       	ldd	r25, Y+4	; 0x04
    3a94:	92 01       	movw	r18, r4
    3a96:	81 01       	movw	r16, r2
    3a98:	a3 01       	movw	r20, r6
    3a9a:	0e 94 38 24 	call	0x4870	; 0x4870 <nm_write_block>
    3a9e:	18 2f       	mov	r17, r24
    3aa0:	81 11       	cpse	r24, r1
    3aa2:	64 c0       	rjmp	.+200    	; 0x3b6c <hif_send+0x2e4>
    3aa4:	89 81       	ldd	r24, Y+1	; 0x01
    3aa6:	9a 81       	ldd	r25, Y+2	; 0x02
    3aa8:	ab 81       	ldd	r26, Y+3	; 0x03
    3aaa:	bc 81       	ldd	r27, Y+4	; 0x04
    3aac:	82 0d       	add	r24, r2
    3aae:	93 1d       	adc	r25, r3
    3ab0:	a4 1d       	adc	r26, r4
    3ab2:	b5 1d       	adc	r27, r5
    3ab4:	89 83       	std	Y+1, r24	; 0x01
    3ab6:	9a 83       	std	Y+2, r25	; 0x02
    3ab8:	ab 83       	std	Y+3, r26	; 0x03
    3aba:	bc 83       	std	Y+4, r27	; 0x04
    3abc:	a1 14       	cp	r10, r1
    3abe:	b1 04       	cpc	r11, r1
    3ac0:	49 f1       	breq	.+82     	; 0x3b14 <hif_send+0x28c>
    3ac2:	89 81       	ldd	r24, Y+1	; 0x01
    3ac4:	9a 81       	ldd	r25, Y+2	; 0x02
    3ac6:	ab 81       	ldd	r26, Y+3	; 0x03
    3ac8:	bc 81       	ldd	r27, Y+4	; 0x04
    3aca:	c8 18       	sub	r12, r8
    3acc:	d9 08       	sbc	r13, r9
    3ace:	8c 0d       	add	r24, r12
    3ad0:	9d 1d       	adc	r25, r13
    3ad2:	a1 1d       	adc	r26, r1
    3ad4:	b1 1d       	adc	r27, r1
    3ad6:	89 83       	std	Y+1, r24	; 0x01
    3ad8:	9a 83       	std	Y+2, r25	; 0x02
    3ada:	ab 83       	std	Y+3, r26	; 0x03
    3adc:	bc 83       	std	Y+4, r27	; 0x04
    3ade:	27 01       	movw	r4, r14
    3ae0:	61 2c       	mov	r6, r1
    3ae2:	71 2c       	mov	r7, r1
    3ae4:	69 81       	ldd	r22, Y+1	; 0x01
    3ae6:	7a 81       	ldd	r23, Y+2	; 0x02
    3ae8:	8b 81       	ldd	r24, Y+3	; 0x03
    3aea:	9c 81       	ldd	r25, Y+4	; 0x04
    3aec:	93 01       	movw	r18, r6
    3aee:	82 01       	movw	r16, r4
    3af0:	a5 01       	movw	r20, r10
    3af2:	0e 94 38 24 	call	0x4870	; 0x4870 <nm_write_block>
    3af6:	18 2f       	mov	r17, r24
    3af8:	81 11       	cpse	r24, r1
    3afa:	38 c0       	rjmp	.+112    	; 0x3b6c <hif_send+0x2e4>
    3afc:	89 81       	ldd	r24, Y+1	; 0x01
    3afe:	9a 81       	ldd	r25, Y+2	; 0x02
    3b00:	ab 81       	ldd	r26, Y+3	; 0x03
    3b02:	bc 81       	ldd	r27, Y+4	; 0x04
    3b04:	84 0d       	add	r24, r4
    3b06:	95 1d       	adc	r25, r5
    3b08:	a6 1d       	adc	r26, r6
    3b0a:	b7 1d       	adc	r27, r7
    3b0c:	89 83       	std	Y+1, r24	; 0x01
    3b0e:	9a 83       	std	Y+2, r25	; 0x02
    3b10:	ab 83       	std	Y+3, r26	; 0x03
    3b12:	bc 83       	std	Y+4, r27	; 0x04
    3b14:	8d 81       	ldd	r24, Y+5	; 0x05
    3b16:	9e 81       	ldd	r25, Y+6	; 0x06
    3b18:	af 81       	ldd	r26, Y+7	; 0x07
    3b1a:	b8 85       	ldd	r27, Y+8	; 0x08
    3b1c:	22 e0       	ldi	r18, 0x02	; 2
    3b1e:	88 0f       	add	r24, r24
    3b20:	99 1f       	adc	r25, r25
    3b22:	aa 1f       	adc	r26, r26
    3b24:	bb 1f       	adc	r27, r27
    3b26:	2a 95       	dec	r18
    3b28:	d1 f7       	brne	.-12     	; 0x3b1e <hif_send+0x296>
    3b2a:	89 87       	std	Y+9, r24	; 0x09
    3b2c:	9a 87       	std	Y+10, r25	; 0x0a
    3b2e:	ab 87       	std	Y+11, r26	; 0x0b
    3b30:	bc 87       	std	Y+12, r27	; 0x0c
    3b32:	89 85       	ldd	r24, Y+9	; 0x09
    3b34:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b36:	ab 85       	ldd	r26, Y+11	; 0x0b
    3b38:	bc 85       	ldd	r27, Y+12	; 0x0c
    3b3a:	82 60       	ori	r24, 0x02	; 2
    3b3c:	89 87       	std	Y+9, r24	; 0x09
    3b3e:	9a 87       	std	Y+10, r25	; 0x0a
    3b40:	ab 87       	std	Y+11, r26	; 0x0b
    3b42:	bc 87       	std	Y+12, r27	; 0x0c
    3b44:	29 85       	ldd	r18, Y+9	; 0x09
    3b46:	3a 85       	ldd	r19, Y+10	; 0x0a
    3b48:	4b 85       	ldd	r20, Y+11	; 0x0b
    3b4a:	5c 85       	ldd	r21, Y+12	; 0x0c
    3b4c:	6c e6       	ldi	r22, 0x6C	; 108
    3b4e:	70 e1       	ldi	r23, 0x10	; 16
    3b50:	80 e0       	ldi	r24, 0x00	; 0
    3b52:	90 e0       	ldi	r25, 0x00	; 0
    3b54:	0e 94 b9 23 	call	0x4772	; 0x4772 <nm_write_reg>
    3b58:	18 2f       	mov	r17, r24
    3b5a:	81 11       	cpse	r24, r1
    3b5c:	07 c0       	rjmp	.+14     	; 0x3b6c <hif_send+0x2e4>
    3b5e:	0e 94 1b 1c 	call	0x3836	; 0x3836 <hif_chip_sleep>
    3b62:	07 c0       	rjmp	.+14     	; 0x3b72 <hif_send+0x2ea>
    3b64:	0e 94 1b 1c 	call	0x3836	; 0x3836 <hif_chip_sleep>
    3b68:	8d ef       	ldi	r24, 0xFD	; 253
    3b6a:	03 c0       	rjmp	.+6      	; 0x3b72 <hif_send+0x2ea>
    3b6c:	0e 94 10 1c 	call	0x3820	; 0x3820 <hif_chip_sleep_sc>
    3b70:	81 2f       	mov	r24, r17
    3b72:	62 96       	adiw	r28, 0x12	; 18
    3b74:	cd bf       	out	0x3d, r28	; 61
    3b76:	de bf       	out	0x3e, r29	; 62
    3b78:	df 91       	pop	r29
    3b7a:	cf 91       	pop	r28
    3b7c:	1f 91       	pop	r17
    3b7e:	0f 91       	pop	r16
    3b80:	ff 90       	pop	r15
    3b82:	ef 90       	pop	r14
    3b84:	df 90       	pop	r13
    3b86:	cf 90       	pop	r12
    3b88:	bf 90       	pop	r11
    3b8a:	af 90       	pop	r10
    3b8c:	9f 90       	pop	r9
    3b8e:	8f 90       	pop	r8
    3b90:	7f 90       	pop	r7
    3b92:	6f 90       	pop	r6
    3b94:	5f 90       	pop	r5
    3b96:	4f 90       	pop	r4
    3b98:	3f 90       	pop	r3
    3b9a:	2f 90       	pop	r2
    3b9c:	08 95       	ret

00003b9e <hif_receive>:
 *	@param [in]	isDone
 *				If you don't need any more packets send True otherwise send false
 *    @return		The function shall return ZERO for successful operation and a negative value otherwise.
 */
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
    3b9e:	4f 92       	push	r4
    3ba0:	5f 92       	push	r5
    3ba2:	6f 92       	push	r6
    3ba4:	7f 92       	push	r7
    3ba6:	8f 92       	push	r8
    3ba8:	9f 92       	push	r9
    3baa:	af 92       	push	r10
    3bac:	bf 92       	push	r11
    3bae:	cf 92       	push	r12
    3bb0:	df 92       	push	r13
    3bb2:	ef 92       	push	r14
    3bb4:	ff 92       	push	r15
    3bb6:	0f 93       	push	r16
    3bb8:	1f 93       	push	r17
    3bba:	cf 93       	push	r28
    3bbc:	c0 2f       	mov	r28, r16
	sint8 ret = M2M_SUCCESS;
	if ((u32Addr == 0) || (pu8Buf == NULL) || (u16Sz == 0)) {
    3bbe:	61 15       	cp	r22, r1
    3bc0:	71 05       	cpc	r23, r1
    3bc2:	81 05       	cpc	r24, r1
    3bc4:	91 05       	cpc	r25, r1
    3bc6:	31 f0       	breq	.+12     	; 0x3bd4 <hif_receive+0x36>
    3bc8:	41 15       	cp	r20, r1
    3bca:	51 05       	cpc	r21, r1
    3bcc:	19 f0       	breq	.+6      	; 0x3bd4 <hif_receive+0x36>
    3bce:	21 15       	cp	r18, r1
    3bd0:	31 05       	cpc	r19, r1
    3bd2:	19 f4       	brne	.+6      	; 0x3bda <hif_receive+0x3c>
		if (isDone) {
    3bd4:	c1 11       	cpse	r28, r1
    3bd6:	5e c0       	rjmp	.+188    	; 0x3c94 <hif_receive+0xf6>
    3bd8:	6e c0       	rjmp	.+220    	; 0x3cb6 <hif_receive+0x118>
			M2M_ERR(" hif_receive: Invalid argument\n");
		}
		goto ERR1;
	}

	if (u16Sz > gstrHifCxt.u32RxSize) {
    3bda:	89 01       	movw	r16, r18
    3bdc:	20 e0       	ldi	r18, 0x00	; 0
    3bde:	30 e0       	ldi	r19, 0x00	; 0
    3be0:	c0 90 69 2b 	lds	r12, 0x2B69	; 0x802b69 <gstrHifCxt+0x8>
    3be4:	d0 90 6a 2b 	lds	r13, 0x2B6A	; 0x802b6a <gstrHifCxt+0x9>
    3be8:	e0 90 6b 2b 	lds	r14, 0x2B6B	; 0x802b6b <gstrHifCxt+0xa>
    3bec:	f0 90 6c 2b 	lds	r15, 0x2B6C	; 0x802b6c <gstrHifCxt+0xb>
    3bf0:	c0 16       	cp	r12, r16
    3bf2:	d1 06       	cpc	r13, r17
    3bf4:	e2 06       	cpc	r14, r18
    3bf6:	f3 06       	cpc	r15, r19
    3bf8:	08 f4       	brcc	.+2      	; 0x3bfc <hif_receive+0x5e>
    3bfa:	5d c0       	rjmp	.+186    	; 0x3cb6 <hif_receive+0x118>
		ret = M2M_ERR_FAIL;
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%u><%lu>\n", u16Sz, gstrHifCxt.u32RxSize);
		goto ERR1;
	}
	if ((u32Addr < gstrHifCxt.u32RxAddr) || ((u32Addr + u16Sz) > (gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize))) {
    3bfc:	c0 90 65 2b 	lds	r12, 0x2B65	; 0x802b65 <gstrHifCxt+0x4>
    3c00:	d0 90 66 2b 	lds	r13, 0x2B66	; 0x802b66 <gstrHifCxt+0x5>
    3c04:	e0 90 67 2b 	lds	r14, 0x2B67	; 0x802b67 <gstrHifCxt+0x6>
    3c08:	f0 90 68 2b 	lds	r15, 0x2B68	; 0x802b68 <gstrHifCxt+0x7>
    3c0c:	6c 15       	cp	r22, r12
    3c0e:	7d 05       	cpc	r23, r13
    3c10:	8e 05       	cpc	r24, r14
    3c12:	9f 05       	cpc	r25, r15
    3c14:	08 f4       	brcc	.+2      	; 0x3c18 <hif_receive+0x7a>
    3c16:	4f c0       	rjmp	.+158    	; 0x3cb6 <hif_receive+0x118>
    3c18:	6b 01       	movw	r12, r22
    3c1a:	7c 01       	movw	r14, r24
    3c1c:	c0 0e       	add	r12, r16
    3c1e:	d1 1e       	adc	r13, r17
    3c20:	e2 1e       	adc	r14, r18
    3c22:	f3 1e       	adc	r15, r19
    3c24:	40 90 65 2b 	lds	r4, 0x2B65	; 0x802b65 <gstrHifCxt+0x4>
    3c28:	50 90 66 2b 	lds	r5, 0x2B66	; 0x802b66 <gstrHifCxt+0x5>
    3c2c:	60 90 67 2b 	lds	r6, 0x2B67	; 0x802b67 <gstrHifCxt+0x6>
    3c30:	70 90 68 2b 	lds	r7, 0x2B68	; 0x802b68 <gstrHifCxt+0x7>
    3c34:	80 90 69 2b 	lds	r8, 0x2B69	; 0x802b69 <gstrHifCxt+0x8>
    3c38:	90 90 6a 2b 	lds	r9, 0x2B6A	; 0x802b6a <gstrHifCxt+0x9>
    3c3c:	a0 90 6b 2b 	lds	r10, 0x2B6B	; 0x802b6b <gstrHifCxt+0xa>
    3c40:	b0 90 6c 2b 	lds	r11, 0x2B6C	; 0x802b6c <gstrHifCxt+0xb>
    3c44:	84 0c       	add	r8, r4
    3c46:	95 1c       	adc	r9, r5
    3c48:	a6 1c       	adc	r10, r6
    3c4a:	b7 1c       	adc	r11, r7
    3c4c:	8c 14       	cp	r8, r12
    3c4e:	9d 04       	cpc	r9, r13
    3c50:	ae 04       	cpc	r10, r14
    3c52:	bf 04       	cpc	r11, r15
    3c54:	80 f1       	brcs	.+96     	; 0x3cb6 <hif_receive+0x118>
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
		goto ERR1;
	}

	/* Receive the payload */
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
    3c56:	0e 94 bb 23 	call	0x4776	; 0x4776 <nm_read_block>
	if (ret != M2M_SUCCESS)
    3c5a:	81 11       	cpse	r24, r1
    3c5c:	2d c0       	rjmp	.+90     	; 0x3cb8 <hif_receive+0x11a>
		goto ERR1;

	/* check if this is the last packet */
	if ((((gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize) - (u32Addr + u16Sz)) <= 0) || isDone) {
    3c5e:	00 91 65 2b 	lds	r16, 0x2B65	; 0x802b65 <gstrHifCxt+0x4>
    3c62:	10 91 66 2b 	lds	r17, 0x2B66	; 0x802b66 <gstrHifCxt+0x5>
    3c66:	20 91 67 2b 	lds	r18, 0x2B67	; 0x802b67 <gstrHifCxt+0x6>
    3c6a:	30 91 68 2b 	lds	r19, 0x2B68	; 0x802b68 <gstrHifCxt+0x7>
    3c6e:	40 91 69 2b 	lds	r20, 0x2B69	; 0x802b69 <gstrHifCxt+0x8>
    3c72:	50 91 6a 2b 	lds	r21, 0x2B6A	; 0x802b6a <gstrHifCxt+0x9>
    3c76:	60 91 6b 2b 	lds	r22, 0x2B6B	; 0x802b6b <gstrHifCxt+0xa>
    3c7a:	70 91 6c 2b 	lds	r23, 0x2B6C	; 0x802b6c <gstrHifCxt+0xb>
    3c7e:	40 0f       	add	r20, r16
    3c80:	51 1f       	adc	r21, r17
    3c82:	62 1f       	adc	r22, r18
    3c84:	73 1f       	adc	r23, r19
    3c86:	c4 16       	cp	r12, r20
    3c88:	d5 06       	cpc	r13, r21
    3c8a:	e6 06       	cpc	r14, r22
    3c8c:	f7 06       	cpc	r15, r23
    3c8e:	11 f0       	breq	.+4      	; 0x3c94 <hif_receive+0xf6>
    3c90:	cc 23       	and	r28, r28
    3c92:	91 f0       	breq	.+36     	; 0x3cb8 <hif_receive+0x11a>
		ret = hif_set_rx_done();
	}

ERR1:
	return ret;
}
    3c94:	cf 91       	pop	r28
    3c96:	1f 91       	pop	r17
    3c98:	0f 91       	pop	r16
    3c9a:	ff 90       	pop	r15
    3c9c:	ef 90       	pop	r14
    3c9e:	df 90       	pop	r13
    3ca0:	cf 90       	pop	r12
    3ca2:	bf 90       	pop	r11
    3ca4:	af 90       	pop	r10
    3ca6:	9f 90       	pop	r9
    3ca8:	8f 90       	pop	r8
    3caa:	7f 90       	pop	r7
    3cac:	6f 90       	pop	r6
    3cae:	5f 90       	pop	r5
    3cb0:	4f 90       	pop	r4
		goto ERR1;

	/* check if this is the last packet */
	if ((((gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize) - (u32Addr + u16Sz)) <= 0) || isDone) {
		/* set RX done */
		ret = hif_set_rx_done();
    3cb2:	0c 94 ca 1b 	jmp	0x3794	; 0x3794 <hif_set_rx_done>
	if ((u32Addr == 0) || (pu8Buf == NULL) || (u16Sz == 0)) {
		if (isDone) {
			/* set RX done */
			ret = hif_set_rx_done();
		} else {
			ret = M2M_ERR_FAIL;
    3cb6:	84 ef       	ldi	r24, 0xF4	; 244
		ret = hif_set_rx_done();
	}

ERR1:
	return ret;
}
    3cb8:	cf 91       	pop	r28
    3cba:	1f 91       	pop	r17
    3cbc:	0f 91       	pop	r16
    3cbe:	ff 90       	pop	r15
    3cc0:	ef 90       	pop	r14
    3cc2:	df 90       	pop	r13
    3cc4:	cf 90       	pop	r12
    3cc6:	bf 90       	pop	r11
    3cc8:	af 90       	pop	r10
    3cca:	9f 90       	pop	r9
    3ccc:	8f 90       	pop	r8
    3cce:	7f 90       	pop	r7
    3cd0:	6f 90       	pop	r6
    3cd2:	5f 90       	pop	r5
    3cd4:	4f 90       	pop	r4
    3cd6:	08 95       	ret

00003cd8 <hif_register_cb>:
 */

sint8 hif_register_cb(uint8 u8Grp, tpfHifCallBack fn)
{
	sint8 ret = M2M_SUCCESS;
	switch (u8Grp) {
    3cd8:	90 e0       	ldi	r25, 0x00	; 0
    3cda:	fc 01       	movw	r30, r24
    3cdc:	31 97       	sbiw	r30, 0x01	; 1
    3cde:	e7 30       	cpi	r30, 0x07	; 7
    3ce0:	f1 05       	cpc	r31, r1
    3ce2:	40 f5       	brcc	.+80     	; 0x3d34 <hif_register_cb+0x5c>
    3ce4:	e8 5b       	subi	r30, 0xB8	; 184
    3ce6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ce8:	0c 94 3e 2d 	jmp	0x5a7c	; 0x5a7c <__tablejump2__>
	case M2M_REQ_GROUP_IP:
		gstrHifCxt.pfIpCb = fn;
    3cec:	60 93 6f 2b 	sts	0x2B6F, r22	; 0x802b6f <gstrHifCxt+0xe>
    3cf0:	70 93 70 2b 	sts	0x2B70, r23	; 0x802b70 <gstrHifCxt+0xf>
    3cf4:	1d c0       	rjmp	.+58     	; 0x3d30 <hif_register_cb+0x58>
		break;
	case M2M_REQ_GROUP_WIFI:
		gstrHifCxt.pfWifiCb = fn;
    3cf6:	60 93 6d 2b 	sts	0x2B6D, r22	; 0x802b6d <gstrHifCxt+0xc>
    3cfa:	70 93 6e 2b 	sts	0x2B6E, r23	; 0x802b6e <gstrHifCxt+0xd>
    3cfe:	18 c0       	rjmp	.+48     	; 0x3d30 <hif_register_cb+0x58>
		break;
	case M2M_REQ_GROUP_OTA:
		gstrHifCxt.pfOtaCb = fn;
    3d00:	60 93 71 2b 	sts	0x2B71, r22	; 0x802b71 <gstrHifCxt+0x10>
    3d04:	70 93 72 2b 	sts	0x2B72, r23	; 0x802b72 <gstrHifCxt+0x11>
    3d08:	13 c0       	rjmp	.+38     	; 0x3d30 <hif_register_cb+0x58>
		break;
	case M2M_REQ_GROUP_HIF:
		gstrHifCxt.pfHifCb = fn;
    3d0a:	60 93 75 2b 	sts	0x2B75, r22	; 0x802b75 <gstrHifCxt+0x14>
    3d0e:	70 93 76 2b 	sts	0x2B76, r23	; 0x802b76 <gstrHifCxt+0x15>
    3d12:	0e c0       	rjmp	.+28     	; 0x3d30 <hif_register_cb+0x58>
		break;
	case M2M_REQ_GROUP_CRYPTO:
		gstrHifCxt.pfCryptoCb = fn;
    3d14:	60 93 77 2b 	sts	0x2B77, r22	; 0x802b77 <gstrHifCxt+0x16>
    3d18:	70 93 78 2b 	sts	0x2B78, r23	; 0x802b78 <gstrHifCxt+0x17>
    3d1c:	09 c0       	rjmp	.+18     	; 0x3d30 <hif_register_cb+0x58>
		break;
	case M2M_REQ_GROUP_SIGMA:
		gstrHifCxt.pfSigmaCb = fn;
    3d1e:	60 93 73 2b 	sts	0x2B73, r22	; 0x802b73 <gstrHifCxt+0x12>
    3d22:	70 93 74 2b 	sts	0x2B74, r23	; 0x802b74 <gstrHifCxt+0x13>
    3d26:	04 c0       	rjmp	.+8      	; 0x3d30 <hif_register_cb+0x58>
		break;
	case M2M_REQ_GROUP_SSL:
		gstrHifCxt.pfSslCb = fn;
    3d28:	60 93 79 2b 	sts	0x2B79, r22	; 0x802b79 <gstrHifCxt+0x18>
    3d2c:	70 93 7a 2b 	sts	0x2B7A, r23	; 0x802b7a <gstrHifCxt+0x19>
 *    @return		The function shall return ZERO for successful operation and a negative value otherwise.
 */

sint8 hif_register_cb(uint8 u8Grp, tpfHifCallBack fn)
{
	sint8 ret = M2M_SUCCESS;
    3d30:	80 e0       	ldi	r24, 0x00	; 0
	case M2M_REQ_GROUP_SIGMA:
		gstrHifCxt.pfSigmaCb = fn;
		break;
	case M2M_REQ_GROUP_SSL:
		gstrHifCxt.pfSslCb = fn;
		break;
    3d32:	08 95       	ret
	default:
		M2M_ERR("GRp ? %d\n", u8Grp);
		ret = M2M_ERR_FAIL;
    3d34:	84 ef       	ldi	r24, 0xF4	; 244
		break;
	}
	return ret;
}
    3d36:	08 95       	ret

00003d38 <m2m_ssl_send_certs_to_winc>:
    @param [in]	u32BufferSz
                Size of the certificates.
    @return		The function SHALL return 0 for success and a negative value otherwise.
*/
NMI_API sint8 m2m_ssl_send_certs_to_winc(uint8 *pu8Buffer, uint32 u32BufferSz)
{
    3d38:	cf 92       	push	r12
    3d3a:	df 92       	push	r13
    3d3c:	ef 92       	push	r14
    3d3e:	ff 92       	push	r15
    3d40:	0f 93       	push	r16
    3d42:	1f 93       	push	r17
	sint8 s8Ret = M2M_SUCCESS;

	s8Ret = hif_send(M2M_REQ_GROUP_SSL, (M2M_SSL_IND_CERTS_ECC | M2M_REQ_DATA_PKT), NULL, 0, pu8Buffer, u32BufferSz, 0);
    3d44:	c1 2c       	mov	r12, r1
    3d46:	d1 2c       	mov	r13, r1
    3d48:	7a 01       	movw	r14, r20
    3d4a:	8c 01       	movw	r16, r24
    3d4c:	20 e0       	ldi	r18, 0x00	; 0
    3d4e:	30 e0       	ldi	r19, 0x00	; 0
    3d50:	40 e0       	ldi	r20, 0x00	; 0
    3d52:	50 e0       	ldi	r21, 0x00	; 0
    3d54:	64 e8       	ldi	r22, 0x84	; 132
    3d56:	85 e0       	ldi	r24, 0x05	; 5
    3d58:	0e 94 44 1c 	call	0x3888	; 0x3888 <hif_send>

	return s8Ret;
}
    3d5c:	1f 91       	pop	r17
    3d5e:	0f 91       	pop	r16
    3d60:	ff 90       	pop	r15
    3d62:	ef 90       	pop	r14
    3d64:	df 90       	pop	r13
    3d66:	cf 90       	pop	r12
    3d68:	08 95       	ret

00003d6a <m2m_wifi_cb>:
{
	sint8 s8Ret = M2M_ERR_FAIL;
	s8Ret       = hif_send(
        M2M_REQ_GROUP_SSL, M2M_SSL_IND_CRL | M2M_REQ_DATA_PKT, NULL, 0, (uint8 *)pCRL, sizeof(tstrTlsCrlInfo), 0);
	return s8Ret;
}
    3d6a:	cf 92       	push	r12
    3d6c:	df 92       	push	r13
    3d6e:	ef 92       	push	r14
    3d70:	ff 92       	push	r15
    3d72:	0f 93       	push	r16
    3d74:	cf 93       	push	r28
    3d76:	df 93       	push	r29
    3d78:	cd b7       	in	r28, 0x3d	; 61
    3d7a:	de b7       	in	r29, 0x3e	; 62
    3d7c:	c4 56       	subi	r28, 0x64	; 100
    3d7e:	d1 09       	sbc	r29, r1
    3d80:	cd bf       	out	0x3d, r28	; 61
    3d82:	de bf       	out	0x3e, r29	; 62
    3d84:	69 01       	movw	r12, r18
    3d86:	7a 01       	movw	r14, r20
    3d88:	8c 32       	cpi	r24, 0x2C	; 44
    3d8a:	c1 f4       	brne	.+48     	; 0x3dbc <m2m_wifi_cb+0x52>
    3d8c:	00 e0       	ldi	r16, 0x00	; 0
    3d8e:	24 e0       	ldi	r18, 0x04	; 4
    3d90:	30 e0       	ldi	r19, 0x00	; 0
    3d92:	ae 01       	movw	r20, r28
    3d94:	4f 5f       	subi	r20, 0xFF	; 255
    3d96:	5f 4f       	sbci	r21, 0xFF	; 255
    3d98:	c7 01       	movw	r24, r14
    3d9a:	b6 01       	movw	r22, r12
    3d9c:	0e 94 cf 1d 	call	0x3b9e	; 0x3b9e <hif_receive>
    3da0:	81 11       	cpse	r24, r1
    3da2:	61 c1       	rjmp	.+706    	; 0x4066 <__RODATA_PM_OFFSET__+0x66>
    3da4:	e0 91 33 2a 	lds	r30, 0x2A33	; 0x802a33 <gpfAppWifiCb>
    3da8:	f0 91 34 2a 	lds	r31, 0x2A34	; 0x802a34 <gpfAppWifiCb+0x1>
    3dac:	30 97       	sbiw	r30, 0x00	; 0
    3dae:	09 f4       	brne	.+2      	; 0x3db2 <m2m_wifi_cb+0x48>
    3db0:	5a c1       	rjmp	.+692    	; 0x4066 <__RODATA_PM_OFFSET__+0x66>
    3db2:	be 01       	movw	r22, r28
    3db4:	6f 5f       	subi	r22, 0xFF	; 255
    3db6:	7f 4f       	sbci	r23, 0xFF	; 255
    3db8:	8c e2       	ldi	r24, 0x2C	; 44
    3dba:	54 c1       	rjmp	.+680    	; 0x4064 <__RODATA_PM_OFFSET__+0x64>
    3dbc:	8b 31       	cpi	r24, 0x1B	; 27
    3dbe:	c1 f4       	brne	.+48     	; 0x3df0 <m2m_wifi_cb+0x86>
    3dc0:	00 e0       	ldi	r16, 0x00	; 0
    3dc2:	28 e0       	ldi	r18, 0x08	; 8
    3dc4:	30 e0       	ldi	r19, 0x00	; 0
    3dc6:	ae 01       	movw	r20, r28
    3dc8:	4f 5f       	subi	r20, 0xFF	; 255
    3dca:	5f 4f       	sbci	r21, 0xFF	; 255
    3dcc:	c7 01       	movw	r24, r14
    3dce:	b6 01       	movw	r22, r12
    3dd0:	0e 94 cf 1d 	call	0x3b9e	; 0x3b9e <hif_receive>
    3dd4:	81 11       	cpse	r24, r1
    3dd6:	47 c1       	rjmp	.+654    	; 0x4066 <__RODATA_PM_OFFSET__+0x66>
    3dd8:	e0 91 33 2a 	lds	r30, 0x2A33	; 0x802a33 <gpfAppWifiCb>
    3ddc:	f0 91 34 2a 	lds	r31, 0x2A34	; 0x802a34 <gpfAppWifiCb+0x1>
    3de0:	30 97       	sbiw	r30, 0x00	; 0
    3de2:	09 f4       	brne	.+2      	; 0x3de6 <m2m_wifi_cb+0x7c>
    3de4:	40 c1       	rjmp	.+640    	; 0x4066 <__RODATA_PM_OFFSET__+0x66>
    3de6:	be 01       	movw	r22, r28
    3de8:	6f 5f       	subi	r22, 0xFF	; 255
    3dea:	7f 4f       	sbci	r23, 0xFF	; 255
    3dec:	8b e1       	ldi	r24, 0x1B	; 27
    3dee:	3a c1       	rjmp	.+628    	; 0x4064 <__RODATA_PM_OFFSET__+0x64>
    3df0:	86 30       	cpi	r24, 0x06	; 6
    3df2:	c1 f4       	brne	.+48     	; 0x3e24 <m2m_wifi_cb+0xba>
    3df4:	01 e0       	ldi	r16, 0x01	; 1
    3df6:	20 e3       	ldi	r18, 0x30	; 48
    3df8:	30 e0       	ldi	r19, 0x00	; 0
    3dfa:	ae 01       	movw	r20, r28
    3dfc:	4f 5f       	subi	r20, 0xFF	; 255
    3dfe:	5f 4f       	sbci	r21, 0xFF	; 255
    3e00:	c7 01       	movw	r24, r14
    3e02:	b6 01       	movw	r22, r12
    3e04:	0e 94 cf 1d 	call	0x3b9e	; 0x3b9e <hif_receive>
    3e08:	81 11       	cpse	r24, r1
    3e0a:	2d c1       	rjmp	.+602    	; 0x4066 <__RODATA_PM_OFFSET__+0x66>
    3e0c:	e0 91 33 2a 	lds	r30, 0x2A33	; 0x802a33 <gpfAppWifiCb>
    3e10:	f0 91 34 2a 	lds	r31, 0x2A34	; 0x802a34 <gpfAppWifiCb+0x1>
    3e14:	30 97       	sbiw	r30, 0x00	; 0
    3e16:	09 f4       	brne	.+2      	; 0x3e1a <m2m_wifi_cb+0xb0>
    3e18:	26 c1       	rjmp	.+588    	; 0x4066 <__RODATA_PM_OFFSET__+0x66>
    3e1a:	be 01       	movw	r22, r28
    3e1c:	6f 5f       	subi	r22, 0xFF	; 255
    3e1e:	7f 4f       	sbci	r23, 0xFF	; 255
    3e20:	86 e0       	ldi	r24, 0x06	; 6
    3e22:	20 c1       	rjmp	.+576    	; 0x4064 <__RODATA_PM_OFFSET__+0x64>
    3e24:	8e 30       	cpi	r24, 0x0E	; 14
    3e26:	09 f4       	brne	.+2      	; 0x3e2a <m2m_wifi_cb+0xc0>
    3e28:	1e c1       	rjmp	.+572    	; 0x4066 <__RODATA_PM_OFFSET__+0x66>
    3e2a:	82 33       	cpi	r24, 0x32	; 50
    3e2c:	c1 f4       	brne	.+48     	; 0x3e5e <m2m_wifi_cb+0xf4>
    3e2e:	00 e0       	ldi	r16, 0x00	; 0
    3e30:	24 e1       	ldi	r18, 0x14	; 20
    3e32:	30 e0       	ldi	r19, 0x00	; 0
    3e34:	ae 01       	movw	r20, r28
    3e36:	4f 5f       	subi	r20, 0xFF	; 255
    3e38:	5f 4f       	sbci	r21, 0xFF	; 255
    3e3a:	c7 01       	movw	r24, r14
    3e3c:	b6 01       	movw	r22, r12
    3e3e:	0e 94 cf 1d 	call	0x3b9e	; 0x3b9e <hif_receive>
    3e42:	81 11       	cpse	r24, r1
    3e44:	10 c1       	rjmp	.+544    	; 0x4066 <__RODATA_PM_OFFSET__+0x66>
    3e46:	e0 91 33 2a 	lds	r30, 0x2A33	; 0x802a33 <gpfAppWifiCb>
    3e4a:	f0 91 34 2a 	lds	r31, 0x2A34	; 0x802a34 <gpfAppWifiCb+0x1>
    3e4e:	30 97       	sbiw	r30, 0x00	; 0
    3e50:	09 f4       	brne	.+2      	; 0x3e54 <m2m_wifi_cb+0xea>
    3e52:	09 c1       	rjmp	.+530    	; 0x4066 <__RODATA_PM_OFFSET__+0x66>
    3e54:	be 01       	movw	r22, r28
    3e56:	6f 5f       	subi	r22, 0xFF	; 255
    3e58:	7f 4f       	sbci	r23, 0xFF	; 255
    3e5a:	82 e3       	ldi	r24, 0x32	; 50
    3e5c:	03 c1       	rjmp	.+518    	; 0x4064 <__RODATA_PM_OFFSET__+0x64>
    3e5e:	8f 32       	cpi	r24, 0x2F	; 47
    3e60:	09 f5       	brne	.+66     	; 0x3ea4 <m2m_wifi_cb+0x13a>
    3e62:	24 e6       	ldi	r18, 0x64	; 100
    3e64:	30 e0       	ldi	r19, 0x00	; 0
    3e66:	40 e0       	ldi	r20, 0x00	; 0
    3e68:	50 e0       	ldi	r21, 0x00	; 0
    3e6a:	60 e0       	ldi	r22, 0x00	; 0
    3e6c:	ce 01       	movw	r24, r28
    3e6e:	01 96       	adiw	r24, 0x01	; 1
    3e70:	0e 94 ac 1b 	call	0x3758	; 0x3758 <m2m_memset>
    3e74:	00 e0       	ldi	r16, 0x00	; 0
    3e76:	24 e6       	ldi	r18, 0x64	; 100
    3e78:	30 e0       	ldi	r19, 0x00	; 0
    3e7a:	ae 01       	movw	r20, r28
    3e7c:	4f 5f       	subi	r20, 0xFF	; 255
    3e7e:	5f 4f       	sbci	r21, 0xFF	; 255
    3e80:	c7 01       	movw	r24, r14
    3e82:	b6 01       	movw	r22, r12
    3e84:	0e 94 cf 1d 	call	0x3b9e	; 0x3b9e <hif_receive>
    3e88:	81 11       	cpse	r24, r1
    3e8a:	ed c0       	rjmp	.+474    	; 0x4066 <__RODATA_PM_OFFSET__+0x66>
    3e8c:	e0 91 33 2a 	lds	r30, 0x2A33	; 0x802a33 <gpfAppWifiCb>
    3e90:	f0 91 34 2a 	lds	r31, 0x2A34	; 0x802a34 <gpfAppWifiCb+0x1>
    3e94:	30 97       	sbiw	r30, 0x00	; 0
    3e96:	09 f4       	brne	.+2      	; 0x3e9a <m2m_wifi_cb+0x130>
    3e98:	e6 c0       	rjmp	.+460    	; 0x4066 <__RODATA_PM_OFFSET__+0x66>
    3e9a:	be 01       	movw	r22, r28
    3e9c:	6f 5f       	subi	r22, 0xFF	; 255
    3e9e:	7f 4f       	sbci	r23, 0xFF	; 255
    3ea0:	8f e2       	ldi	r24, 0x2F	; 47
    3ea2:	e0 c0       	rjmp	.+448    	; 0x4064 <__RODATA_PM_OFFSET__+0x64>
    3ea4:	84 33       	cpi	r24, 0x34	; 52
    3ea6:	b9 f4       	brne	.+46     	; 0x3ed6 <m2m_wifi_cb+0x16c>
    3ea8:	00 e0       	ldi	r16, 0x00	; 0
    3eaa:	24 e0       	ldi	r18, 0x04	; 4
    3eac:	30 e0       	ldi	r19, 0x00	; 0
    3eae:	ae 01       	movw	r20, r28
    3eb0:	4f 5f       	subi	r20, 0xFF	; 255
    3eb2:	5f 4f       	sbci	r21, 0xFF	; 255
    3eb4:	c7 01       	movw	r24, r14
    3eb6:	b6 01       	movw	r22, r12
    3eb8:	0e 94 cf 1d 	call	0x3b9e	; 0x3b9e <hif_receive>
    3ebc:	81 11       	cpse	r24, r1
    3ebe:	d3 c0       	rjmp	.+422    	; 0x4066 <__RODATA_PM_OFFSET__+0x66>
    3ec0:	e0 91 33 2a 	lds	r30, 0x2A33	; 0x802a33 <gpfAppWifiCb>
    3ec4:	f0 91 34 2a 	lds	r31, 0x2A34	; 0x802a34 <gpfAppWifiCb+0x1>
    3ec8:	30 97       	sbiw	r30, 0x00	; 0
    3eca:	09 f4       	brne	.+2      	; 0x3ece <m2m_wifi_cb+0x164>
    3ecc:	cc c0       	rjmp	.+408    	; 0x4066 <__RODATA_PM_OFFSET__+0x66>
    3ece:	60 e0       	ldi	r22, 0x00	; 0
    3ed0:	70 e0       	ldi	r23, 0x00	; 0
    3ed2:	84 e3       	ldi	r24, 0x34	; 52
    3ed4:	c7 c0       	rjmp	.+398    	; 0x4064 <__RODATA_PM_OFFSET__+0x64>
    3ed6:	81 31       	cpi	r24, 0x11	; 17
    3ed8:	e9 f4       	brne	.+58     	; 0x3f14 <m2m_wifi_cb+0x1aa>
    3eda:	10 92 35 2a 	sts	0x2A35, r1	; 0x802a35 <gu8scanInProgress>
    3ede:	00 e0       	ldi	r16, 0x00	; 0
    3ee0:	24 e0       	ldi	r18, 0x04	; 4
    3ee2:	30 e0       	ldi	r19, 0x00	; 0
    3ee4:	ae 01       	movw	r20, r28
    3ee6:	4f 5f       	subi	r20, 0xFF	; 255
    3ee8:	5f 4f       	sbci	r21, 0xFF	; 255
    3eea:	c7 01       	movw	r24, r14
    3eec:	b6 01       	movw	r22, r12
    3eee:	0e 94 cf 1d 	call	0x3b9e	; 0x3b9e <hif_receive>
    3ef2:	81 11       	cpse	r24, r1
    3ef4:	b8 c0       	rjmp	.+368    	; 0x4066 <__RODATA_PM_OFFSET__+0x66>
    3ef6:	89 81       	ldd	r24, Y+1	; 0x01
    3ef8:	80 93 36 2a 	sts	0x2A36, r24	; 0x802a36 <gu8ChNum>
    3efc:	e0 91 33 2a 	lds	r30, 0x2A33	; 0x802a33 <gpfAppWifiCb>
    3f00:	f0 91 34 2a 	lds	r31, 0x2A34	; 0x802a34 <gpfAppWifiCb+0x1>
    3f04:	30 97       	sbiw	r30, 0x00	; 0
    3f06:	09 f4       	brne	.+2      	; 0x3f0a <m2m_wifi_cb+0x1a0>
    3f08:	ae c0       	rjmp	.+348    	; 0x4066 <__RODATA_PM_OFFSET__+0x66>
    3f0a:	be 01       	movw	r22, r28
    3f0c:	6f 5f       	subi	r22, 0xFF	; 255
    3f0e:	7f 4f       	sbci	r23, 0xFF	; 255
    3f10:	81 e1       	ldi	r24, 0x11	; 17
    3f12:	a8 c0       	rjmp	.+336    	; 0x4064 <__RODATA_PM_OFFSET__+0x64>
    3f14:	83 31       	cpi	r24, 0x13	; 19
    3f16:	c1 f4       	brne	.+48     	; 0x3f48 <m2m_wifi_cb+0x1de>
    3f18:	00 e0       	ldi	r16, 0x00	; 0
    3f1a:	2c e2       	ldi	r18, 0x2C	; 44
    3f1c:	30 e0       	ldi	r19, 0x00	; 0
    3f1e:	ae 01       	movw	r20, r28
    3f20:	4f 5f       	subi	r20, 0xFF	; 255
    3f22:	5f 4f       	sbci	r21, 0xFF	; 255
    3f24:	c7 01       	movw	r24, r14
    3f26:	b6 01       	movw	r22, r12
    3f28:	0e 94 cf 1d 	call	0x3b9e	; 0x3b9e <hif_receive>
    3f2c:	81 11       	cpse	r24, r1
    3f2e:	9b c0       	rjmp	.+310    	; 0x4066 <__RODATA_PM_OFFSET__+0x66>
    3f30:	e0 91 33 2a 	lds	r30, 0x2A33	; 0x802a33 <gpfAppWifiCb>
    3f34:	f0 91 34 2a 	lds	r31, 0x2A34	; 0x802a34 <gpfAppWifiCb+0x1>
    3f38:	30 97       	sbiw	r30, 0x00	; 0
    3f3a:	09 f4       	brne	.+2      	; 0x3f3e <m2m_wifi_cb+0x1d4>
    3f3c:	94 c0       	rjmp	.+296    	; 0x4066 <__RODATA_PM_OFFSET__+0x66>
    3f3e:	be 01       	movw	r22, r28
    3f40:	6f 5f       	subi	r22, 0xFF	; 255
    3f42:	7f 4f       	sbci	r23, 0xFF	; 255
    3f44:	83 e1       	ldi	r24, 0x13	; 19
    3f46:	8e c0       	rjmp	.+284    	; 0x4064 <__RODATA_PM_OFFSET__+0x64>
    3f48:	84 30       	cpi	r24, 0x04	; 4
    3f4a:	c1 f4       	brne	.+48     	; 0x3f7c <m2m_wifi_cb+0x212>
    3f4c:	00 e0       	ldi	r16, 0x00	; 0
    3f4e:	24 e0       	ldi	r18, 0x04	; 4
    3f50:	30 e0       	ldi	r19, 0x00	; 0
    3f52:	ae 01       	movw	r20, r28
    3f54:	4f 5f       	subi	r20, 0xFF	; 255
    3f56:	5f 4f       	sbci	r21, 0xFF	; 255
    3f58:	c7 01       	movw	r24, r14
    3f5a:	b6 01       	movw	r22, r12
    3f5c:	0e 94 cf 1d 	call	0x3b9e	; 0x3b9e <hif_receive>
    3f60:	81 11       	cpse	r24, r1
    3f62:	81 c0       	rjmp	.+258    	; 0x4066 <__RODATA_PM_OFFSET__+0x66>
    3f64:	e0 91 33 2a 	lds	r30, 0x2A33	; 0x802a33 <gpfAppWifiCb>
    3f68:	f0 91 34 2a 	lds	r31, 0x2A34	; 0x802a34 <gpfAppWifiCb+0x1>
    3f6c:	30 97       	sbiw	r30, 0x00	; 0
    3f6e:	09 f4       	brne	.+2      	; 0x3f72 <m2m_wifi_cb+0x208>
    3f70:	7a c0       	rjmp	.+244    	; 0x4066 <__RODATA_PM_OFFSET__+0x66>
    3f72:	be 01       	movw	r22, r28
    3f74:	6f 5f       	subi	r22, 0xFF	; 255
    3f76:	7f 4f       	sbci	r23, 0xFF	; 255
    3f78:	84 e0       	ldi	r24, 0x04	; 4
    3f7a:	74 c0       	rjmp	.+232    	; 0x4064 <__RODATA_PM_OFFSET__+0x64>
    3f7c:	85 36       	cpi	r24, 0x65	; 101
    3f7e:	c1 f4       	brne	.+48     	; 0x3fb0 <m2m_wifi_cb+0x246>
    3f80:	00 e0       	ldi	r16, 0x00	; 0
    3f82:	24 e0       	ldi	r18, 0x04	; 4
    3f84:	30 e0       	ldi	r19, 0x00	; 0
    3f86:	ae 01       	movw	r20, r28
    3f88:	4f 5f       	subi	r20, 0xFF	; 255
    3f8a:	5f 4f       	sbci	r21, 0xFF	; 255
    3f8c:	c7 01       	movw	r24, r14
    3f8e:	b6 01       	movw	r22, r12
    3f90:	0e 94 cf 1d 	call	0x3b9e	; 0x3b9e <hif_receive>
    3f94:	81 11       	cpse	r24, r1
    3f96:	67 c0       	rjmp	.+206    	; 0x4066 <__RODATA_PM_OFFSET__+0x66>
    3f98:	e0 91 33 2a 	lds	r30, 0x2A33	; 0x802a33 <gpfAppWifiCb>
    3f9c:	f0 91 34 2a 	lds	r31, 0x2A34	; 0x802a34 <gpfAppWifiCb+0x1>
    3fa0:	30 97       	sbiw	r30, 0x00	; 0
    3fa2:	09 f4       	brne	.+2      	; 0x3fa6 <m2m_wifi_cb+0x23c>
    3fa4:	60 c0       	rjmp	.+192    	; 0x4066 <__RODATA_PM_OFFSET__+0x66>
    3fa6:	be 01       	movw	r22, r28
    3fa8:	6f 5f       	subi	r22, 0xFF	; 255
    3faa:	7f 4f       	sbci	r23, 0xFF	; 255
    3fac:	85 e6       	ldi	r24, 0x65	; 101
    3fae:	5a c0       	rjmp	.+180    	; 0x4064 <__RODATA_PM_OFFSET__+0x64>
    3fb0:	89 30       	cpi	r24, 0x09	; 9
    3fb2:	c1 f4       	brne	.+48     	; 0x3fe4 <m2m_wifi_cb+0x27a>
    3fb4:	01 e0       	ldi	r16, 0x01	; 1
    3fb6:	24 e6       	ldi	r18, 0x64	; 100
    3fb8:	30 e0       	ldi	r19, 0x00	; 0
    3fba:	ae 01       	movw	r20, r28
    3fbc:	4f 5f       	subi	r20, 0xFF	; 255
    3fbe:	5f 4f       	sbci	r21, 0xFF	; 255
    3fc0:	c7 01       	movw	r24, r14
    3fc2:	b6 01       	movw	r22, r12
    3fc4:	0e 94 cf 1d 	call	0x3b9e	; 0x3b9e <hif_receive>
    3fc8:	81 11       	cpse	r24, r1
    3fca:	4d c0       	rjmp	.+154    	; 0x4066 <__RODATA_PM_OFFSET__+0x66>
    3fcc:	e0 91 33 2a 	lds	r30, 0x2A33	; 0x802a33 <gpfAppWifiCb>
    3fd0:	f0 91 34 2a 	lds	r31, 0x2A34	; 0x802a34 <gpfAppWifiCb+0x1>
    3fd4:	30 97       	sbiw	r30, 0x00	; 0
    3fd6:	09 f4       	brne	.+2      	; 0x3fda <m2m_wifi_cb+0x270>
    3fd8:	46 c0       	rjmp	.+140    	; 0x4066 <__RODATA_PM_OFFSET__+0x66>
    3fda:	be 01       	movw	r22, r28
    3fdc:	6f 5f       	subi	r22, 0xFF	; 255
    3fde:	7f 4f       	sbci	r23, 0xFF	; 255
    3fe0:	89 e0       	ldi	r24, 0x09	; 9
    3fe2:	40 c0       	rjmp	.+128    	; 0x4064 <__RODATA_PM_OFFSET__+0x64>
    3fe4:	8a 32       	cpi	r24, 0x2A	; 42
    3fe6:	b9 f4       	brne	.+46     	; 0x4016 <__RODATA_PM_OFFSET__+0x16>
    3fe8:	01 e0       	ldi	r16, 0x01	; 1
    3fea:	24 e0       	ldi	r18, 0x04	; 4
    3fec:	30 e0       	ldi	r19, 0x00	; 0
    3fee:	ae 01       	movw	r20, r28
    3ff0:	4f 5f       	subi	r20, 0xFF	; 255
    3ff2:	5f 4f       	sbci	r21, 0xFF	; 255
    3ff4:	c7 01       	movw	r24, r14
    3ff6:	b6 01       	movw	r22, r12
    3ff8:	0e 94 cf 1d 	call	0x3b9e	; 0x3b9e <hif_receive>
    3ffc:	81 11       	cpse	r24, r1
    3ffe:	33 c0       	rjmp	.+102    	; 0x4066 <__RODATA_PM_OFFSET__+0x66>
    4000:	e0 91 33 2a 	lds	r30, 0x2A33	; 0x802a33 <gpfAppWifiCb>
    4004:	f0 91 34 2a 	lds	r31, 0x2A34	; 0x802a34 <gpfAppWifiCb+0x1>
    4008:	30 97       	sbiw	r30, 0x00	; 0
    400a:	69 f1       	breq	.+90     	; 0x4066 <__RODATA_PM_OFFSET__+0x66>
    400c:	be 01       	movw	r22, r28
    400e:	6f 5f       	subi	r22, 0xFF	; 255
    4010:	7f 4f       	sbci	r23, 0xFF	; 255
    4012:	8a e2       	ldi	r24, 0x2A	; 42
    4014:	27 c0       	rjmp	.+78     	; 0x4064 <__RODATA_PM_OFFSET__+0x64>
    4016:	80 32       	cpi	r24, 0x20	; 32
    4018:	31 f5       	brne	.+76     	; 0x4066 <__RODATA_PM_OFFSET__+0x66>
    401a:	00 e0       	ldi	r16, 0x00	; 0
    401c:	26 e0       	ldi	r18, 0x06	; 6
    401e:	30 e0       	ldi	r19, 0x00	; 0
    4020:	ae 01       	movw	r20, r28
    4022:	4f 5f       	subi	r20, 0xFF	; 255
    4024:	5f 4f       	sbci	r21, 0xFF	; 255
    4026:	c7 01       	movw	r24, r14
    4028:	b6 01       	movw	r22, r12
    402a:	0e 94 cf 1d 	call	0x3b9e	; 0x3b9e <hif_receive>
    402e:	81 11       	cpse	r24, r1
    4030:	1a c0       	rjmp	.+52     	; 0x4066 <__RODATA_PM_OFFSET__+0x66>
    4032:	2b 81       	ldd	r18, Y+3	; 0x03
    4034:	3c 81       	ldd	r19, Y+4	; 0x04
    4036:	49 81       	ldd	r20, Y+1	; 0x01
    4038:	5a 81       	ldd	r21, Y+2	; 0x02
    403a:	c7 01       	movw	r24, r14
    403c:	b6 01       	movw	r22, r12
    403e:	6a 5f       	subi	r22, 0xFA	; 250
    4040:	7f 4f       	sbci	r23, 0xFF	; 255
    4042:	8f 4f       	sbci	r24, 0xFF	; 255
    4044:	9f 4f       	sbci	r25, 0xFF	; 255
    4046:	01 e0       	ldi	r16, 0x01	; 1
    4048:	0e 94 cf 1d 	call	0x3b9e	; 0x3b9e <hif_receive>
    404c:	81 11       	cpse	r24, r1
    404e:	0b c0       	rjmp	.+22     	; 0x4066 <__RODATA_PM_OFFSET__+0x66>
    4050:	e0 91 33 2a 	lds	r30, 0x2A33	; 0x802a33 <gpfAppWifiCb>
    4054:	f0 91 34 2a 	lds	r31, 0x2A34	; 0x802a34 <gpfAppWifiCb+0x1>
    4058:	30 97       	sbiw	r30, 0x00	; 0
    405a:	29 f0       	breq	.+10     	; 0x4066 <__RODATA_PM_OFFSET__+0x66>
    405c:	be 01       	movw	r22, r28
    405e:	6f 5f       	subi	r22, 0xFF	; 255
    4060:	7f 4f       	sbci	r23, 0xFF	; 255
    4062:	80 e2       	ldi	r24, 0x20	; 32
    4064:	09 95       	icall
    4066:	cc 59       	subi	r28, 0x9C	; 156
    4068:	df 4f       	sbci	r29, 0xFF	; 255
    406a:	cd bf       	out	0x3d, r28	; 61
    406c:	de bf       	out	0x3e, r29	; 62
    406e:	df 91       	pop	r29
    4070:	cf 91       	pop	r28
    4072:	0f 91       	pop	r16
    4074:	ff 90       	pop	r15
    4076:	ef 90       	pop	r14
    4078:	df 90       	pop	r13
    407a:	cf 90       	pop	r12
    407c:	08 95       	ret

0000407e <m2m_wifi_init>:

sint8 m2m_wifi_init(tstrWifiInitParam *param)
{
    407e:	1f 93       	push	r17
    4080:	cf 93       	push	r28
    4082:	df 93       	push	r29
    4084:	cd b7       	in	r28, 0x3d	; 61
    4086:	de b7       	in	r29, 0x3e	; 62
    4088:	a7 97       	sbiw	r28, 0x27	; 39
    408a:	cd bf       	out	0x3d, r28	; 61
    408c:	de bf       	out	0x3e, r29	; 62
	tstrM2mRev strtmp;
	sint8      ret        = M2M_SUCCESS;
	uint8      u8WifiMode = M2M_WIFI_MODE_NORMAL;
    408e:	21 e0       	ldi	r18, 0x01	; 1
    4090:	2f a3       	std	Y+39, r18	; 0x27

	if (param == NULL) {
    4092:	00 97       	sbiw	r24, 0x00	; 0
    4094:	39 f1       	breq	.+78     	; 0x40e4 <m2m_wifi_init+0x66>
    4096:	fc 01       	movw	r30, r24
		ret = M2M_ERR_FAIL;
		goto _EXIT0;
	}

	gpfAppWifiCb = param->pfAppWifiCb;
    4098:	80 81       	ld	r24, Z
    409a:	91 81       	ldd	r25, Z+1	; 0x01
    409c:	80 93 33 2a 	sts	0x2A33, r24	; 0x802a33 <gpfAppWifiCb>
    40a0:	90 93 34 2a 	sts	0x2A34, r25	; 0x802a34 <gpfAppWifiCb+0x1>
#endif /* ETH_MODE */

#ifdef CONF_MGMT
	gpfAppMonCb = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
    40a4:	10 92 35 2a 	sts	0x2A35, r1	; 0x802a35 <gu8scanInProgress>
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
    40a8:	ce 01       	movw	r24, r28
    40aa:	87 96       	adiw	r24, 0x27	; 39
    40ac:	0e 94 52 25 	call	0x4aa4	; 0x4aa4 <nm_drv_init>
    40b0:	18 2f       	mov	r17, r24
	if (ret != M2M_SUCCESS)
    40b2:	81 11       	cpse	r24, r1
    40b4:	18 c0       	rjmp	.+48     	; 0x40e6 <m2m_wifi_init+0x68>
		goto _EXIT0;
	/* Initialize host interface module */
	ret = hif_init(NULL);
    40b6:	80 e0       	ldi	r24, 0x00	; 0
    40b8:	90 e0       	ldi	r25, 0x00	; 0
    40ba:	0e 94 2f 1c 	call	0x385e	; 0x385e <hif_init>
    40be:	18 2f       	mov	r17, r24
	if (ret != M2M_SUCCESS)
    40c0:	81 11       	cpse	r24, r1
    40c2:	0b c0       	rjmp	.+22     	; 0x40da <m2m_wifi_init+0x5c>
		goto _EXIT1;

	hif_register_cb(M2M_REQ_GROUP_WIFI, m2m_wifi_cb);
    40c4:	65 eb       	ldi	r22, 0xB5	; 181
    40c6:	7e e1       	ldi	r23, 0x1E	; 30
    40c8:	81 e0       	ldi	r24, 0x01	; 1
    40ca:	0e 94 6c 1e 	call	0x3cd8	; 0x3cd8 <hif_register_cb>

	ret = nm_get_firmware_full_info(&strtmp);
    40ce:	ce 01       	movw	r24, r28
    40d0:	01 96       	adiw	r24, 0x01	; 1
    40d2:	0e 94 b5 24 	call	0x496a	; 0x496a <nm_get_firmware_full_info>
    40d6:	18 2f       	mov	r17, r24
	M2M_INFO("Driver built at %s\t%s\n", __DATE__, __TIME__);
	if (M2M_ERR_FW_VER_MISMATCH == ret) {
		M2M_ERR("Mismatch Firmawre Version\n");
	}

	goto _EXIT0;
    40d8:	06 c0       	rjmp	.+12     	; 0x40e6 <m2m_wifi_init+0x68>

_EXIT1:
	nm_drv_deinit(NULL);
    40da:	80 e0       	ldi	r24, 0x00	; 0
    40dc:	90 e0       	ldi	r25, 0x00	; 0
    40de:	0e 94 80 25 	call	0x4b00	; 0x4b00 <nm_drv_deinit>
    40e2:	01 c0       	rjmp	.+2      	; 0x40e6 <m2m_wifi_init+0x68>
	tstrM2mRev strtmp;
	sint8      ret        = M2M_SUCCESS;
	uint8      u8WifiMode = M2M_WIFI_MODE_NORMAL;

	if (param == NULL) {
		ret = M2M_ERR_FAIL;
    40e4:	14 ef       	ldi	r17, 0xF4	; 244

_EXIT1:
	nm_drv_deinit(NULL);
_EXIT0:
	return ret;
}
    40e6:	81 2f       	mov	r24, r17
    40e8:	a7 96       	adiw	r28, 0x27	; 39
    40ea:	cd bf       	out	0x3d, r28	; 61
    40ec:	de bf       	out	0x3e, r29	; 62
    40ee:	df 91       	pop	r29
    40f0:	cf 91       	pop	r28
    40f2:	1f 91       	pop	r17
    40f4:	08 95       	ret

000040f6 <chip_apply_conf>:
	ret = cpu_halt();
	if (ret != M2M_SUCCESS)
		goto ERR1;
ERR1:
	return ret;
}
    40f6:	cf 92       	push	r12
    40f8:	df 92       	push	r13
    40fa:	ef 92       	push	r14
    40fc:	ff 92       	push	r15
    40fe:	cf 93       	push	r28
    4100:	df 93       	push	r29
    4102:	00 d0       	rcall	.+0      	; 0x4104 <chip_apply_conf+0xe>
    4104:	00 d0       	rcall	.+0      	; 0x4106 <chip_apply_conf+0x10>
    4106:	cd b7       	in	r28, 0x3d	; 61
    4108:	de b7       	in	r29, 0x3e	; 62
    410a:	6b 01       	movw	r12, r22
    410c:	7c 01       	movw	r14, r24
    410e:	68 94       	set
    4110:	d0 f8       	bld	r13, 0
    4112:	a7 01       	movw	r20, r14
    4114:	96 01       	movw	r18, r12
    4116:	60 ea       	ldi	r22, 0xA0	; 160
    4118:	74 e1       	ldi	r23, 0x14	; 20
    411a:	80 e0       	ldi	r24, 0x00	; 0
    411c:	90 e0       	ldi	r25, 0x00	; 0
    411e:	0e 94 b9 23 	call	0x4772	; 0x4772 <nm_write_reg>
    4122:	19 82       	std	Y+1, r1	; 0x01
    4124:	1a 82       	std	Y+2, r1	; 0x02
    4126:	1b 82       	std	Y+3, r1	; 0x03
    4128:	1c 82       	std	Y+4, r1	; 0x04
    412a:	ae 01       	movw	r20, r28
    412c:	4f 5f       	subi	r20, 0xFF	; 255
    412e:	5f 4f       	sbci	r21, 0xFF	; 255
    4130:	60 ea       	ldi	r22, 0xA0	; 160
    4132:	74 e1       	ldi	r23, 0x14	; 20
    4134:	80 e0       	ldi	r24, 0x00	; 0
    4136:	90 e0       	ldi	r25, 0x00	; 0
    4138:	0e 94 b7 23 	call	0x476e	; 0x476e <nm_read_reg_with_ret>
    413c:	81 11       	cpse	r24, r1
    413e:	e9 cf       	rjmp	.-46     	; 0x4112 <chip_apply_conf+0x1c>
    4140:	89 81       	ldd	r24, Y+1	; 0x01
    4142:	9a 81       	ldd	r25, Y+2	; 0x02
    4144:	ab 81       	ldd	r26, Y+3	; 0x03
    4146:	bc 81       	ldd	r27, Y+4	; 0x04
    4148:	c8 16       	cp	r12, r24
    414a:	d9 06       	cpc	r13, r25
    414c:	ea 06       	cpc	r14, r26
    414e:	fb 06       	cpc	r15, r27
    4150:	01 f7       	brne	.-64     	; 0x4112 <chip_apply_conf+0x1c>
    4152:	80 e0       	ldi	r24, 0x00	; 0
    4154:	24 96       	adiw	r28, 0x04	; 4
    4156:	cd bf       	out	0x3d, r28	; 61
    4158:	de bf       	out	0x3e, r29	; 62
    415a:	df 91       	pop	r29
    415c:	cf 91       	pop	r28
    415e:	ff 90       	pop	r15
    4160:	ef 90       	pop	r14
    4162:	df 90       	pop	r13
    4164:	cf 90       	pop	r12
    4166:	08 95       	ret

00004168 <enable_interrupts>:
    4168:	cf 93       	push	r28
    416a:	df 93       	push	r29
    416c:	00 d0       	rcall	.+0      	; 0x416e <enable_interrupts+0x6>
    416e:	00 d0       	rcall	.+0      	; 0x4170 <enable_interrupts+0x8>
    4170:	cd b7       	in	r28, 0x3d	; 61
    4172:	de b7       	in	r29, 0x3e	; 62
    4174:	19 82       	std	Y+1, r1	; 0x01
    4176:	1a 82       	std	Y+2, r1	; 0x02
    4178:	1b 82       	std	Y+3, r1	; 0x03
    417a:	1c 82       	std	Y+4, r1	; 0x04
    417c:	ae 01       	movw	r20, r28
    417e:	4f 5f       	subi	r20, 0xFF	; 255
    4180:	5f 4f       	sbci	r21, 0xFF	; 255
    4182:	68 e0       	ldi	r22, 0x08	; 8
    4184:	74 e1       	ldi	r23, 0x14	; 20
    4186:	80 e0       	ldi	r24, 0x00	; 0
    4188:	90 e0       	ldi	r25, 0x00	; 0
    418a:	0e 94 b7 23 	call	0x476e	; 0x476e <nm_read_reg_with_ret>
    418e:	81 11       	cpse	r24, r1
    4190:	2f c0       	rjmp	.+94     	; 0x41f0 <enable_interrupts+0x88>
    4192:	89 81       	ldd	r24, Y+1	; 0x01
    4194:	9a 81       	ldd	r25, Y+2	; 0x02
    4196:	ab 81       	ldd	r26, Y+3	; 0x03
    4198:	bc 81       	ldd	r27, Y+4	; 0x04
    419a:	9c 01       	movw	r18, r24
    419c:	ad 01       	movw	r20, r26
    419e:	31 60       	ori	r19, 0x01	; 1
    41a0:	29 83       	std	Y+1, r18	; 0x01
    41a2:	3a 83       	std	Y+2, r19	; 0x02
    41a4:	4b 83       	std	Y+3, r20	; 0x03
    41a6:	5c 83       	std	Y+4, r21	; 0x04
    41a8:	68 e0       	ldi	r22, 0x08	; 8
    41aa:	74 e1       	ldi	r23, 0x14	; 20
    41ac:	80 e0       	ldi	r24, 0x00	; 0
    41ae:	90 e0       	ldi	r25, 0x00	; 0
    41b0:	0e 94 b9 23 	call	0x4772	; 0x4772 <nm_write_reg>
    41b4:	81 11       	cpse	r24, r1
    41b6:	1c c0       	rjmp	.+56     	; 0x41f0 <enable_interrupts+0x88>
    41b8:	ae 01       	movw	r20, r28
    41ba:	4f 5f       	subi	r20, 0xFF	; 255
    41bc:	5f 4f       	sbci	r21, 0xFF	; 255
    41be:	60 e0       	ldi	r22, 0x00	; 0
    41c0:	7a e1       	ldi	r23, 0x1A	; 26
    41c2:	80 e0       	ldi	r24, 0x00	; 0
    41c4:	90 e0       	ldi	r25, 0x00	; 0
    41c6:	0e 94 b7 23 	call	0x476e	; 0x476e <nm_read_reg_with_ret>
    41ca:	81 11       	cpse	r24, r1
    41cc:	11 c0       	rjmp	.+34     	; 0x41f0 <enable_interrupts+0x88>
    41ce:	89 81       	ldd	r24, Y+1	; 0x01
    41d0:	9a 81       	ldd	r25, Y+2	; 0x02
    41d2:	ab 81       	ldd	r26, Y+3	; 0x03
    41d4:	bc 81       	ldd	r27, Y+4	; 0x04
    41d6:	9c 01       	movw	r18, r24
    41d8:	ad 01       	movw	r20, r26
    41da:	41 60       	ori	r20, 0x01	; 1
    41dc:	29 83       	std	Y+1, r18	; 0x01
    41de:	3a 83       	std	Y+2, r19	; 0x02
    41e0:	4b 83       	std	Y+3, r20	; 0x03
    41e2:	5c 83       	std	Y+4, r21	; 0x04
    41e4:	60 e0       	ldi	r22, 0x00	; 0
    41e6:	7a e1       	ldi	r23, 0x1A	; 26
    41e8:	80 e0       	ldi	r24, 0x00	; 0
    41ea:	90 e0       	ldi	r25, 0x00	; 0
    41ec:	0e 94 b9 23 	call	0x4772	; 0x4772 <nm_write_reg>
    41f0:	24 96       	adiw	r28, 0x04	; 4
    41f2:	cd bf       	out	0x3d, r28	; 61
    41f4:	de bf       	out	0x3e, r29	; 62
    41f6:	df 91       	pop	r29
    41f8:	cf 91       	pop	r28
    41fa:	08 95       	ret

000041fc <nmi_get_chipid>:
    41fc:	cf 92       	push	r12
    41fe:	df 92       	push	r13
    4200:	ef 92       	push	r14
    4202:	ff 92       	push	r15
    4204:	cf 93       	push	r28
    4206:	df 93       	push	r29
    4208:	00 d0       	rcall	.+0      	; 0x420a <nmi_get_chipid+0xe>
    420a:	00 d0       	rcall	.+0      	; 0x420c <nmi_get_chipid+0x10>
    420c:	cd b7       	in	r28, 0x3d	; 61
    420e:	de b7       	in	r29, 0x3e	; 62
    4210:	c0 90 37 2a 	lds	r12, 0x2A37	; 0x802a37 <chipid.2327>
    4214:	d0 90 38 2a 	lds	r13, 0x2A38	; 0x802a38 <chipid.2327+0x1>
    4218:	e0 90 39 2a 	lds	r14, 0x2A39	; 0x802a39 <chipid.2327+0x2>
    421c:	f0 90 3a 2a 	lds	r15, 0x2A3A	; 0x802a3a <chipid.2327+0x3>
    4220:	c1 14       	cp	r12, r1
    4222:	d1 04       	cpc	r13, r1
    4224:	e1 04       	cpc	r14, r1
    4226:	f1 04       	cpc	r15, r1
    4228:	09 f0       	breq	.+2      	; 0x422c <nmi_get_chipid+0x30>
    422a:	81 c0       	rjmp	.+258    	; 0x432e <nmi_get_chipid+0x132>
    422c:	47 e3       	ldi	r20, 0x37	; 55
    422e:	5a e2       	ldi	r21, 0x2A	; 42
    4230:	60 e0       	ldi	r22, 0x00	; 0
    4232:	70 e1       	ldi	r23, 0x10	; 16
    4234:	80 e0       	ldi	r24, 0x00	; 0
    4236:	90 e0       	ldi	r25, 0x00	; 0
    4238:	0e 94 b7 23 	call	0x476e	; 0x476e <nm_read_reg_with_ret>
    423c:	88 23       	and	r24, r24
    423e:	49 f0       	breq	.+18     	; 0x4252 <nmi_get_chipid+0x56>
    4240:	10 92 37 2a 	sts	0x2A37, r1	; 0x802a37 <chipid.2327>
    4244:	10 92 38 2a 	sts	0x2A38, r1	; 0x802a38 <chipid.2327+0x1>
    4248:	10 92 39 2a 	sts	0x2A39, r1	; 0x802a39 <chipid.2327+0x2>
    424c:	10 92 3a 2a 	sts	0x2A3A, r1	; 0x802a3a <chipid.2327+0x3>
    4250:	76 c0       	rjmp	.+236    	; 0x433e <nmi_get_chipid+0x142>
    4252:	ae 01       	movw	r20, r28
    4254:	4f 5f       	subi	r20, 0xFF	; 255
    4256:	5f 4f       	sbci	r21, 0xFF	; 255
    4258:	64 ef       	ldi	r22, 0xF4	; 244
    425a:	73 e1       	ldi	r23, 0x13	; 19
    425c:	80 e0       	ldi	r24, 0x00	; 0
    425e:	90 e0       	ldi	r25, 0x00	; 0
    4260:	0e 94 b7 23 	call	0x476e	; 0x476e <nm_read_reg_with_ret>
    4264:	81 11       	cpse	r24, r1
    4266:	ec cf       	rjmp	.-40     	; 0x4240 <nmi_get_chipid+0x44>
    4268:	80 91 37 2a 	lds	r24, 0x2A37	; 0x802a37 <chipid.2327>
    426c:	90 91 38 2a 	lds	r25, 0x2A38	; 0x802a38 <chipid.2327+0x1>
    4270:	a0 91 39 2a 	lds	r26, 0x2A39	; 0x802a39 <chipid.2327+0x2>
    4274:	b0 91 3a 2a 	lds	r27, 0x2A3A	; 0x802a3a <chipid.2327+0x3>
    4278:	80 3a       	cpi	r24, 0xA0	; 160
    427a:	22 e0       	ldi	r18, 0x02	; 2
    427c:	92 07       	cpc	r25, r18
    427e:	20 e1       	ldi	r18, 0x10	; 16
    4280:	a2 07       	cpc	r26, r18
    4282:	b1 05       	cpc	r27, r1
    4284:	69 f4       	brne	.+26     	; 0x42a0 <nmi_get_chipid+0xa4>
    4286:	89 81       	ldd	r24, Y+1	; 0x01
    4288:	9a 81       	ldd	r25, Y+2	; 0x02
    428a:	ab 81       	ldd	r26, Y+3	; 0x03
    428c:	bc 81       	ldd	r27, Y+4	; 0x04
    428e:	01 97       	sbiw	r24, 0x01	; 1
    4290:	a1 05       	cpc	r26, r1
    4292:	b1 05       	cpc	r27, r1
    4294:	d1 f1       	breq	.+116    	; 0x430a <nmi_get_chipid+0x10e>
    4296:	81 ea       	ldi	r24, 0xA1	; 161
    4298:	92 e0       	ldi	r25, 0x02	; 2
    429a:	a0 e1       	ldi	r26, 0x10	; 16
    429c:	b0 e0       	ldi	r27, 0x00	; 0
    429e:	18 c0       	rjmp	.+48     	; 0x42d0 <nmi_get_chipid+0xd4>
    42a0:	80 3b       	cpi	r24, 0xB0	; 176
    42a2:	22 e0       	ldi	r18, 0x02	; 2
    42a4:	92 07       	cpc	r25, r18
    42a6:	20 e1       	ldi	r18, 0x10	; 16
    42a8:	a2 07       	cpc	r26, r18
    42aa:	b1 05       	cpc	r27, r1
    42ac:	f9 f4       	brne	.+62     	; 0x42ec <nmi_get_chipid+0xf0>
    42ae:	89 81       	ldd	r24, Y+1	; 0x01
    42b0:	9a 81       	ldd	r25, Y+2	; 0x02
    42b2:	ab 81       	ldd	r26, Y+3	; 0x03
    42b4:	bc 81       	ldd	r27, Y+4	; 0x04
    42b6:	83 30       	cpi	r24, 0x03	; 3
    42b8:	91 05       	cpc	r25, r1
    42ba:	a1 05       	cpc	r26, r1
    42bc:	b1 05       	cpc	r27, r1
    42be:	29 f1       	breq	.+74     	; 0x430a <nmi_get_chipid+0x10e>
    42c0:	04 97       	sbiw	r24, 0x04	; 4
    42c2:	a1 05       	cpc	r26, r1
    42c4:	b1 05       	cpc	r27, r1
    42c6:	69 f4       	brne	.+26     	; 0x42e2 <nmi_get_chipid+0xe6>
    42c8:	81 eb       	ldi	r24, 0xB1	; 177
    42ca:	92 e0       	ldi	r25, 0x02	; 2
    42cc:	a0 e1       	ldi	r26, 0x10	; 16
    42ce:	b0 e0       	ldi	r27, 0x00	; 0
    42d0:	80 93 37 2a 	sts	0x2A37, r24	; 0x802a37 <chipid.2327>
    42d4:	90 93 38 2a 	sts	0x2A38, r25	; 0x802a38 <chipid.2327+0x1>
    42d8:	a0 93 39 2a 	sts	0x2A39, r26	; 0x802a39 <chipid.2327+0x2>
    42dc:	b0 93 3a 2a 	sts	0x2A3A, r27	; 0x802a3a <chipid.2327+0x3>
    42e0:	14 c0       	rjmp	.+40     	; 0x430a <nmi_get_chipid+0x10e>
    42e2:	82 eb       	ldi	r24, 0xB2	; 178
    42e4:	92 e0       	ldi	r25, 0x02	; 2
    42e6:	a0 e1       	ldi	r26, 0x10	; 16
    42e8:	b0 e0       	ldi	r27, 0x00	; 0
    42ea:	f2 cf       	rjmp	.-28     	; 0x42d0 <nmi_get_chipid+0xd4>
    42ec:	80 3f       	cpi	r24, 0xF0	; 240
    42ee:	91 05       	cpc	r25, r1
    42f0:	a0 41       	sbci	r26, 0x10	; 16
    42f2:	b1 05       	cpc	r27, r1
    42f4:	51 f4       	brne	.+20     	; 0x430a <nmi_get_chipid+0x10e>
    42f6:	47 e3       	ldi	r20, 0x37	; 55
    42f8:	5a e2       	ldi	r21, 0x2A	; 42
    42fa:	60 e0       	ldi	r22, 0x00	; 0
    42fc:	70 e0       	ldi	r23, 0x00	; 0
    42fe:	8b e3       	ldi	r24, 0x3B	; 59
    4300:	90 e0       	ldi	r25, 0x00	; 0
    4302:	0e 94 b7 23 	call	0x476e	; 0x476e <nm_read_reg_with_ret>
    4306:	81 11       	cpse	r24, r1
    4308:	9b cf       	rjmp	.-202    	; 0x4240 <nmi_get_chipid+0x44>
    430a:	80 91 37 2a 	lds	r24, 0x2A37	; 0x802a37 <chipid.2327>
    430e:	90 91 38 2a 	lds	r25, 0x2A38	; 0x802a38 <chipid.2327+0x1>
    4312:	a0 91 39 2a 	lds	r26, 0x2A39	; 0x802a39 <chipid.2327+0x2>
    4316:	b0 91 3a 2a 	lds	r27, 0x2A3A	; 0x802a3a <chipid.2327+0x3>
    431a:	a0 7f       	andi	r26, 0xF0	; 240
    431c:	a5 60       	ori	r26, 0x05	; 5
    431e:	80 93 37 2a 	sts	0x2A37, r24	; 0x802a37 <chipid.2327>
    4322:	90 93 38 2a 	sts	0x2A38, r25	; 0x802a38 <chipid.2327+0x1>
    4326:	a0 93 39 2a 	sts	0x2A39, r26	; 0x802a39 <chipid.2327+0x2>
    432a:	b0 93 3a 2a 	sts	0x2A3A, r27	; 0x802a3a <chipid.2327+0x3>
    432e:	c0 90 37 2a 	lds	r12, 0x2A37	; 0x802a37 <chipid.2327>
    4332:	d0 90 38 2a 	lds	r13, 0x2A38	; 0x802a38 <chipid.2327+0x1>
    4336:	e0 90 39 2a 	lds	r14, 0x2A39	; 0x802a39 <chipid.2327+0x2>
    433a:	f0 90 3a 2a 	lds	r15, 0x2A3A	; 0x802a3a <chipid.2327+0x3>
    433e:	c7 01       	movw	r24, r14
    4340:	b6 01       	movw	r22, r12
    4342:	24 96       	adiw	r28, 0x04	; 4
    4344:	cd bf       	out	0x3d, r28	; 61
    4346:	de bf       	out	0x3e, r29	; 62
    4348:	df 91       	pop	r29
    434a:	cf 91       	pop	r28
    434c:	ff 90       	pop	r15
    434e:	ef 90       	pop	r14
    4350:	df 90       	pop	r13
    4352:	cf 90       	pop	r12
    4354:	08 95       	ret

00004356 <chip_sleep>:
    4356:	cf 93       	push	r28
    4358:	df 93       	push	r29
    435a:	00 d0       	rcall	.+0      	; 0x435c <chip_sleep+0x6>
    435c:	00 d0       	rcall	.+0      	; 0x435e <chip_sleep+0x8>
    435e:	cd b7       	in	r28, 0x3d	; 61
    4360:	de b7       	in	r29, 0x3e	; 62
    4362:	ae 01       	movw	r20, r28
    4364:	4f 5f       	subi	r20, 0xFF	; 255
    4366:	5f 4f       	sbci	r21, 0xFF	; 255
    4368:	60 e1       	ldi	r22, 0x10	; 16
    436a:	70 e0       	ldi	r23, 0x00	; 0
    436c:	80 e0       	ldi	r24, 0x00	; 0
    436e:	90 e0       	ldi	r25, 0x00	; 0
    4370:	0e 94 b7 23 	call	0x476e	; 0x476e <nm_read_reg_with_ret>
    4374:	81 11       	cpse	r24, r1
    4376:	43 c0       	rjmp	.+134    	; 0x43fe <chip_sleep+0xa8>
    4378:	89 81       	ldd	r24, Y+1	; 0x01
    437a:	80 fd       	sbrc	r24, 0
    437c:	f2 cf       	rjmp	.-28     	; 0x4362 <chip_sleep+0xc>
    437e:	ae 01       	movw	r20, r28
    4380:	4f 5f       	subi	r20, 0xFF	; 255
    4382:	5f 4f       	sbci	r21, 0xFF	; 255
    4384:	61 e0       	ldi	r22, 0x01	; 1
    4386:	70 e0       	ldi	r23, 0x00	; 0
    4388:	80 e0       	ldi	r24, 0x00	; 0
    438a:	90 e0       	ldi	r25, 0x00	; 0
    438c:	0e 94 b7 23 	call	0x476e	; 0x476e <nm_read_reg_with_ret>
    4390:	81 11       	cpse	r24, r1
    4392:	35 c0       	rjmp	.+106    	; 0x43fe <chip_sleep+0xa8>
    4394:	89 81       	ldd	r24, Y+1	; 0x01
    4396:	9a 81       	ldd	r25, Y+2	; 0x02
    4398:	ab 81       	ldd	r26, Y+3	; 0x03
    439a:	bc 81       	ldd	r27, Y+4	; 0x04
    439c:	81 fd       	sbrc	r24, 1
    439e:	0c c0       	rjmp	.+24     	; 0x43b8 <chip_sleep+0x62>
    43a0:	ae 01       	movw	r20, r28
    43a2:	4f 5f       	subi	r20, 0xFF	; 255
    43a4:	5f 4f       	sbci	r21, 0xFF	; 255
    43a6:	6b e0       	ldi	r22, 0x0B	; 11
    43a8:	70 e0       	ldi	r23, 0x00	; 0
    43aa:	80 e0       	ldi	r24, 0x00	; 0
    43ac:	90 e0       	ldi	r25, 0x00	; 0
    43ae:	0e 94 b7 23 	call	0x476e	; 0x476e <nm_read_reg_with_ret>
    43b2:	88 23       	and	r24, r24
    43b4:	89 f0       	breq	.+34     	; 0x43d8 <chip_sleep+0x82>
    43b6:	23 c0       	rjmp	.+70     	; 0x43fe <chip_sleep+0xa8>
    43b8:	9c 01       	movw	r18, r24
    43ba:	ad 01       	movw	r20, r26
    43bc:	2d 7f       	andi	r18, 0xFD	; 253
    43be:	29 83       	std	Y+1, r18	; 0x01
    43c0:	3a 83       	std	Y+2, r19	; 0x02
    43c2:	4b 83       	std	Y+3, r20	; 0x03
    43c4:	5c 83       	std	Y+4, r21	; 0x04
    43c6:	61 e0       	ldi	r22, 0x01	; 1
    43c8:	70 e0       	ldi	r23, 0x00	; 0
    43ca:	80 e0       	ldi	r24, 0x00	; 0
    43cc:	90 e0       	ldi	r25, 0x00	; 0
    43ce:	0e 94 b9 23 	call	0x4772	; 0x4772 <nm_write_reg>
    43d2:	88 23       	and	r24, r24
    43d4:	29 f3       	breq	.-54     	; 0x43a0 <chip_sleep+0x4a>
    43d6:	13 c0       	rjmp	.+38     	; 0x43fe <chip_sleep+0xa8>
    43d8:	49 81       	ldd	r20, Y+1	; 0x01
    43da:	5a 81       	ldd	r21, Y+2	; 0x02
    43dc:	6b 81       	ldd	r22, Y+3	; 0x03
    43de:	7c 81       	ldd	r23, Y+4	; 0x04
    43e0:	40 ff       	sbrs	r20, 0
    43e2:	0d c0       	rjmp	.+26     	; 0x43fe <chip_sleep+0xa8>
    43e4:	9a 01       	movw	r18, r20
    43e6:	ab 01       	movw	r20, r22
    43e8:	2e 7f       	andi	r18, 0xFE	; 254
    43ea:	29 83       	std	Y+1, r18	; 0x01
    43ec:	3a 83       	std	Y+2, r19	; 0x02
    43ee:	4b 83       	std	Y+3, r20	; 0x03
    43f0:	5c 83       	std	Y+4, r21	; 0x04
    43f2:	6b e0       	ldi	r22, 0x0B	; 11
    43f4:	70 e0       	ldi	r23, 0x00	; 0
    43f6:	80 e0       	ldi	r24, 0x00	; 0
    43f8:	90 e0       	ldi	r25, 0x00	; 0
    43fa:	0e 94 b9 23 	call	0x4772	; 0x4772 <nm_write_reg>
    43fe:	24 96       	adiw	r28, 0x04	; 4
    4400:	cd bf       	out	0x3d, r28	; 61
    4402:	de bf       	out	0x3e, r29	; 62
    4404:	df 91       	pop	r29
    4406:	cf 91       	pop	r28
    4408:	08 95       	ret

0000440a <chip_wake>:
    440a:	ef 92       	push	r14
    440c:	ff 92       	push	r15
    440e:	1f 93       	push	r17
    4410:	cf 93       	push	r28
    4412:	df 93       	push	r29
    4414:	cd b7       	in	r28, 0x3d	; 61
    4416:	de b7       	in	r29, 0x3e	; 62
    4418:	28 97       	sbiw	r28, 0x08	; 8
    441a:	cd bf       	out	0x3d, r28	; 61
    441c:	de bf       	out	0x3e, r29	; 62
    441e:	1d 82       	std	Y+5, r1	; 0x05
    4420:	1e 82       	std	Y+6, r1	; 0x06
    4422:	1f 82       	std	Y+7, r1	; 0x07
    4424:	18 86       	std	Y+8, r1	; 0x08
    4426:	19 82       	std	Y+1, r1	; 0x01
    4428:	1a 82       	std	Y+2, r1	; 0x02
    442a:	1b 82       	std	Y+3, r1	; 0x03
    442c:	1c 82       	std	Y+4, r1	; 0x04
    442e:	ae 01       	movw	r20, r28
    4430:	4b 5f       	subi	r20, 0xFB	; 251
    4432:	5f 4f       	sbci	r21, 0xFF	; 255
    4434:	6b e0       	ldi	r22, 0x0B	; 11
    4436:	70 e0       	ldi	r23, 0x00	; 0
    4438:	80 e0       	ldi	r24, 0x00	; 0
    443a:	90 e0       	ldi	r25, 0x00	; 0
    443c:	0e 94 b7 23 	call	0x476e	; 0x476e <nm_read_reg_with_ret>
    4440:	18 2f       	mov	r17, r24
    4442:	81 11       	cpse	r24, r1
    4444:	56 c0       	rjmp	.+172    	; 0x44f2 <chip_wake+0xe8>
    4446:	8d 81       	ldd	r24, Y+5	; 0x05
    4448:	9e 81       	ldd	r25, Y+6	; 0x06
    444a:	af 81       	ldd	r26, Y+7	; 0x07
    444c:	b8 85       	ldd	r27, Y+8	; 0x08
    444e:	80 ff       	sbrs	r24, 0
    4450:	0d c0       	rjmp	.+26     	; 0x446c <chip_wake+0x62>
    4452:	ae 01       	movw	r20, r28
    4454:	4b 5f       	subi	r20, 0xFB	; 251
    4456:	5f 4f       	sbci	r21, 0xFF	; 255
    4458:	61 e0       	ldi	r22, 0x01	; 1
    445a:	70 e0       	ldi	r23, 0x00	; 0
    445c:	80 e0       	ldi	r24, 0x00	; 0
    445e:	90 e0       	ldi	r25, 0x00	; 0
    4460:	0e 94 b7 23 	call	0x476e	; 0x476e <nm_read_reg_with_ret>
    4464:	18 2f       	mov	r17, r24
    4466:	88 23       	and	r24, r24
    4468:	71 f0       	breq	.+28     	; 0x4486 <chip_wake+0x7c>
    446a:	43 c0       	rjmp	.+134    	; 0x44f2 <chip_wake+0xe8>
    446c:	9c 01       	movw	r18, r24
    446e:	ad 01       	movw	r20, r26
    4470:	21 60       	ori	r18, 0x01	; 1
    4472:	6b e0       	ldi	r22, 0x0B	; 11
    4474:	70 e0       	ldi	r23, 0x00	; 0
    4476:	80 e0       	ldi	r24, 0x00	; 0
    4478:	90 e0       	ldi	r25, 0x00	; 0
    447a:	0e 94 b9 23 	call	0x4772	; 0x4772 <nm_write_reg>
    447e:	18 2f       	mov	r17, r24
    4480:	88 23       	and	r24, r24
    4482:	39 f3       	breq	.-50     	; 0x4452 <chip_wake+0x48>
    4484:	36 c0       	rjmp	.+108    	; 0x44f2 <chip_wake+0xe8>
    4486:	8d 81       	ldd	r24, Y+5	; 0x05
    4488:	9e 81       	ldd	r25, Y+6	; 0x06
    448a:	af 81       	ldd	r26, Y+7	; 0x07
    448c:	b8 85       	ldd	r27, Y+8	; 0x08
    448e:	81 ff       	sbrs	r24, 1
    4490:	03 c0       	rjmp	.+6      	; 0x4498 <chip_wake+0x8e>
    4492:	e1 2c       	mov	r14, r1
    4494:	f1 2c       	mov	r15, r1
    4496:	0d c0       	rjmp	.+26     	; 0x44b2 <chip_wake+0xa8>
    4498:	9c 01       	movw	r18, r24
    449a:	ad 01       	movw	r20, r26
    449c:	22 60       	ori	r18, 0x02	; 2
    449e:	61 e0       	ldi	r22, 0x01	; 1
    44a0:	70 e0       	ldi	r23, 0x00	; 0
    44a2:	80 e0       	ldi	r24, 0x00	; 0
    44a4:	90 e0       	ldi	r25, 0x00	; 0
    44a6:	0e 94 b9 23 	call	0x4772	; 0x4772 <nm_write_reg>
    44aa:	18 2f       	mov	r17, r24
    44ac:	88 23       	and	r24, r24
    44ae:	89 f3       	breq	.-30     	; 0x4492 <chip_wake+0x88>
    44b0:	20 c0       	rjmp	.+64     	; 0x44f2 <chip_wake+0xe8>
    44b2:	ae 01       	movw	r20, r28
    44b4:	4f 5f       	subi	r20, 0xFF	; 255
    44b6:	5f 4f       	sbci	r21, 0xFF	; 255
    44b8:	6f e0       	ldi	r22, 0x0F	; 15
    44ba:	70 e0       	ldi	r23, 0x00	; 0
    44bc:	80 e0       	ldi	r24, 0x00	; 0
    44be:	90 e0       	ldi	r25, 0x00	; 0
    44c0:	0e 94 b7 23 	call	0x476e	; 0x476e <nm_read_reg_with_ret>
    44c4:	18 2f       	mov	r17, r24
    44c6:	81 11       	cpse	r24, r1
    44c8:	14 c0       	rjmp	.+40     	; 0x44f2 <chip_wake+0xe8>
    44ca:	89 81       	ldd	r24, Y+1	; 0x01
    44cc:	82 fd       	sbrc	r24, 2
    44ce:	0f c0       	rjmp	.+30     	; 0x44ee <chip_wake+0xe4>
    44d0:	62 e0       	ldi	r22, 0x02	; 2
    44d2:	70 e0       	ldi	r23, 0x00	; 0
    44d4:	80 e0       	ldi	r24, 0x00	; 0
    44d6:	90 e0       	ldi	r25, 0x00	; 0
    44d8:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <nm_bsp_sleep>
    44dc:	8f ef       	ldi	r24, 0xFF	; 255
    44de:	e8 1a       	sub	r14, r24
    44e0:	f8 0a       	sbc	r15, r24
    44e2:	85 e0       	ldi	r24, 0x05	; 5
    44e4:	e8 16       	cp	r14, r24
    44e6:	f1 04       	cpc	r15, r1
    44e8:	21 f7       	brne	.-56     	; 0x44b2 <chip_wake+0xa8>
    44ea:	1c ef       	ldi	r17, 0xFC	; 252
    44ec:	02 c0       	rjmp	.+4      	; 0x44f2 <chip_wake+0xe8>
    44ee:	0e 94 b3 23 	call	0x4766	; 0x4766 <nm_bus_reset>
    44f2:	81 2f       	mov	r24, r17
    44f4:	28 96       	adiw	r28, 0x08	; 8
    44f6:	cd bf       	out	0x3d, r28	; 61
    44f8:	de bf       	out	0x3e, r29	; 62
    44fa:	df 91       	pop	r29
    44fc:	cf 91       	pop	r28
    44fe:	1f 91       	pop	r17
    4500:	ff 90       	pop	r15
    4502:	ef 90       	pop	r14
    4504:	08 95       	ret

00004506 <wait_for_bootrom>:
	nm_bsp_sleep(50);
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
    4506:	cf 92       	push	r12
    4508:	df 92       	push	r13
    450a:	ef 92       	push	r14
    450c:	ff 92       	push	r15
    450e:	cf 93       	push	r28
    4510:	c8 2f       	mov	r28, r24
	                                                M2M_RELEASE_VERSION_MINOR_NO,
	                                                M2M_RELEASE_VERSION_PATCH_NO);

	reg = 0;
	while (1) {
		reg = nm_read_reg(0x1014); /* wait for efuse loading done */
    4512:	64 e1       	ldi	r22, 0x14	; 20
    4514:	70 e1       	ldi	r23, 0x10	; 16
    4516:	80 e0       	ldi	r24, 0x00	; 0
    4518:	90 e0       	ldi	r25, 0x00	; 0
    451a:	0e 94 b5 23 	call	0x476a	; 0x476a <nm_read_reg>
		if (reg & 0x80000000) {
    451e:	97 fd       	sbrc	r25, 7
    4520:	07 c0       	rjmp	.+14     	; 0x4530 <wait_for_bootrom+0x2a>
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
    4522:	61 e0       	ldi	r22, 0x01	; 1
    4524:	70 e0       	ldi	r23, 0x00	; 0
    4526:	80 e0       	ldi	r24, 0x00	; 0
    4528:	90 e0       	ldi	r25, 0x00	; 0
    452a:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <nm_bsp_sleep>
	}
    452e:	f1 cf       	rjmp	.-30     	; 0x4512 <wait_for_bootrom+0xc>
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
    4530:	6c eb       	ldi	r22, 0xBC	; 188
    4532:	77 e0       	ldi	r23, 0x07	; 7
    4534:	82 e0       	ldi	r24, 0x02	; 2
    4536:	90 e0       	ldi	r25, 0x00	; 0
    4538:	0e 94 b5 23 	call	0x476a	; 0x476a <nm_read_reg>
	reg &= 0x1;

	/* check if waiting for the host will be skipped or not */
	if (reg == 0) {
    453c:	60 ff       	sbrs	r22, 0
    453e:	11 c0       	rjmp	.+34     	; 0x4562 <wait_for_bootrom+0x5c>
				goto ERR2;
			}
		}
	}

	if (M2M_WIFI_MODE_ATE_HIGH == arg) {
    4540:	c2 30       	cpi	r28, 0x02	; 2
    4542:	01 f5       	brne	.+64     	; 0x4584 <wait_for_bootrom+0x7e>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    4544:	2d e7       	ldi	r18, 0x7D	; 125
    4546:	35 ed       	ldi	r19, 0xD5	; 213
    4548:	4c e1       	ldi	r20, 0x1C	; 28
    454a:	5c e3       	ldi	r21, 0x3C	; 60
    454c:	6c ea       	ldi	r22, 0xAC	; 172
    454e:	77 e0       	ldi	r23, 0x07	; 7
    4550:	82 e0       	ldi	r24, 0x02	; 2
    4552:	90 e0       	ldi	r25, 0x00	; 0
    4554:	0e 94 b9 23 	call	0x4772	; 0x4772 <nm_write_reg>
		nm_write_reg(NMI_STATE_REG, NBIT20);
    4558:	20 e0       	ldi	r18, 0x00	; 0
    455a:	30 e0       	ldi	r19, 0x00	; 0
    455c:	40 e1       	ldi	r20, 0x10	; 16
    455e:	50 e0       	ldi	r21, 0x00	; 0
    4560:	20 c0       	rjmp	.+64     	; 0x45a2 <wait_for_bootrom+0x9c>

	/* check if waiting for the host will be skipped or not */
	if (reg == 0) {
		reg = 0;
		while (reg != M2M_FINISH_BOOT_ROM) {
			nm_bsp_sleep(1);
    4562:	61 e0       	ldi	r22, 0x01	; 1
    4564:	70 e0       	ldi	r23, 0x00	; 0
    4566:	80 e0       	ldi	r24, 0x00	; 0
    4568:	90 e0       	ldi	r25, 0x00	; 0
    456a:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <nm_bsp_sleep>
			reg = nm_read_reg(BOOTROM_REG);
    456e:	6c e0       	ldi	r22, 0x0C	; 12
    4570:	70 e0       	ldi	r23, 0x00	; 0
    4572:	cb 01       	movw	r24, r22
    4574:	0e 94 b5 23 	call	0x476a	; 0x476a <nm_read_reg>
	reg &= 0x1;

	/* check if waiting for the host will be skipped or not */
	if (reg == 0) {
		reg = 0;
		while (reg != M2M_FINISH_BOOT_ROM) {
    4578:	6e 39       	cpi	r22, 0x9E	; 158
    457a:	70 4d       	sbci	r23, 0xD0	; 208
    457c:	8d 4a       	sbci	r24, 0xAD	; 173
    457e:	90 41       	sbci	r25, 0x10	; 16
    4580:	81 f7       	brne	.-32     	; 0x4562 <wait_for_bootrom+0x5c>
    4582:	de cf       	rjmp	.-68     	; 0x4540 <wait_for_bootrom+0x3a>
	}

	if (M2M_WIFI_MODE_ATE_HIGH == arg) {
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, NBIT20);
	} else if (M2M_WIFI_MODE_ATE_LOW == arg) {
    4584:	c3 30       	cpi	r28, 0x03	; 3
    4586:	91 f4       	brne	.+36     	; 0x45ac <wait_for_bootrom+0xa6>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    4588:	2d e7       	ldi	r18, 0x7D	; 125
    458a:	35 ed       	ldi	r19, 0xD5	; 213
    458c:	4c e1       	ldi	r20, 0x1C	; 28
    458e:	5c e3       	ldi	r21, 0x3C	; 60
    4590:	6c ea       	ldi	r22, 0xAC	; 172
    4592:	77 e0       	ldi	r23, 0x07	; 7
    4594:	82 e0       	ldi	r24, 0x02	; 2
    4596:	90 e0       	ldi	r25, 0x00	; 0
    4598:	0e 94 b9 23 	call	0x4772	; 0x4772 <nm_write_reg>
		nm_write_reg(NMI_STATE_REG, 0);
    459c:	20 e0       	ldi	r18, 0x00	; 0
    459e:	30 e0       	ldi	r19, 0x00	; 0
    45a0:	a9 01       	movw	r20, r18
    45a2:	6c e8       	ldi	r22, 0x8C	; 140
    45a4:	70 e1       	ldi	r23, 0x10	; 16
    45a6:	80 e0       	ldi	r24, 0x00	; 0
    45a8:	90 e0       	ldi	r25, 0x00	; 0
    45aa:	11 c0       	rjmp	.+34     	; 0x45ce <wait_for_bootrom+0xc8>
	} else if (M2M_WIFI_MODE_ETHERNET == arg) {
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
    45ac:	22 e5       	ldi	r18, 0x52	; 82
    45ae:	33 e1       	ldi	r19, 0x13	; 19
    45b0:	a9 01       	movw	r20, r18
    45b2:	6c e8       	ldi	r22, 0x8C	; 140
    45b4:	70 e1       	ldi	r23, 0x10	; 16
    45b6:	80 e0       	ldi	r24, 0x00	; 0
    45b8:	90 e0       	ldi	r25, 0x00	; 0
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, NBIT20);
	} else if (M2M_WIFI_MODE_ATE_LOW == arg) {
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, 0);
	} else if (M2M_WIFI_MODE_ETHERNET == arg) {
    45ba:	c4 30       	cpi	r28, 0x04	; 4
    45bc:	41 f4       	brne	.+16     	; 0x45ce <wait_for_bootrom+0xc8>
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
    45be:	0e 94 b9 23 	call	0x4772	; 0x4772 <nm_write_reg>
		nm_write_reg(NMI_STATE_REG, NBIT20);
	} else if (M2M_WIFI_MODE_ATE_LOW == arg) {
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, 0);
	} else if (M2M_WIFI_MODE_ETHERNET == arg) {
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
    45c2:	80 e8       	ldi	r24, 0x80	; 128
    45c4:	c8 2e       	mov	r12, r24
    45c6:	d1 2c       	mov	r13, r1
    45c8:	e1 2c       	mov	r14, r1
    45ca:	f1 2c       	mov	r15, r1
    45cc:	05 c0       	rjmp	.+10     	; 0x45d8 <wait_for_bootrom+0xd2>
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
	} else {
		/*bypass this step*/
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
    45ce:	0e 94 b9 23 	call	0x4772	; 0x4772 <nm_write_reg>

sint8 wait_for_bootrom(uint8 arg)
{
	sint8  ret = M2M_SUCCESS;
	uint32 reg = 0, cnt = 0;
	uint32 u32GpReg1        = 0;
    45d2:	c1 2c       	mov	r12, r1
    45d4:	d1 2c       	mov	r13, r1
    45d6:	76 01       	movw	r14, r12
	} else {
		/*bypass this step*/
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
	}

	if (REV(nmi_get_chipid()) >= REV_3A0) {
    45d8:	0e 94 fe 20 	call	0x41fc	; 0x41fc <nmi_get_chipid>
    45dc:	dc 01       	movw	r26, r24
    45de:	cb 01       	movw	r24, r22
    45e0:	9f 70       	andi	r25, 0x0F	; 15
    45e2:	aa 27       	eor	r26, r26
    45e4:	bb 27       	eor	r27, r27
    45e6:	80 3a       	cpi	r24, 0xA0	; 160
    45e8:	93 40       	sbci	r25, 0x03	; 3
    45ea:	a1 05       	cpc	r26, r1
    45ec:	b1 05       	cpc	r27, r1
    45ee:	20 f0       	brcs	.+8      	; 0x45f8 <wait_for_bootrom+0xf2>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
    45f0:	c7 01       	movw	r24, r14
    45f2:	b6 01       	movw	r22, r12
    45f4:	62 60       	ori	r22, 0x02	; 2
    45f6:	02 c0       	rjmp	.+4      	; 0x45fc <wait_for_bootrom+0xf6>
	} else {
		chip_apply_conf(u32GpReg1);
    45f8:	c7 01       	movw	r24, r14
    45fa:	b6 01       	movw	r22, r12
    45fc:	0e 94 7b 20 	call	0x40f6	; 0x40f6 <chip_apply_conf>
	}
	M2M_INFO("DriverVerInfo: 0x%08lx\n", u32DriverVerInfo);

	nm_write_reg(BOOTROM_REG, M2M_START_FIRMWARE);
    4600:	21 e6       	ldi	r18, 0x61	; 97
    4602:	3f e2       	ldi	r19, 0x2F	; 47
    4604:	42 e5       	ldi	r20, 0x52	; 82
    4606:	5f ee       	ldi	r21, 0xEF	; 239
    4608:	6c e0       	ldi	r22, 0x0C	; 12
    460a:	70 e0       	ldi	r23, 0x00	; 0
    460c:	cb 01       	movw	r24, r22
    460e:	0e 94 b9 23 	call	0x4772	; 0x4772 <nm_write_reg>
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
}
    4612:	80 e0       	ldi	r24, 0x00	; 0
    4614:	cf 91       	pop	r28
    4616:	ff 90       	pop	r15
    4618:	ef 90       	pop	r14
    461a:	df 90       	pop	r13
    461c:	cf 90       	pop	r12
    461e:	08 95       	ret

00004620 <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
    4620:	cf 92       	push	r12
    4622:	df 92       	push	r13
    4624:	ef 92       	push	r14
    4626:	ff 92       	push	r15
    4628:	0f 93       	push	r16
    462a:	1f 93       	push	r17
    462c:	cf 93       	push	r28
    462e:	df 93       	push	r29
    4630:	cd b7       	in	r28, 0x3d	; 61
    4632:	de b7       	in	r29, 0x3e	; 62
    4634:	28 97       	sbiw	r28, 0x08	; 8
    4636:	cd bf       	out	0x3d, r28	; 61
    4638:	de bf       	out	0x3e, r29	; 62
	sint8           ret = M2M_SUCCESS;
	uint32          reg = 0, cnt = 0;
	uint32          u32Timeout = TIMEOUT;
	volatile uint32 regAddress = NMI_STATE_REG;
    463a:	4c e8       	ldi	r20, 0x8C	; 140
    463c:	50 e1       	ldi	r21, 0x10	; 16
    463e:	60 e0       	ldi	r22, 0x00	; 0
    4640:	70 e0       	ldi	r23, 0x00	; 0
    4642:	4d 83       	std	Y+5, r20	; 0x05
    4644:	5e 83       	std	Y+6, r21	; 0x06
    4646:	6f 83       	std	Y+7, r22	; 0x07
    4648:	78 87       	std	Y+8, r23	; 0x08
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
    464a:	46 e3       	ldi	r20, 0x36	; 54
    464c:	56 e2       	ldi	r21, 0x26	; 38
    464e:	63 e5       	ldi	r22, 0x53	; 83
    4650:	72 e0       	ldi	r23, 0x02	; 2
    4652:	49 83       	std	Y+1, r20	; 0x01
    4654:	5a 83       	std	Y+2, r21	; 0x02
    4656:	6b 83       	std	Y+3, r22	; 0x03
    4658:	7c 83       	std	Y+4, r23	; 0x04

	if ((M2M_WIFI_MODE_ATE_HIGH == arg) || (M2M_WIFI_MODE_ATE_LOW == arg)) {
    465a:	82 50       	subi	r24, 0x02	; 2
    465c:	82 30       	cpi	r24, 0x02	; 2
    465e:	80 f4       	brcc	.+32     	; 0x4680 <wait_for_firmware_start+0x60>
		regAddress = NMI_REV_REG;
    4660:	8c ea       	ldi	r24, 0xAC	; 172
    4662:	97 e0       	ldi	r25, 0x07	; 7
    4664:	a2 e0       	ldi	r26, 0x02	; 2
    4666:	b0 e0       	ldi	r27, 0x00	; 0
    4668:	8d 83       	std	Y+5, r24	; 0x05
    466a:	9e 83       	std	Y+6, r25	; 0x06
    466c:	af 83       	std	Y+7, r26	; 0x07
    466e:	b8 87       	std	Y+8, r27	; 0x08
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
    4670:	83 ec       	ldi	r24, 0xC3	; 195
    4672:	91 ec       	ldi	r25, 0xC1	; 193
    4674:	ad e5       	ldi	r26, 0x5D	; 93
    4676:	b7 ed       	ldi	r27, 0xD7	; 215
    4678:	89 83       	std	Y+1, r24	; 0x01
    467a:	9a 83       	std	Y+2, r25	; 0x02
    467c:	ab 83       	std	Y+3, r26	; 0x03
    467e:	bc 83       	std	Y+4, r27	; 0x04
ERR2:
	return ret;
}

sint8 wait_for_firmware_start(uint8 arg)
{
    4680:	cc 24       	eor	r12, r12
    4682:	ca 94       	dec	r12
    4684:	dc 2c       	mov	r13, r12
    4686:	76 01       	movw	r14, r12
    4688:	60 e0       	ldi	r22, 0x00	; 0
    468a:	70 e0       	ldi	r23, 0x00	; 0
    468c:	cb 01       	movw	r24, r22
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
	} else {
		/*bypass this step*/
	}

	while (checkValue != reg) {
    468e:	09 81       	ldd	r16, Y+1	; 0x01
    4690:	1a 81       	ldd	r17, Y+2	; 0x02
    4692:	2b 81       	ldd	r18, Y+3	; 0x03
    4694:	3c 81       	ldd	r19, Y+4	; 0x04
    4696:	60 17       	cp	r22, r16
    4698:	71 07       	cpc	r23, r17
    469a:	82 07       	cpc	r24, r18
    469c:	93 07       	cpc	r25, r19
    469e:	a1 f0       	breq	.+40     	; 0x46c8 <wait_for_firmware_start+0xa8>
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
    46a0:	62 e0       	ldi	r22, 0x02	; 2
    46a2:	70 e0       	ldi	r23, 0x00	; 0
    46a4:	80 e0       	ldi	r24, 0x00	; 0
    46a6:	90 e0       	ldi	r25, 0x00	; 0
    46a8:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <nm_bsp_sleep>
		M2M_DBG("%x %x %x\n",
		        (unsigned int)nm_read_reg(0x108c),
		        (unsigned int)nm_read_reg(0x108c),
		        (unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
    46ac:	6d 81       	ldd	r22, Y+5	; 0x05
    46ae:	7e 81       	ldd	r23, Y+6	; 0x06
    46b0:	8f 81       	ldd	r24, Y+7	; 0x07
    46b2:	98 85       	ldd	r25, Y+8	; 0x08
    46b4:	0e 94 b5 23 	call	0x476a	; 0x476a <nm_read_reg>
    46b8:	21 e0       	ldi	r18, 0x01	; 1
    46ba:	c2 1a       	sub	r12, r18
    46bc:	d1 08       	sbc	r13, r1
    46be:	e1 08       	sbc	r14, r1
    46c0:	f1 08       	sbc	r15, r1
		if (++cnt >= u32Timeout) {
    46c2:	29 f7       	brne	.-54     	; 0x468e <wait_for_firmware_start+0x6e>
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
    46c4:	8b ef       	ldi	r24, 0xFB	; 251
    46c6:	13 c0       	rjmp	.+38     	; 0x46ee <wait_for_firmware_start+0xce>
			goto ERR;
		}
	}
	if (M2M_FINISH_INIT_STATE == checkValue) {
    46c8:	89 81       	ldd	r24, Y+1	; 0x01
    46ca:	9a 81       	ldd	r25, Y+2	; 0x02
    46cc:	ab 81       	ldd	r26, Y+3	; 0x03
    46ce:	bc 81       	ldd	r27, Y+4	; 0x04
    46d0:	86 33       	cpi	r24, 0x36	; 54
    46d2:	96 42       	sbci	r25, 0x26	; 38
    46d4:	a3 45       	sbci	r26, 0x53	; 83
    46d6:	b2 40       	sbci	r27, 0x02	; 2
    46d8:	49 f4       	brne	.+18     	; 0x46ec <wait_for_firmware_start+0xcc>
		nm_write_reg(NMI_STATE_REG, 0);
    46da:	20 e0       	ldi	r18, 0x00	; 0
    46dc:	30 e0       	ldi	r19, 0x00	; 0
    46de:	a9 01       	movw	r20, r18
    46e0:	6c e8       	ldi	r22, 0x8C	; 140
    46e2:	70 e1       	ldi	r23, 0x10	; 16
    46e4:	80 e0       	ldi	r24, 0x00	; 0
    46e6:	90 e0       	ldi	r25, 0x00	; 0
    46e8:	0e 94 b9 23 	call	0x4772	; 0x4772 <nm_write_reg>
	return ret;
}

sint8 wait_for_firmware_start(uint8 arg)
{
	sint8           ret = M2M_SUCCESS;
    46ec:	80 e0       	ldi	r24, 0x00	; 0
	if (M2M_FINISH_INIT_STATE == checkValue) {
		nm_write_reg(NMI_STATE_REG, 0);
	}
ERR:
	return ret;
}
    46ee:	28 96       	adiw	r28, 0x08	; 8
    46f0:	cd bf       	out	0x3d, r28	; 61
    46f2:	de bf       	out	0x3e, r29	; 62
    46f4:	df 91       	pop	r29
    46f6:	cf 91       	pop	r28
    46f8:	1f 91       	pop	r17
    46fa:	0f 91       	pop	r16
    46fc:	ff 90       	pop	r15
    46fe:	ef 90       	pop	r14
    4700:	df 90       	pop	r13
    4702:	cf 90       	pop	r12
    4704:	08 95       	ret

00004706 <chip_deinit>:

sint8 chip_deinit(void)
{
    4706:	cf 93       	push	r28
    4708:	df 93       	push	r29
    470a:	00 d0       	rcall	.+0      	; 0x470c <chip_deinit+0x6>
    470c:	00 d0       	rcall	.+0      	; 0x470e <chip_deinit+0x8>
    470e:	cd b7       	in	r28, 0x3d	; 61
    4710:	de b7       	in	r29, 0x3e	; 62
	uint32 reg = 0;
    4712:	19 82       	std	Y+1, r1	; 0x01
    4714:	1a 82       	std	Y+2, r1	; 0x02
    4716:	1b 82       	std	Y+3, r1	; 0x03
    4718:	1c 82       	std	Y+4, r1	; 0x04
	sint8  ret;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
    471a:	ae 01       	movw	r20, r28
    471c:	4f 5f       	subi	r20, 0xFF	; 255
    471e:	5f 4f       	sbci	r21, 0xFF	; 255
    4720:	60 e0       	ldi	r22, 0x00	; 0
    4722:	74 e1       	ldi	r23, 0x14	; 20
    4724:	80 e0       	ldi	r24, 0x00	; 0
    4726:	90 e0       	ldi	r25, 0x00	; 0
    4728:	0e 94 b7 23 	call	0x476e	; 0x476e <nm_read_reg_with_ret>
	if (ret != M2M_SUCCESS) {
    472c:	81 11       	cpse	r24, r1
    472e:	11 c0       	rjmp	.+34     	; 0x4752 <chip_deinit+0x4c>
		M2M_ERR("failed to de-initialize\n");
		goto ERR1;
	}
	reg &= ~(1 << 10);
    4730:	89 81       	ldd	r24, Y+1	; 0x01
    4732:	9a 81       	ldd	r25, Y+2	; 0x02
    4734:	ab 81       	ldd	r26, Y+3	; 0x03
    4736:	bc 81       	ldd	r27, Y+4	; 0x04
    4738:	9c 01       	movw	r18, r24
    473a:	ad 01       	movw	r20, r26
    473c:	3b 7f       	andi	r19, 0xFB	; 251
    473e:	29 83       	std	Y+1, r18	; 0x01
    4740:	3a 83       	std	Y+2, r19	; 0x02
    4742:	4b 83       	std	Y+3, r20	; 0x03
    4744:	5c 83       	std	Y+4, r21	; 0x04
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
    4746:	60 e0       	ldi	r22, 0x00	; 0
    4748:	74 e1       	ldi	r23, 0x14	; 20
    474a:	80 e0       	ldi	r24, 0x00	; 0
    474c:	90 e0       	ldi	r25, 0x00	; 0
    474e:	0e 94 b9 23 	call	0x4772	; 0x4772 <nm_write_reg>
		goto ERR1;
	}

ERR1:
	return ret;
}
    4752:	24 96       	adiw	r28, 0x04	; 4
    4754:	cd bf       	out	0x3d, r28	; 61
    4756:	de bf       	out	0x3e, r29	; 62
    4758:	df 91       	pop	r29
    475a:	cf 91       	pop	r28
    475c:	08 95       	ret

0000475e <nm_bus_iface_init>:
	sint8 ret = M2M_SUCCESS;
#ifdef CONF_WINC_USE_UART
	ret = nm_uart_reconfigure(ptr);
#endif
	return ret;
}
    475e:	0c 94 33 1b 	jmp	0x3666	; 0x3666 <nm_bus_init>

00004762 <nm_bus_iface_deinit>:
    4762:	0c 94 9a 1b 	jmp	0x3734	; 0x3734 <nm_bus_deinit>

00004766 <nm_bus_reset>:
    4766:	0c 94 17 28 	jmp	0x502e	; 0x502e <nm_spi_reset>

0000476a <nm_read_reg>:
uint32 nm_read_reg(uint32 u32Addr)
{
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined(CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
    476a:	0c 94 3b 28 	jmp	0x5076	; 0x5076 <nm_spi_read_reg>

0000476e <nm_read_reg_with_ret>:
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32 *pu32RetVal)
{
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr, pu32RetVal);
#elif defined(CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr, pu32RetVal);
    476e:	0c 94 50 28 	jmp	0x50a0	; 0x50a0 <nm_spi_read_reg_with_ret>

00004772 <nm_write_reg>:
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr, u32Val);
#elif defined(CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr, u32Val);
    4772:	0c 94 58 28 	jmp	0x50b0	; 0x50b0 <nm_spi_write_reg>

00004776 <nm_read_block>:
 *	@author	M. Abdelmawla
 *	@date	11 July 2012
 *	@version	1.0
 */
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    4776:	2f 92       	push	r2
    4778:	3f 92       	push	r3
    477a:	4f 92       	push	r4
    477c:	5f 92       	push	r5
    477e:	6f 92       	push	r6
    4780:	7f 92       	push	r7
    4782:	8f 92       	push	r8
    4784:	9f 92       	push	r9
    4786:	af 92       	push	r10
    4788:	bf 92       	push	r11
    478a:	cf 92       	push	r12
    478c:	df 92       	push	r13
    478e:	ef 92       	push	r14
    4790:	ff 92       	push	r15
    4792:	0f 93       	push	r16
    4794:	1f 93       	push	r17
    4796:	cf 93       	push	r28
    4798:	df 93       	push	r29
    479a:	cd b7       	in	r28, 0x3d	; 61
    479c:	de b7       	in	r29, 0x3e	; 62
    479e:	26 97       	sbiw	r28, 0x06	; 6
    47a0:	cd bf       	out	0x3d, r28	; 61
    47a2:	de bf       	out	0x3e, r29	; 62
    47a4:	69 83       	std	Y+1, r22	; 0x01
    47a6:	7a 83       	std	Y+2, r23	; 0x02
    47a8:	8b 83       	std	Y+3, r24	; 0x03
    47aa:	9c 83       	std	Y+4, r25	; 0x04
    47ac:	4d 83       	std	Y+5, r20	; 0x05
    47ae:	5e 83       	std	Y+6, r21	; 0x06
    47b0:	48 01       	movw	r8, r16
    47b2:	59 01       	movw	r10, r18
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    47b4:	20 90 c7 29 	lds	r2, 0x29C7	; 0x8029c7 <egstrNmBusCapabilities>
    47b8:	30 90 c8 29 	lds	r3, 0x29C8	; 0x8029c8 <egstrNmBusCapabilities+0x1>
    47bc:	88 e0       	ldi	r24, 0x08	; 8
    47be:	28 1a       	sub	r2, r24
    47c0:	31 08       	sbc	r3, r1
    47c2:	8a 01       	movw	r16, r20
	uint32 off         = 0;
    47c4:	c1 2c       	mov	r12, r1
    47c6:	d1 2c       	mov	r13, r1
    47c8:	76 01       	movw	r14, r12
	sint8  s8Ret       = M2M_SUCCESS;

	for (;;) {
		if (u32Sz <= u16MaxTrxSz) {
    47ca:	21 01       	movw	r4, r2
    47cc:	61 2c       	mov	r6, r1
    47ce:	71 2c       	mov	r7, r1
    47d0:	69 81       	ldd	r22, Y+1	; 0x01
    47d2:	7a 81       	ldd	r23, Y+2	; 0x02
    47d4:	8b 81       	ldd	r24, Y+3	; 0x03
    47d6:	9c 81       	ldd	r25, Y+4	; 0x04
    47d8:	6c 0d       	add	r22, r12
    47da:	7d 1d       	adc	r23, r13
    47dc:	8e 1d       	adc	r24, r14
    47de:	9f 1d       	adc	r25, r15
    47e0:	48 14       	cp	r4, r8
    47e2:	59 04       	cpc	r5, r9
    47e4:	6a 04       	cpc	r6, r10
    47e6:	7b 04       	cpc	r7, r11
    47e8:	e0 f0       	brcs	.+56     	; 0x4822 <nm_read_block+0xac>
static sint8 p_nm_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_block(u32Addr, puBuf, u16Sz);
#elif defined(CONF_WINC_USE_SPI)
	return nm_spi_read_block(u32Addr, puBuf, u16Sz);
    47ea:	4d 81       	ldd	r20, Y+5	; 0x05
    47ec:	5e 81       	ldd	r21, Y+6	; 0x06
    47ee:	4c 0d       	add	r20, r12
    47f0:	5d 1d       	adc	r21, r13
    47f2:	94 01       	movw	r18, r8
			u32Addr += u16MaxTrxSz;
		}
	}

	return s8Ret;
}
    47f4:	26 96       	adiw	r28, 0x06	; 6
    47f6:	cd bf       	out	0x3d, r28	; 61
    47f8:	de bf       	out	0x3e, r29	; 62
    47fa:	df 91       	pop	r29
    47fc:	cf 91       	pop	r28
    47fe:	1f 91       	pop	r17
    4800:	0f 91       	pop	r16
    4802:	ff 90       	pop	r15
    4804:	ef 90       	pop	r14
    4806:	df 90       	pop	r13
    4808:	cf 90       	pop	r12
    480a:	bf 90       	pop	r11
    480c:	af 90       	pop	r10
    480e:	9f 90       	pop	r9
    4810:	8f 90       	pop	r8
    4812:	7f 90       	pop	r7
    4814:	6f 90       	pop	r6
    4816:	5f 90       	pop	r5
    4818:	4f 90       	pop	r4
    481a:	3f 90       	pop	r3
    481c:	2f 90       	pop	r2
static sint8 p_nm_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_block(u32Addr, puBuf, u16Sz);
#elif defined(CONF_WINC_USE_SPI)
	return nm_spi_read_block(u32Addr, puBuf, u16Sz);
    481e:	0c 94 c9 28 	jmp	0x5192	; 0x5192 <nm_spi_read_block>
    4822:	91 01       	movw	r18, r2
    4824:	a8 01       	movw	r20, r16
    4826:	0e 94 c9 28 	call	0x5192	; 0x5192 <nm_spi_read_block>
    482a:	02 0d       	add	r16, r2
    482c:	13 1d       	adc	r17, r3
		if (u32Sz <= u16MaxTrxSz) {
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);
			break;
		} else {
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if (M2M_SUCCESS != s8Ret)
    482e:	81 11       	cpse	r24, r1
    4830:	09 c0       	rjmp	.+18     	; 0x4844 <nm_read_block+0xce>
    4832:	84 18       	sub	r8, r4
    4834:	95 08       	sbc	r9, r5
    4836:	a6 08       	sbc	r10, r6
    4838:	b7 08       	sbc	r11, r7
    483a:	c4 0c       	add	r12, r4
    483c:	d5 1c       	adc	r13, r5
    483e:	e6 1c       	adc	r14, r6
    4840:	f7 1c       	adc	r15, r7
				break;
			u32Sz -= u16MaxTrxSz;
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
		}
	}
    4842:	c6 cf       	rjmp	.-116    	; 0x47d0 <nm_read_block+0x5a>

	return s8Ret;
}
    4844:	26 96       	adiw	r28, 0x06	; 6
    4846:	cd bf       	out	0x3d, r28	; 61
    4848:	de bf       	out	0x3e, r29	; 62
    484a:	df 91       	pop	r29
    484c:	cf 91       	pop	r28
    484e:	1f 91       	pop	r17
    4850:	0f 91       	pop	r16
    4852:	ff 90       	pop	r15
    4854:	ef 90       	pop	r14
    4856:	df 90       	pop	r13
    4858:	cf 90       	pop	r12
    485a:	bf 90       	pop	r11
    485c:	af 90       	pop	r10
    485e:	9f 90       	pop	r9
    4860:	8f 90       	pop	r8
    4862:	7f 90       	pop	r7
    4864:	6f 90       	pop	r6
    4866:	5f 90       	pop	r5
    4868:	4f 90       	pop	r4
    486a:	3f 90       	pop	r3
    486c:	2f 90       	pop	r2
    486e:	08 95       	ret

00004870 <nm_write_block>:
 *	@author	M. Abdelmawla
 *	@date	11 July 2012
 *	@version	1.0
 */
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    4870:	2f 92       	push	r2
    4872:	3f 92       	push	r3
    4874:	4f 92       	push	r4
    4876:	5f 92       	push	r5
    4878:	6f 92       	push	r6
    487a:	7f 92       	push	r7
    487c:	8f 92       	push	r8
    487e:	9f 92       	push	r9
    4880:	af 92       	push	r10
    4882:	bf 92       	push	r11
    4884:	cf 92       	push	r12
    4886:	df 92       	push	r13
    4888:	ef 92       	push	r14
    488a:	ff 92       	push	r15
    488c:	0f 93       	push	r16
    488e:	1f 93       	push	r17
    4890:	cf 93       	push	r28
    4892:	df 93       	push	r29
    4894:	cd b7       	in	r28, 0x3d	; 61
    4896:	de b7       	in	r29, 0x3e	; 62
    4898:	26 97       	sbiw	r28, 0x06	; 6
    489a:	cd bf       	out	0x3d, r28	; 61
    489c:	de bf       	out	0x3e, r29	; 62
    489e:	69 83       	std	Y+1, r22	; 0x01
    48a0:	7a 83       	std	Y+2, r23	; 0x02
    48a2:	8b 83       	std	Y+3, r24	; 0x03
    48a4:	9c 83       	std	Y+4, r25	; 0x04
    48a6:	4d 83       	std	Y+5, r20	; 0x05
    48a8:	5e 83       	std	Y+6, r21	; 0x06
    48aa:	48 01       	movw	r8, r16
    48ac:	59 01       	movw	r10, r18
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    48ae:	20 90 c7 29 	lds	r2, 0x29C7	; 0x8029c7 <egstrNmBusCapabilities>
    48b2:	30 90 c8 29 	lds	r3, 0x29C8	; 0x8029c8 <egstrNmBusCapabilities+0x1>
    48b6:	88 e0       	ldi	r24, 0x08	; 8
    48b8:	28 1a       	sub	r2, r24
    48ba:	31 08       	sbc	r3, r1
    48bc:	8a 01       	movw	r16, r20
	uint32 off         = 0;
    48be:	c1 2c       	mov	r12, r1
    48c0:	d1 2c       	mov	r13, r1
    48c2:	76 01       	movw	r14, r12
	sint8  s8Ret       = M2M_SUCCESS;

	for (;;) {
		if (u32Sz <= u16MaxTrxSz) {
    48c4:	21 01       	movw	r4, r2
    48c6:	61 2c       	mov	r6, r1
    48c8:	71 2c       	mov	r7, r1
    48ca:	69 81       	ldd	r22, Y+1	; 0x01
    48cc:	7a 81       	ldd	r23, Y+2	; 0x02
    48ce:	8b 81       	ldd	r24, Y+3	; 0x03
    48d0:	9c 81       	ldd	r25, Y+4	; 0x04
    48d2:	6c 0d       	add	r22, r12
    48d4:	7d 1d       	adc	r23, r13
    48d6:	8e 1d       	adc	r24, r14
    48d8:	9f 1d       	adc	r25, r15
    48da:	48 14       	cp	r4, r8
    48dc:	59 04       	cpc	r5, r9
    48de:	6a 04       	cpc	r6, r10
    48e0:	7b 04       	cpc	r7, r11
    48e2:	e0 f0       	brcs	.+56     	; 0x491c <nm_write_block+0xac>
static sint8 p_nm_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_block(u32Addr, puBuf, u16Sz);
#elif defined(CONF_WINC_USE_SPI)
	return nm_spi_write_block(u32Addr, puBuf, u16Sz);
    48e4:	4d 81       	ldd	r20, Y+5	; 0x05
    48e6:	5e 81       	ldd	r21, Y+6	; 0x06
    48e8:	4c 0d       	add	r20, r12
    48ea:	5d 1d       	adc	r21, r13
    48ec:	94 01       	movw	r18, r8
			u32Addr += u16MaxTrxSz;
		}
	}

	return s8Ret;
}
    48ee:	26 96       	adiw	r28, 0x06	; 6
    48f0:	cd bf       	out	0x3d, r28	; 61
    48f2:	de bf       	out	0x3e, r29	; 62
    48f4:	df 91       	pop	r29
    48f6:	cf 91       	pop	r28
    48f8:	1f 91       	pop	r17
    48fa:	0f 91       	pop	r16
    48fc:	ff 90       	pop	r15
    48fe:	ef 90       	pop	r14
    4900:	df 90       	pop	r13
    4902:	cf 90       	pop	r12
    4904:	bf 90       	pop	r11
    4906:	af 90       	pop	r10
    4908:	9f 90       	pop	r9
    490a:	8f 90       	pop	r8
    490c:	7f 90       	pop	r7
    490e:	6f 90       	pop	r6
    4910:	5f 90       	pop	r5
    4912:	4f 90       	pop	r4
    4914:	3f 90       	pop	r3
    4916:	2f 90       	pop	r2
static sint8 p_nm_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_block(u32Addr, puBuf, u16Sz);
#elif defined(CONF_WINC_USE_SPI)
	return nm_spi_write_block(u32Addr, puBuf, u16Sz);
    4918:	0c 94 58 29 	jmp	0x52b0	; 0x52b0 <nm_spi_write_block>
    491c:	91 01       	movw	r18, r2
    491e:	a8 01       	movw	r20, r16
    4920:	0e 94 58 29 	call	0x52b0	; 0x52b0 <nm_spi_write_block>
    4924:	02 0d       	add	r16, r2
    4926:	13 1d       	adc	r17, r3
		if (u32Sz <= u16MaxTrxSz) {
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);
			break;
		} else {
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if (M2M_SUCCESS != s8Ret)
    4928:	81 11       	cpse	r24, r1
    492a:	09 c0       	rjmp	.+18     	; 0x493e <nm_write_block+0xce>
    492c:	84 18       	sub	r8, r4
    492e:	95 08       	sbc	r9, r5
    4930:	a6 08       	sbc	r10, r6
    4932:	b7 08       	sbc	r11, r7
    4934:	c4 0c       	add	r12, r4
    4936:	d5 1c       	adc	r13, r5
    4938:	e6 1c       	adc	r14, r6
    493a:	f7 1c       	adc	r15, r7
				break;
			u32Sz -= u16MaxTrxSz;
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
		}
	}
    493c:	c6 cf       	rjmp	.-116    	; 0x48ca <nm_write_block+0x5a>

	return s8Ret;
}
    493e:	26 96       	adiw	r28, 0x06	; 6
    4940:	cd bf       	out	0x3d, r28	; 61
    4942:	de bf       	out	0x3e, r29	; 62
    4944:	df 91       	pop	r29
    4946:	cf 91       	pop	r28
    4948:	1f 91       	pop	r17
    494a:	0f 91       	pop	r16
    494c:	ff 90       	pop	r15
    494e:	ef 90       	pop	r14
    4950:	df 90       	pop	r13
    4952:	cf 90       	pop	r12
    4954:	bf 90       	pop	r11
    4956:	af 90       	pop	r10
    4958:	9f 90       	pop	r9
    495a:	8f 90       	pop	r8
    495c:	7f 90       	pop	r7
    495e:	6f 90       	pop	r6
    4960:	5f 90       	pop	r5
    4962:	4f 90       	pop	r4
    4964:	3f 90       	pop	r3
    4966:	2f 90       	pop	r2
    4968:	08 95       	ret

0000496a <nm_get_firmware_full_info>:
	/*disable all interrupt in ROM (to disable uart) in 2b0 chip*/
	nm_write_reg(0x20300, 0);

ERR1:
	return ret;
}
    496a:	cf 92       	push	r12
    496c:	df 92       	push	r13
    496e:	ef 92       	push	r14
    4970:	ff 92       	push	r15
    4972:	0f 93       	push	r16
    4974:	1f 93       	push	r17
    4976:	cf 93       	push	r28
    4978:	df 93       	push	r29
    497a:	cd b7       	in	r28, 0x3d	; 61
    497c:	de b7       	in	r29, 0x3e	; 62
    497e:	2c 97       	sbiw	r28, 0x0c	; 12
    4980:	cd bf       	out	0x3d, r28	; 61
    4982:	de bf       	out	0x3e, r29	; 62
    4984:	19 86       	std	Y+9, r1	; 0x09
    4986:	1a 86       	std	Y+10, r1	; 0x0a
    4988:	1b 86       	std	Y+11, r1	; 0x0b
    498a:	1c 86       	std	Y+12, r1	; 0x0c
    498c:	9e 01       	movw	r18, r28
    498e:	2f 5f       	subi	r18, 0xFF	; 255
    4990:	3f 4f       	sbci	r19, 0xFF	; 255
    4992:	69 01       	movw	r12, r18
    4994:	28 e0       	ldi	r18, 0x08	; 8
    4996:	f6 01       	movw	r30, r12
    4998:	11 92       	st	Z+, r1
    499a:	2a 95       	dec	r18
    499c:	e9 f7       	brne	.-6      	; 0x4998 <nm_get_firmware_full_info+0x2e>
    499e:	00 97       	sbiw	r24, 0x00	; 0
    49a0:	11 f4       	brne	.+4      	; 0x49a6 <nm_get_firmware_full_info+0x3c>
    49a2:	80 e0       	ldi	r24, 0x00	; 0
    49a4:	73 c0       	rjmp	.+230    	; 0x4a8c <nm_get_firmware_full_info+0x122>
    49a6:	7c 01       	movw	r14, r24
    49a8:	26 e2       	ldi	r18, 0x26	; 38
    49aa:	30 e0       	ldi	r19, 0x00	; 0
    49ac:	40 e0       	ldi	r20, 0x00	; 0
    49ae:	50 e0       	ldi	r21, 0x00	; 0
    49b0:	60 e0       	ldi	r22, 0x00	; 0
    49b2:	0e 94 ac 1b 	call	0x3758	; 0x3758 <m2m_memset>
    49b6:	ae 01       	movw	r20, r28
    49b8:	47 5f       	subi	r20, 0xF7	; 247
    49ba:	5f 4f       	sbci	r21, 0xFF	; 255
    49bc:	68 e0       	ldi	r22, 0x08	; 8
    49be:	70 e0       	ldi	r23, 0x00	; 0
    49c0:	8c e0       	ldi	r24, 0x0C	; 12
    49c2:	90 e0       	ldi	r25, 0x00	; 0
    49c4:	0e 94 b7 23 	call	0x476e	; 0x476e <nm_read_reg_with_ret>
    49c8:	81 11       	cpse	r24, r1
    49ca:	60 c0       	rjmp	.+192    	; 0x4a8c <nm_get_firmware_full_info+0x122>
    49cc:	89 85       	ldd	r24, Y+9	; 0x09
    49ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    49d0:	ab 85       	ldd	r26, Y+11	; 0x0b
    49d2:	bc 85       	ldd	r27, Y+12	; 0x0c
    49d4:	00 97       	sbiw	r24, 0x00	; 0
    49d6:	a1 05       	cpc	r26, r1
    49d8:	b1 05       	cpc	r27, r1
    49da:	11 f4       	brne	.+4      	; 0x49e0 <nm_get_firmware_full_info+0x76>
    49dc:	84 ef       	ldi	r24, 0xF4	; 244
    49de:	56 c0       	rjmp	.+172    	; 0x4a8c <nm_get_firmware_full_info+0x122>
    49e0:	bc 01       	movw	r22, r24
    49e2:	cd 01       	movw	r24, r26
    49e4:	83 60       	ori	r24, 0x03	; 3
    49e6:	08 e0       	ldi	r16, 0x08	; 8
    49e8:	10 e0       	ldi	r17, 0x00	; 0
    49ea:	20 e0       	ldi	r18, 0x00	; 0
    49ec:	30 e0       	ldi	r19, 0x00	; 0
    49ee:	a6 01       	movw	r20, r12
    49f0:	0e 94 bb 23 	call	0x4776	; 0x4776 <nm_read_block>
    49f4:	81 11       	cpse	r24, r1
    49f6:	4a c0       	rjmp	.+148    	; 0x4a8c <nm_get_firmware_full_info+0x122>
    49f8:	8d 81       	ldd	r24, Y+5	; 0x05
    49fa:	9e 81       	ldd	r25, Y+6	; 0x06
    49fc:	af 81       	ldd	r26, Y+7	; 0x07
    49fe:	b8 85       	ldd	r27, Y+8	; 0x08
    4a00:	aa 27       	eor	r26, r26
    4a02:	bb 27       	eor	r27, r27
    4a04:	89 87       	std	Y+9, r24	; 0x09
    4a06:	9a 87       	std	Y+10, r25	; 0x0a
    4a08:	ab 87       	std	Y+11, r26	; 0x0b
    4a0a:	bc 87       	std	Y+12, r27	; 0x0c
    4a0c:	00 97       	sbiw	r24, 0x00	; 0
    4a0e:	a1 05       	cpc	r26, r1
    4a10:	b1 05       	cpc	r27, r1
    4a12:	21 f3       	breq	.-56     	; 0x49dc <nm_get_firmware_full_info+0x72>
    4a14:	bc 01       	movw	r22, r24
    4a16:	cd 01       	movw	r24, r26
    4a18:	83 60       	ori	r24, 0x03	; 3
    4a1a:	06 e2       	ldi	r16, 0x26	; 38
    4a1c:	10 e0       	ldi	r17, 0x00	; 0
    4a1e:	20 e0       	ldi	r18, 0x00	; 0
    4a20:	30 e0       	ldi	r19, 0x00	; 0
    4a22:	a7 01       	movw	r20, r14
    4a24:	0e 94 bb 23 	call	0x4776	; 0x4776 <nm_read_block>
    4a28:	81 11       	cpse	r24, r1
    4a2a:	30 c0       	rjmp	.+96     	; 0x4a8c <nm_get_firmware_full_info+0x122>
    4a2c:	f7 01       	movw	r30, r14
    4a2e:	84 81       	ldd	r24, Z+4	; 0x04
    4a30:	90 e0       	ldi	r25, 0x00	; 0
    4a32:	98 2f       	mov	r25, r24
    4a34:	88 27       	eor	r24, r24
    4a36:	26 81       	ldd	r18, Z+6	; 0x06
    4a38:	2f 70       	andi	r18, 0x0F	; 15
    4a3a:	ac 01       	movw	r20, r24
    4a3c:	42 2b       	or	r20, r18
    4a3e:	9a 01       	movw	r18, r20
    4a40:	85 81       	ldd	r24, Z+5	; 0x05
    4a42:	50 e1       	ldi	r21, 0x10	; 16
    4a44:	85 9f       	mul	r24, r21
    4a46:	c0 01       	movw	r24, r0
    4a48:	11 24       	eor	r1, r1
    4a4a:	99 27       	eor	r25, r25
    4a4c:	82 2b       	or	r24, r18
    4a4e:	93 2b       	or	r25, r19
    4a50:	27 81       	ldd	r18, Z+7	; 0x07
    4a52:	30 e0       	ldi	r19, 0x00	; 0
    4a54:	32 2f       	mov	r19, r18
    4a56:	22 27       	eor	r18, r18
    4a58:	41 85       	ldd	r20, Z+9	; 0x09
    4a5a:	4f 70       	andi	r20, 0x0F	; 15
    4a5c:	24 2b       	or	r18, r20
    4a5e:	40 85       	ldd	r20, Z+8	; 0x08
    4a60:	60 e1       	ldi	r22, 0x10	; 16
    4a62:	46 9f       	mul	r20, r22
    4a64:	a0 01       	movw	r20, r0
    4a66:	11 24       	eor	r1, r1
    4a68:	55 27       	eor	r21, r21
    4a6a:	24 2b       	or	r18, r20
    4a6c:	35 2b       	or	r19, r21
    4a6e:	00 97       	sbiw	r24, 0x00	; 0
    4a70:	09 f4       	brne	.+2      	; 0x4a74 <nm_get_firmware_full_info+0x10a>
    4a72:	b4 cf       	rjmp	.-152    	; 0x49dc <nm_get_firmware_full_info+0x72>
    4a74:	21 15       	cp	r18, r1
    4a76:	31 05       	cpc	r19, r1
    4a78:	09 f4       	brne	.+2      	; 0x4a7c <nm_get_firmware_full_info+0x112>
    4a7a:	b0 cf       	rjmp	.-160    	; 0x49dc <nm_get_firmware_full_info+0x72>
    4a7c:	23 35       	cpi	r18, 0x53	; 83
    4a7e:	33 41       	sbci	r19, 0x13	; 19
    4a80:	20 f4       	brcc	.+8      	; 0x4a8a <nm_get_firmware_full_info+0x120>
    4a82:	82 35       	cpi	r24, 0x52	; 82
    4a84:	93 41       	sbci	r25, 0x13	; 19
    4a86:	08 f0       	brcs	.+2      	; 0x4a8a <nm_get_firmware_full_info+0x120>
    4a88:	8c cf       	rjmp	.-232    	; 0x49a2 <nm_get_firmware_full_info+0x38>
    4a8a:	83 ef       	ldi	r24, 0xF3	; 243
    4a8c:	2c 96       	adiw	r28, 0x0c	; 12
    4a8e:	cd bf       	out	0x3d, r28	; 61
    4a90:	de bf       	out	0x3e, r29	; 62
    4a92:	df 91       	pop	r29
    4a94:	cf 91       	pop	r28
    4a96:	1f 91       	pop	r17
    4a98:	0f 91       	pop	r16
    4a9a:	ff 90       	pop	r15
    4a9c:	ef 90       	pop	r14
    4a9e:	df 90       	pop	r13
    4aa0:	cf 90       	pop	r12
    4aa2:	08 95       	ret

00004aa4 <nm_drv_init>:
 *	@author	M. Abdelmawla
 *	@date	15 July 2012
 *	@version	1.0
 */
sint8 nm_drv_init(void *arg)
{
    4aa4:	cf 93       	push	r28
    4aa6:	df 93       	push	r29
	sint8 ret = M2M_SUCCESS;
	uint8 u8Mode;

	if (NULL != arg) {
    4aa8:	00 97       	sbiw	r24, 0x00	; 0
    4aaa:	31 f0       	breq	.+12     	; 0x4ab8 <nm_drv_init+0x14>
		u8Mode = *((uint8 *)arg);
    4aac:	fc 01       	movw	r30, r24
    4aae:	c0 81       	ld	r28, Z
		if ((u8Mode < M2M_WIFI_MODE_NORMAL) || (u8Mode >= M2M_WIFI_MODE_MAX)) {
    4ab0:	8f ef       	ldi	r24, 0xFF	; 255
    4ab2:	8c 0f       	add	r24, r28
    4ab4:	84 30       	cpi	r24, 0x04	; 4
    4ab6:	08 f0       	brcs	.+2      	; 0x4aba <nm_drv_init+0x16>
			u8Mode = M2M_WIFI_MODE_NORMAL;
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
    4ab8:	c1 e0       	ldi	r28, 0x01	; 1
	}

	ret = nm_bus_iface_init(NULL);
    4aba:	80 e0       	ldi	r24, 0x00	; 0
    4abc:	90 e0       	ldi	r25, 0x00	; 0
    4abe:	0e 94 af 23 	call	0x475e	; 0x475e <nm_bus_iface_init>
    4ac2:	d8 2f       	mov	r29, r24
	if (M2M_SUCCESS != ret) {
    4ac4:	81 11       	cpse	r24, r1
    4ac6:	18 c0       	rjmp	.+48     	; 0x4af8 <nm_drv_init+0x54>
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
    4ac8:	0e 94 60 28 	call	0x50c0	; 0x50c0 <nm_spi_init>
#endif
	ret = wait_for_bootrom(u8Mode);
    4acc:	8c 2f       	mov	r24, r28
    4ace:	0e 94 83 22 	call	0x4506	; 0x4506 <wait_for_bootrom>
    4ad2:	d8 2f       	mov	r29, r24
	if (M2M_SUCCESS != ret) {
    4ad4:	81 11       	cpse	r24, r1
    4ad6:	0e c0       	rjmp	.+28     	; 0x4af4 <nm_drv_init+0x50>
		goto ERR2;
	}

	ret = wait_for_firmware_start(u8Mode);
    4ad8:	8c 2f       	mov	r24, r28
    4ada:	0e 94 10 23 	call	0x4620	; 0x4620 <wait_for_firmware_start>
    4ade:	d8 2f       	mov	r29, r24
	if (M2M_SUCCESS != ret) {
    4ae0:	81 11       	cpse	r24, r1
    4ae2:	08 c0       	rjmp	.+16     	; 0x4af4 <nm_drv_init+0x50>
		goto ERR2;
	}

	if ((M2M_WIFI_MODE_ATE_HIGH == u8Mode) || (M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
    4ae4:	c2 50       	subi	r28, 0x02	; 2
    4ae6:	c2 30       	cpi	r28, 0x02	; 2
    4ae8:	38 f0       	brcs	.+14     	; 0x4af8 <nm_drv_init+0x54>
		goto ERR1;
	} else {
		/*continue running*/
	}

	ret = enable_interrupts();
    4aea:	0e 94 b4 20 	call	0x4168	; 0x4168 <enable_interrupts>
	if (M2M_SUCCESS != ret) {
    4aee:	88 23       	and	r24, r24
    4af0:	19 f0       	breq	.+6      	; 0x4af8 <nm_drv_init+0x54>
    4af2:	d8 2f       	mov	r29, r24
		M2M_ERR("failed to enable interrupts..\n");
		goto ERR2;
	}
	return ret;
ERR2:
	nm_bus_iface_deinit();
    4af4:	0e 94 b1 23 	call	0x4762	; 0x4762 <nm_bus_iface_deinit>
ERR1:
	return ret;
}
    4af8:	8d 2f       	mov	r24, r29
    4afa:	df 91       	pop	r29
    4afc:	cf 91       	pop	r28
    4afe:	08 95       	ret

00004b00 <nm_drv_deinit>:
 *	@author	M. Abdelmawla
 *	@date	17 July 2012
 *	@version	1.0
 */
sint8 nm_drv_deinit(void *arg)
{
    4b00:	cf 93       	push	r28
	sint8 ret;

	ret = chip_deinit();
    4b02:	0e 94 83 23 	call	0x4706	; 0x4706 <chip_deinit>
    4b06:	c8 2f       	mov	r28, r24
	if (M2M_SUCCESS != ret) {
    4b08:	81 11       	cpse	r24, r1
    4b0a:	0d c0       	rjmp	.+26     	; 0x4b26 <nm_drv_deinit+0x26>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
		goto ERR1;
	}

	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
    4b0c:	80 e0       	ldi	r24, 0x00	; 0
    4b0e:	0e 94 29 2a 	call	0x5452	; 0x5452 <spi_flash_enable>
    4b12:	c8 2f       	mov	r28, r24
	if (M2M_SUCCESS != ret) {
    4b14:	81 11       	cpse	r24, r1
    4b16:	07 c0       	rjmp	.+14     	; 0x4b26 <nm_drv_deinit+0x26>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
		goto ERR1;
	}

	ret = nm_bus_iface_deinit();
    4b18:	0e 94 b1 23 	call	0x4762	; 0x4762 <nm_bus_iface_deinit>
    4b1c:	c8 2f       	mov	r28, r24
	if (M2M_SUCCESS != ret) {
    4b1e:	81 11       	cpse	r24, r1
    4b20:	02 c0       	rjmp	.+4      	; 0x4b26 <nm_drv_deinit+0x26>
		M2M_ERR("[nmi stop]: fail init bus\n");
		goto ERR1;
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
    4b22:	0e 94 37 28 	call	0x506e	; 0x506e <nm_spi_deinit>
#endif

ERR1:
	return ret;
}
    4b26:	8c 2f       	mov	r24, r28
    4b28:	cf 91       	pop	r28
    4b2a:	08 95       	ret

00004b2c <nmi_spi_write>:
	spi.u16Sz     = sz;
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
}

static sint8 nmi_spi_write(uint8 *b, uint16 sz)
{
    4b2c:	cf 93       	push	r28
    4b2e:	df 93       	push	r29
    4b30:	cd b7       	in	r28, 0x3d	; 61
    4b32:	de b7       	in	r29, 0x3e	; 62
    4b34:	26 97       	sbiw	r28, 0x06	; 6
    4b36:	cd bf       	out	0x3d, r28	; 61
    4b38:	de bf       	out	0x3e, r29	; 62
	tstrNmSpiRw spi;
	spi.pu8InBuf  = b;
    4b3a:	89 83       	std	Y+1, r24	; 0x01
    4b3c:	9a 83       	std	Y+2, r25	; 0x02
	spi.pu8OutBuf = NULL;
    4b3e:	1b 82       	std	Y+3, r1	; 0x03
    4b40:	1c 82       	std	Y+4, r1	; 0x04
	spi.u16Sz     = sz;
    4b42:	6d 83       	std	Y+5, r22	; 0x05
    4b44:	7e 83       	std	Y+6, r23	; 0x06
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    4b46:	be 01       	movw	r22, r28
    4b48:	6f 5f       	subi	r22, 0xFF	; 255
    4b4a:	7f 4f       	sbci	r23, 0xFF	; 255
    4b4c:	83 e0       	ldi	r24, 0x03	; 3
    4b4e:	0e 94 48 1b 	call	0x3690	; 0x3690 <nm_bus_ioctl>
}
    4b52:	26 96       	adiw	r28, 0x06	; 6
    4b54:	cd bf       	out	0x3d, r28	; 61
    4b56:	de bf       	out	0x3e, r29	; 62
    4b58:	df 91       	pop	r29
    4b5a:	cf 91       	pop	r28
    4b5c:	08 95       	ret

00004b5e <nmi_spi_read>:
#define DATA_PKT_SZ DATA_PKT_SZ_8K

static uint8 gu8Crc_off = 0;

static sint8 nmi_spi_read(uint8 *b, uint16 sz)
{
    4b5e:	cf 93       	push	r28
    4b60:	df 93       	push	r29
    4b62:	cd b7       	in	r28, 0x3d	; 61
    4b64:	de b7       	in	r29, 0x3e	; 62
    4b66:	26 97       	sbiw	r28, 0x06	; 6
    4b68:	cd bf       	out	0x3d, r28	; 61
    4b6a:	de bf       	out	0x3e, r29	; 62
	tstrNmSpiRw spi;
	spi.pu8InBuf  = NULL;
    4b6c:	19 82       	std	Y+1, r1	; 0x01
    4b6e:	1a 82       	std	Y+2, r1	; 0x02
	spi.pu8OutBuf = b;
    4b70:	8b 83       	std	Y+3, r24	; 0x03
    4b72:	9c 83       	std	Y+4, r25	; 0x04
	spi.u16Sz     = sz;
    4b74:	6d 83       	std	Y+5, r22	; 0x05
    4b76:	7e 83       	std	Y+6, r23	; 0x06
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    4b78:	be 01       	movw	r22, r28
    4b7a:	6f 5f       	subi	r22, 0xFF	; 255
    4b7c:	7f 4f       	sbci	r23, 0xFF	; 255
    4b7e:	83 e0       	ldi	r24, 0x03	; 3
    4b80:	0e 94 48 1b 	call	0x3690	; 0x3690 <nm_bus_ioctl>
}
    4b84:	26 96       	adiw	r28, 0x06	; 6
    4b86:	cd bf       	out	0x3d, r28	; 61
    4b88:	de bf       	out	0x3e, r29	; 62
    4b8a:	df 91       	pop	r29
    4b8c:	cf 91       	pop	r28
    4b8e:	08 95       	ret

00004b90 <spi_cmd_rsp>:

	return result;
}

static sint8 spi_cmd_rsp(uint8 cmd)
{
    4b90:	0f 93       	push	r16
    4b92:	1f 93       	push	r17
    4b94:	cf 93       	push	r28
    4b96:	df 93       	push	r29
    4b98:	1f 92       	push	r1
    4b9a:	cd b7       	in	r28, 0x3d	; 61
    4b9c:	de b7       	in	r29, 0x3e	; 62
    4b9e:	08 2f       	mov	r16, r24
	sint8 s8RetryCnt;

	/**
	    Command/Control response
	**/
	if ((cmd == CMD_RESET) || (cmd == CMD_TERMINATE) || (cmd == CMD_REPEAT)) {
    4ba0:	8f 3c       	cpi	r24, 0xCF	; 207
    4ba2:	31 f0       	breq	.+12     	; 0x4bb0 <spi_cmd_rsp+0x20>
    4ba4:	8b e3       	ldi	r24, 0x3B	; 59
    4ba6:	80 0f       	add	r24, r16
    4ba8:	82 30       	cpi	r24, 0x02	; 2
    4baa:	10 f0       	brcs	.+4      	; 0x4bb0 <spi_cmd_rsp+0x20>

	return result;
}

static sint8 spi_cmd_rsp(uint8 cmd)
{
    4bac:	1b e0       	ldi	r17, 0x0B	; 11
    4bae:	0f c0       	rjmp	.+30     	; 0x4bce <spi_cmd_rsp+0x3e>

	/**
	    Command/Control response
	**/
	if ((cmd == CMD_RESET) || (cmd == CMD_TERMINATE) || (cmd == CMD_REPEAT)) {
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    4bb0:	61 e0       	ldi	r22, 0x01	; 1
    4bb2:	70 e0       	ldi	r23, 0x00	; 0
    4bb4:	ce 01       	movw	r24, r28
    4bb6:	01 96       	adiw	r24, 0x01	; 1
    4bb8:	0e 94 af 25 	call	0x4b5e	; 0x4b5e <nmi_spi_read>
    4bbc:	88 23       	and	r24, r24
    4bbe:	b1 f3       	breq	.-20     	; 0x4bac <spi_cmd_rsp+0x1c>
			result = N_FAIL;
    4bc0:	80 e0       	ldi	r24, 0x00	; 0
    4bc2:	1d c0       	rjmp	.+58     	; 0x4bfe <spi_cmd_rsp+0x6e>
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
			goto _fail_;
		}
	} while ((rsp != cmd) && (s8RetryCnt-- > 0));
    4bc4:	89 81       	ldd	r24, Y+1	; 0x01
    4bc6:	08 17       	cp	r16, r24
    4bc8:	59 f0       	breq	.+22     	; 0x4be0 <spi_cmd_rsp+0x50>
    4bca:	11 50       	subi	r17, 0x01	; 1
    4bcc:	49 f0       	breq	.+18     	; 0x4be0 <spi_cmd_rsp+0x50>
	}

	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
	do {
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    4bce:	61 e0       	ldi	r22, 0x01	; 1
    4bd0:	70 e0       	ldi	r23, 0x00	; 0
    4bd2:	ce 01       	movw	r24, r28
    4bd4:	01 96       	adiw	r24, 0x01	; 1
    4bd6:	0e 94 af 25 	call	0x4b5e	; 0x4b5e <nmi_spi_read>
    4bda:	88 23       	and	r24, r24
    4bdc:	99 f3       	breq	.-26     	; 0x4bc4 <spi_cmd_rsp+0x34>
    4bde:	f0 cf       	rjmp	.-32     	; 0x4bc0 <spi_cmd_rsp+0x30>
    4be0:	1b e0       	ldi	r17, 0x0B	; 11
	    State response
	**/
	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
	do {
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    4be2:	61 e0       	ldi	r22, 0x01	; 1
    4be4:	70 e0       	ldi	r23, 0x00	; 0
    4be6:	ce 01       	movw	r24, r28
    4be8:	01 96       	adiw	r24, 0x01	; 1
    4bea:	0e 94 af 25 	call	0x4b5e	; 0x4b5e <nmi_spi_read>
    4bee:	81 11       	cpse	r24, r1
    4bf0:	e7 cf       	rjmp	.-50     	; 0x4bc0 <spi_cmd_rsp+0x30>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
			goto _fail_;
		}
	} while ((rsp != 0x00) && (s8RetryCnt-- > 0));
    4bf2:	89 81       	ldd	r24, Y+1	; 0x01
    4bf4:	88 23       	and	r24, r24
    4bf6:	11 f0       	breq	.+4      	; 0x4bfc <spi_cmd_rsp+0x6c>
    4bf8:	11 50       	subi	r17, 0x01	; 1
    4bfa:	99 f7       	brne	.-26     	; 0x4be2 <spi_cmd_rsp+0x52>
}

static sint8 spi_cmd_rsp(uint8 cmd)
{
	uint8 rsp;
	sint8 result = N_OK;
    4bfc:	81 e0       	ldi	r24, 0x01	; 1
	} while ((rsp != 0x00) && (s8RetryCnt-- > 0));

_fail_:

	return result;
}
    4bfe:	0f 90       	pop	r0
    4c00:	df 91       	pop	r29
    4c02:	cf 91       	pop	r28
    4c04:	1f 91       	pop	r17
    4c06:	0f 91       	pop	r16
    4c08:	08 95       	ret

00004c0a <spi_data_read>:
_error_:
	return result;
}
#endif
static sint8 spi_data_read(uint8 *b, uint16 sz, uint8 clockless)
{
    4c0a:	7f 92       	push	r7
    4c0c:	8f 92       	push	r8
    4c0e:	9f 92       	push	r9
    4c10:	af 92       	push	r10
    4c12:	bf 92       	push	r11
    4c14:	cf 92       	push	r12
    4c16:	df 92       	push	r13
    4c18:	ef 92       	push	r14
    4c1a:	ff 92       	push	r15
    4c1c:	0f 93       	push	r16
    4c1e:	1f 93       	push	r17
    4c20:	cf 93       	push	r28
    4c22:	df 93       	push	r29
    4c24:	00 d0       	rcall	.+0      	; 0x4c26 <spi_data_read+0x1c>
    4c26:	1f 92       	push	r1
    4c28:	cd b7       	in	r28, 0x3d	; 61
    4c2a:	de b7       	in	r29, 0x3e	; 62
    4c2c:	4c 01       	movw	r8, r24
    4c2e:	8b 01       	movw	r16, r22
    4c30:	74 2e       	mov	r7, r20
	uint8  rsp;

	/**
	    Data
	**/
	ix = 0;
    4c32:	a1 2c       	mov	r10, r1
    4c34:	b1 2c       	mov	r11, r1
	do {
		if (sz <= DATA_PKT_SZ)
    4c36:	01 30       	cpi	r16, 0x01	; 1
    4c38:	80 e2       	ldi	r24, 0x20	; 32
    4c3a:	18 07       	cpc	r17, r24
    4c3c:	10 f4       	brcc	.+4      	; 0x4c42 <spi_data_read+0x38>
			nbytes = sz;
    4c3e:	68 01       	movw	r12, r16
    4c40:	03 c0       	rjmp	.+6      	; 0x4c48 <spi_data_read+0x3e>
		else
			nbytes = DATA_PKT_SZ;
    4c42:	c1 2c       	mov	r12, r1
    4c44:	90 e2       	ldi	r25, 0x20	; 32
    4c46:	d9 2e       	mov	r13, r25

		/**
		    Data Respnose header
		**/
		retry = SPI_RESP_RETRY_COUNT;
    4c48:	8a e0       	ldi	r24, 0x0A	; 10
    4c4a:	e8 2e       	mov	r14, r24
    4c4c:	f1 2c       	mov	r15, r1
		do {
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    4c4e:	61 e0       	ldi	r22, 0x01	; 1
    4c50:	70 e0       	ldi	r23, 0x00	; 0
    4c52:	ce 01       	movw	r24, r28
    4c54:	03 96       	adiw	r24, 0x03	; 3
    4c56:	0e 94 af 25 	call	0x4b5e	; 0x4b5e <nmi_spi_read>
    4c5a:	88 23       	and	r24, r24
    4c5c:	11 f0       	breq	.+4      	; 0x4c62 <spi_data_read+0x58>
			nbytes = DATA_PKT_SZ;

		/**
		    Data Respnose header
		**/
		retry = SPI_RESP_RETRY_COUNT;
    4c5e:	80 e0       	ldi	r24, 0x00	; 0
    4c60:	2a c0       	rjmp	.+84     	; 0x4cb6 <spi_data_read+0xac>
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
				result = N_FAIL;
				break;
			}
			if (((rsp >> 4) & 0xf) == 0xf)
    4c62:	8b 81       	ldd	r24, Y+3	; 0x03
    4c64:	82 95       	swap	r24
    4c66:	8f 70       	andi	r24, 0x0F	; 15
    4c68:	8f 30       	cpi	r24, 0x0F	; 15
    4c6a:	29 f0       	breq	.+10     	; 0x4c76 <spi_data_read+0x6c>
    4c6c:	81 e0       	ldi	r24, 0x01	; 1
    4c6e:	e8 1a       	sub	r14, r24
    4c70:	f1 08       	sbc	r15, r1
    4c72:	68 f7       	brcc	.-38     	; 0x4c4e <spi_data_read+0x44>
    4c74:	f4 cf       	rjmp	.-24     	; 0x4c5e <spi_data_read+0x54>
		} while (retry--);

		if (result == N_FAIL)
			break;

		if (retry <= 0) {
    4c76:	ef 28       	or	r14, r15
    4c78:	91 f3       	breq	.-28     	; 0x4c5e <spi_data_read+0x54>
		}

		/**
		    Read bytes
		**/
		if (M2M_SUCCESS != nmi_spi_read(&b[ix], nbytes)) {
    4c7a:	b6 01       	movw	r22, r12
    4c7c:	c4 01       	movw	r24, r8
    4c7e:	8a 0d       	add	r24, r10
    4c80:	9b 1d       	adc	r25, r11
    4c82:	0e 94 af 25 	call	0x4b5e	; 0x4b5e <nmi_spi_read>
    4c86:	81 11       	cpse	r24, r1
    4c88:	ea cf       	rjmp	.-44     	; 0x4c5e <spi_data_read+0x54>
			M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
			result = N_FAIL;
			break;
		}
		if (!clockless) {
    4c8a:	77 20       	and	r7, r7
    4c8c:	39 f0       	breq	.+14     	; 0x4c9c <spi_data_read+0x92>
					result = N_FAIL;
					break;
				}
			}
		}
		ix += nbytes;
    4c8e:	ac 0c       	add	r10, r12
    4c90:	bd 1c       	adc	r11, r13
		sz -= nbytes;
    4c92:	0c 19       	sub	r16, r12
    4c94:	1d 09       	sbc	r17, r13

	} while (sz);
    4c96:	79 f6       	brne	.-98     	; 0x4c36 <spi_data_read+0x2c>
    4c98:	81 e0       	ldi	r24, 0x01	; 1

	return result;
    4c9a:	0d c0       	rjmp	.+26     	; 0x4cb6 <spi_data_read+0xac>
		}
		if (!clockless) {
			/**
			Read Crc
			**/
			if (!gu8Crc_off) {
    4c9c:	80 91 3b 2a 	lds	r24, 0x2A3B	; 0x802a3b <gu8Crc_off>
    4ca0:	81 11       	cpse	r24, r1
    4ca2:	f5 cf       	rjmp	.-22     	; 0x4c8e <spi_data_read+0x84>
				if (M2M_SUCCESS != nmi_spi_read(crc, 2)) {
    4ca4:	62 e0       	ldi	r22, 0x02	; 2
    4ca6:	70 e0       	ldi	r23, 0x00	; 0
    4ca8:	ce 01       	movw	r24, r28
    4caa:	01 96       	adiw	r24, 0x01	; 1
    4cac:	0e 94 af 25 	call	0x4b5e	; 0x4b5e <nmi_spi_read>
    4cb0:	88 23       	and	r24, r24
    4cb2:	69 f3       	breq	.-38     	; 0x4c8e <spi_data_read+0x84>
    4cb4:	d4 cf       	rjmp	.-88     	; 0x4c5e <spi_data_read+0x54>
		sz -= nbytes;

	} while (sz);

	return result;
}
    4cb6:	23 96       	adiw	r28, 0x03	; 3
    4cb8:	cd bf       	out	0x3d, r28	; 61
    4cba:	de bf       	out	0x3e, r29	; 62
    4cbc:	df 91       	pop	r29
    4cbe:	cf 91       	pop	r28
    4cc0:	1f 91       	pop	r17
    4cc2:	0f 91       	pop	r16
    4cc4:	ff 90       	pop	r15
    4cc6:	ef 90       	pop	r14
    4cc8:	df 90       	pop	r13
    4cca:	cf 90       	pop	r12
    4ccc:	bf 90       	pop	r11
    4cce:	af 90       	pop	r10
    4cd0:	9f 90       	pop	r9
    4cd2:	8f 90       	pop	r8
    4cd4:	7f 90       	pop	r7
    4cd6:	08 95       	ret

00004cd8 <spi_cmd>:
#define DATA_PKT_SZ_4K (4 * 1024)
#define DATA_PKT_SZ_8K (8 * 1024)
#define DATA_PKT_SZ DATA_PKT_SZ_8K

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz, uint8 clockless)
{
    4cd8:	af 92       	push	r10
    4cda:	cf 92       	push	r12
    4cdc:	df 92       	push	r13
    4cde:	ef 92       	push	r14
    4ce0:	ff 92       	push	r15
    4ce2:	0f 93       	push	r16
    4ce4:	1f 93       	push	r17
    4ce6:	cf 93       	push	r28
    4ce8:	df 93       	push	r29
    4cea:	cd b7       	in	r28, 0x3d	; 61
    4cec:	de b7       	in	r29, 0x3e	; 62
    4cee:	29 97       	sbiw	r28, 0x09	; 9
    4cf0:	cd bf       	out	0x3d, r28	; 61
    4cf2:	de bf       	out	0x3e, r29	; 62
	uint8 bc[9];
	uint8 len    = 5;
	sint8 result = N_OK;

	bc[0] = cmd;
    4cf4:	89 83       	std	Y+1, r24	; 0x01
	switch (cmd) {
    4cf6:	90 e0       	ldi	r25, 0x00	; 0
    4cf8:	fc 01       	movw	r30, r24
    4cfa:	e1 5c       	subi	r30, 0xC1	; 193
    4cfc:	f1 09       	sbc	r31, r1
    4cfe:	ef 30       	cpi	r30, 0x0F	; 15
    4d00:	f1 05       	cpc	r31, r1
    4d02:	08 f0       	brcs	.+2      	; 0x4d06 <spi_cmd+0x2e>
    4d04:	50 c0       	rjmp	.+160    	; 0x4da6 <spi_cmd+0xce>
    4d06:	e1 5b       	subi	r30, 0xB1	; 177
    4d08:	ff 4f       	sbci	r31, 0xFF	; 255
    4d0a:	0c 94 3e 2d 	jmp	0x5a7c	; 0x5a7c <__tablejump2__>
	case CMD_SINGLE_READ: /* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
    4d0e:	6a 83       	std	Y+2, r22	; 0x02
		bc[2] = (uint8)(adr >> 8);
    4d10:	5b 83       	std	Y+3, r21	; 0x03
		bc[3] = (uint8)adr;
    4d12:	4c 83       	std	Y+4, r20	; 0x04
    4d14:	11 c0       	rjmp	.+34     	; 0x4d38 <spi_cmd+0x60>
		len   = 5;
		break;
	case CMD_INTERNAL_READ: /* internal register read */
		bc[1] = (uint8)(adr >> 8);
    4d16:	bb 27       	eor	r27, r27
    4d18:	a7 2f       	mov	r26, r23
    4d1a:	96 2f       	mov	r25, r22
    4d1c:	85 2f       	mov	r24, r21
		if (clockless)
    4d1e:	a1 10       	cpse	r10, r1
			bc[1] |= (1 << 7);
    4d20:	80 68       	ori	r24, 0x80	; 128
    4d22:	8a 83       	std	Y+2, r24	; 0x02
		bc[2] = (uint8)adr;
    4d24:	4b 83       	std	Y+3, r20	; 0x03
		bc[3] = 0x00;
    4d26:	1c 82       	std	Y+4, r1	; 0x04
    4d28:	07 c0       	rjmp	.+14     	; 0x4d38 <spi_cmd+0x60>
		bc[2] = 0x00;
		bc[3] = 0x00;
		len   = 5;
		break;
	case CMD_REPEAT: /* repeat */
		bc[1] = 0x00;
    4d2a:	1a 82       	std	Y+2, r1	; 0x02
		bc[2] = 0x00;
    4d2c:	1b 82       	std	Y+3, r1	; 0x03
    4d2e:	fb cf       	rjmp	.-10     	; 0x4d26 <spi_cmd+0x4e>
		bc[3] = 0x00;
		len   = 5;
		break;
	case CMD_RESET: /* reset */
		bc[1] = 0xff;
    4d30:	8f ef       	ldi	r24, 0xFF	; 255
    4d32:	8a 83       	std	Y+2, r24	; 0x02
		bc[2] = 0xff;
    4d34:	8b 83       	std	Y+3, r24	; 0x03
		bc[3] = 0xff;
    4d36:	8c 83       	std	Y+4, r24	; 0x04
		len   = 5;
    4d38:	65 e0       	ldi	r22, 0x05	; 5
		break;
    4d3a:	37 c0       	rjmp	.+110    	; 0x4daa <spi_cmd+0xd2>
	case CMD_DMA_WRITE: /* dma write */
	case CMD_DMA_READ:  /* dma read */
		bc[1] = (uint8)(adr >> 16);
    4d3c:	6a 83       	std	Y+2, r22	; 0x02
		bc[2] = (uint8)(adr >> 8);
    4d3e:	5b 83       	std	Y+3, r21	; 0x03
		bc[3] = (uint8)adr;
    4d40:	4c 83       	std	Y+4, r20	; 0x04
		bc[4] = (uint8)(sz >> 8);
    4d42:	dd 82       	std	Y+5, r13	; 0x05
		bc[5] = (uint8)(sz);
    4d44:	ce 82       	std	Y+6, r12	; 0x06
		len   = 7;
    4d46:	67 e0       	ldi	r22, 0x07	; 7
		break;
    4d48:	30 c0       	rjmp	.+96     	; 0x4daa <spi_cmd+0xd2>
	case CMD_DMA_EXT_WRITE: /* dma extended write */
	case CMD_DMA_EXT_READ:  /* dma extended read */
		bc[1] = (uint8)(adr >> 16);
    4d4a:	6a 83       	std	Y+2, r22	; 0x02
		bc[2] = (uint8)(adr >> 8);
    4d4c:	5b 83       	std	Y+3, r21	; 0x03
		bc[3] = (uint8)adr;
    4d4e:	4c 83       	std	Y+4, r20	; 0x04
		bc[4] = (uint8)(sz >> 16);
    4d50:	ed 82       	std	Y+5, r14	; 0x05
		bc[5] = (uint8)(sz >> 8);
    4d52:	de 82       	std	Y+6, r13	; 0x06
		bc[6] = (uint8)(sz);
    4d54:	cf 82       	std	Y+7, r12	; 0x07
    4d56:	0c c0       	rjmp	.+24     	; 0x4d70 <spi_cmd+0x98>
		len   = 8;
		break;
	case CMD_INTERNAL_WRITE: /* internal register write */
		bc[1] = (uint8)(adr >> 8);
    4d58:	bb 27       	eor	r27, r27
    4d5a:	a7 2f       	mov	r26, r23
    4d5c:	96 2f       	mov	r25, r22
    4d5e:	85 2f       	mov	r24, r21
		if (clockless)
    4d60:	a1 10       	cpse	r10, r1
			bc[1] |= (1 << 7);
    4d62:	80 68       	ori	r24, 0x80	; 128
    4d64:	8a 83       	std	Y+2, r24	; 0x02
		bc[2] = (uint8)(adr);
    4d66:	4b 83       	std	Y+3, r20	; 0x03
		bc[3] = (uint8)(u32data >> 24);
    4d68:	3c 83       	std	Y+4, r19	; 0x04
		bc[4] = (uint8)(u32data >> 16);
    4d6a:	2d 83       	std	Y+5, r18	; 0x05
		bc[5] = (uint8)(u32data >> 8);
    4d6c:	1e 83       	std	Y+6, r17	; 0x06
		bc[6] = (uint8)(u32data);
    4d6e:	0f 83       	std	Y+7, r16	; 0x07
		len   = 8;
    4d70:	68 e0       	ldi	r22, 0x08	; 8
		break;
    4d72:	1b c0       	rjmp	.+54     	; 0x4daa <spi_cmd+0xd2>
	case CMD_SINGLE_WRITE: /* single word write */
		bc[1] = (uint8)(adr >> 16);
    4d74:	6a 83       	std	Y+2, r22	; 0x02
		bc[2] = (uint8)(adr >> 8);
    4d76:	5b 83       	std	Y+3, r21	; 0x03
		bc[3] = (uint8)(adr);
    4d78:	4c 83       	std	Y+4, r20	; 0x04
		bc[4] = (uint8)(u32data >> 24);
    4d7a:	3d 83       	std	Y+5, r19	; 0x05
		bc[5] = (uint8)(u32data >> 16);
    4d7c:	2e 83       	std	Y+6, r18	; 0x06
		bc[6] = (uint8)(u32data >> 8);
    4d7e:	1f 83       	std	Y+7, r17	; 0x07
		bc[7] = (uint8)(u32data);
    4d80:	08 87       	std	Y+8, r16	; 0x08
		len   = 9;
    4d82:	69 e0       	ldi	r22, 0x09	; 9
		break;
    4d84:	12 c0       	rjmp	.+36     	; 0x4daa <spi_cmd+0xd2>
		break;
	}

	if (result) {
		if (!gu8Crc_off)
			bc[len - 1] = (crc7(0x7f, (const uint8 *)&bc[0], len - 1)) << 1;
    4d86:	a1 e0       	ldi	r26, 0x01	; 1
    4d88:	b0 e0       	ldi	r27, 0x00	; 0
    4d8a:	ac 0f       	add	r26, r28
    4d8c:	bd 1f       	adc	r27, r29
    4d8e:	a8 0f       	add	r26, r24
    4d90:	b9 1f       	adc	r27, r25
    4d92:	ee 0f       	add	r30, r30
    4d94:	ec 93       	st	X, r30
		else
			len -= 1;

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
    4d96:	70 e0       	ldi	r23, 0x00	; 0
    4d98:	ce 01       	movw	r24, r28
    4d9a:	01 96       	adiw	r24, 0x01	; 1
    4d9c:	0e 94 96 25 	call	0x4b2c	; 0x4b2c <nmi_spi_write>
    4da0:	91 e0       	ldi	r25, 0x01	; 1
    4da2:	88 23       	and	r24, r24
    4da4:	09 f1       	breq	.+66     	; 0x4de8 <spi_cmd+0x110>
	uint8 bc[9];
	uint8 len    = 5;
	sint8 result = N_OK;

	bc[0] = cmd;
	switch (cmd) {
    4da6:	90 e0       	ldi	r25, 0x00	; 0
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
			result = N_FAIL;
		}
	}

	return result;
    4da8:	1f c0       	rjmp	.+62     	; 0x4de8 <spi_cmd+0x110>
		result = N_FAIL;
		break;
	}

	if (result) {
		if (!gu8Crc_off)
    4daa:	80 91 3b 2a 	lds	r24, 0x2A3B	; 0x802a3b <gu8Crc_off>
    4dae:	81 11       	cpse	r24, r1
    4db0:	19 c0       	rjmp	.+50     	; 0x4de4 <spi_cmd+0x10c>
			bc[len - 1] = (crc7(0x7f, (const uint8 *)&bc[0], len - 1)) << 1;
    4db2:	86 2f       	mov	r24, r22
    4db4:	90 e0       	ldi	r25, 0x00	; 0
    4db6:	01 97       	sbiw	r24, 0x01	; 1
    4db8:	8c 01       	movw	r16, r24
    4dba:	09 2e       	mov	r0, r25
    4dbc:	00 0c       	add	r0, r0
    4dbe:	22 0b       	sbc	r18, r18
    4dc0:	33 0b       	sbc	r19, r19
    4dc2:	de 01       	movw	r26, r28
    4dc4:	11 96       	adiw	r26, 0x01	; 1
    4dc6:	ef e7       	ldi	r30, 0x7F	; 127
	return pgm_read_byte(&(crc7_syndrome_table[(crc << 1) ^ data]));
}

static uint8 crc7(uint8 crc, const uint8 *buffer, uint32 len)
{
	while (len--)
    4dc8:	01 50       	subi	r16, 0x01	; 1
    4dca:	11 09       	sbc	r17, r1
    4dcc:	21 09       	sbc	r18, r1
    4dce:	31 09       	sbc	r19, r1
    4dd0:	d0 f2       	brcs	.-76     	; 0x4d86 <spi_cmd+0xae>
		crc = crc7_byte(crc, *buffer++);
    4dd2:	4d 91       	ld	r20, X+
       0x33, 0x3a, 0x21, 0x28, 0x5f, 0x56, 0x4d, 0x44, 0x7b, 0x72, 0x69, 0x60, 0x0e, 0x07, 0x1c, 0x15, 0x2a, 0x23, 0x38,
       0x31, 0x46, 0x4f, 0x54, 0x5d, 0x62, 0x6b, 0x70, 0x79};

static uint8 crc7_byte(uint8 crc, uint8 data)
{
	return pgm_read_byte(&(crc7_syndrome_table[(crc << 1) ^ data]));
    4dd4:	f0 e0       	ldi	r31, 0x00	; 0
    4dd6:	ee 0f       	add	r30, r30
    4dd8:	ff 1f       	adc	r31, r31
    4dda:	e4 27       	eor	r30, r20
    4ddc:	e4 54       	subi	r30, 0x44	; 68
    4dde:	ff 4f       	sbci	r31, 0xFF	; 255
    4de0:	e4 91       	lpm	r30, Z
    4de2:	f2 cf       	rjmp	.-28     	; 0x4dc8 <spi_cmd+0xf0>

	if (result) {
		if (!gu8Crc_off)
			bc[len - 1] = (crc7(0x7f, (const uint8 *)&bc[0], len - 1)) << 1;
		else
			len -= 1;
    4de4:	61 50       	subi	r22, 0x01	; 1
    4de6:	d7 cf       	rjmp	.-82     	; 0x4d96 <spi_cmd+0xbe>
			result = N_FAIL;
		}
	}

	return result;
}
    4de8:	89 2f       	mov	r24, r25
    4dea:	29 96       	adiw	r28, 0x09	; 9
    4dec:	cd bf       	out	0x3d, r28	; 61
    4dee:	de bf       	out	0x3e, r29	; 62
    4df0:	df 91       	pop	r29
    4df2:	cf 91       	pop	r28
    4df4:	1f 91       	pop	r17
    4df6:	0f 91       	pop	r16
    4df8:	ff 90       	pop	r15
    4dfa:	ef 90       	pop	r14
    4dfc:	df 90       	pop	r13
    4dfe:	cf 90       	pop	r12
    4e00:	af 90       	pop	r10
    4e02:	08 95       	ret

00004e04 <spi_write_reg>:
    Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
    4e04:	4f 92       	push	r4
    4e06:	5f 92       	push	r5
    4e08:	6f 92       	push	r6
    4e0a:	7f 92       	push	r7
    4e0c:	9f 92       	push	r9
    4e0e:	af 92       	push	r10
    4e10:	bf 92       	push	r11
    4e12:	cf 92       	push	r12
    4e14:	df 92       	push	r13
    4e16:	ef 92       	push	r14
    4e18:	ff 92       	push	r15
    4e1a:	0f 93       	push	r16
    4e1c:	1f 93       	push	r17
    4e1e:	cf 93       	push	r28
    4e20:	df 93       	push	r29
    4e22:	cd b7       	in	r28, 0x3d	; 61
    4e24:	de b7       	in	r29, 0x3e	; 62
    4e26:	26 97       	sbiw	r28, 0x06	; 6
    4e28:	cd bf       	out	0x3d, r28	; 61
    4e2a:	de bf       	out	0x3e, r29	; 62
    4e2c:	2b 01       	movw	r4, r22
    4e2e:	3c 01       	movw	r6, r24
    4e30:	29 83       	std	Y+1, r18	; 0x01
    4e32:	3a 83       	std	Y+2, r19	; 0x02
    4e34:	4b 83       	std	Y+3, r20	; 0x03
    4e36:	5c 83       	std	Y+4, r21	; 0x04
    4e38:	81 e3       	ldi	r24, 0x31	; 49
    4e3a:	48 16       	cp	r4, r24
    4e3c:	51 04       	cpc	r5, r1
    4e3e:	61 04       	cpc	r6, r1
    4e40:	71 04       	cpc	r7, r1
    4e42:	18 f4       	brcc	.+6      	; 0x4e4a <spi_write_reg+0x46>
    4e44:	23 ec       	ldi	r18, 0xC3	; 195
    4e46:	b2 2e       	mov	r11, r18
    4e48:	02 c0       	rjmp	.+4      	; 0x4e4e <spi_write_reg+0x4a>
    4e4a:	99 ec       	ldi	r25, 0xC9	; 201
    4e4c:	b9 2e       	mov	r11, r25
    4e4e:	81 e3       	ldi	r24, 0x31	; 49
    4e50:	48 16       	cp	r4, r24
    4e52:	51 04       	cpc	r5, r1
    4e54:	61 04       	cpc	r6, r1
    4e56:	71 04       	cpc	r7, r1
    4e58:	18 f4       	brcc	.+6      	; 0x4e60 <spi_write_reg+0x5c>
    4e5a:	99 24       	eor	r9, r9
    4e5c:	93 94       	inc	r9
    4e5e:	01 c0       	rjmp	.+2      	; 0x4e62 <spi_write_reg+0x5e>
    4e60:	91 2c       	mov	r9, r1
    4e62:	8a e0       	ldi	r24, 0x0A	; 10
    4e64:	8e 83       	std	Y+6, r24	; 0x06
		cmd       = CMD_SINGLE_WRITE;
		clockless = 0;
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
    4e66:	a9 2c       	mov	r10, r9
    4e68:	84 e0       	ldi	r24, 0x04	; 4
    4e6a:	c8 2e       	mov	r12, r24
    4e6c:	d1 2c       	mov	r13, r1
    4e6e:	e1 2c       	mov	r14, r1
    4e70:	f1 2c       	mov	r15, r1
    4e72:	09 81       	ldd	r16, Y+1	; 0x01
    4e74:	1a 81       	ldd	r17, Y+2	; 0x02
    4e76:	2b 81       	ldd	r18, Y+3	; 0x03
    4e78:	3c 81       	ldd	r19, Y+4	; 0x04
    4e7a:	b3 01       	movw	r22, r6
    4e7c:	a2 01       	movw	r20, r4
    4e7e:	8b 2d       	mov	r24, r11
    4e80:	0e 94 6c 26 	call	0x4cd8	; 0x4cd8 <spi_cmd>
    4e84:	8d 83       	std	Y+5, r24	; 0x05
	if (result != N_OK) {
    4e86:	81 30       	cpi	r24, 0x01	; 1
    4e88:	31 f4       	brne	.+12     	; 0x4e96 <spi_write_reg+0x92>
		M2M_ERR("[nmi spi]: Failed cmd, write reg (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}

	result = spi_cmd_rsp(cmd);
    4e8a:	8b 2d       	mov	r24, r11
    4e8c:	0e 94 c8 25 	call	0x4b90	; 0x4b90 <spi_cmd_rsp>
    4e90:	8d 83       	std	Y+5, r24	; 0x05
		goto _FAIL_;
	}

#endif
_FAIL_:
	if (result != N_OK) {
    4e92:	81 30       	cpi	r24, 0x01	; 1
    4e94:	09 f1       	breq	.+66     	; 0x4ed8 <spi_write_reg+0xd4>
		nm_bsp_sleep(1);
    4e96:	61 e0       	ldi	r22, 0x01	; 1
    4e98:	70 e0       	ldi	r23, 0x00	; 0
    4e9a:	80 e0       	ldi	r24, 0x00	; 0
    4e9c:	90 e0       	ldi	r25, 0x00	; 0
    4e9e:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <nm_bsp_sleep>
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    4ea2:	a1 2c       	mov	r10, r1
    4ea4:	c1 2c       	mov	r12, r1
    4ea6:	d1 2c       	mov	r13, r1
    4ea8:	76 01       	movw	r14, r12
    4eaa:	00 e0       	ldi	r16, 0x00	; 0
    4eac:	10 e0       	ldi	r17, 0x00	; 0
    4eae:	98 01       	movw	r18, r16
    4eb0:	40 e0       	ldi	r20, 0x00	; 0
    4eb2:	50 e0       	ldi	r21, 0x00	; 0
    4eb4:	ba 01       	movw	r22, r20
    4eb6:	8f ec       	ldi	r24, 0xCF	; 207
    4eb8:	0e 94 6c 26 	call	0x4cd8	; 0x4cd8 <spi_cmd>
		spi_cmd_rsp(CMD_RESET);
    4ebc:	8f ec       	ldi	r24, 0xCF	; 207
    4ebe:	0e 94 c8 25 	call	0x4b90	; 0x4b90 <spi_cmd_rsp>
		M2M_ERR("Reset and retry %d %lx %lx\n", retry, addr, u32data);
		nm_bsp_sleep(1);
    4ec2:	61 e0       	ldi	r22, 0x01	; 1
    4ec4:	70 e0       	ldi	r23, 0x00	; 0
    4ec6:	80 e0       	ldi	r24, 0x00	; 0
    4ec8:	90 e0       	ldi	r25, 0x00	; 0
    4eca:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <nm_bsp_sleep>
    4ece:	8e 81       	ldd	r24, Y+6	; 0x06
    4ed0:	81 50       	subi	r24, 0x01	; 1
    4ed2:	8e 83       	std	Y+6, r24	; 0x06
		retry--;
		if (retry)
    4ed4:	81 11       	cpse	r24, r1
    4ed6:	c7 cf       	rjmp	.-114    	; 0x4e66 <spi_write_reg+0x62>
			goto _RETRY_;
	}

	return result;
}
    4ed8:	8d 81       	ldd	r24, Y+5	; 0x05
    4eda:	26 96       	adiw	r28, 0x06	; 6
    4edc:	cd bf       	out	0x3d, r28	; 61
    4ede:	de bf       	out	0x3e, r29	; 62
    4ee0:	df 91       	pop	r29
    4ee2:	cf 91       	pop	r28
    4ee4:	1f 91       	pop	r17
    4ee6:	0f 91       	pop	r16
    4ee8:	ff 90       	pop	r15
    4eea:	ef 90       	pop	r14
    4eec:	df 90       	pop	r13
    4eee:	cf 90       	pop	r12
    4ef0:	bf 90       	pop	r11
    4ef2:	af 90       	pop	r10
    4ef4:	9f 90       	pop	r9
    4ef6:	7f 90       	pop	r7
    4ef8:	6f 90       	pop	r6
    4efa:	5f 90       	pop	r5
    4efc:	4f 90       	pop	r4
    4efe:	08 95       	ret

00004f00 <spi_read_reg>:

	return result;
}

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
    4f00:	2f 92       	push	r2
    4f02:	3f 92       	push	r3
    4f04:	4f 92       	push	r4
    4f06:	5f 92       	push	r5
    4f08:	6f 92       	push	r6
    4f0a:	7f 92       	push	r7
    4f0c:	8f 92       	push	r8
    4f0e:	9f 92       	push	r9
    4f10:	af 92       	push	r10
    4f12:	bf 92       	push	r11
    4f14:	cf 92       	push	r12
    4f16:	df 92       	push	r13
    4f18:	ef 92       	push	r14
    4f1a:	ff 92       	push	r15
    4f1c:	0f 93       	push	r16
    4f1e:	1f 93       	push	r17
    4f20:	cf 93       	push	r28
    4f22:	df 93       	push	r29
    4f24:	cd b7       	in	r28, 0x3d	; 61
    4f26:	de b7       	in	r29, 0x3e	; 62
    4f28:	25 97       	sbiw	r28, 0x05	; 5
    4f2a:	cd bf       	out	0x3d, r28	; 61
    4f2c:	de bf       	out	0x3e, r29	; 62
    4f2e:	1b 01       	movw	r2, r22
    4f30:	2c 01       	movw	r4, r24
    4f32:	3a 01       	movw	r6, r20
    4f34:	8f ef       	ldi	r24, 0xFF	; 255
    4f36:	28 16       	cp	r2, r24
    4f38:	31 04       	cpc	r3, r1
    4f3a:	41 04       	cpc	r4, r1
    4f3c:	51 04       	cpc	r5, r1
    4f3e:	09 f0       	breq	.+2      	; 0x4f42 <spi_read_reg+0x42>
    4f40:	18 f4       	brcc	.+6      	; 0x4f48 <spi_read_reg+0x48>
    4f42:	e4 ec       	ldi	r30, 0xC4	; 196
    4f44:	ed 83       	std	Y+5, r30	; 0x05
    4f46:	02 c0       	rjmp	.+4      	; 0x4f4c <spi_read_reg+0x4c>
    4f48:	fa ec       	ldi	r31, 0xCA	; 202
    4f4a:	fd 83       	std	Y+5, r31	; 0x05
    4f4c:	8f ef       	ldi	r24, 0xFF	; 255
    4f4e:	28 16       	cp	r2, r24
    4f50:	31 04       	cpc	r3, r1
    4f52:	41 04       	cpc	r4, r1
    4f54:	51 04       	cpc	r5, r1
    4f56:	09 f0       	breq	.+2      	; 0x4f5a <spi_read_reg+0x5a>
    4f58:	18 f4       	brcc	.+6      	; 0x4f60 <spi_read_reg+0x60>
    4f5a:	88 24       	eor	r8, r8
    4f5c:	83 94       	inc	r8
    4f5e:	01 c0       	rjmp	.+2      	; 0x4f62 <spi_read_reg+0x62>
    4f60:	81 2c       	mov	r8, r1
    4f62:	9a e0       	ldi	r25, 0x0A	; 10
    4f64:	99 2e       	mov	r9, r25
		cmd       = CMD_SINGLE_READ;
		clockless = 0;
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, 4, clockless);
    4f66:	a8 2c       	mov	r10, r8
    4f68:	84 e0       	ldi	r24, 0x04	; 4
    4f6a:	c8 2e       	mov	r12, r24
    4f6c:	d1 2c       	mov	r13, r1
    4f6e:	e1 2c       	mov	r14, r1
    4f70:	f1 2c       	mov	r15, r1
    4f72:	00 e0       	ldi	r16, 0x00	; 0
    4f74:	10 e0       	ldi	r17, 0x00	; 0
    4f76:	98 01       	movw	r18, r16
    4f78:	b2 01       	movw	r22, r4
    4f7a:	a1 01       	movw	r20, r2
    4f7c:	8d 81       	ldd	r24, Y+5	; 0x05
    4f7e:	0e 94 6c 26 	call	0x4cd8	; 0x4cd8 <spi_cmd>
    4f82:	b8 2e       	mov	r11, r24
	if (result != N_OK) {
    4f84:	e1 e0       	ldi	r30, 0x01	; 1
    4f86:	8e 13       	cpse	r24, r30
    4f88:	1c c0       	rjmp	.+56     	; 0x4fc2 <spi_read_reg+0xc2>
		M2M_ERR("[nmi spi]: Failed cmd, read reg (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}

	result = spi_cmd_rsp(cmd);
    4f8a:	8d 81       	ldd	r24, Y+5	; 0x05
    4f8c:	0e 94 c8 25 	call	0x4b90	; 0x4b90 <spi_cmd_rsp>
    4f90:	b8 2e       	mov	r11, r24
	if (result != N_OK) {
    4f92:	f1 e0       	ldi	r31, 0x01	; 1
    4f94:	8f 13       	cpse	r24, r31
    4f96:	15 c0       	rjmp	.+42     	; 0x4fc2 <spi_read_reg+0xc2>
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}

	/* to avoid endianess issues */
	result = spi_data_read(&tmp[0], 4, clockless);
    4f98:	48 2d       	mov	r20, r8
    4f9a:	64 e0       	ldi	r22, 0x04	; 4
    4f9c:	70 e0       	ldi	r23, 0x00	; 0
    4f9e:	ce 01       	movw	r24, r28
    4fa0:	01 96       	adiw	r24, 0x01	; 1
    4fa2:	0e 94 05 26 	call	0x4c0a	; 0x4c0a <spi_data_read>
    4fa6:	b8 2e       	mov	r11, r24
	if (result != N_OK) {
    4fa8:	81 e0       	ldi	r24, 0x01	; 1
    4faa:	b8 12       	cpse	r11, r24
    4fac:	0a c0       	rjmp	.+20     	; 0x4fc2 <spi_read_reg+0xc2>
		goto _FAIL_;
	}

#endif

	*u32data = tmp[0] | ((uint32)tmp[1] << 8) | ((uint32)tmp[2] << 16) | ((uint32)tmp[3] << 24);
    4fae:	89 81       	ldd	r24, Y+1	; 0x01
    4fb0:	9a 81       	ldd	r25, Y+2	; 0x02
    4fb2:	ab 81       	ldd	r26, Y+3	; 0x03
    4fb4:	bc 81       	ldd	r27, Y+4	; 0x04
    4fb6:	f3 01       	movw	r30, r6
    4fb8:	80 83       	st	Z, r24
    4fba:	91 83       	std	Z+1, r25	; 0x01
    4fbc:	a2 83       	std	Z+2, r26	; 0x02
    4fbe:	b3 83       	std	Z+3, r27	; 0x03
    4fc0:	1f c0       	rjmp	.+62     	; 0x5000 <spi_read_reg+0x100>

_FAIL_:
	if (result != N_OK) {

		nm_bsp_sleep(1);
    4fc2:	61 e0       	ldi	r22, 0x01	; 1
    4fc4:	70 e0       	ldi	r23, 0x00	; 0
    4fc6:	80 e0       	ldi	r24, 0x00	; 0
    4fc8:	90 e0       	ldi	r25, 0x00	; 0
    4fca:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <nm_bsp_sleep>
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    4fce:	a1 2c       	mov	r10, r1
    4fd0:	c1 2c       	mov	r12, r1
    4fd2:	d1 2c       	mov	r13, r1
    4fd4:	76 01       	movw	r14, r12
    4fd6:	00 e0       	ldi	r16, 0x00	; 0
    4fd8:	10 e0       	ldi	r17, 0x00	; 0
    4fda:	98 01       	movw	r18, r16
    4fdc:	40 e0       	ldi	r20, 0x00	; 0
    4fde:	50 e0       	ldi	r21, 0x00	; 0
    4fe0:	ba 01       	movw	r22, r20
    4fe2:	8f ec       	ldi	r24, 0xCF	; 207
    4fe4:	0e 94 6c 26 	call	0x4cd8	; 0x4cd8 <spi_cmd>
		spi_cmd_rsp(CMD_RESET);
    4fe8:	8f ec       	ldi	r24, 0xCF	; 207
    4fea:	0e 94 c8 25 	call	0x4b90	; 0x4b90 <spi_cmd_rsp>
		M2M_ERR("Reset and retry %d %lx\n", retry, addr);
		nm_bsp_sleep(1);
    4fee:	61 e0       	ldi	r22, 0x01	; 1
    4ff0:	70 e0       	ldi	r23, 0x00	; 0
    4ff2:	80 e0       	ldi	r24, 0x00	; 0
    4ff4:	90 e0       	ldi	r25, 0x00	; 0
    4ff6:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <nm_bsp_sleep>
    4ffa:	9a 94       	dec	r9
		retry--;
		if (retry)
    4ffc:	91 10       	cpse	r9, r1
    4ffe:	b3 cf       	rjmp	.-154    	; 0x4f66 <spi_read_reg+0x66>
			goto _RETRY_;
	}

	return result;
}
    5000:	8b 2d       	mov	r24, r11
    5002:	25 96       	adiw	r28, 0x05	; 5
    5004:	cd bf       	out	0x3d, r28	; 61
    5006:	de bf       	out	0x3e, r29	; 62
    5008:	df 91       	pop	r29
    500a:	cf 91       	pop	r28
    500c:	1f 91       	pop	r17
    500e:	0f 91       	pop	r16
    5010:	ff 90       	pop	r15
    5012:	ef 90       	pop	r14
    5014:	df 90       	pop	r13
    5016:	cf 90       	pop	r12
    5018:	bf 90       	pop	r11
    501a:	af 90       	pop	r10
    501c:	9f 90       	pop	r9
    501e:	8f 90       	pop	r8
    5020:	7f 90       	pop	r7
    5022:	6f 90       	pop	r6
    5024:	5f 90       	pop	r5
    5026:	4f 90       	pop	r4
    5028:	3f 90       	pop	r3
    502a:	2f 90       	pop	r2
    502c:	08 95       	ret

0000502e <nm_spi_reset>:
	}
	nm_spi_write_reg(SPI_BASE + 0x24, val32);
}

sint8 nm_spi_reset(void)
{
    502e:	af 92       	push	r10
    5030:	cf 92       	push	r12
    5032:	df 92       	push	r13
    5034:	ef 92       	push	r14
    5036:	ff 92       	push	r15
    5038:	0f 93       	push	r16
    503a:	1f 93       	push	r17
	spi_cmd(CMD_RESET, 0, 0, 0, 0);
    503c:	a1 2c       	mov	r10, r1
    503e:	c1 2c       	mov	r12, r1
    5040:	d1 2c       	mov	r13, r1
    5042:	76 01       	movw	r14, r12
    5044:	00 e0       	ldi	r16, 0x00	; 0
    5046:	10 e0       	ldi	r17, 0x00	; 0
    5048:	98 01       	movw	r18, r16
    504a:	40 e0       	ldi	r20, 0x00	; 0
    504c:	50 e0       	ldi	r21, 0x00	; 0
    504e:	ba 01       	movw	r22, r20
    5050:	8f ec       	ldi	r24, 0xCF	; 207
    5052:	0e 94 6c 26 	call	0x4cd8	; 0x4cd8 <spi_cmd>
	spi_cmd_rsp(CMD_RESET);
    5056:	8f ec       	ldi	r24, 0xCF	; 207
    5058:	0e 94 c8 25 	call	0x4b90	; 0x4b90 <spi_cmd_rsp>
	return M2M_SUCCESS;
}
    505c:	80 e0       	ldi	r24, 0x00	; 0
    505e:	1f 91       	pop	r17
    5060:	0f 91       	pop	r16
    5062:	ff 90       	pop	r15
    5064:	ef 90       	pop	r14
    5066:	df 90       	pop	r13
    5068:	cf 90       	pop	r12
    506a:	af 90       	pop	r10
    506c:	08 95       	ret

0000506e <nm_spi_deinit>:
 *	@date	27 Feb 2015
 *	@version	1.0
 */
sint8 nm_spi_deinit(void)
{
	gu8Crc_off = 0;
    506e:	10 92 3b 2a 	sts	0x2A3B, r1	; 0x802a3b <gu8Crc_off>
	return M2M_SUCCESS;
}
    5072:	80 e0       	ldi	r24, 0x00	; 0
    5074:	08 95       	ret

00005076 <nm_spi_read_reg>:
 *	@author	M. Abdelmawla
 *	@date	11 July 2012
 *	@version	1.0
 */
uint32 nm_spi_read_reg(uint32 u32Addr)
{
    5076:	cf 93       	push	r28
    5078:	df 93       	push	r29
    507a:	00 d0       	rcall	.+0      	; 0x507c <nm_spi_read_reg+0x6>
    507c:	00 d0       	rcall	.+0      	; 0x507e <nm_spi_read_reg+0x8>
    507e:	cd b7       	in	r28, 0x3d	; 61
    5080:	de b7       	in	r29, 0x3e	; 62
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
    5082:	ae 01       	movw	r20, r28
    5084:	4f 5f       	subi	r20, 0xFF	; 255
    5086:	5f 4f       	sbci	r21, 0xFF	; 255
    5088:	0e 94 80 27 	call	0x4f00	; 0x4f00 <spi_read_reg>

	return u32Val;
    508c:	69 81       	ldd	r22, Y+1	; 0x01
    508e:	7a 81       	ldd	r23, Y+2	; 0x02
    5090:	8b 81       	ldd	r24, Y+3	; 0x03
    5092:	9c 81       	ldd	r25, Y+4	; 0x04
}
    5094:	24 96       	adiw	r28, 0x04	; 4
    5096:	cd bf       	out	0x3d, r28	; 61
    5098:	de bf       	out	0x3e, r29	; 62
    509a:	df 91       	pop	r29
    509c:	cf 91       	pop	r28
    509e:	08 95       	ret

000050a0 <nm_spi_read_reg_with_ret>:
 */
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32 *pu32RetVal)
{
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr, pu32RetVal);
    50a0:	0e 94 80 27 	call	0x4f00	; 0x4f00 <spi_read_reg>

	if (N_OK == s8Ret)
    50a4:	81 30       	cpi	r24, 0x01	; 1
    50a6:	11 f0       	breq	.+4      	; 0x50ac <nm_spi_read_reg_with_ret+0xc>
		s8Ret = M2M_SUCCESS;
	else
		s8Ret = M2M_ERR_BUS_FAIL;
    50a8:	8a ef       	ldi	r24, 0xFA	; 250
    50aa:	08 95       	ret
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr, pu32RetVal);

	if (N_OK == s8Ret)
		s8Ret = M2M_SUCCESS;
    50ac:	80 e0       	ldi	r24, 0x00	; 0
	else
		s8Ret = M2M_ERR_BUS_FAIL;

	return s8Ret;
}
    50ae:	08 95       	ret

000050b0 <nm_spi_write_reg>:
 */
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
    50b0:	0e 94 02 27 	call	0x4e04	; 0x4e04 <spi_write_reg>

	if (N_OK == s8Ret)
    50b4:	81 30       	cpi	r24, 0x01	; 1
    50b6:	11 f0       	breq	.+4      	; 0x50bc <nm_spi_write_reg+0xc>
		s8Ret = M2M_SUCCESS;
	else
		s8Ret = M2M_ERR_BUS_FAIL;
    50b8:	8a ef       	ldi	r24, 0xFA	; 250
    50ba:	08 95       	ret
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);

	if (N_OK == s8Ret)
		s8Ret = M2M_SUCCESS;
    50bc:	80 e0       	ldi	r24, 0x00	; 0
	else
		s8Ret = M2M_ERR_BUS_FAIL;

	return s8Ret;
}
    50be:	08 95       	ret

000050c0 <nm_spi_init>:
 *	@author	M. Abdelmawla
 *	@date	11 July 2012
 *	@version	1.0
 */
sint8 nm_spi_init(void)
{
    50c0:	cf 93       	push	r28
    50c2:	df 93       	push	r29
    50c4:	cd b7       	in	r28, 0x3d	; 61
    50c6:	de b7       	in	r29, 0x3e	; 62
    50c8:	28 97       	sbiw	r28, 0x08	; 8
    50ca:	cd bf       	out	0x3d, r28	; 61
    50cc:	de bf       	out	0x3e, r29	; 62
	uint32 chipid;
	uint32 reg = 0;
    50ce:	19 82       	std	Y+1, r1	; 0x01
    50d0:	1a 82       	std	Y+2, r1	; 0x02
    50d2:	1b 82       	std	Y+3, r1	; 0x03
    50d4:	1c 82       	std	Y+4, r1	; 0x04

	/**
	    configure protocol
	**/
	gu8Crc_off = 0;
    50d6:	10 92 3b 2a 	sts	0x2A3B, r1	; 0x802a3b <gu8Crc_off>

	// TODO: We can remove the CRC trials if there is a definite way to reset
	// the SPI to it's initial value.
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
    50da:	ae 01       	movw	r20, r28
    50dc:	4f 5f       	subi	r20, 0xFF	; 255
    50de:	5f 4f       	sbci	r21, 0xFF	; 255
    50e0:	64 e2       	ldi	r22, 0x24	; 36
    50e2:	78 ee       	ldi	r23, 0xE8	; 232
    50e4:	80 e0       	ldi	r24, 0x00	; 0
    50e6:	90 e0       	ldi	r25, 0x00	; 0
    50e8:	0e 94 80 27 	call	0x4f00	; 0x4f00 <spi_read_reg>
    50ec:	88 23       	and	r24, r24
    50ee:	29 f0       	breq	.+10     	; 0x50fa <nm_spi_init+0x3a>
			// Reaad failed with both CRC on and off, something went bad
			M2M_ERR("[nmi spi]: Failed internal read protocol...\n");
			return 0;
		}
	}
	if (gu8Crc_off == 0) {
    50f0:	80 91 3b 2a 	lds	r24, 0x2A3B	; 0x802a3b <gu8Crc_off>
    50f4:	88 23       	and	r24, r24
    50f6:	81 f0       	breq	.+32     	; 0x5118 <nm_spi_init+0x58>
    50f8:	26 c0       	rjmp	.+76     	; 0x5146 <nm_spi_init+0x86>
	// TODO: We can remove the CRC trials if there is a definite way to reset
	// the SPI to it's initial value.
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
		/* Read failed. Try with CRC off. This might happen when module
		is removed but chip isn't reset*/
		gu8Crc_off = 1;
    50fa:	81 e0       	ldi	r24, 0x01	; 1
    50fc:	80 93 3b 2a 	sts	0x2A3B, r24	; 0x802a3b <gu8Crc_off>
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
    5100:	ae 01       	movw	r20, r28
    5102:	4f 5f       	subi	r20, 0xFF	; 255
    5104:	5f 4f       	sbci	r21, 0xFF	; 255
    5106:	64 e2       	ldi	r22, 0x24	; 36
    5108:	78 ee       	ldi	r23, 0xE8	; 232
    510a:	80 e0       	ldi	r24, 0x00	; 0
    510c:	90 e0       	ldi	r25, 0x00	; 0
    510e:	0e 94 80 27 	call	0x4f00	; 0x4f00 <spi_read_reg>
    5112:	81 11       	cpse	r24, r1
    5114:	ed cf       	rjmp	.-38     	; 0x50f0 <nm_spi_init+0x30>
    5116:	34 c0       	rjmp	.+104    	; 0x5180 <nm_spi_init+0xc0>
		}
	}
	if (gu8Crc_off == 0) {
		reg &= ~0xc; /* disable crc checking */
		reg &= ~0x70;
		reg |= (0x5 << 4);
    5118:	89 81       	ldd	r24, Y+1	; 0x01
    511a:	9a 81       	ldd	r25, Y+2	; 0x02
    511c:	ab 81       	ldd	r26, Y+3	; 0x03
    511e:	bc 81       	ldd	r27, Y+4	; 0x04
    5120:	83 78       	andi	r24, 0x83	; 131
    5122:	9c 01       	movw	r18, r24
    5124:	ad 01       	movw	r20, r26
    5126:	20 65       	ori	r18, 0x50	; 80
    5128:	29 83       	std	Y+1, r18	; 0x01
    512a:	3a 83       	std	Y+2, r19	; 0x02
    512c:	4b 83       	std	Y+3, r20	; 0x03
    512e:	5c 83       	std	Y+4, r21	; 0x04
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
    5130:	64 e2       	ldi	r22, 0x24	; 36
    5132:	78 ee       	ldi	r23, 0xE8	; 232
    5134:	80 e0       	ldi	r24, 0x00	; 0
    5136:	90 e0       	ldi	r25, 0x00	; 0
    5138:	0e 94 02 27 	call	0x4e04	; 0x4e04 <spi_write_reg>
    513c:	88 23       	and	r24, r24
    513e:	01 f1       	breq	.+64     	; 0x5180 <nm_spi_init+0xc0>
			M2M_ERR("[nmi spi]: Failed internal write protocol reg...\n");
			return 0;
		}
		gu8Crc_off = 1;
    5140:	81 e0       	ldi	r24, 0x01	; 1
    5142:	80 93 3b 2a 	sts	0x2A3B, r24	; 0x802a3b <gu8Crc_off>
	}

	/**
	    make sure can read back chip id correctly
	**/
	if (!spi_read_reg(0x1000, &chipid)) {
    5146:	ae 01       	movw	r20, r28
    5148:	4b 5f       	subi	r20, 0xFB	; 251
    514a:	5f 4f       	sbci	r21, 0xFF	; 255
    514c:	60 e0       	ldi	r22, 0x00	; 0
    514e:	70 e1       	ldi	r23, 0x10	; 16
    5150:	80 e0       	ldi	r24, 0x00	; 0
    5152:	90 e0       	ldi	r25, 0x00	; 0
    5154:	0e 94 80 27 	call	0x4f00	; 0x4f00 <spi_read_reg>
    5158:	88 23       	and	r24, r24
    515a:	a1 f0       	breq	.+40     	; 0x5184 <nm_spi_init+0xc4>
static void spi_init_pkt_sz(void)
{
	uint32 val32;

	/* Make sure SPI max. packet size fits the defined DATA_PKT_SZ.  */
	val32 = nm_spi_read_reg(SPI_BASE + 0x24);
    515c:	64 e2       	ldi	r22, 0x24	; 36
    515e:	78 ee       	ldi	r23, 0xE8	; 232
    5160:	80 e0       	ldi	r24, 0x00	; 0
    5162:	90 e0       	ldi	r25, 0x00	; 0
    5164:	0e 94 3b 28 	call	0x5076	; 0x5076 <nm_spi_read_reg>
	val32 &= ~(0x7 << 4);
    5168:	dc 01       	movw	r26, r24
    516a:	cb 01       	movw	r24, r22
    516c:	8f 78       	andi	r24, 0x8F	; 143
		break;
	case 8192:
		val32 |= (5 << 4);
		break;
	}
	nm_spi_write_reg(SPI_BASE + 0x24, val32);
    516e:	9c 01       	movw	r18, r24
    5170:	ad 01       	movw	r20, r26
    5172:	20 65       	ori	r18, 0x50	; 80
    5174:	64 e2       	ldi	r22, 0x24	; 36
    5176:	78 ee       	ldi	r23, 0xE8	; 232
    5178:	80 e0       	ldi	r24, 0x00	; 0
    517a:	90 e0       	ldi	r25, 0x00	; 0
    517c:	0e 94 58 28 	call	0x50b0	; 0x50b0 <nm_spi_write_reg>
	}

	M2M_DBG("[nmi spi]: chipid (%08x)\n", (unsigned int)chipid);
	spi_init_pkt_sz();

	return M2M_SUCCESS;
    5180:	80 e0       	ldi	r24, 0x00	; 0
    5182:	01 c0       	rjmp	.+2      	; 0x5186 <nm_spi_init+0xc6>
	/**
	    make sure can read back chip id correctly
	**/
	if (!spi_read_reg(0x1000, &chipid)) {
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
		return M2M_ERR_BUS_FAIL;
    5184:	8a ef       	ldi	r24, 0xFA	; 250

	M2M_DBG("[nmi spi]: chipid (%08x)\n", (unsigned int)chipid);
	spi_init_pkt_sz();

	return M2M_SUCCESS;
}
    5186:	28 96       	adiw	r28, 0x08	; 8
    5188:	cd bf       	out	0x3d, r28	; 61
    518a:	de bf       	out	0x3e, r29	; 62
    518c:	df 91       	pop	r29
    518e:	cf 91       	pop	r28
    5190:	08 95       	ret

00005192 <nm_spi_read_block>:
 *	@author	M. Abdelmawla
 *	@date	11 July 2012
 *	@version	1.0
 */
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    5192:	2f 92       	push	r2
    5194:	3f 92       	push	r3
    5196:	4f 92       	push	r4
    5198:	5f 92       	push	r5
    519a:	6f 92       	push	r6
    519c:	7f 92       	push	r7
    519e:	8f 92       	push	r8
    51a0:	9f 92       	push	r9
    51a2:	af 92       	push	r10
    51a4:	bf 92       	push	r11
    51a6:	cf 92       	push	r12
    51a8:	df 92       	push	r13
    51aa:	ef 92       	push	r14
    51ac:	ff 92       	push	r15
    51ae:	0f 93       	push	r16
    51b0:	1f 93       	push	r17
    51b2:	cf 93       	push	r28
    51b4:	df 93       	push	r29
    51b6:	00 d0       	rcall	.+0      	; 0x51b8 <nm_spi_read_block+0x26>
    51b8:	00 d0       	rcall	.+0      	; 0x51ba <nm_spi_read_block+0x28>
    51ba:	cd b7       	in	r28, 0x3d	; 61
    51bc:	de b7       	in	r29, 0x3e	; 62
    51be:	1b 01       	movw	r2, r22
    51c0:	2c 01       	movw	r4, r24
    51c2:	3a 01       	movw	r6, r20
    51c4:	49 01       	movw	r8, r18
    51c6:	8a e0       	ldi	r24, 0x0A	; 10
    51c8:	8b 83       	std	Y+3, r24	; 0x03
	uint8 cmd = CMD_DMA_EXT_READ;
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
#if defined USE_OLD_SPI_SW
	uint8 tmp[2];
	uint8 single_byte_workaround = 0;
    51ca:	1c 82       	std	Y+4, r1	; 0x04

	/**
	    Command
	**/
#if defined USE_OLD_SPI_SW
	if (size == 1) {
    51cc:	e1 e0       	ldi	r30, 0x01	; 1
    51ce:	8e 16       	cp	r8, r30
    51d0:	91 04       	cpc	r9, r1
    51d2:	29 f4       	brne	.+10     	; 0x51de <nm_spi_read_block+0x4c>
		// Workaround hardware problem with single byte transfers over SPI bus
		size                   = 2;
		single_byte_workaround = 1;
    51d4:	f1 e0       	ldi	r31, 0x01	; 1
    51d6:	fc 83       	std	Y+4, r31	; 0x04
	    Command
	**/
#if defined USE_OLD_SPI_SW
	if (size == 1) {
		// Workaround hardware problem with single byte transfers over SPI bus
		size                   = 2;
    51d8:	82 e0       	ldi	r24, 0x02	; 2
    51da:	88 2e       	mov	r8, r24
    51dc:	91 2c       	mov	r9, r1
		single_byte_workaround = 1;
	}
	result = spi_cmd(cmd, addr, 0, size, 0);
    51de:	64 01       	movw	r12, r8
    51e0:	e1 2c       	mov	r14, r1
    51e2:	f1 2c       	mov	r15, r1
    51e4:	a1 2c       	mov	r10, r1
    51e6:	00 e0       	ldi	r16, 0x00	; 0
    51e8:	10 e0       	ldi	r17, 0x00	; 0
    51ea:	98 01       	movw	r18, r16
    51ec:	b2 01       	movw	r22, r4
    51ee:	a1 01       	movw	r20, r2
    51f0:	88 ec       	ldi	r24, 0xC8	; 200
    51f2:	0e 94 6c 26 	call	0x4cd8	; 0x4cd8 <spi_cmd>
    51f6:	b8 2e       	mov	r11, r24
	if (result != N_OK) {
    51f8:	81 e0       	ldi	r24, 0x01	; 1
    51fa:	b8 12       	cpse	r11, r24
    51fc:	1c c0       	rjmp	.+56     	; 0x5236 <nm_spi_read_block+0xa4>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}

	result = spi_cmd_rsp(cmd);
    51fe:	88 ec       	ldi	r24, 0xC8	; 200
    5200:	0e 94 c8 25 	call	0x4b90	; 0x4b90 <spi_cmd_rsp>
    5204:	b8 2e       	mov	r11, r24
	if (result != N_OK) {
    5206:	e1 e0       	ldi	r30, 0x01	; 1
    5208:	8e 13       	cpse	r24, r30
    520a:	15 c0       	rjmp	.+42     	; 0x5236 <nm_spi_read_block+0xa4>
	}

	/**
	    Data
	**/
	if (single_byte_workaround) {
    520c:	fc 81       	ldd	r31, Y+4	; 0x04
		result = spi_data_read(tmp, size, 0);
    520e:	40 e0       	ldi	r20, 0x00	; 0
    5210:	b4 01       	movw	r22, r8
	}

	/**
	    Data
	**/
	if (single_byte_workaround) {
    5212:	ff 23       	and	r31, r31
    5214:	49 f0       	breq	.+18     	; 0x5228 <nm_spi_read_block+0x96>
		result = spi_data_read(tmp, size, 0);
    5216:	ce 01       	movw	r24, r28
    5218:	01 96       	adiw	r24, 0x01	; 1
    521a:	0e 94 05 26 	call	0x4c0a	; 0x4c0a <spi_data_read>
    521e:	b8 2e       	mov	r11, r24
		buf[0] = tmp[0];
    5220:	89 81       	ldd	r24, Y+1	; 0x01
    5222:	f3 01       	movw	r30, r6
    5224:	80 83       	st	Z, r24
    5226:	04 c0       	rjmp	.+8      	; 0x5230 <nm_spi_read_block+0x9e>
	} else
		result = spi_data_read(buf, size, 0);
    5228:	c3 01       	movw	r24, r6
    522a:	0e 94 05 26 	call	0x4c0a	; 0x4c0a <spi_data_read>
    522e:	b8 2e       	mov	r11, r24
		goto _FAIL_;
	}
#endif

_FAIL_:
	if (result != N_OK) {
    5230:	f1 e0       	ldi	r31, 0x01	; 1
    5232:	bf 16       	cp	r11, r31
    5234:	31 f1       	breq	.+76     	; 0x5282 <nm_spi_read_block+0xf0>
		nm_bsp_sleep(1);
    5236:	61 e0       	ldi	r22, 0x01	; 1
    5238:	70 e0       	ldi	r23, 0x00	; 0
    523a:	80 e0       	ldi	r24, 0x00	; 0
    523c:	90 e0       	ldi	r25, 0x00	; 0
    523e:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <nm_bsp_sleep>
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    5242:	a1 2c       	mov	r10, r1
    5244:	c1 2c       	mov	r12, r1
    5246:	d1 2c       	mov	r13, r1
    5248:	76 01       	movw	r14, r12
    524a:	00 e0       	ldi	r16, 0x00	; 0
    524c:	10 e0       	ldi	r17, 0x00	; 0
    524e:	98 01       	movw	r18, r16
    5250:	40 e0       	ldi	r20, 0x00	; 0
    5252:	50 e0       	ldi	r21, 0x00	; 0
    5254:	ba 01       	movw	r22, r20
    5256:	8f ec       	ldi	r24, 0xCF	; 207
    5258:	0e 94 6c 26 	call	0x4cd8	; 0x4cd8 <spi_cmd>
		spi_cmd_rsp(CMD_RESET);
    525c:	8f ec       	ldi	r24, 0xCF	; 207
    525e:	0e 94 c8 25 	call	0x4b90	; 0x4b90 <spi_cmd_rsp>
		M2M_ERR("Reset and retry %d %lx %d\n", retry, addr, size);
		nm_bsp_sleep(1);
    5262:	61 e0       	ldi	r22, 0x01	; 1
    5264:	70 e0       	ldi	r23, 0x00	; 0
    5266:	80 e0       	ldi	r24, 0x00	; 0
    5268:	90 e0       	ldi	r25, 0x00	; 0
    526a:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <nm_bsp_sleep>
    526e:	8b 81       	ldd	r24, Y+3	; 0x03
    5270:	81 50       	subi	r24, 0x01	; 1
    5272:	8b 83       	std	Y+3, r24	; 0x03
		retry--;
		if (retry)
    5274:	81 11       	cpse	r24, r1
    5276:	aa cf       	rjmp	.-172    	; 0x51cc <nm_spi_read_block+0x3a>
{
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);

	if (N_OK == s8Ret)
    5278:	e1 e0       	ldi	r30, 0x01	; 1
    527a:	be 16       	cp	r11, r30
    527c:	11 f0       	breq	.+4      	; 0x5282 <nm_spi_read_block+0xf0>
		s8Ret = M2M_SUCCESS;
	else
		s8Ret = M2M_ERR_BUS_FAIL;
    527e:	8a ef       	ldi	r24, 0xFA	; 250
    5280:	01 c0       	rjmp	.+2      	; 0x5284 <nm_spi_read_block+0xf2>
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);

	if (N_OK == s8Ret)
		s8Ret = M2M_SUCCESS;
    5282:	80 e0       	ldi	r24, 0x00	; 0
	else
		s8Ret = M2M_ERR_BUS_FAIL;

	return s8Ret;
}
    5284:	24 96       	adiw	r28, 0x04	; 4
    5286:	cd bf       	out	0x3d, r28	; 61
    5288:	de bf       	out	0x3e, r29	; 62
    528a:	df 91       	pop	r29
    528c:	cf 91       	pop	r28
    528e:	1f 91       	pop	r17
    5290:	0f 91       	pop	r16
    5292:	ff 90       	pop	r15
    5294:	ef 90       	pop	r14
    5296:	df 90       	pop	r13
    5298:	cf 90       	pop	r12
    529a:	bf 90       	pop	r11
    529c:	af 90       	pop	r10
    529e:	9f 90       	pop	r9
    52a0:	8f 90       	pop	r8
    52a2:	7f 90       	pop	r7
    52a4:	6f 90       	pop	r6
    52a6:	5f 90       	pop	r5
    52a8:	4f 90       	pop	r4
    52aa:	3f 90       	pop	r3
    52ac:	2f 90       	pop	r2
    52ae:	08 95       	ret

000052b0 <nm_spi_write_block>:
 *	@author	M. Abdelmawla
 *	@date	11 July 2012
 *	@version	1.0
 */
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    52b0:	2f 92       	push	r2
    52b2:	3f 92       	push	r3
    52b4:	4f 92       	push	r4
    52b6:	5f 92       	push	r5
    52b8:	6f 92       	push	r6
    52ba:	7f 92       	push	r7
    52bc:	8f 92       	push	r8
    52be:	9f 92       	push	r9
    52c0:	af 92       	push	r10
    52c2:	bf 92       	push	r11
    52c4:	cf 92       	push	r12
    52c6:	df 92       	push	r13
    52c8:	ef 92       	push	r14
    52ca:	ff 92       	push	r15
    52cc:	0f 93       	push	r16
    52ce:	1f 93       	push	r17
    52d0:	cf 93       	push	r28
    52d2:	df 93       	push	r29
    52d4:	00 d0       	rcall	.+0      	; 0x52d6 <nm_spi_write_block+0x26>
    52d6:	00 d0       	rcall	.+0      	; 0x52d8 <nm_spi_write_block+0x28>
    52d8:	cd b7       	in	r28, 0x3d	; 61
    52da:	de b7       	in	r29, 0x3e	; 62
    52dc:	2b 01       	movw	r4, r22
    52de:	3c 01       	movw	r6, r24
    52e0:	1a 01       	movw	r2, r20
    52e2:	49 01       	movw	r8, r18
    52e4:	2a e0       	ldi	r18, 0x0A	; 10
    52e6:	b2 2e       	mov	r11, r18
	/**
	    Command
	**/
#if defined USE_OLD_SPI_SW
	// Workaround hardware problem with single byte transfers over SPI bus
	if (size == 1)
    52e8:	81 e0       	ldi	r24, 0x01	; 1
    52ea:	88 16       	cp	r8, r24
    52ec:	91 04       	cpc	r9, r1
    52ee:	19 f4       	brne	.+6      	; 0x52f6 <nm_spi_write_block+0x46>
		size = 2;
    52f0:	92 e0       	ldi	r25, 0x02	; 2
    52f2:	89 2e       	mov	r8, r25
    52f4:	91 2c       	mov	r9, r1

	result = spi_cmd(cmd, addr, 0, size, 0);
    52f6:	64 01       	movw	r12, r8
    52f8:	e1 2c       	mov	r14, r1
    52fa:	f1 2c       	mov	r15, r1
    52fc:	a1 2c       	mov	r10, r1
    52fe:	00 e0       	ldi	r16, 0x00	; 0
    5300:	10 e0       	ldi	r17, 0x00	; 0
    5302:	98 01       	movw	r18, r16
    5304:	b3 01       	movw	r22, r6
    5306:	a2 01       	movw	r20, r4
    5308:	87 ec       	ldi	r24, 0xC7	; 199
    530a:	0e 94 6c 26 	call	0x4cd8	; 0x4cd8 <spi_cmd>
	if (result != N_OK) {
    530e:	81 30       	cpi	r24, 0x01	; 1
    5310:	09 f0       	breq	.+2      	; 0x5314 <nm_spi_write_block+0x64>
    5312:	69 c0       	rjmp	.+210    	; 0x53e6 <nm_spi_write_block+0x136>
		M2M_ERR("[nmi spi]: Failed cmd, write block (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}

	result = spi_cmd_rsp(cmd);
    5314:	87 ec       	ldi	r24, 0xC7	; 199
    5316:	0e 94 c8 25 	call	0x4b90	; 0x4b90 <spi_cmd_rsp>
	if (result != N_OK) {
    531a:	81 30       	cpi	r24, 0x01	; 1
    531c:	09 f0       	breq	.+2      	; 0x5320 <nm_spi_write_block+0x70>
    531e:	63 c0       	rjmp	.+198    	; 0x53e6 <nm_spi_write_block+0x136>
static sint8 spi_data_write(uint8 *b, uint16 sz)
{
	sint16 ix;
	uint16 nbytes;
	sint8  result = 1;
	uint8  cmd, order, crc[2] = {0};
    5320:	19 82       	std	Y+1, r1	; 0x01
    5322:	1a 82       	std	Y+2, r1	; 0x02
    5324:	84 01       	movw	r16, r8
	// uint8 rsp;

	/**
	    Data
	**/
	ix = 0;
    5326:	e1 2c       	mov	r14, r1
    5328:	f1 2c       	mov	r15, r1
    532a:	68 01       	movw	r12, r16
    532c:	01 30       	cpi	r16, 0x01	; 1
    532e:	80 e2       	ldi	r24, 0x20	; 32
    5330:	18 07       	cpc	r17, r24
    5332:	18 f0       	brcs	.+6      	; 0x533a <nm_spi_write_block+0x8a>
    5334:	c1 2c       	mov	r12, r1
    5336:	80 e2       	ldi	r24, 0x20	; 32
    5338:	d8 2e       	mov	r13, r24

		/**
		    Write command
		**/
		cmd = 0xf0;
		if (ix == 0) {
    533a:	e1 14       	cp	r14, r1
    533c:	f1 04       	cpc	r15, r1
    533e:	29 f4       	brne	.+10     	; 0x534a <nm_spi_write_block+0x9a>
			if (sz <= DATA_PKT_SZ)
    5340:	01 30       	cpi	r16, 0x01	; 1
    5342:	80 e2       	ldi	r24, 0x20	; 32
    5344:	18 07       	cpc	r17, r24
    5346:	38 f4       	brcc	.+14     	; 0x5356 <nm_spi_write_block+0xa6>
    5348:	04 c0       	rjmp	.+8      	; 0x5352 <nm_spi_write_block+0xa2>
				order = 0x3;
			else
				order = 0x1;
		} else {
			if (sz <= DATA_PKT_SZ)
    534a:	01 30       	cpi	r16, 0x01	; 1
    534c:	80 e2       	ldi	r24, 0x20	; 32
    534e:	18 07       	cpc	r17, r24
    5350:	20 f4       	brcc	.+8      	; 0x535a <nm_spi_write_block+0xaa>
		    Write command
		**/
		cmd = 0xf0;
		if (ix == 0) {
			if (sz <= DATA_PKT_SZ)
				order = 0x3;
    5352:	83 e0       	ldi	r24, 0x03	; 3
    5354:	03 c0       	rjmp	.+6      	; 0x535c <nm_spi_write_block+0xac>
			else
				order = 0x1;
    5356:	81 e0       	ldi	r24, 0x01	; 1
    5358:	01 c0       	rjmp	.+2      	; 0x535c <nm_spi_write_block+0xac>
		} else {
			if (sz <= DATA_PKT_SZ)
				order = 0x3;
			else
				order = 0x2;
    535a:	82 e0       	ldi	r24, 0x02	; 2
		}
		cmd |= order;
    535c:	80 6f       	ori	r24, 0xF0	; 240
    535e:	8c 83       	std	Y+4, r24	; 0x04
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
    5360:	61 e0       	ldi	r22, 0x01	; 1
    5362:	70 e0       	ldi	r23, 0x00	; 0
    5364:	ce 01       	movw	r24, r28
    5366:	04 96       	adiw	r24, 0x04	; 4
    5368:	0e 94 96 25 	call	0x4b2c	; 0x4b2c <nmi_spi_write>
    536c:	81 11       	cpse	r24, r1
    536e:	3b c0       	rjmp	.+118    	; 0x53e6 <nm_spi_write_block+0x136>
		}

		/**
		    Write data
		**/
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
    5370:	b6 01       	movw	r22, r12
    5372:	c1 01       	movw	r24, r2
    5374:	8e 0d       	add	r24, r14
    5376:	9f 1d       	adc	r25, r15
    5378:	0e 94 96 25 	call	0x4b2c	; 0x4b2c <nmi_spi_write>
    537c:	81 11       	cpse	r24, r1
    537e:	33 c0       	rjmp	.+102    	; 0x53e6 <nm_spi_write_block+0x136>
		}

		/**
		    Write Crc
		**/
		if (!gu8Crc_off) {
    5380:	80 91 3b 2a 	lds	r24, 0x2A3B	; 0x802a3b <gu8Crc_off>
    5384:	88 23       	and	r24, r24
    5386:	31 f0       	breq	.+12     	; 0x5394 <nm_spi_write_block+0xe4>
				result = N_FAIL;
				break;
			}
		}

		ix += nbytes;
    5388:	ec 0c       	add	r14, r12
    538a:	fd 1c       	adc	r15, r13
		sz -= nbytes;
    538c:	0c 19       	sub	r16, r12
    538e:	1d 09       	sbc	r17, r13
	} while (sz);
    5390:	61 f6       	brne	.-104    	; 0x532a <nm_spi_write_block+0x7a>
    5392:	09 c0       	rjmp	.+18     	; 0x53a6 <nm_spi_write_block+0xf6>

		/**
		    Write Crc
		**/
		if (!gu8Crc_off) {
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
    5394:	62 e0       	ldi	r22, 0x02	; 2
    5396:	70 e0       	ldi	r23, 0x00	; 0
    5398:	ce 01       	movw	r24, r28
    539a:	01 96       	adiw	r24, 0x01	; 1
    539c:	0e 94 96 25 	call	0x4b2c	; 0x4b2c <nmi_spi_write>
    53a0:	88 23       	and	r24, r24
    53a2:	91 f3       	breq	.-28     	; 0x5388 <nm_spi_write_block+0xd8>
    53a4:	20 c0       	rjmp	.+64     	; 0x53e6 <nm_spi_write_block+0x136>
{
	uint8 len;
	uint8 rsp[3];
	sint8 result = N_OK;

	if (!gu8Crc_off)
    53a6:	80 91 3b 2a 	lds	r24, 0x2A3B	; 0x802a3b <gu8Crc_off>
    53aa:	88 23       	and	r24, r24
    53ac:	11 f0       	breq	.+4      	; 0x53b2 <nm_spi_write_block+0x102>
		len = 2;
	else
		len = 3;
    53ae:	03 e0       	ldi	r16, 0x03	; 3
    53b0:	01 c0       	rjmp	.+2      	; 0x53b4 <nm_spi_write_block+0x104>
	uint8 len;
	uint8 rsp[3];
	sint8 result = N_OK;

	if (!gu8Crc_off)
		len = 2;
    53b2:	02 e0       	ldi	r16, 0x02	; 2
	else
		len = 3;

	if (M2M_SUCCESS != nmi_spi_read(&rsp[0], len)) {
    53b4:	10 e0       	ldi	r17, 0x00	; 0
    53b6:	b8 01       	movw	r22, r16
    53b8:	ce 01       	movw	r24, r28
    53ba:	01 96       	adiw	r24, 0x01	; 1
    53bc:	0e 94 af 25 	call	0x4b5e	; 0x4b5e <nmi_spi_read>
    53c0:	81 11       	cpse	r24, r1
    53c2:	11 c0       	rjmp	.+34     	; 0x53e6 <nm_spi_write_block+0x136>
		M2M_ERR("[nmi spi]: Failed bus error...\n");
		result = N_FAIL;
		goto _fail_;
	}

	if ((rsp[len - 1] != 0) || (rsp[len - 2] != 0xC3)) {
    53c4:	fe 01       	movw	r30, r28
    53c6:	e0 0f       	add	r30, r16
    53c8:	f1 1f       	adc	r31, r17
    53ca:	80 81       	ld	r24, Z
    53cc:	81 11       	cpse	r24, r1
    53ce:	0b c0       	rjmp	.+22     	; 0x53e6 <nm_spi_write_block+0x136>
    53d0:	ef ef       	ldi	r30, 0xFF	; 255
    53d2:	ff ef       	ldi	r31, 0xFF	; 255
    53d4:	ec 0f       	add	r30, r28
    53d6:	fd 1f       	adc	r31, r29
    53d8:	e0 0f       	add	r30, r16
    53da:	f1 1f       	adc	r31, r17
		M2M_ERR("[nmi spi]: Failed data response read, %x %x %x\n", rsp[0], rsp[1], rsp[2]);
		result = N_FAIL;
    53dc:	80 81       	ld	r24, Z
    53de:	83 3c       	cpi	r24, 0xC3	; 195
    53e0:	11 f4       	brne	.+4      	; 0x53e6 <nm_spi_write_block+0x136>
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);

	if (N_OK == s8Ret)
		s8Ret = M2M_SUCCESS;
    53e2:	80 e0       	ldi	r24, 0x00	; 0
    53e4:	20 c0       	rjmp	.+64     	; 0x5426 <nm_spi_write_block+0x176>
		goto _FAIL_;
	}

_FAIL_:
	if (result != N_OK) {
		nm_bsp_sleep(1);
    53e6:	61 e0       	ldi	r22, 0x01	; 1
    53e8:	70 e0       	ldi	r23, 0x00	; 0
    53ea:	80 e0       	ldi	r24, 0x00	; 0
    53ec:	90 e0       	ldi	r25, 0x00	; 0
    53ee:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <nm_bsp_sleep>
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    53f2:	a1 2c       	mov	r10, r1
    53f4:	c1 2c       	mov	r12, r1
    53f6:	d1 2c       	mov	r13, r1
    53f8:	76 01       	movw	r14, r12
    53fa:	00 e0       	ldi	r16, 0x00	; 0
    53fc:	10 e0       	ldi	r17, 0x00	; 0
    53fe:	98 01       	movw	r18, r16
    5400:	40 e0       	ldi	r20, 0x00	; 0
    5402:	50 e0       	ldi	r21, 0x00	; 0
    5404:	ba 01       	movw	r22, r20
    5406:	8f ec       	ldi	r24, 0xCF	; 207
    5408:	0e 94 6c 26 	call	0x4cd8	; 0x4cd8 <spi_cmd>
		spi_cmd_rsp(CMD_RESET);
    540c:	8f ec       	ldi	r24, 0xCF	; 207
    540e:	0e 94 c8 25 	call	0x4b90	; 0x4b90 <spi_cmd_rsp>
		M2M_ERR("Reset and retry %d %lx %d\n", retry, addr, size);
		nm_bsp_sleep(1);
    5412:	61 e0       	ldi	r22, 0x01	; 1
    5414:	70 e0       	ldi	r23, 0x00	; 0
    5416:	80 e0       	ldi	r24, 0x00	; 0
    5418:	90 e0       	ldi	r25, 0x00	; 0
    541a:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <nm_bsp_sleep>
    541e:	ba 94       	dec	r11
		retry--;
		if (retry)
    5420:	b1 10       	cpse	r11, r1
    5422:	62 cf       	rjmp	.-316    	; 0x52e8 <nm_spi_write_block+0x38>
	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);

	if (N_OK == s8Ret)
		s8Ret = M2M_SUCCESS;
	else
		s8Ret = M2M_ERR_BUS_FAIL;
    5424:	8a ef       	ldi	r24, 0xFA	; 250

	return s8Ret;
}
    5426:	24 96       	adiw	r28, 0x04	; 4
    5428:	cd bf       	out	0x3d, r28	; 61
    542a:	de bf       	out	0x3e, r29	; 62
    542c:	df 91       	pop	r29
    542e:	cf 91       	pop	r28
    5430:	1f 91       	pop	r17
    5432:	0f 91       	pop	r16
    5434:	ff 90       	pop	r15
    5436:	ef 90       	pop	r14
    5438:	df 90       	pop	r13
    543a:	cf 90       	pop	r12
    543c:	bf 90       	pop	r11
    543e:	af 90       	pop	r10
    5440:	9f 90       	pop	r9
    5442:	8f 90       	pop	r8
    5444:	7f 90       	pop	r7
    5446:	6f 90       	pop	r6
    5448:	5f 90       	pop	r5
    544a:	4f 90       	pop	r4
    544c:	3f 90       	pop	r3
    544e:	2f 90       	pop	r2
    5450:	08 95       	ret

00005452 <spi_flash_enable>:
 *	@brief	Enable spi flash operations
 *	@author	M. Abdelmawla
 *	@version	1.0
 */
sint8 spi_flash_enable(uint8 enable)
{
    5452:	0f 93       	push	r16
    5454:	1f 93       	push	r17
    5456:	cf 93       	push	r28
    5458:	df 93       	push	r29
    545a:	00 d0       	rcall	.+0      	; 0x545c <spi_flash_enable+0xa>
    545c:	00 d0       	rcall	.+0      	; 0x545e <spi_flash_enable+0xc>
    545e:	cd b7       	in	r28, 0x3d	; 61
    5460:	de b7       	in	r29, 0x3e	; 62
    5462:	08 2f       	mov	r16, r24
	sint8 s8Ret = M2M_SUCCESS;
	if (REV(nmi_get_chipid()) >= REV_3A0) {
    5464:	0e 94 fe 20 	call	0x41fc	; 0x41fc <nmi_get_chipid>
    5468:	dc 01       	movw	r26, r24
    546a:	cb 01       	movw	r24, r22
    546c:	9f 70       	andi	r25, 0x0F	; 15
    546e:	aa 27       	eor	r26, r26
    5470:	bb 27       	eor	r27, r27
    5472:	80 3a       	cpi	r24, 0xA0	; 160
    5474:	93 40       	sbci	r25, 0x03	; 3
    5476:	a1 05       	cpc	r26, r1
    5478:	b1 05       	cpc	r27, r1
    547a:	08 f4       	brcc	.+2      	; 0x547e <spi_flash_enable+0x2c>
    547c:	aa c0       	rjmp	.+340    	; 0x55d2 <spi_flash_enable+0x180>
		uint32 u32Val;

		/* Enable pinmux to SPI flash. */
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
    547e:	ae 01       	movw	r20, r28
    5480:	4f 5f       	subi	r20, 0xFF	; 255
    5482:	5f 4f       	sbci	r21, 0xFF	; 255
    5484:	60 e1       	ldi	r22, 0x10	; 16
    5486:	74 e1       	ldi	r23, 0x14	; 20
    5488:	80 e0       	ldi	r24, 0x00	; 0
    548a:	90 e0       	ldi	r25, 0x00	; 0
    548c:	0e 94 b7 23 	call	0x476e	; 0x476e <nm_read_reg_with_ret>
    5490:	18 2f       	mov	r17, r24
		if (s8Ret != M2M_SUCCESS) {
    5492:	81 11       	cpse	r24, r1
    5494:	9f c0       	rjmp	.+318    	; 0x55d4 <spi_flash_enable+0x182>
			goto ERR1;
		}
		/* GPIO15/16/17/18 */
		u32Val &= ~((0x7777ul) << 12);
		u32Val |= ((0x1111ul) << 12);
    5496:	89 81       	ldd	r24, Y+1	; 0x01
    5498:	9a 81       	ldd	r25, Y+2	; 0x02
    549a:	ab 81       	ldd	r26, Y+3	; 0x03
    549c:	bc 81       	ldd	r27, Y+4	; 0x04
    549e:	9f 78       	andi	r25, 0x8F	; 143
    54a0:	a8 78       	andi	r26, 0x88	; 136
    54a2:	b8 7f       	andi	r27, 0xF8	; 248
    54a4:	9c 01       	movw	r18, r24
    54a6:	ad 01       	movw	r20, r26
    54a8:	30 61       	ori	r19, 0x10	; 16
    54aa:	41 61       	ori	r20, 0x11	; 17
    54ac:	51 60       	ori	r21, 0x01	; 1
    54ae:	29 83       	std	Y+1, r18	; 0x01
    54b0:	3a 83       	std	Y+2, r19	; 0x02
    54b2:	4b 83       	std	Y+3, r20	; 0x03
    54b4:	5c 83       	std	Y+4, r21	; 0x04
		nm_write_reg(0x1410, u32Val);
    54b6:	60 e1       	ldi	r22, 0x10	; 16
    54b8:	74 e1       	ldi	r23, 0x14	; 20
    54ba:	80 e0       	ldi	r24, 0x00	; 0
    54bc:	90 e0       	ldi	r25, 0x00	; 0
    54be:	0e 94 b9 23 	call	0x4772	; 0x4772 <nm_write_reg>
	volatile unsigned long tmp;
	unsigned char *        cmd = (unsigned char *)&tmp;

	cmd[0] = 0xab;

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    54c2:	20 e0       	ldi	r18, 0x00	; 0
    54c4:	30 e0       	ldi	r19, 0x00	; 0
    54c6:	a9 01       	movw	r20, r18
    54c8:	68 e0       	ldi	r22, 0x08	; 8
    54ca:	72 e0       	ldi	r23, 0x02	; 2
    54cc:	81 e0       	ldi	r24, 0x01	; 1
    54ce:	90 e0       	ldi	r25, 0x00	; 0
		}
		/* GPIO15/16/17/18 */
		u32Val &= ~((0x7777ul) << 12);
		u32Val |= ((0x1111ul) << 12);
		nm_write_reg(0x1410, u32Val);
		if (enable) {
    54d0:	00 23       	and	r16, r16
    54d2:	09 f4       	brne	.+2      	; 0x54d6 <spi_flash_enable+0x84>
    54d4:	49 c0       	rjmp	.+146    	; 0x5568 <spi_flash_enable+0x116>
	volatile unsigned long tmp;
	unsigned char *        cmd = (unsigned char *)&tmp;

	cmd[0] = 0xab;

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    54d6:	0e 94 b9 23 	call	0x4772	; 0x4772 <nm_write_reg>
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    54da:	2b ea       	ldi	r18, 0xAB	; 171
    54dc:	30 e0       	ldi	r19, 0x00	; 0
    54de:	40 e0       	ldi	r20, 0x00	; 0
    54e0:	50 e0       	ldi	r21, 0x00	; 0
    54e2:	6c e0       	ldi	r22, 0x0C	; 12
    54e4:	72 e0       	ldi	r23, 0x02	; 2
    54e6:	81 e0       	ldi	r24, 0x01	; 1
    54e8:	90 e0       	ldi	r25, 0x00	; 0
    54ea:	0e 94 b9 23 	call	0x4772	; 0x4772 <nm_write_reg>
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    54ee:	21 e0       	ldi	r18, 0x01	; 1
    54f0:	30 e0       	ldi	r19, 0x00	; 0
    54f2:	40 e0       	ldi	r20, 0x00	; 0
    54f4:	50 e0       	ldi	r21, 0x00	; 0
    54f6:	64 e1       	ldi	r22, 0x14	; 20
    54f8:	72 e0       	ldi	r23, 0x02	; 2
    54fa:	81 e0       	ldi	r24, 0x01	; 1
    54fc:	90 e0       	ldi	r25, 0x00	; 0
    54fe:	0e 94 b9 23 	call	0x4772	; 0x4772 <nm_write_reg>
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    5502:	20 e0       	ldi	r18, 0x00	; 0
    5504:	30 e0       	ldi	r19, 0x00	; 0
    5506:	a9 01       	movw	r20, r18
    5508:	6c e1       	ldi	r22, 0x1C	; 28
    550a:	72 e0       	ldi	r23, 0x02	; 2
    550c:	81 e0       	ldi	r24, 0x01	; 1
    550e:	90 e0       	ldi	r25, 0x00	; 0
    5510:	0e 94 b9 23 	call	0x4772	; 0x4772 <nm_write_reg>
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
    5514:	21 e8       	ldi	r18, 0x81	; 129
    5516:	30 e0       	ldi	r19, 0x00	; 0
    5518:	40 e0       	ldi	r20, 0x00	; 0
    551a:	50 e0       	ldi	r21, 0x00	; 0
    551c:	64 e0       	ldi	r22, 0x04	; 4
    551e:	72 e0       	ldi	r23, 0x02	; 2
    5520:	81 e0       	ldi	r24, 0x01	; 1
    5522:	90 e0       	ldi	r25, 0x00	; 0
    5524:	0e 94 b9 23 	call	0x4772	; 0x4772 <nm_write_reg>
	while (nm_read_reg(SPI_FLASH_TR_DONE) != 1)
    5528:	68 e1       	ldi	r22, 0x18	; 24
    552a:	72 e0       	ldi	r23, 0x02	; 2
    552c:	81 e0       	ldi	r24, 0x01	; 1
    552e:	90 e0       	ldi	r25, 0x00	; 0
    5530:	0e 94 b5 23 	call	0x476a	; 0x476a <nm_read_reg>
    5534:	61 30       	cpi	r22, 0x01	; 1
    5536:	71 05       	cpc	r23, r1
    5538:	81 05       	cpc	r24, r1
    553a:	91 05       	cpc	r25, r1
    553c:	a9 f7       	brne	.-22     	; 0x5528 <spi_flash_enable+0xd6>
		} else {
			spi_flash_enter_low_power_mode();
		}
		/* Disable pinmux to SPI flash to minimize leakage. */
		u32Val &= ~((0x7777ul) << 12);
		u32Val |= ((0x0010ul) << 12);
    553e:	89 81       	ldd	r24, Y+1	; 0x01
    5540:	9a 81       	ldd	r25, Y+2	; 0x02
    5542:	ab 81       	ldd	r26, Y+3	; 0x03
    5544:	bc 81       	ldd	r27, Y+4	; 0x04
    5546:	9f 78       	andi	r25, 0x8F	; 143
    5548:	a8 78       	andi	r26, 0x88	; 136
    554a:	b8 7f       	andi	r27, 0xF8	; 248
    554c:	9c 01       	movw	r18, r24
    554e:	ad 01       	movw	r20, r26
    5550:	41 60       	ori	r20, 0x01	; 1
    5552:	29 83       	std	Y+1, r18	; 0x01
    5554:	3a 83       	std	Y+2, r19	; 0x02
    5556:	4b 83       	std	Y+3, r20	; 0x03
    5558:	5c 83       	std	Y+4, r21	; 0x04
		nm_write_reg(0x1410, u32Val);
    555a:	60 e1       	ldi	r22, 0x10	; 16
    555c:	74 e1       	ldi	r23, 0x14	; 20
    555e:	80 e0       	ldi	r24, 0x00	; 0
    5560:	90 e0       	ldi	r25, 0x00	; 0
    5562:	0e 94 b9 23 	call	0x4772	; 0x4772 <nm_write_reg>
    5566:	36 c0       	rjmp	.+108    	; 0x55d4 <spi_flash_enable+0x182>
	volatile unsigned long tmp;
	unsigned char *        cmd = (unsigned char *)&tmp;

	cmd[0] = 0xb9;

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    5568:	0e 94 b9 23 	call	0x4772	; 0x4772 <nm_write_reg>
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    556c:	29 eb       	ldi	r18, 0xB9	; 185
    556e:	30 e0       	ldi	r19, 0x00	; 0
    5570:	40 e0       	ldi	r20, 0x00	; 0
    5572:	50 e0       	ldi	r21, 0x00	; 0
    5574:	6c e0       	ldi	r22, 0x0C	; 12
    5576:	72 e0       	ldi	r23, 0x02	; 2
    5578:	81 e0       	ldi	r24, 0x01	; 1
    557a:	90 e0       	ldi	r25, 0x00	; 0
    557c:	0e 94 b9 23 	call	0x4772	; 0x4772 <nm_write_reg>
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    5580:	21 e0       	ldi	r18, 0x01	; 1
    5582:	30 e0       	ldi	r19, 0x00	; 0
    5584:	40 e0       	ldi	r20, 0x00	; 0
    5586:	50 e0       	ldi	r21, 0x00	; 0
    5588:	64 e1       	ldi	r22, 0x14	; 20
    558a:	72 e0       	ldi	r23, 0x02	; 2
    558c:	81 e0       	ldi	r24, 0x01	; 1
    558e:	90 e0       	ldi	r25, 0x00	; 0
    5590:	0e 94 b9 23 	call	0x4772	; 0x4772 <nm_write_reg>
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    5594:	20 e0       	ldi	r18, 0x00	; 0
    5596:	30 e0       	ldi	r19, 0x00	; 0
    5598:	a9 01       	movw	r20, r18
    559a:	6c e1       	ldi	r22, 0x1C	; 28
    559c:	72 e0       	ldi	r23, 0x02	; 2
    559e:	81 e0       	ldi	r24, 0x01	; 1
    55a0:	90 e0       	ldi	r25, 0x00	; 0
    55a2:	0e 94 b9 23 	call	0x4772	; 0x4772 <nm_write_reg>
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
    55a6:	21 e8       	ldi	r18, 0x81	; 129
    55a8:	30 e0       	ldi	r19, 0x00	; 0
    55aa:	40 e0       	ldi	r20, 0x00	; 0
    55ac:	50 e0       	ldi	r21, 0x00	; 0
    55ae:	64 e0       	ldi	r22, 0x04	; 4
    55b0:	72 e0       	ldi	r23, 0x02	; 2
    55b2:	81 e0       	ldi	r24, 0x01	; 1
    55b4:	90 e0       	ldi	r25, 0x00	; 0
    55b6:	0e 94 b9 23 	call	0x4772	; 0x4772 <nm_write_reg>
	while (nm_read_reg(SPI_FLASH_TR_DONE) != 1)
    55ba:	68 e1       	ldi	r22, 0x18	; 24
    55bc:	72 e0       	ldi	r23, 0x02	; 2
    55be:	81 e0       	ldi	r24, 0x01	; 1
    55c0:	90 e0       	ldi	r25, 0x00	; 0
    55c2:	0e 94 b5 23 	call	0x476a	; 0x476a <nm_read_reg>
    55c6:	61 30       	cpi	r22, 0x01	; 1
    55c8:	71 05       	cpc	r23, r1
    55ca:	81 05       	cpc	r24, r1
    55cc:	91 05       	cpc	r25, r1
    55ce:	a9 f7       	brne	.-22     	; 0x55ba <spi_flash_enable+0x168>
    55d0:	b6 cf       	rjmp	.-148    	; 0x553e <spi_flash_enable+0xec>
 *	@author	M. Abdelmawla
 *	@version	1.0
 */
sint8 spi_flash_enable(uint8 enable)
{
	sint8 s8Ret = M2M_SUCCESS;
    55d2:	10 e0       	ldi	r17, 0x00	; 0
		u32Val |= ((0x0010ul) << 12);
		nm_write_reg(0x1410, u32Val);
	}
ERR1:
	return s8Ret;
}
    55d4:	81 2f       	mov	r24, r17
    55d6:	24 96       	adiw	r28, 0x04	; 4
    55d8:	cd bf       	out	0x3d, r28	; 61
    55da:	de bf       	out	0x3e, r29	; 62
    55dc:	df 91       	pop	r29
    55de:	cf 91       	pop	r28
    55e0:	1f 91       	pop	r17
    55e2:	0f 91       	pop	r16
    55e4:	08 95       	ret

000055e6 <bin2hex>:
char *signer_cert_filename = NULL;
uint32 sector_buffer[MAX_TLS_CERT_LENGTH];
uint32_t signer_ca_public_key_size = 0;

static const char* bin2hex(const void* data, size_t data_size)
{
    55e6:	cf 93       	push	r28
    55e8:	df 93       	push	r29
    static char buf[256];
    static char hex[] = "0123456789abcdef";
    const uint8_t* data8 = data;
    
    if (data_size*2 > sizeof(buf)-1)
    55ea:	9b 01       	movw	r18, r22
    55ec:	22 0f       	add	r18, r18
    55ee:	33 1f       	adc	r19, r19
    55f0:	2f 3f       	cpi	r18, 0xFF	; 255
    55f2:	31 05       	cpc	r19, r1
    55f4:	09 f0       	breq	.+2      	; 0x55f8 <bin2hex+0x12>
    55f6:	18 f5       	brcc	.+70     	; 0x563e <bin2hex+0x58>
    55f8:	cc e3       	ldi	r28, 0x3C	; 60
    55fa:	da e2       	ldi	r29, 0x2A	; 42
    55fc:	fc 01       	movw	r30, r24
    55fe:	68 0f       	add	r22, r24
    5600:	79 1f       	adc	r23, r25
    return "[buf too small]";
    
    for (size_t i = 0; i < data_size; i++)
    5602:	e6 17       	cp	r30, r22
    5604:	f7 07       	cpc	r31, r23
    5606:	a1 f0       	breq	.+40     	; 0x5630 <bin2hex+0x4a>
    5608:	cf 01       	movw	r24, r30
    {
        buf[i*2 + 0] = hex[(*data8) >> 4];
    560a:	a1 91       	ld	r26, Z+
    560c:	a2 95       	swap	r26
    560e:	af 70       	andi	r26, 0x0F	; 15
    5610:	b0 e0       	ldi	r27, 0x00	; 0
    5612:	a2 57       	subi	r26, 0x72	; 114
    5614:	b5 45       	sbci	r27, 0x55	; 85
    5616:	4c 91       	ld	r20, X
    5618:	48 83       	st	Y, r20
        buf[i*2 + 1] = hex[(*data8) & 0xF];
    561a:	dc 01       	movw	r26, r24
    561c:	8c 91       	ld	r24, X
    561e:	a8 2f       	mov	r26, r24
    5620:	af 70       	andi	r26, 0x0F	; 15
    5622:	b0 e0       	ldi	r27, 0x00	; 0
    5624:	a2 57       	subi	r26, 0x72	; 114
    5626:	b5 45       	sbci	r27, 0x55	; 85
    5628:	8c 91       	ld	r24, X
    562a:	89 83       	std	Y+1, r24	; 0x01
    562c:	22 96       	adiw	r28, 0x02	; 2
    562e:	e9 cf       	rjmp	.-46     	; 0x5602 <bin2hex+0x1c>
        data8++;
    }
    buf[data_size*2] = 0;
    5630:	f9 01       	movw	r30, r18
    5632:	e4 5c       	subi	r30, 0xC4	; 196
    5634:	f5 4d       	sbci	r31, 0xD5	; 213
    5636:	10 82       	st	Z, r1
    
    return buf;
    5638:	8c e3       	ldi	r24, 0x3C	; 60
    563a:	9a e2       	ldi	r25, 0x2A	; 42
    563c:	02 c0       	rjmp	.+4      	; 0x5642 <bin2hex+0x5c>
    static char buf[256];
    static char hex[] = "0123456789abcdef";
    const uint8_t* data8 = data;
    
    if (data_size*2 > sizeof(buf)-1)
    return "[buf too small]";
    563e:	8e e6       	ldi	r24, 0x6E	; 110
    5640:	9a ea       	ldi	r25, 0xAA	; 170
        data8++;
    }
    buf[data_size*2] = 0;
    
    return buf;
}
    5642:	df 91       	pop	r29
    5644:	cf 91       	pop	r28
    5646:	08 95       	ret

00005648 <WINC_CERTS_appendFileBuf>:


sint8 WINC_CERTS_appendFileBuf(uint32* buffer32, uint32 buffer_size, const char* file_name, uint32 file_size, const uint8* file_data)
{
    5648:	2f 92       	push	r2
    564a:	3f 92       	push	r3
    564c:	4f 92       	push	r4
    564e:	5f 92       	push	r5
    5650:	6f 92       	push	r6
    5652:	7f 92       	push	r7
    5654:	8f 92       	push	r8
    5656:	9f 92       	push	r9
    5658:	af 92       	push	r10
    565a:	bf 92       	push	r11
    565c:	cf 92       	push	r12
    565e:	df 92       	push	r13
    5660:	ef 92       	push	r14
    5662:	ff 92       	push	r15
    5664:	0f 93       	push	r16
    5666:	1f 93       	push	r17
    5668:	cf 93       	push	r28
    566a:	df 93       	push	r29
    566c:	ec 01       	movw	r28, r24
    566e:	2a 01       	movw	r4, r20
    5670:	3b 01       	movw	r6, r22
    5672:	19 01       	movw	r2, r18
    5674:	47 01       	movw	r8, r14
    5676:	58 01       	movw	r10, r16
    tstrTlsSrvSecHdr* header = (tstrTlsSrvSecHdr*)buffer32;
    tstrTlsSrvSecFileEntry* file_entry = NULL;
    uint16 str_size = m2m_strlen((uint8*)file_name) + 1;
    5678:	c9 01       	movw	r24, r18
    567a:	0e 94 ba 1b 	call	0x3774	; 0x3774 <m2m_strlen>
    567e:	01 96       	adiw	r24, 0x01	; 1
    uint8 *pBuffer = (uint8*)buffer32;

    while ((*pBuffer) == 0xFF)
    {
        
        if(count == INIT_CERT_BUFFER_LEN)
    5680:	20 91 b3 a3 	lds	r18, 0xA3B3	; 0x80a3b3 <__bss_end+0x6a1a>
    5684:	30 91 b4 a3 	lds	r19, 0xA3B4	; 0x80a3b4 <__bss_end+0x6a1b>
    5688:	40 91 ff a5 	lds	r20, 0xA5FF	; 0x80a5ff <__bss_end+0x6c66>
    568c:	50 91 00 a6 	lds	r21, 0xA600	; 0x80a600 <__bss_end+0x6c67>
    5690:	24 0f       	add	r18, r20
    5692:	35 1f       	adc	r19, r21
    5694:	40 ea       	ldi	r20, 0xA0	; 160
    5696:	5d e0       	ldi	r21, 0x0D	; 13
    5698:	42 1b       	sub	r20, r18
    569a:	53 0b       	sbc	r21, r19
    569c:	fe 01       	movw	r30, r28
sint8 WINC_CERTS_appendFileBuf(uint32* buffer32, uint32 buffer_size, const char* file_name, uint32 file_size, const uint8* file_data)
{
    tstrTlsSrvSecHdr* header = (tstrTlsSrvSecHdr*)buffer32;
    tstrTlsSrvSecFileEntry* file_entry = NULL;
    uint16 str_size = m2m_strlen((uint8*)file_name) + 1;
    uint16 count = 0;
    569e:	20 e0       	ldi	r18, 0x00	; 0
    56a0:	30 e0       	ldi	r19, 0x00	; 0
    uint8 *pBuffer = (uint8*)buffer32;

    while ((*pBuffer) == 0xFF)
    56a2:	61 91       	ld	r22, Z+
    56a4:	6f 3f       	cpi	r22, 0xFF	; 255
    56a6:	19 f4       	brne	.+6      	; 0x56ae <WINC_CERTS_appendFileBuf+0x66>
    {
        
        if(count == INIT_CERT_BUFFER_LEN)
    56a8:	24 17       	cp	r18, r20
    56aa:	35 07       	cpc	r19, r21
    56ac:	81 f4       	brne	.+32     	; 0x56ce <WINC_CERTS_appendFileBuf+0x86>
        break;
        count++;
        pBuffer++;
    }

    if(count == INIT_CERT_BUFFER_LEN)
    56ae:	24 17       	cp	r18, r20
    56b0:	35 07       	cpc	r19, r21
    56b2:	81 f4       	brne	.+32     	; 0x56d4 <WINC_CERTS_appendFileBuf+0x8c>
    {
        // The WINC will need to add the reference start pattern to the header
        header->u32nEntries = 0; // No certs
    56b4:	18 86       	std	Y+8, r1	; 0x08
    56b6:	19 86       	std	Y+9, r1	; 0x09
    56b8:	1a 86       	std	Y+10, r1	; 0x0a
    56ba:	1b 86       	std	Y+11, r1	; 0x0b
        // The WINC will need to add the offset of the flash were the certificates are stored to this address
        header->u32NextWriteAddr = sizeof(*header); // Next cert will be written after the header
    56bc:	40 ed       	ldi	r20, 0xD0	; 208
    56be:	51 e0       	ldi	r21, 0x01	; 1
    56c0:	60 e0       	ldi	r22, 0x00	; 0
    56c2:	70 e0       	ldi	r23, 0x00	; 0
    56c4:	4c 87       	std	Y+12, r20	; 0x0c
    56c6:	5d 87       	std	Y+13, r21	; 0x0d
    56c8:	6e 87       	std	Y+14, r22	; 0x0e
    56ca:	7f 87       	std	Y+15, r23	; 0x0f
    56cc:	03 c0       	rjmp	.+6      	; 0x56d4 <WINC_CERTS_appendFileBuf+0x8c>
    while ((*pBuffer) == 0xFF)
    {
        
        if(count == INIT_CERT_BUFFER_LEN)
        break;
        count++;
    56ce:	2f 5f       	subi	r18, 0xFF	; 255
    56d0:	3f 4f       	sbci	r19, 0xFF	; 255
    56d2:	e7 cf       	rjmp	.-50     	; 0x56a2 <WINC_CERTS_appendFileBuf+0x5a>
        header->u32nEntries = 0; // No certs
        // The WINC will need to add the offset of the flash were the certificates are stored to this address
        header->u32NextWriteAddr = sizeof(*header); // Next cert will be written after the header
    }
    
    if (header->u32nEntries >= sizeof(header->astrEntries)/sizeof(header->astrEntries[0]))
    56d4:	e8 84       	ldd	r14, Y+8	; 0x08
    56d6:	f9 84       	ldd	r15, Y+9	; 0x09
    56d8:	0a 85       	ldd	r16, Y+10	; 0x0a
    56da:	1b 85       	ldd	r17, Y+11	; 0x0b
    56dc:	28 e0       	ldi	r18, 0x08	; 8
    56de:	e2 16       	cp	r14, r18
    56e0:	f1 04       	cpc	r15, r1
    56e2:	01 05       	cpc	r16, r1
    56e4:	11 05       	cpc	r17, r1
    56e6:	10 f0       	brcs	.+4      	; 0x56ec <WINC_CERTS_appendFileBuf+0xa4>
    return M2M_ERR_FAIL; // Already at max number of files
    56e8:	84 ef       	ldi	r24, 0xF4	; 244
    56ea:	4d c0       	rjmp	.+154    	; 0x5786 <WINC_CERTS_appendFileBuf+0x13e>
    
    if ((header->u32NextWriteAddr + file_size) > buffer_size)
    56ec:	4c 85       	ldd	r20, Y+12	; 0x0c
    56ee:	5d 85       	ldd	r21, Y+13	; 0x0d
    56f0:	6e 85       	ldd	r22, Y+14	; 0x0e
    56f2:	7f 85       	ldd	r23, Y+15	; 0x0f
    56f4:	48 0d       	add	r20, r8
    56f6:	59 1d       	adc	r21, r9
    56f8:	6a 1d       	adc	r22, r10
    56fa:	7b 1d       	adc	r23, r11
    56fc:	44 16       	cp	r4, r20
    56fe:	55 06       	cpc	r5, r21
    5700:	66 06       	cpc	r6, r22
    5702:	77 06       	cpc	r7, r23
    5704:	88 f3       	brcs	.-30     	; 0x56e8 <WINC_CERTS_appendFileBuf+0xa0>
    return M2M_ERR_FAIL; // Not enough space in buffer for new file
    
    file_entry = &header->astrEntries[header->u32nEntries];
    header->u32nEntries++;
    5706:	b8 01       	movw	r22, r16
    5708:	a7 01       	movw	r20, r14
    570a:	4f 5f       	subi	r20, 0xFF	; 255
    570c:	5f 4f       	sbci	r21, 0xFF	; 255
    570e:	6f 4f       	sbci	r22, 0xFF	; 255
    5710:	7f 4f       	sbci	r23, 0xFF	; 255
    5712:	48 87       	std	Y+8, r20	; 0x08
    5714:	59 87       	std	Y+9, r21	; 0x09
    5716:	6a 87       	std	Y+10, r22	; 0x0a
    5718:	7b 87       	std	Y+11, r23	; 0x0b
    
    if (str_size > sizeof(file_entry->acFileName))
    571a:	81 33       	cpi	r24, 0x31	; 49
    571c:	91 05       	cpc	r25, r1
    571e:	20 f7       	brcc	.-56     	; 0x56e8 <WINC_CERTS_appendFileBuf+0xa0>
    return M2M_ERR_FAIL; // File name too long
    m2m_memcpy((uint8*)file_entry->acFileName, (uint8*)file_name, str_size);
    5720:	9c 01       	movw	r18, r24
    5722:	40 e0       	ldi	r20, 0x00	; 0
    5724:	50 e0       	ldi	r21, 0x00	; 0
    5726:	88 e3       	ldi	r24, 0x38	; 56
    5728:	8e 9d       	mul	r24, r14
    572a:	30 01       	movw	r6, r0
    572c:	8f 9d       	mul	r24, r15
    572e:	70 0c       	add	r7, r0
    5730:	11 24       	eor	r1, r1
    5732:	c3 01       	movw	r24, r6
    5734:	40 96       	adiw	r24, 0x10	; 16
    5736:	b1 01       	movw	r22, r2
    5738:	8c 0f       	add	r24, r28
    573a:	9d 1f       	adc	r25, r29
    573c:	0e 94 9c 1b 	call	0x3738	; 0x3738 <m2m_memcpy>
    
    file_entry->u32FileSize = file_size;
    5740:	6c 0e       	add	r6, r28
    5742:	7d 1e       	adc	r7, r29
    5744:	f3 01       	movw	r30, r6
    5746:	e0 5c       	subi	r30, 0xC0	; 192
    5748:	ff 4f       	sbci	r31, 0xFF	; 255
    574a:	80 82       	st	Z, r8
    574c:	91 82       	std	Z+1, r9	; 0x01
    574e:	a2 82       	std	Z+2, r10	; 0x02
    5750:	b3 82       	std	Z+3, r11	; 0x03
    file_entry->u32FileAddr = header->u32NextWriteAddr;
    5752:	8c 85       	ldd	r24, Y+12	; 0x0c
    5754:	9d 85       	ldd	r25, Y+13	; 0x0d
    5756:	ae 85       	ldd	r26, Y+14	; 0x0e
    5758:	bf 85       	ldd	r27, Y+15	; 0x0f
    575a:	34 96       	adiw	r30, 0x04	; 4
    575c:	80 83       	st	Z, r24
    575e:	91 83       	std	Z+1, r25	; 0x01
    5760:	a2 83       	std	Z+2, r26	; 0x02
    5762:	b3 83       	std	Z+3, r27	; 0x03
    header->u32NextWriteAddr += file_size;
    5764:	b5 01       	movw	r22, r10
    5766:	a4 01       	movw	r20, r8
    5768:	48 0f       	add	r20, r24
    576a:	59 1f       	adc	r21, r25
    576c:	6a 1f       	adc	r22, r26
    576e:	7b 1f       	adc	r23, r27
    5770:	4c 87       	std	Y+12, r20	; 0x0c
    5772:	5d 87       	std	Y+13, r21	; 0x0d
    5774:	6e 87       	std	Y+14, r22	; 0x0e
    5776:	7f 87       	std	Y+15, r23	; 0x0f
    
    // Use memmove to accommodate optimizations where the file data is temporarily stored
    // in buffer32
    memmove(((uint8*)buffer32) + (file_entry->u32FileAddr), (uint8*)file_data, file_size);
    5778:	8c 0f       	add	r24, r28
    577a:	9d 1f       	adc	r25, r29
    577c:	a4 01       	movw	r20, r8
    577e:	b6 01       	movw	r22, r12
    5780:	0e 94 7b 2e 	call	0x5cf6	; 0x5cf6 <memmove>
    
    return M2M_SUCCESS;
    5784:	80 e0       	ldi	r24, 0x00	; 0
}
    5786:	df 91       	pop	r29
    5788:	cf 91       	pop	r28
    578a:	1f 91       	pop	r17
    578c:	0f 91       	pop	r16
    578e:	ff 90       	pop	r15
    5790:	ef 90       	pop	r14
    5792:	df 90       	pop	r13
    5794:	cf 90       	pop	r12
    5796:	bf 90       	pop	r11
    5798:	af 90       	pop	r10
    579a:	9f 90       	pop	r9
    579c:	8f 90       	pop	r8
    579e:	7f 90       	pop	r7
    57a0:	6f 90       	pop	r6
    57a2:	5f 90       	pop	r5
    57a4:	4f 90       	pop	r4
    57a6:	3f 90       	pop	r3
    57a8:	2f 90       	pop	r2
    57aa:	08 95       	ret

000057ac <WINC_CERTS_getTotalFilesSize>:
    uint16 count = 0;

    while ((*pBuffer) == 0xFF)
    {
        
        if(count == INIT_CERT_BUFFER_LEN)
    57ac:	20 91 b3 a3 	lds	r18, 0xA3B3	; 0x80a3b3 <__bss_end+0x6a1a>
    57b0:	30 91 b4 a3 	lds	r19, 0xA3B4	; 0x80a3b4 <__bss_end+0x6a1b>
    57b4:	40 91 ff a5 	lds	r20, 0xA5FF	; 0x80a5ff <__bss_end+0x6c66>
    57b8:	50 91 00 a6 	lds	r21, 0xA600	; 0x80a600 <__bss_end+0x6c67>
    57bc:	24 0f       	add	r18, r20
    57be:	35 1f       	adc	r19, r21
    57c0:	40 ea       	ldi	r20, 0xA0	; 160
    57c2:	5d e0       	ldi	r21, 0x0D	; 13
    57c4:	42 1b       	sub	r20, r18
    57c6:	53 0b       	sbc	r21, r19
    57c8:	fc 01       	movw	r30, r24
}

size_t WINC_CERTS_getTotalFilesSize(const tstrTlsSrvSecHdr* header)
{
    uint8 *pBuffer = (uint8*) header;
    uint16 count = 0;
    57ca:	20 e0       	ldi	r18, 0x00	; 0
    57cc:	30 e0       	ldi	r19, 0x00	; 0

    while ((*pBuffer) == 0xFF)
    57ce:	61 91       	ld	r22, Z+
    57d0:	6f 3f       	cpi	r22, 0xFF	; 255
    57d2:	19 f4       	brne	.+6      	; 0x57da <WINC_CERTS_getTotalFilesSize+0x2e>
    {
        
        if(count == INIT_CERT_BUFFER_LEN)
    57d4:	24 17       	cp	r18, r20
    57d6:	35 07       	cpc	r19, r21
    57d8:	39 f4       	brne	.+14     	; 0x57e8 <WINC_CERTS_getTotalFilesSize+0x3c>
        break;
        count++;
        pBuffer++;
    }

    if(count == INIT_CERT_BUFFER_LEN)
    57da:	24 17       	cp	r18, r20
    57dc:	35 07       	cpc	r19, r21
    57de:	39 f0       	breq	.+14     	; 0x57ee <WINC_CERTS_getTotalFilesSize+0x42>
    return sizeof(*header); // Buffer is empty, no files
    
    return header->u32NextWriteAddr;
    57e0:	fc 01       	movw	r30, r24
    57e2:	84 85       	ldd	r24, Z+12	; 0x0c
    57e4:	95 85       	ldd	r25, Z+13	; 0x0d
    57e6:	08 95       	ret
    while ((*pBuffer) == 0xFF)
    {
        
        if(count == INIT_CERT_BUFFER_LEN)
        break;
        count++;
    57e8:	2f 5f       	subi	r18, 0xFF	; 255
    57ea:	3f 4f       	sbci	r19, 0xFF	; 255
    57ec:	f0 cf       	rjmp	.-32     	; 0x57ce <WINC_CERTS_getTotalFilesSize+0x22>
        pBuffer++;
    }

    if(count == INIT_CERT_BUFFER_LEN)
    return sizeof(*header); // Buffer is empty, no files
    57ee:	80 ed       	ldi	r24, 0xD0	; 208
    57f0:	91 e0       	ldi	r25, 0x01	; 1
    
    return header->u32NextWriteAddr;
}
    57f2:	08 95       	ret

000057f4 <WINC_CERTS_initBuffer>:

void WINC_CERTS_initBuffer() {
    // Clear cert chain buffer
    memset(sector_buffer, 0xFF, MAX_TLS_CERT_LENGTH * sizeof(uint32));
    57f4:	40 e1       	ldi	r20, 0x10	; 16
    57f6:	5e e0       	ldi	r21, 0x0E	; 14
    57f8:	6f ef       	ldi	r22, 0xFF	; 255
    57fa:	70 e0       	ldi	r23, 0x00	; 0
    57fc:	8d e7       	ldi	r24, 0x7D	; 125
    57fe:	9b e2       	ldi	r25, 0x2B	; 43
    5800:	0e 94 8d 2e 	call	0x5d1a	; 0x5d1a <memset>

    // Use the end of the sector buffer to temporarily hold the data to save RAM
    file_list   = ((uint8_t*)sector_buffer) + (MAX_TLS_CERT_LENGTH * sizeof(uint32)- TLS_FILE_NAME_MAX*2);
    5804:	ed e2       	ldi	r30, 0x2D	; 45
    5806:	f9 e3       	ldi	r31, 0x39	; 57
    5808:	e0 93 44 2b 	sts	0x2B44, r30	; 0x802b44 <file_list>
    580c:	f0 93 45 2b 	sts	0x2B45, r31	; 0x802b45 <file_list+0x1>
    signer_cert = file_list - SIGNER_CERT_MAX_LEN;
    5810:	88 ef       	ldi	r24, 0xF8	; 248
    5812:	9f ef       	ldi	r25, 0xFF	; 255
    5814:	20 91 b3 a3 	lds	r18, 0xA3B3	; 0x80a3b3 <__bss_end+0x6a1a>
    5818:	30 91 b4 a3 	lds	r19, 0xA3B4	; 0x80a3b4 <__bss_end+0x6a1b>
    581c:	ac 01       	movw	r20, r24
    581e:	42 1b       	sub	r20, r18
    5820:	53 0b       	sbc	r21, r19
    5822:	9a 01       	movw	r18, r20
    5824:	23 5d       	subi	r18, 0xD3	; 211
    5826:	36 4c       	sbci	r19, 0xC6	; 198
    5828:	20 93 48 2b 	sts	0x2B48, r18	; 0x802b48 <signer_cert>
    582c:	30 93 49 2b 	sts	0x2B49, r19	; 0x802b49 <signer_cert+0x1>
    device_cert = signer_cert - DEVICE_CERT_MAX_LEN;
    5830:	40 91 ff a5 	lds	r20, 0xA5FF	; 0x80a5ff <__bss_end+0x6c66>
    5834:	50 91 00 a6 	lds	r21, 0xA600	; 0x80a600 <__bss_end+0x6c67>
    5838:	84 1b       	sub	r24, r20
    583a:	95 0b       	sbc	r25, r21
    583c:	82 0f       	add	r24, r18
    583e:	93 1f       	adc	r25, r19
    5840:	80 93 46 2b 	sts	0x2B46, r24	; 0x802b46 <device_cert>
    5844:	90 93 47 2b 	sts	0x2B47, r25	; 0x802b47 <device_cert+0x1>

    // Init the file list
    memset(file_list, 0, TLS_FILE_NAME_MAX*2);
    5848:	80 e6       	ldi	r24, 0x60	; 96
    584a:	df 01       	movw	r26, r30
    584c:	1d 92       	st	X+, r1
    584e:	8a 95       	dec	r24
    5850:	e9 f7       	brne	.-6      	; 0x584c <WINC_CERTS_initBuffer+0x58>
    device_cert_filename = (char*)&file_list[0];
    5852:	e0 93 42 2b 	sts	0x2B42, r30	; 0x802b42 <device_cert_filename>
    5856:	f0 93 43 2b 	sts	0x2B43, r31	; 0x802b43 <device_cert_filename+0x1>
    signer_cert_filename = (char*)&file_list[TLS_FILE_NAME_MAX];
    585a:	8d e5       	ldi	r24, 0x5D	; 93
    585c:	99 e3       	ldi	r25, 0x39	; 57
    585e:	80 93 40 2b 	sts	0x2B40, r24	; 0x802b40 <signer_cert_filename>
    5862:	90 93 41 2b 	sts	0x2B41, r25	; 0x802b41 <signer_cert_filename+0x1>
    5866:	08 95       	ret

00005868 <WINC_CERTS_transfer>:
}

sint8 WINC_CERTS_transfer(uint8_t subject_key_id[20])
{
    5868:	af 92       	push	r10
    586a:	bf 92       	push	r11
    586c:	cf 92       	push	r12
    586e:	df 92       	push	r13
    5870:	ef 92       	push	r14
    5872:	ff 92       	push	r15
    5874:	0f 93       	push	r16
    5876:	1f 93       	push	r17
    5878:	cf 93       	push	r28
    587a:	df 93       	push	r29
    587c:	cd b7       	in	r28, 0x3d	; 61
    587e:	de b7       	in	r29, 0x3e	; 62
    5880:	c2 56       	subi	r28, 0x62	; 98
    5882:	d1 09       	sbc	r29, r1
    5884:	cd bf       	out	0x3d, r28	; 61
    5886:	de bf       	out	0x3e, r29	; 62
    5888:	8c 01       	movw	r16, r24
    ATCA_STATUS atca_status = ATCACERT_E_SUCCESS;
    
    do
    {
        // Get the signer's public key from its certificate
        atca_status = atcacert_get_subj_public_key(&g_cert_def_1_signer, signer_cert,
    588a:	40 91 7b 2b 	lds	r20, 0x2B7B	; 0x802b7b <signer_cert_size>
    588e:	50 91 7c 2b 	lds	r21, 0x2B7C	; 0x802b7c <signer_cert_size+0x1>
    5892:	60 91 48 2b 	lds	r22, 0x2B48	; 0x802b48 <signer_cert>
    5896:	70 91 49 2b 	lds	r23, 0x2B49	; 0x802b49 <signer_cert+0x1>
    589a:	9e 01       	movw	r18, r28
    589c:	2f 5f       	subi	r18, 0xFF	; 255
    589e:	3f 4f       	sbci	r19, 0xFF	; 255
    58a0:	8d e6       	ldi	r24, 0x6D	; 109
    58a2:	93 ea       	ldi	r25, 0xA3	; 163
    58a4:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <atcacert_get_subj_public_key>
        signer_cert_size, signer_public_key);
        if (atca_status != ATCACERT_E_SUCCESS)
    58a8:	81 11       	cpse	r24, r1
    58aa:	d8 c0       	rjmp	.+432    	; 0x5a5c <WINC_CERTS_transfer+0x1f4>
        {
            // Break the do/while loop
            break;
        }

        if (subject_key_id)
    58ac:	01 15       	cp	r16, r1
    58ae:	11 05       	cpc	r17, r1
    58b0:	e1 f4       	brne	.+56     	; 0x58ea <WINC_CERTS_transfer+0x82>
                break;
            }
        }
        
        // Get the device certificate SN for the filename
        cert_sn_size = sizeof(cert_sn);
    58b2:	90 e2       	ldi	r25, 0x20	; 32
    58b4:	a9 2e       	mov	r10, r25
    58b6:	b1 2c       	mov	r11, r1
    58b8:	a3 96       	adiw	r28, 0x23	; 35
    58ba:	ae ae       	std	Y+62, r10	; 0x3e
    58bc:	bf ae       	std	Y+63, r11	; 0x3f
    58be:	a3 97       	sbiw	r28, 0x23	; 35
        atca_status = atcacert_get_cert_sn(&g_cert_def_2_device, device_cert,
    58c0:	40 91 8d 39 	lds	r20, 0x398D	; 0x80398d <device_cert_size>
    58c4:	50 91 8e 39 	lds	r21, 0x398E	; 0x80398e <device_cert_size+0x1>
    58c8:	60 91 46 2b 	lds	r22, 0x2B46	; 0x802b46 <device_cert>
    58cc:	70 91 47 2b 	lds	r23, 0x2B47	; 0x802b47 <device_cert+0x1>
    58d0:	8e 01       	movw	r16, r28
    58d2:	0f 59       	subi	r16, 0x9F	; 159
    58d4:	1f 4f       	sbci	r17, 0xFF	; 255
    58d6:	9e 01       	movw	r18, r28
    58d8:	2f 5b       	subi	r18, 0xBF	; 191
    58da:	3f 4f       	sbci	r19, 0xFF	; 255
    58dc:	89 eb       	ldi	r24, 0xB9	; 185
    58de:	95 ea       	ldi	r25, 0xA5	; 165
    58e0:	0e 94 a9 04 	call	0x952	; 0x952 <atcacert_get_cert_sn>
        device_cert_size, cert_sn, &cert_sn_size);
        if (atca_status != ATCACERT_E_SUCCESS)
    58e4:	81 11       	cpse	r24, r1
    58e6:	ba c0       	rjmp	.+372    	; 0x5a5c <WINC_CERTS_transfer+0x1f4>
    58e8:	10 c0       	rjmp	.+32     	; 0x590a <WINC_CERTS_transfer+0xa2>
            break;
        }

        if (subject_key_id)
        {
            atca_status = atcacert_get_subj_key_id(&g_cert_def_2_device, device_cert,
    58ea:	40 91 8d 39 	lds	r20, 0x398D	; 0x80398d <device_cert_size>
    58ee:	50 91 8e 39 	lds	r21, 0x398E	; 0x80398e <device_cert_size+0x1>
    58f2:	60 91 46 2b 	lds	r22, 0x2B46	; 0x802b46 <device_cert>
    58f6:	70 91 47 2b 	lds	r23, 0x2B47	; 0x802b47 <device_cert+0x1>
    58fa:	98 01       	movw	r18, r16
    58fc:	89 eb       	ldi	r24, 0xB9	; 185
    58fe:	95 ea       	ldi	r25, 0xA5	; 165
    5900:	0e 94 8a 04 	call	0x914	; 0x914 <atcacert_get_subj_key_id>
            device_cert_size, subject_key_id);
            if (atca_status != ATCACERT_E_SUCCESS)
    5904:	81 11       	cpse	r24, r1
    5906:	aa c0       	rjmp	.+340    	; 0x5a5c <WINC_CERTS_transfer+0x1f4>
    5908:	d4 cf       	rjmp	.-88     	; 0x58b2 <WINC_CERTS_transfer+0x4a>
            // Break the do/while loop
            break;
        }
        
        // Build the device certificate filename
        strcpy(device_cert_filename, "CERT_");
    590a:	6e e7       	ldi	r22, 0x7E	; 126
    590c:	7a ea       	ldi	r23, 0xAA	; 170
    590e:	80 91 42 2b 	lds	r24, 0x2B42	; 0x802b42 <device_cert_filename>
    5912:	90 91 43 2b 	lds	r25, 0x2B43	; 0x802b43 <device_cert_filename+0x1>
    5916:	0e 94 b3 2e 	call	0x5d66	; 0x5d66 <strcpy>
        strcat(device_cert_filename, bin2hex(cert_sn, cert_sn_size));
    591a:	a3 96       	adiw	r28, 0x23	; 35
    591c:	6e ad       	ldd	r22, Y+62	; 0x3e
    591e:	7f ad       	ldd	r23, Y+63	; 0x3f
    5920:	a3 97       	sbiw	r28, 0x23	; 35
    5922:	ce 01       	movw	r24, r28
    5924:	8f 5b       	subi	r24, 0xBF	; 191
    5926:	9f 4f       	sbci	r25, 0xFF	; 255
    5928:	0e 94 f3 2a 	call	0x55e6	; 0x55e6 <bin2hex>
    592c:	bc 01       	movw	r22, r24
    592e:	80 91 42 2b 	lds	r24, 0x2B42	; 0x802b42 <device_cert_filename>
    5932:	90 91 43 2b 	lds	r25, 0x2B43	; 0x802b43 <device_cert_filename+0x1>
    5936:	0e 94 94 2e 	call	0x5d28	; 0x5d28 <strcat>
        
        // Add the DER device certificate the TLS certs buffer
        status = WINC_CERTS_appendFileBuf(sector_buffer, sizeof(sector_buffer),
    593a:	c0 90 46 2b 	lds	r12, 0x2B46	; 0x802b46 <device_cert>
    593e:	d0 90 47 2b 	lds	r13, 0x2B47	; 0x802b47 <device_cert+0x1>
    5942:	e0 90 8d 39 	lds	r14, 0x398D	; 0x80398d <device_cert_size>
    5946:	f0 90 8e 39 	lds	r15, 0x398E	; 0x80398e <device_cert_size+0x1>
    594a:	00 e0       	ldi	r16, 0x00	; 0
    594c:	10 e0       	ldi	r17, 0x00	; 0
    594e:	20 91 42 2b 	lds	r18, 0x2B42	; 0x802b42 <device_cert_filename>
    5952:	30 91 43 2b 	lds	r19, 0x2B43	; 0x802b43 <device_cert_filename+0x1>
    5956:	40 e1       	ldi	r20, 0x10	; 16
    5958:	5e e0       	ldi	r21, 0x0E	; 14
    595a:	60 e0       	ldi	r22, 0x00	; 0
    595c:	70 e0       	ldi	r23, 0x00	; 0
    595e:	8d e7       	ldi	r24, 0x7D	; 125
    5960:	9b e2       	ldi	r25, 0x2B	; 43
    5962:	0e 94 24 2b 	call	0x5648	; 0x5648 <WINC_CERTS_appendFileBuf>
        device_cert_filename, device_cert_size,
        device_cert);
        if (status != M2M_SUCCESS)
    5966:	81 11       	cpse	r24, r1
    5968:	7a c0       	rjmp	.+244    	; 0x5a5e <WINC_CERTS_transfer+0x1f6>
        {
            // Break the do/while loop
            break;
        }
        
        device_cert = NULL; // Make sure we don't use this now that it has moved
    596a:	10 92 46 2b 	sts	0x2B46, r1	; 0x802b46 <device_cert>
    596e:	10 92 47 2b 	sts	0x2B47, r1	; 0x802b47 <device_cert+0x1>
        
        // Get the signer certificate SN for the filename
        cert_sn_size = sizeof(cert_sn);
    5972:	a3 96       	adiw	r28, 0x23	; 35
    5974:	ae ae       	std	Y+62, r10	; 0x3e
    5976:	bf ae       	std	Y+63, r11	; 0x3f
    5978:	a3 97       	sbiw	r28, 0x23	; 35
        atca_status = atcacert_get_cert_sn(&g_cert_def_1_signer, signer_cert,
    597a:	40 91 7b 2b 	lds	r20, 0x2B7B	; 0x802b7b <signer_cert_size>
    597e:	50 91 7c 2b 	lds	r21, 0x2B7C	; 0x802b7c <signer_cert_size+0x1>
    5982:	60 91 48 2b 	lds	r22, 0x2B48	; 0x802b48 <signer_cert>
    5986:	70 91 49 2b 	lds	r23, 0x2B49	; 0x802b49 <signer_cert+0x1>
    598a:	8e 01       	movw	r16, r28
    598c:	0f 59       	subi	r16, 0x9F	; 159
    598e:	1f 4f       	sbci	r17, 0xFF	; 255
    5990:	9e 01       	movw	r18, r28
    5992:	2f 5b       	subi	r18, 0xBF	; 191
    5994:	3f 4f       	sbci	r19, 0xFF	; 255
    5996:	8d e6       	ldi	r24, 0x6D	; 109
    5998:	93 ea       	ldi	r25, 0xA3	; 163
    599a:	0e 94 a9 04 	call	0x952	; 0x952 <atcacert_get_cert_sn>
        signer_cert_size, cert_sn, &cert_sn_size);
        if (atca_status != ATCACERT_E_SUCCESS)
    599e:	81 11       	cpse	r24, r1
    59a0:	5d c0       	rjmp	.+186    	; 0x5a5c <WINC_CERTS_transfer+0x1f4>
            break;
        }
        
        
        // Build the signer certificate filename
        strcpy(signer_cert_filename, "CERT_");
    59a2:	6e e7       	ldi	r22, 0x7E	; 126
    59a4:	7a ea       	ldi	r23, 0xAA	; 170
    59a6:	80 91 40 2b 	lds	r24, 0x2B40	; 0x802b40 <signer_cert_filename>
    59aa:	90 91 41 2b 	lds	r25, 0x2B41	; 0x802b41 <signer_cert_filename+0x1>
    59ae:	0e 94 b3 2e 	call	0x5d66	; 0x5d66 <strcpy>
        strcat(signer_cert_filename, bin2hex(cert_sn, cert_sn_size));
    59b2:	a3 96       	adiw	r28, 0x23	; 35
    59b4:	6e ad       	ldd	r22, Y+62	; 0x3e
    59b6:	7f ad       	ldd	r23, Y+63	; 0x3f
    59b8:	a3 97       	sbiw	r28, 0x23	; 35
    59ba:	ce 01       	movw	r24, r28
    59bc:	8f 5b       	subi	r24, 0xBF	; 191
    59be:	9f 4f       	sbci	r25, 0xFF	; 255
    59c0:	0e 94 f3 2a 	call	0x55e6	; 0x55e6 <bin2hex>
    59c4:	bc 01       	movw	r22, r24
    59c6:	80 91 40 2b 	lds	r24, 0x2B40	; 0x802b40 <signer_cert_filename>
    59ca:	90 91 41 2b 	lds	r25, 0x2B41	; 0x802b41 <signer_cert_filename+0x1>
    59ce:	0e 94 94 2e 	call	0x5d28	; 0x5d28 <strcat>
        
        // Add the DER signer certificate the TLS certs buffer
        status = WINC_CERTS_appendFileBuf(sector_buffer, sizeof(sector_buffer),
    59d2:	c0 90 48 2b 	lds	r12, 0x2B48	; 0x802b48 <signer_cert>
    59d6:	d0 90 49 2b 	lds	r13, 0x2B49	; 0x802b49 <signer_cert+0x1>
    59da:	e0 90 7b 2b 	lds	r14, 0x2B7B	; 0x802b7b <signer_cert_size>
    59de:	f0 90 7c 2b 	lds	r15, 0x2B7C	; 0x802b7c <signer_cert_size+0x1>
    59e2:	00 e0       	ldi	r16, 0x00	; 0
    59e4:	10 e0       	ldi	r17, 0x00	; 0
    59e6:	20 91 40 2b 	lds	r18, 0x2B40	; 0x802b40 <signer_cert_filename>
    59ea:	30 91 41 2b 	lds	r19, 0x2B41	; 0x802b41 <signer_cert_filename+0x1>
    59ee:	40 e1       	ldi	r20, 0x10	; 16
    59f0:	5e e0       	ldi	r21, 0x0E	; 14
    59f2:	60 e0       	ldi	r22, 0x00	; 0
    59f4:	70 e0       	ldi	r23, 0x00	; 0
    59f6:	8d e7       	ldi	r24, 0x7D	; 125
    59f8:	9b e2       	ldi	r25, 0x2B	; 43
    59fa:	0e 94 24 2b 	call	0x5648	; 0x5648 <WINC_CERTS_appendFileBuf>
        signer_cert_filename, signer_cert_size, signer_cert);
        if (status != M2M_SUCCESS)
    59fe:	81 11       	cpse	r24, r1
    5a00:	2e c0       	rjmp	.+92     	; 0x5a5e <WINC_CERTS_transfer+0x1f6>
            // Break the do/while loop
            break;
        }
        
        // Add the cert chain list file to the TLS certs buffer
        status = WINC_CERTS_appendFileBuf(sector_buffer, sizeof(sector_buffer),
    5a02:	c0 90 44 2b 	lds	r12, 0x2B44	; 0x802b44 <file_list>
    5a06:	d0 90 45 2b 	lds	r13, 0x2B45	; 0x802b45 <file_list+0x1>
    5a0a:	10 e6       	ldi	r17, 0x60	; 96
    5a0c:	e1 2e       	mov	r14, r17
    5a0e:	f1 2c       	mov	r15, r1
    5a10:	00 e0       	ldi	r16, 0x00	; 0
    5a12:	10 e0       	ldi	r17, 0x00	; 0
    5a14:	24 e8       	ldi	r18, 0x84	; 132
    5a16:	3a ea       	ldi	r19, 0xAA	; 170
    5a18:	40 e1       	ldi	r20, 0x10	; 16
    5a1a:	5e e0       	ldi	r21, 0x0E	; 14
    5a1c:	60 e0       	ldi	r22, 0x00	; 0
    5a1e:	70 e0       	ldi	r23, 0x00	; 0
    5a20:	8d e7       	ldi	r24, 0x7D	; 125
    5a22:	9b e2       	ldi	r25, 0x2B	; 43
    5a24:	0e 94 24 2b 	call	0x5648	; 0x5648 <WINC_CERTS_appendFileBuf>
        TLS_SRV_ECDSA_CHAIN_FILE,
        TLS_FILE_NAME_MAX*2, file_list);
        if (status != M2M_SUCCESS)
    5a28:	81 11       	cpse	r24, r1
    5a2a:	19 c0       	rjmp	.+50     	; 0x5a5e <WINC_CERTS_transfer+0x1f6>
        {
            // Break the do/while loop
            break;
        }

        file_list = NULL;
    5a2c:	10 92 44 2b 	sts	0x2B44, r1	; 0x802b44 <file_list>
    5a30:	10 92 45 2b 	sts	0x2B45, r1	; 0x802b45 <file_list+0x1>
        signer_cert_filename = NULL;
    5a34:	10 92 40 2b 	sts	0x2B40, r1	; 0x802b40 <signer_cert_filename>
    5a38:	10 92 41 2b 	sts	0x2B41, r1	; 0x802b41 <signer_cert_filename+0x1>
        device_cert_filename = NULL;
    5a3c:	10 92 42 2b 	sts	0x2B42, r1	; 0x802b42 <device_cert_filename>
    5a40:	10 92 43 2b 	sts	0x2B43, r1	; 0x802b43 <device_cert_filename+0x1>
        
        // Update the TLS cert chain on the WINC.
        status = m2m_ssl_send_certs_to_winc((uint8 *)sector_buffer,
        (uint32)WINC_CERTS_getTotalFilesSize((tstrTlsSrvSecHdr*)sector_buffer));
    5a44:	8d e7       	ldi	r24, 0x7D	; 125
    5a46:	9b e2       	ldi	r25, 0x2B	; 43
    5a48:	0e 94 d6 2b 	call	0x57ac	; 0x57ac <WINC_CERTS_getTotalFilesSize>
        file_list = NULL;
        signer_cert_filename = NULL;
        device_cert_filename = NULL;
        
        // Update the TLS cert chain on the WINC.
        status = m2m_ssl_send_certs_to_winc((uint8 *)sector_buffer,
    5a4c:	ac 01       	movw	r20, r24
    5a4e:	60 e0       	ldi	r22, 0x00	; 0
    5a50:	70 e0       	ldi	r23, 0x00	; 0
    5a52:	8d e7       	ldi	r24, 0x7D	; 125
    5a54:	9b e2       	ldi	r25, 0x2B	; 43
    5a56:	0e 94 9c 1e 	call	0x3d38	; 0x3d38 <m2m_ssl_send_certs_to_winc>
    5a5a:	01 c0       	rjmp	.+2      	; 0x5a5e <WINC_CERTS_transfer+0x1f6>
    } while (false);

    if (atca_status)
    {
        M2M_ERR("eccSendCertsToWINC() failed with ret=%d", atca_status);
        status =  M2M_ERR_FAIL;
    5a5c:	84 ef       	ldi	r24, 0xF4	; 244
    }

    return status;
    5a5e:	ce 59       	subi	r28, 0x9E	; 158
    5a60:	df 4f       	sbci	r29, 0xFF	; 255
    5a62:	cd bf       	out	0x3d, r28	; 61
    5a64:	de bf       	out	0x3e, r29	; 62
    5a66:	df 91       	pop	r29
    5a68:	cf 91       	pop	r28
    5a6a:	1f 91       	pop	r17
    5a6c:	0f 91       	pop	r16
    5a6e:	ff 90       	pop	r15
    5a70:	ef 90       	pop	r14
    5a72:	df 90       	pop	r13
    5a74:	cf 90       	pop	r12
    5a76:	bf 90       	pop	r11
    5a78:	af 90       	pop	r10
    5a7a:	08 95       	ret

00005a7c <__tablejump2__>:
    5a7c:	ee 0f       	add	r30, r30
    5a7e:	ff 1f       	adc	r31, r31
    5a80:	05 90       	lpm	r0, Z+
    5a82:	f4 91       	lpm	r31, Z
    5a84:	e0 2d       	mov	r30, r0
    5a86:	09 94       	ijmp

00005a88 <malloc>:
    5a88:	0f 93       	push	r16
    5a8a:	1f 93       	push	r17
    5a8c:	cf 93       	push	r28
    5a8e:	df 93       	push	r29
    5a90:	82 30       	cpi	r24, 0x02	; 2
    5a92:	91 05       	cpc	r25, r1
    5a94:	10 f4       	brcc	.+4      	; 0x5a9a <malloc+0x12>
    5a96:	82 e0       	ldi	r24, 0x02	; 2
    5a98:	90 e0       	ldi	r25, 0x00	; 0
    5a9a:	e0 91 91 39 	lds	r30, 0x3991	; 0x803991 <__flp>
    5a9e:	f0 91 92 39 	lds	r31, 0x3992	; 0x803992 <__flp+0x1>
    5aa2:	20 e0       	ldi	r18, 0x00	; 0
    5aa4:	30 e0       	ldi	r19, 0x00	; 0
    5aa6:	a0 e0       	ldi	r26, 0x00	; 0
    5aa8:	b0 e0       	ldi	r27, 0x00	; 0
    5aaa:	30 97       	sbiw	r30, 0x00	; 0
    5aac:	19 f1       	breq	.+70     	; 0x5af4 <malloc+0x6c>
    5aae:	40 81       	ld	r20, Z
    5ab0:	51 81       	ldd	r21, Z+1	; 0x01
    5ab2:	02 81       	ldd	r16, Z+2	; 0x02
    5ab4:	13 81       	ldd	r17, Z+3	; 0x03
    5ab6:	48 17       	cp	r20, r24
    5ab8:	59 07       	cpc	r21, r25
    5aba:	c8 f0       	brcs	.+50     	; 0x5aee <malloc+0x66>
    5abc:	84 17       	cp	r24, r20
    5abe:	95 07       	cpc	r25, r21
    5ac0:	69 f4       	brne	.+26     	; 0x5adc <malloc+0x54>
    5ac2:	10 97       	sbiw	r26, 0x00	; 0
    5ac4:	31 f0       	breq	.+12     	; 0x5ad2 <malloc+0x4a>
    5ac6:	12 96       	adiw	r26, 0x02	; 2
    5ac8:	0c 93       	st	X, r16
    5aca:	12 97       	sbiw	r26, 0x02	; 2
    5acc:	13 96       	adiw	r26, 0x03	; 3
    5ace:	1c 93       	st	X, r17
    5ad0:	27 c0       	rjmp	.+78     	; 0x5b20 <malloc+0x98>
    5ad2:	00 93 91 39 	sts	0x3991, r16	; 0x803991 <__flp>
    5ad6:	10 93 92 39 	sts	0x3992, r17	; 0x803992 <__flp+0x1>
    5ada:	22 c0       	rjmp	.+68     	; 0x5b20 <malloc+0x98>
    5adc:	21 15       	cp	r18, r1
    5ade:	31 05       	cpc	r19, r1
    5ae0:	19 f0       	breq	.+6      	; 0x5ae8 <malloc+0x60>
    5ae2:	42 17       	cp	r20, r18
    5ae4:	53 07       	cpc	r21, r19
    5ae6:	18 f4       	brcc	.+6      	; 0x5aee <malloc+0x66>
    5ae8:	9a 01       	movw	r18, r20
    5aea:	bd 01       	movw	r22, r26
    5aec:	ef 01       	movw	r28, r30
    5aee:	df 01       	movw	r26, r30
    5af0:	f8 01       	movw	r30, r16
    5af2:	db cf       	rjmp	.-74     	; 0x5aaa <malloc+0x22>
    5af4:	21 15       	cp	r18, r1
    5af6:	31 05       	cpc	r19, r1
    5af8:	f9 f0       	breq	.+62     	; 0x5b38 <malloc+0xb0>
    5afa:	28 1b       	sub	r18, r24
    5afc:	39 0b       	sbc	r19, r25
    5afe:	24 30       	cpi	r18, 0x04	; 4
    5b00:	31 05       	cpc	r19, r1
    5b02:	80 f4       	brcc	.+32     	; 0x5b24 <malloc+0x9c>
    5b04:	8a 81       	ldd	r24, Y+2	; 0x02
    5b06:	9b 81       	ldd	r25, Y+3	; 0x03
    5b08:	61 15       	cp	r22, r1
    5b0a:	71 05       	cpc	r23, r1
    5b0c:	21 f0       	breq	.+8      	; 0x5b16 <malloc+0x8e>
    5b0e:	fb 01       	movw	r30, r22
    5b10:	82 83       	std	Z+2, r24	; 0x02
    5b12:	93 83       	std	Z+3, r25	; 0x03
    5b14:	04 c0       	rjmp	.+8      	; 0x5b1e <malloc+0x96>
    5b16:	80 93 91 39 	sts	0x3991, r24	; 0x803991 <__flp>
    5b1a:	90 93 92 39 	sts	0x3992, r25	; 0x803992 <__flp+0x1>
    5b1e:	fe 01       	movw	r30, r28
    5b20:	32 96       	adiw	r30, 0x02	; 2
    5b22:	44 c0       	rjmp	.+136    	; 0x5bac <malloc+0x124>
    5b24:	fe 01       	movw	r30, r28
    5b26:	e2 0f       	add	r30, r18
    5b28:	f3 1f       	adc	r31, r19
    5b2a:	81 93       	st	Z+, r24
    5b2c:	91 93       	st	Z+, r25
    5b2e:	22 50       	subi	r18, 0x02	; 2
    5b30:	31 09       	sbc	r19, r1
    5b32:	28 83       	st	Y, r18
    5b34:	39 83       	std	Y+1, r19	; 0x01
    5b36:	3a c0       	rjmp	.+116    	; 0x5bac <malloc+0x124>
    5b38:	20 91 8f 39 	lds	r18, 0x398F	; 0x80398f <__brkval>
    5b3c:	30 91 90 39 	lds	r19, 0x3990	; 0x803990 <__brkval+0x1>
    5b40:	23 2b       	or	r18, r19
    5b42:	41 f4       	brne	.+16     	; 0x5b54 <malloc+0xcc>
    5b44:	20 91 02 28 	lds	r18, 0x2802	; 0x802802 <__malloc_heap_start>
    5b48:	30 91 03 28 	lds	r19, 0x2803	; 0x802803 <__malloc_heap_start+0x1>
    5b4c:	20 93 8f 39 	sts	0x398F, r18	; 0x80398f <__brkval>
    5b50:	30 93 90 39 	sts	0x3990, r19	; 0x803990 <__brkval+0x1>
    5b54:	20 91 00 28 	lds	r18, 0x2800	; 0x802800 <__data_start>
    5b58:	30 91 01 28 	lds	r19, 0x2801	; 0x802801 <__data_start+0x1>
    5b5c:	21 15       	cp	r18, r1
    5b5e:	31 05       	cpc	r19, r1
    5b60:	41 f4       	brne	.+16     	; 0x5b72 <malloc+0xea>
    5b62:	2d b7       	in	r18, 0x3d	; 61
    5b64:	3e b7       	in	r19, 0x3e	; 62
    5b66:	40 91 04 28 	lds	r20, 0x2804	; 0x802804 <__malloc_margin>
    5b6a:	50 91 05 28 	lds	r21, 0x2805	; 0x802805 <__malloc_margin+0x1>
    5b6e:	24 1b       	sub	r18, r20
    5b70:	35 0b       	sbc	r19, r21
    5b72:	e0 91 8f 39 	lds	r30, 0x398F	; 0x80398f <__brkval>
    5b76:	f0 91 90 39 	lds	r31, 0x3990	; 0x803990 <__brkval+0x1>
    5b7a:	e2 17       	cp	r30, r18
    5b7c:	f3 07       	cpc	r31, r19
    5b7e:	a0 f4       	brcc	.+40     	; 0x5ba8 <malloc+0x120>
    5b80:	2e 1b       	sub	r18, r30
    5b82:	3f 0b       	sbc	r19, r31
    5b84:	28 17       	cp	r18, r24
    5b86:	39 07       	cpc	r19, r25
    5b88:	78 f0       	brcs	.+30     	; 0x5ba8 <malloc+0x120>
    5b8a:	ac 01       	movw	r20, r24
    5b8c:	4e 5f       	subi	r20, 0xFE	; 254
    5b8e:	5f 4f       	sbci	r21, 0xFF	; 255
    5b90:	24 17       	cp	r18, r20
    5b92:	35 07       	cpc	r19, r21
    5b94:	48 f0       	brcs	.+18     	; 0x5ba8 <malloc+0x120>
    5b96:	4e 0f       	add	r20, r30
    5b98:	5f 1f       	adc	r21, r31
    5b9a:	40 93 8f 39 	sts	0x398F, r20	; 0x80398f <__brkval>
    5b9e:	50 93 90 39 	sts	0x3990, r21	; 0x803990 <__brkval+0x1>
    5ba2:	81 93       	st	Z+, r24
    5ba4:	91 93       	st	Z+, r25
    5ba6:	02 c0       	rjmp	.+4      	; 0x5bac <malloc+0x124>
    5ba8:	e0 e0       	ldi	r30, 0x00	; 0
    5baa:	f0 e0       	ldi	r31, 0x00	; 0
    5bac:	cf 01       	movw	r24, r30
    5bae:	df 91       	pop	r29
    5bb0:	cf 91       	pop	r28
    5bb2:	1f 91       	pop	r17
    5bb4:	0f 91       	pop	r16
    5bb6:	08 95       	ret

00005bb8 <free>:
    5bb8:	cf 93       	push	r28
    5bba:	df 93       	push	r29
    5bbc:	00 97       	sbiw	r24, 0x00	; 0
    5bbe:	09 f4       	brne	.+2      	; 0x5bc2 <free+0xa>
    5bc0:	81 c0       	rjmp	.+258    	; 0x5cc4 <free+0x10c>
    5bc2:	fc 01       	movw	r30, r24
    5bc4:	32 97       	sbiw	r30, 0x02	; 2
    5bc6:	12 82       	std	Z+2, r1	; 0x02
    5bc8:	13 82       	std	Z+3, r1	; 0x03
    5bca:	a0 91 91 39 	lds	r26, 0x3991	; 0x803991 <__flp>
    5bce:	b0 91 92 39 	lds	r27, 0x3992	; 0x803992 <__flp+0x1>
    5bd2:	10 97       	sbiw	r26, 0x00	; 0
    5bd4:	81 f4       	brne	.+32     	; 0x5bf6 <free+0x3e>
    5bd6:	20 81       	ld	r18, Z
    5bd8:	31 81       	ldd	r19, Z+1	; 0x01
    5bda:	82 0f       	add	r24, r18
    5bdc:	93 1f       	adc	r25, r19
    5bde:	20 91 8f 39 	lds	r18, 0x398F	; 0x80398f <__brkval>
    5be2:	30 91 90 39 	lds	r19, 0x3990	; 0x803990 <__brkval+0x1>
    5be6:	28 17       	cp	r18, r24
    5be8:	39 07       	cpc	r19, r25
    5bea:	51 f5       	brne	.+84     	; 0x5c40 <free+0x88>
    5bec:	e0 93 8f 39 	sts	0x398F, r30	; 0x80398f <__brkval>
    5bf0:	f0 93 90 39 	sts	0x3990, r31	; 0x803990 <__brkval+0x1>
    5bf4:	67 c0       	rjmp	.+206    	; 0x5cc4 <free+0x10c>
    5bf6:	ed 01       	movw	r28, r26
    5bf8:	20 e0       	ldi	r18, 0x00	; 0
    5bfa:	30 e0       	ldi	r19, 0x00	; 0
    5bfc:	ce 17       	cp	r28, r30
    5bfe:	df 07       	cpc	r29, r31
    5c00:	40 f4       	brcc	.+16     	; 0x5c12 <free+0x5a>
    5c02:	4a 81       	ldd	r20, Y+2	; 0x02
    5c04:	5b 81       	ldd	r21, Y+3	; 0x03
    5c06:	9e 01       	movw	r18, r28
    5c08:	41 15       	cp	r20, r1
    5c0a:	51 05       	cpc	r21, r1
    5c0c:	f1 f0       	breq	.+60     	; 0x5c4a <free+0x92>
    5c0e:	ea 01       	movw	r28, r20
    5c10:	f5 cf       	rjmp	.-22     	; 0x5bfc <free+0x44>
    5c12:	c2 83       	std	Z+2, r28	; 0x02
    5c14:	d3 83       	std	Z+3, r29	; 0x03
    5c16:	40 81       	ld	r20, Z
    5c18:	51 81       	ldd	r21, Z+1	; 0x01
    5c1a:	84 0f       	add	r24, r20
    5c1c:	95 1f       	adc	r25, r21
    5c1e:	c8 17       	cp	r28, r24
    5c20:	d9 07       	cpc	r29, r25
    5c22:	59 f4       	brne	.+22     	; 0x5c3a <free+0x82>
    5c24:	88 81       	ld	r24, Y
    5c26:	99 81       	ldd	r25, Y+1	; 0x01
    5c28:	84 0f       	add	r24, r20
    5c2a:	95 1f       	adc	r25, r21
    5c2c:	02 96       	adiw	r24, 0x02	; 2
    5c2e:	80 83       	st	Z, r24
    5c30:	91 83       	std	Z+1, r25	; 0x01
    5c32:	8a 81       	ldd	r24, Y+2	; 0x02
    5c34:	9b 81       	ldd	r25, Y+3	; 0x03
    5c36:	82 83       	std	Z+2, r24	; 0x02
    5c38:	93 83       	std	Z+3, r25	; 0x03
    5c3a:	21 15       	cp	r18, r1
    5c3c:	31 05       	cpc	r19, r1
    5c3e:	29 f4       	brne	.+10     	; 0x5c4a <free+0x92>
    5c40:	e0 93 91 39 	sts	0x3991, r30	; 0x803991 <__flp>
    5c44:	f0 93 92 39 	sts	0x3992, r31	; 0x803992 <__flp+0x1>
    5c48:	3d c0       	rjmp	.+122    	; 0x5cc4 <free+0x10c>
    5c4a:	e9 01       	movw	r28, r18
    5c4c:	ea 83       	std	Y+2, r30	; 0x02
    5c4e:	fb 83       	std	Y+3, r31	; 0x03
    5c50:	49 91       	ld	r20, Y+
    5c52:	59 91       	ld	r21, Y+
    5c54:	c4 0f       	add	r28, r20
    5c56:	d5 1f       	adc	r29, r21
    5c58:	ec 17       	cp	r30, r28
    5c5a:	fd 07       	cpc	r31, r29
    5c5c:	61 f4       	brne	.+24     	; 0x5c76 <free+0xbe>
    5c5e:	80 81       	ld	r24, Z
    5c60:	91 81       	ldd	r25, Z+1	; 0x01
    5c62:	84 0f       	add	r24, r20
    5c64:	95 1f       	adc	r25, r21
    5c66:	02 96       	adiw	r24, 0x02	; 2
    5c68:	e9 01       	movw	r28, r18
    5c6a:	88 83       	st	Y, r24
    5c6c:	99 83       	std	Y+1, r25	; 0x01
    5c6e:	82 81       	ldd	r24, Z+2	; 0x02
    5c70:	93 81       	ldd	r25, Z+3	; 0x03
    5c72:	8a 83       	std	Y+2, r24	; 0x02
    5c74:	9b 83       	std	Y+3, r25	; 0x03
    5c76:	e0 e0       	ldi	r30, 0x00	; 0
    5c78:	f0 e0       	ldi	r31, 0x00	; 0
    5c7a:	12 96       	adiw	r26, 0x02	; 2
    5c7c:	8d 91       	ld	r24, X+
    5c7e:	9c 91       	ld	r25, X
    5c80:	13 97       	sbiw	r26, 0x03	; 3
    5c82:	00 97       	sbiw	r24, 0x00	; 0
    5c84:	19 f0       	breq	.+6      	; 0x5c8c <free+0xd4>
    5c86:	fd 01       	movw	r30, r26
    5c88:	dc 01       	movw	r26, r24
    5c8a:	f7 cf       	rjmp	.-18     	; 0x5c7a <free+0xc2>
    5c8c:	8d 91       	ld	r24, X+
    5c8e:	9c 91       	ld	r25, X
    5c90:	11 97       	sbiw	r26, 0x01	; 1
    5c92:	9d 01       	movw	r18, r26
    5c94:	2e 5f       	subi	r18, 0xFE	; 254
    5c96:	3f 4f       	sbci	r19, 0xFF	; 255
    5c98:	82 0f       	add	r24, r18
    5c9a:	93 1f       	adc	r25, r19
    5c9c:	20 91 8f 39 	lds	r18, 0x398F	; 0x80398f <__brkval>
    5ca0:	30 91 90 39 	lds	r19, 0x3990	; 0x803990 <__brkval+0x1>
    5ca4:	28 17       	cp	r18, r24
    5ca6:	39 07       	cpc	r19, r25
    5ca8:	69 f4       	brne	.+26     	; 0x5cc4 <free+0x10c>
    5caa:	30 97       	sbiw	r30, 0x00	; 0
    5cac:	29 f4       	brne	.+10     	; 0x5cb8 <free+0x100>
    5cae:	10 92 91 39 	sts	0x3991, r1	; 0x803991 <__flp>
    5cb2:	10 92 92 39 	sts	0x3992, r1	; 0x803992 <__flp+0x1>
    5cb6:	02 c0       	rjmp	.+4      	; 0x5cbc <free+0x104>
    5cb8:	12 82       	std	Z+2, r1	; 0x02
    5cba:	13 82       	std	Z+3, r1	; 0x03
    5cbc:	a0 93 8f 39 	sts	0x398F, r26	; 0x80398f <__brkval>
    5cc0:	b0 93 90 39 	sts	0x3990, r27	; 0x803990 <__brkval+0x1>
    5cc4:	df 91       	pop	r29
    5cc6:	cf 91       	pop	r28
    5cc8:	08 95       	ret

00005cca <memcmp>:
    5cca:	fb 01       	movw	r30, r22
    5ccc:	dc 01       	movw	r26, r24
    5cce:	04 c0       	rjmp	.+8      	; 0x5cd8 <memcmp+0xe>
    5cd0:	8d 91       	ld	r24, X+
    5cd2:	01 90       	ld	r0, Z+
    5cd4:	80 19       	sub	r24, r0
    5cd6:	21 f4       	brne	.+8      	; 0x5ce0 <memcmp+0x16>
    5cd8:	41 50       	subi	r20, 0x01	; 1
    5cda:	50 40       	sbci	r21, 0x00	; 0
    5cdc:	c8 f7       	brcc	.-14     	; 0x5cd0 <memcmp+0x6>
    5cde:	88 1b       	sub	r24, r24
    5ce0:	99 0b       	sbc	r25, r25
    5ce2:	08 95       	ret

00005ce4 <memcpy>:
    5ce4:	fb 01       	movw	r30, r22
    5ce6:	dc 01       	movw	r26, r24
    5ce8:	02 c0       	rjmp	.+4      	; 0x5cee <memcpy+0xa>
    5cea:	01 90       	ld	r0, Z+
    5cec:	0d 92       	st	X+, r0
    5cee:	41 50       	subi	r20, 0x01	; 1
    5cf0:	50 40       	sbci	r21, 0x00	; 0
    5cf2:	d8 f7       	brcc	.-10     	; 0x5cea <memcpy+0x6>
    5cf4:	08 95       	ret

00005cf6 <memmove>:
    5cf6:	68 17       	cp	r22, r24
    5cf8:	79 07       	cpc	r23, r25
    5cfa:	68 f4       	brcc	.+26     	; 0x5d16 <memmove+0x20>
    5cfc:	fb 01       	movw	r30, r22
    5cfe:	dc 01       	movw	r26, r24
    5d00:	e4 0f       	add	r30, r20
    5d02:	f5 1f       	adc	r31, r21
    5d04:	a4 0f       	add	r26, r20
    5d06:	b5 1f       	adc	r27, r21
    5d08:	02 c0       	rjmp	.+4      	; 0x5d0e <memmove+0x18>
    5d0a:	02 90       	ld	r0, -Z
    5d0c:	0e 92       	st	-X, r0
    5d0e:	41 50       	subi	r20, 0x01	; 1
    5d10:	50 40       	sbci	r21, 0x00	; 0
    5d12:	d8 f7       	brcc	.-10     	; 0x5d0a <memmove+0x14>
    5d14:	08 95       	ret
    5d16:	0c 94 72 2e 	jmp	0x5ce4	; 0x5ce4 <memcpy>

00005d1a <memset>:
    5d1a:	dc 01       	movw	r26, r24
    5d1c:	01 c0       	rjmp	.+2      	; 0x5d20 <memset+0x6>
    5d1e:	6d 93       	st	X+, r22
    5d20:	41 50       	subi	r20, 0x01	; 1
    5d22:	50 40       	sbci	r21, 0x00	; 0
    5d24:	e0 f7       	brcc	.-8      	; 0x5d1e <memset+0x4>
    5d26:	08 95       	ret

00005d28 <strcat>:
    5d28:	fb 01       	movw	r30, r22
    5d2a:	dc 01       	movw	r26, r24
    5d2c:	0d 90       	ld	r0, X+
    5d2e:	00 20       	and	r0, r0
    5d30:	e9 f7       	brne	.-6      	; 0x5d2c <strcat+0x4>
    5d32:	11 97       	sbiw	r26, 0x01	; 1
    5d34:	01 90       	ld	r0, Z+
    5d36:	0d 92       	st	X+, r0
    5d38:	00 20       	and	r0, r0
    5d3a:	e1 f7       	brne	.-8      	; 0x5d34 <strcat+0xc>
    5d3c:	08 95       	ret

00005d3e <strchr>:
    5d3e:	fc 01       	movw	r30, r24
    5d40:	81 91       	ld	r24, Z+
    5d42:	86 17       	cp	r24, r22
    5d44:	21 f0       	breq	.+8      	; 0x5d4e <strchr+0x10>
    5d46:	88 23       	and	r24, r24
    5d48:	d9 f7       	brne	.-10     	; 0x5d40 <strchr+0x2>
    5d4a:	99 27       	eor	r25, r25
    5d4c:	08 95       	ret
    5d4e:	31 97       	sbiw	r30, 0x01	; 1
    5d50:	cf 01       	movw	r24, r30
    5d52:	08 95       	ret

00005d54 <strcmp>:
    5d54:	fb 01       	movw	r30, r22
    5d56:	dc 01       	movw	r26, r24
    5d58:	8d 91       	ld	r24, X+
    5d5a:	01 90       	ld	r0, Z+
    5d5c:	80 19       	sub	r24, r0
    5d5e:	01 10       	cpse	r0, r1
    5d60:	d9 f3       	breq	.-10     	; 0x5d58 <strcmp+0x4>
    5d62:	99 0b       	sbc	r25, r25
    5d64:	08 95       	ret

00005d66 <strcpy>:
    5d66:	fb 01       	movw	r30, r22
    5d68:	dc 01       	movw	r26, r24
    5d6a:	01 90       	ld	r0, Z+
    5d6c:	0d 92       	st	X+, r0
    5d6e:	00 20       	and	r0, r0
    5d70:	e1 f7       	brne	.-8      	; 0x5d6a <strcpy+0x4>
    5d72:	08 95       	ret

00005d74 <strncpy>:
    5d74:	fb 01       	movw	r30, r22
    5d76:	dc 01       	movw	r26, r24
    5d78:	41 50       	subi	r20, 0x01	; 1
    5d7a:	50 40       	sbci	r21, 0x00	; 0
    5d7c:	48 f0       	brcs	.+18     	; 0x5d90 <strncpy+0x1c>
    5d7e:	01 90       	ld	r0, Z+
    5d80:	0d 92       	st	X+, r0
    5d82:	00 20       	and	r0, r0
    5d84:	c9 f7       	brne	.-14     	; 0x5d78 <strncpy+0x4>
    5d86:	01 c0       	rjmp	.+2      	; 0x5d8a <strncpy+0x16>
    5d88:	1d 92       	st	X+, r1
    5d8a:	41 50       	subi	r20, 0x01	; 1
    5d8c:	50 40       	sbci	r21, 0x00	; 0
    5d8e:	e0 f7       	brcc	.-8      	; 0x5d88 <strncpy+0x14>
    5d90:	08 95       	ret

00005d92 <sprintf>:
    5d92:	ae e0       	ldi	r26, 0x0E	; 14
    5d94:	b0 e0       	ldi	r27, 0x00	; 0
    5d96:	ef ec       	ldi	r30, 0xCF	; 207
    5d98:	fe e2       	ldi	r31, 0x2E	; 46
    5d9a:	0c 94 8a 31 	jmp	0x6314	; 0x6314 <__prologue_saves__+0x1c>
    5d9e:	0d 89       	ldd	r16, Y+21	; 0x15
    5da0:	1e 89       	ldd	r17, Y+22	; 0x16
    5da2:	86 e0       	ldi	r24, 0x06	; 6
    5da4:	8c 83       	std	Y+4, r24	; 0x04
    5da6:	09 83       	std	Y+1, r16	; 0x01
    5da8:	1a 83       	std	Y+2, r17	; 0x02
    5daa:	8f ef       	ldi	r24, 0xFF	; 255
    5dac:	9f e7       	ldi	r25, 0x7F	; 127
    5dae:	8d 83       	std	Y+5, r24	; 0x05
    5db0:	9e 83       	std	Y+6, r25	; 0x06
    5db2:	ae 01       	movw	r20, r28
    5db4:	47 5e       	subi	r20, 0xE7	; 231
    5db6:	5f 4f       	sbci	r21, 0xFF	; 255
    5db8:	6f 89       	ldd	r22, Y+23	; 0x17
    5dba:	78 8d       	ldd	r23, Y+24	; 0x18
    5dbc:	ce 01       	movw	r24, r28
    5dbe:	01 96       	adiw	r24, 0x01	; 1
    5dc0:	0e 94 eb 2e 	call	0x5dd6	; 0x5dd6 <vfprintf>
    5dc4:	ef 81       	ldd	r30, Y+7	; 0x07
    5dc6:	f8 85       	ldd	r31, Y+8	; 0x08
    5dc8:	e0 0f       	add	r30, r16
    5dca:	f1 1f       	adc	r31, r17
    5dcc:	10 82       	st	Z, r1
    5dce:	2e 96       	adiw	r28, 0x0e	; 14
    5dd0:	e4 e0       	ldi	r30, 0x04	; 4
    5dd2:	0c 94 a3 31 	jmp	0x6346	; 0x6346 <__epilogue_restores__+0x1c>

00005dd6 <vfprintf>:
    5dd6:	ab e0       	ldi	r26, 0x0B	; 11
    5dd8:	b0 e0       	ldi	r27, 0x00	; 0
    5dda:	e1 ef       	ldi	r30, 0xF1	; 241
    5ddc:	fe e2       	ldi	r31, 0x2E	; 46
    5dde:	0c 94 7c 31 	jmp	0x62f8	; 0x62f8 <__prologue_saves__>
    5de2:	6c 01       	movw	r12, r24
    5de4:	7b 01       	movw	r14, r22
    5de6:	8a 01       	movw	r16, r20
    5de8:	fc 01       	movw	r30, r24
    5dea:	16 82       	std	Z+6, r1	; 0x06
    5dec:	17 82       	std	Z+7, r1	; 0x07
    5dee:	83 81       	ldd	r24, Z+3	; 0x03
    5df0:	81 ff       	sbrs	r24, 1
    5df2:	cc c1       	rjmp	.+920    	; 0x618c <vfprintf+0x3b6>
    5df4:	ce 01       	movw	r24, r28
    5df6:	01 96       	adiw	r24, 0x01	; 1
    5df8:	3c 01       	movw	r6, r24
    5dfa:	f6 01       	movw	r30, r12
    5dfc:	93 81       	ldd	r25, Z+3	; 0x03
    5dfe:	f7 01       	movw	r30, r14
    5e00:	93 fd       	sbrc	r25, 3
    5e02:	85 91       	lpm	r24, Z+
    5e04:	93 ff       	sbrs	r25, 3
    5e06:	81 91       	ld	r24, Z+
    5e08:	7f 01       	movw	r14, r30
    5e0a:	88 23       	and	r24, r24
    5e0c:	09 f4       	brne	.+2      	; 0x5e10 <vfprintf+0x3a>
    5e0e:	ba c1       	rjmp	.+884    	; 0x6184 <vfprintf+0x3ae>
    5e10:	85 32       	cpi	r24, 0x25	; 37
    5e12:	39 f4       	brne	.+14     	; 0x5e22 <vfprintf+0x4c>
    5e14:	93 fd       	sbrc	r25, 3
    5e16:	85 91       	lpm	r24, Z+
    5e18:	93 ff       	sbrs	r25, 3
    5e1a:	81 91       	ld	r24, Z+
    5e1c:	7f 01       	movw	r14, r30
    5e1e:	85 32       	cpi	r24, 0x25	; 37
    5e20:	29 f4       	brne	.+10     	; 0x5e2c <vfprintf+0x56>
    5e22:	b6 01       	movw	r22, r12
    5e24:	90 e0       	ldi	r25, 0x00	; 0
    5e26:	0e 94 e2 30 	call	0x61c4	; 0x61c4 <fputc>
    5e2a:	e7 cf       	rjmp	.-50     	; 0x5dfa <vfprintf+0x24>
    5e2c:	91 2c       	mov	r9, r1
    5e2e:	21 2c       	mov	r2, r1
    5e30:	31 2c       	mov	r3, r1
    5e32:	ff e1       	ldi	r31, 0x1F	; 31
    5e34:	f3 15       	cp	r31, r3
    5e36:	d8 f0       	brcs	.+54     	; 0x5e6e <vfprintf+0x98>
    5e38:	8b 32       	cpi	r24, 0x2B	; 43
    5e3a:	79 f0       	breq	.+30     	; 0x5e5a <vfprintf+0x84>
    5e3c:	38 f4       	brcc	.+14     	; 0x5e4c <vfprintf+0x76>
    5e3e:	80 32       	cpi	r24, 0x20	; 32
    5e40:	79 f0       	breq	.+30     	; 0x5e60 <vfprintf+0x8a>
    5e42:	83 32       	cpi	r24, 0x23	; 35
    5e44:	a1 f4       	brne	.+40     	; 0x5e6e <vfprintf+0x98>
    5e46:	23 2d       	mov	r18, r3
    5e48:	20 61       	ori	r18, 0x10	; 16
    5e4a:	1d c0       	rjmp	.+58     	; 0x5e86 <vfprintf+0xb0>
    5e4c:	8d 32       	cpi	r24, 0x2D	; 45
    5e4e:	61 f0       	breq	.+24     	; 0x5e68 <vfprintf+0x92>
    5e50:	80 33       	cpi	r24, 0x30	; 48
    5e52:	69 f4       	brne	.+26     	; 0x5e6e <vfprintf+0x98>
    5e54:	23 2d       	mov	r18, r3
    5e56:	21 60       	ori	r18, 0x01	; 1
    5e58:	16 c0       	rjmp	.+44     	; 0x5e86 <vfprintf+0xb0>
    5e5a:	83 2d       	mov	r24, r3
    5e5c:	82 60       	ori	r24, 0x02	; 2
    5e5e:	38 2e       	mov	r3, r24
    5e60:	e3 2d       	mov	r30, r3
    5e62:	e4 60       	ori	r30, 0x04	; 4
    5e64:	3e 2e       	mov	r3, r30
    5e66:	2a c0       	rjmp	.+84     	; 0x5ebc <vfprintf+0xe6>
    5e68:	f3 2d       	mov	r31, r3
    5e6a:	f8 60       	ori	r31, 0x08	; 8
    5e6c:	1d c0       	rjmp	.+58     	; 0x5ea8 <vfprintf+0xd2>
    5e6e:	37 fc       	sbrc	r3, 7
    5e70:	2d c0       	rjmp	.+90     	; 0x5ecc <vfprintf+0xf6>
    5e72:	20 ed       	ldi	r18, 0xD0	; 208
    5e74:	28 0f       	add	r18, r24
    5e76:	2a 30       	cpi	r18, 0x0A	; 10
    5e78:	40 f0       	brcs	.+16     	; 0x5e8a <vfprintf+0xb4>
    5e7a:	8e 32       	cpi	r24, 0x2E	; 46
    5e7c:	b9 f4       	brne	.+46     	; 0x5eac <vfprintf+0xd6>
    5e7e:	36 fc       	sbrc	r3, 6
    5e80:	81 c1       	rjmp	.+770    	; 0x6184 <vfprintf+0x3ae>
    5e82:	23 2d       	mov	r18, r3
    5e84:	20 64       	ori	r18, 0x40	; 64
    5e86:	32 2e       	mov	r3, r18
    5e88:	19 c0       	rjmp	.+50     	; 0x5ebc <vfprintf+0xe6>
    5e8a:	36 fe       	sbrs	r3, 6
    5e8c:	06 c0       	rjmp	.+12     	; 0x5e9a <vfprintf+0xc4>
    5e8e:	8a e0       	ldi	r24, 0x0A	; 10
    5e90:	98 9e       	mul	r9, r24
    5e92:	20 0d       	add	r18, r0
    5e94:	11 24       	eor	r1, r1
    5e96:	92 2e       	mov	r9, r18
    5e98:	11 c0       	rjmp	.+34     	; 0x5ebc <vfprintf+0xe6>
    5e9a:	ea e0       	ldi	r30, 0x0A	; 10
    5e9c:	2e 9e       	mul	r2, r30
    5e9e:	20 0d       	add	r18, r0
    5ea0:	11 24       	eor	r1, r1
    5ea2:	22 2e       	mov	r2, r18
    5ea4:	f3 2d       	mov	r31, r3
    5ea6:	f0 62       	ori	r31, 0x20	; 32
    5ea8:	3f 2e       	mov	r3, r31
    5eaa:	08 c0       	rjmp	.+16     	; 0x5ebc <vfprintf+0xe6>
    5eac:	8c 36       	cpi	r24, 0x6C	; 108
    5eae:	21 f4       	brne	.+8      	; 0x5eb8 <vfprintf+0xe2>
    5eb0:	83 2d       	mov	r24, r3
    5eb2:	80 68       	ori	r24, 0x80	; 128
    5eb4:	38 2e       	mov	r3, r24
    5eb6:	02 c0       	rjmp	.+4      	; 0x5ebc <vfprintf+0xe6>
    5eb8:	88 36       	cpi	r24, 0x68	; 104
    5eba:	41 f4       	brne	.+16     	; 0x5ecc <vfprintf+0xf6>
    5ebc:	f7 01       	movw	r30, r14
    5ebe:	93 fd       	sbrc	r25, 3
    5ec0:	85 91       	lpm	r24, Z+
    5ec2:	93 ff       	sbrs	r25, 3
    5ec4:	81 91       	ld	r24, Z+
    5ec6:	7f 01       	movw	r14, r30
    5ec8:	81 11       	cpse	r24, r1
    5eca:	b3 cf       	rjmp	.-154    	; 0x5e32 <vfprintf+0x5c>
    5ecc:	98 2f       	mov	r25, r24
    5ece:	9f 7d       	andi	r25, 0xDF	; 223
    5ed0:	95 54       	subi	r25, 0x45	; 69
    5ed2:	93 30       	cpi	r25, 0x03	; 3
    5ed4:	28 f4       	brcc	.+10     	; 0x5ee0 <vfprintf+0x10a>
    5ed6:	0c 5f       	subi	r16, 0xFC	; 252
    5ed8:	1f 4f       	sbci	r17, 0xFF	; 255
    5eda:	9f e3       	ldi	r25, 0x3F	; 63
    5edc:	99 83       	std	Y+1, r25	; 0x01
    5ede:	0d c0       	rjmp	.+26     	; 0x5efa <vfprintf+0x124>
    5ee0:	83 36       	cpi	r24, 0x63	; 99
    5ee2:	31 f0       	breq	.+12     	; 0x5ef0 <vfprintf+0x11a>
    5ee4:	83 37       	cpi	r24, 0x73	; 115
    5ee6:	71 f0       	breq	.+28     	; 0x5f04 <vfprintf+0x12e>
    5ee8:	83 35       	cpi	r24, 0x53	; 83
    5eea:	09 f0       	breq	.+2      	; 0x5eee <vfprintf+0x118>
    5eec:	59 c0       	rjmp	.+178    	; 0x5fa0 <vfprintf+0x1ca>
    5eee:	21 c0       	rjmp	.+66     	; 0x5f32 <vfprintf+0x15c>
    5ef0:	f8 01       	movw	r30, r16
    5ef2:	80 81       	ld	r24, Z
    5ef4:	89 83       	std	Y+1, r24	; 0x01
    5ef6:	0e 5f       	subi	r16, 0xFE	; 254
    5ef8:	1f 4f       	sbci	r17, 0xFF	; 255
    5efa:	88 24       	eor	r8, r8
    5efc:	83 94       	inc	r8
    5efe:	91 2c       	mov	r9, r1
    5f00:	53 01       	movw	r10, r6
    5f02:	13 c0       	rjmp	.+38     	; 0x5f2a <vfprintf+0x154>
    5f04:	28 01       	movw	r4, r16
    5f06:	f2 e0       	ldi	r31, 0x02	; 2
    5f08:	4f 0e       	add	r4, r31
    5f0a:	51 1c       	adc	r5, r1
    5f0c:	f8 01       	movw	r30, r16
    5f0e:	a0 80       	ld	r10, Z
    5f10:	b1 80       	ldd	r11, Z+1	; 0x01
    5f12:	36 fe       	sbrs	r3, 6
    5f14:	03 c0       	rjmp	.+6      	; 0x5f1c <vfprintf+0x146>
    5f16:	69 2d       	mov	r22, r9
    5f18:	70 e0       	ldi	r23, 0x00	; 0
    5f1a:	02 c0       	rjmp	.+4      	; 0x5f20 <vfprintf+0x14a>
    5f1c:	6f ef       	ldi	r22, 0xFF	; 255
    5f1e:	7f ef       	ldi	r23, 0xFF	; 255
    5f20:	c5 01       	movw	r24, r10
    5f22:	0e 94 d7 30 	call	0x61ae	; 0x61ae <strnlen>
    5f26:	4c 01       	movw	r8, r24
    5f28:	82 01       	movw	r16, r4
    5f2a:	f3 2d       	mov	r31, r3
    5f2c:	ff 77       	andi	r31, 0x7F	; 127
    5f2e:	3f 2e       	mov	r3, r31
    5f30:	16 c0       	rjmp	.+44     	; 0x5f5e <vfprintf+0x188>
    5f32:	28 01       	movw	r4, r16
    5f34:	22 e0       	ldi	r18, 0x02	; 2
    5f36:	42 0e       	add	r4, r18
    5f38:	51 1c       	adc	r5, r1
    5f3a:	f8 01       	movw	r30, r16
    5f3c:	a0 80       	ld	r10, Z
    5f3e:	b1 80       	ldd	r11, Z+1	; 0x01
    5f40:	36 fe       	sbrs	r3, 6
    5f42:	03 c0       	rjmp	.+6      	; 0x5f4a <vfprintf+0x174>
    5f44:	69 2d       	mov	r22, r9
    5f46:	70 e0       	ldi	r23, 0x00	; 0
    5f48:	02 c0       	rjmp	.+4      	; 0x5f4e <vfprintf+0x178>
    5f4a:	6f ef       	ldi	r22, 0xFF	; 255
    5f4c:	7f ef       	ldi	r23, 0xFF	; 255
    5f4e:	c5 01       	movw	r24, r10
    5f50:	0e 94 cc 30 	call	0x6198	; 0x6198 <strnlen_P>
    5f54:	4c 01       	movw	r8, r24
    5f56:	f3 2d       	mov	r31, r3
    5f58:	f0 68       	ori	r31, 0x80	; 128
    5f5a:	3f 2e       	mov	r3, r31
    5f5c:	82 01       	movw	r16, r4
    5f5e:	33 fc       	sbrc	r3, 3
    5f60:	1b c0       	rjmp	.+54     	; 0x5f98 <vfprintf+0x1c2>
    5f62:	82 2d       	mov	r24, r2
    5f64:	90 e0       	ldi	r25, 0x00	; 0
    5f66:	88 16       	cp	r8, r24
    5f68:	99 06       	cpc	r9, r25
    5f6a:	b0 f4       	brcc	.+44     	; 0x5f98 <vfprintf+0x1c2>
    5f6c:	b6 01       	movw	r22, r12
    5f6e:	80 e2       	ldi	r24, 0x20	; 32
    5f70:	90 e0       	ldi	r25, 0x00	; 0
    5f72:	0e 94 e2 30 	call	0x61c4	; 0x61c4 <fputc>
    5f76:	2a 94       	dec	r2
    5f78:	f4 cf       	rjmp	.-24     	; 0x5f62 <vfprintf+0x18c>
    5f7a:	f5 01       	movw	r30, r10
    5f7c:	37 fc       	sbrc	r3, 7
    5f7e:	85 91       	lpm	r24, Z+
    5f80:	37 fe       	sbrs	r3, 7
    5f82:	81 91       	ld	r24, Z+
    5f84:	5f 01       	movw	r10, r30
    5f86:	b6 01       	movw	r22, r12
    5f88:	90 e0       	ldi	r25, 0x00	; 0
    5f8a:	0e 94 e2 30 	call	0x61c4	; 0x61c4 <fputc>
    5f8e:	21 10       	cpse	r2, r1
    5f90:	2a 94       	dec	r2
    5f92:	21 e0       	ldi	r18, 0x01	; 1
    5f94:	82 1a       	sub	r8, r18
    5f96:	91 08       	sbc	r9, r1
    5f98:	81 14       	cp	r8, r1
    5f9a:	91 04       	cpc	r9, r1
    5f9c:	71 f7       	brne	.-36     	; 0x5f7a <vfprintf+0x1a4>
    5f9e:	e8 c0       	rjmp	.+464    	; 0x6170 <vfprintf+0x39a>
    5fa0:	84 36       	cpi	r24, 0x64	; 100
    5fa2:	11 f0       	breq	.+4      	; 0x5fa8 <vfprintf+0x1d2>
    5fa4:	89 36       	cpi	r24, 0x69	; 105
    5fa6:	41 f5       	brne	.+80     	; 0x5ff8 <vfprintf+0x222>
    5fa8:	f8 01       	movw	r30, r16
    5faa:	37 fe       	sbrs	r3, 7
    5fac:	07 c0       	rjmp	.+14     	; 0x5fbc <vfprintf+0x1e6>
    5fae:	60 81       	ld	r22, Z
    5fb0:	71 81       	ldd	r23, Z+1	; 0x01
    5fb2:	82 81       	ldd	r24, Z+2	; 0x02
    5fb4:	93 81       	ldd	r25, Z+3	; 0x03
    5fb6:	0c 5f       	subi	r16, 0xFC	; 252
    5fb8:	1f 4f       	sbci	r17, 0xFF	; 255
    5fba:	08 c0       	rjmp	.+16     	; 0x5fcc <vfprintf+0x1f6>
    5fbc:	60 81       	ld	r22, Z
    5fbe:	71 81       	ldd	r23, Z+1	; 0x01
    5fc0:	07 2e       	mov	r0, r23
    5fc2:	00 0c       	add	r0, r0
    5fc4:	88 0b       	sbc	r24, r24
    5fc6:	99 0b       	sbc	r25, r25
    5fc8:	0e 5f       	subi	r16, 0xFE	; 254
    5fca:	1f 4f       	sbci	r17, 0xFF	; 255
    5fcc:	f3 2d       	mov	r31, r3
    5fce:	ff 76       	andi	r31, 0x6F	; 111
    5fd0:	3f 2e       	mov	r3, r31
    5fd2:	97 ff       	sbrs	r25, 7
    5fd4:	09 c0       	rjmp	.+18     	; 0x5fe8 <vfprintf+0x212>
    5fd6:	90 95       	com	r25
    5fd8:	80 95       	com	r24
    5fda:	70 95       	com	r23
    5fdc:	61 95       	neg	r22
    5fde:	7f 4f       	sbci	r23, 0xFF	; 255
    5fe0:	8f 4f       	sbci	r24, 0xFF	; 255
    5fe2:	9f 4f       	sbci	r25, 0xFF	; 255
    5fe4:	f0 68       	ori	r31, 0x80	; 128
    5fe6:	3f 2e       	mov	r3, r31
    5fe8:	2a e0       	ldi	r18, 0x0A	; 10
    5fea:	30 e0       	ldi	r19, 0x00	; 0
    5fec:	a3 01       	movw	r20, r6
    5fee:	0e 94 1e 31 	call	0x623c	; 0x623c <__ultoa_invert>
    5ff2:	88 2e       	mov	r8, r24
    5ff4:	86 18       	sub	r8, r6
    5ff6:	45 c0       	rjmp	.+138    	; 0x6082 <vfprintf+0x2ac>
    5ff8:	85 37       	cpi	r24, 0x75	; 117
    5ffa:	31 f4       	brne	.+12     	; 0x6008 <vfprintf+0x232>
    5ffc:	23 2d       	mov	r18, r3
    5ffe:	2f 7e       	andi	r18, 0xEF	; 239
    6000:	b2 2e       	mov	r11, r18
    6002:	2a e0       	ldi	r18, 0x0A	; 10
    6004:	30 e0       	ldi	r19, 0x00	; 0
    6006:	25 c0       	rjmp	.+74     	; 0x6052 <vfprintf+0x27c>
    6008:	93 2d       	mov	r25, r3
    600a:	99 7f       	andi	r25, 0xF9	; 249
    600c:	b9 2e       	mov	r11, r25
    600e:	8f 36       	cpi	r24, 0x6F	; 111
    6010:	c1 f0       	breq	.+48     	; 0x6042 <vfprintf+0x26c>
    6012:	18 f4       	brcc	.+6      	; 0x601a <vfprintf+0x244>
    6014:	88 35       	cpi	r24, 0x58	; 88
    6016:	79 f0       	breq	.+30     	; 0x6036 <vfprintf+0x260>
    6018:	b5 c0       	rjmp	.+362    	; 0x6184 <vfprintf+0x3ae>
    601a:	80 37       	cpi	r24, 0x70	; 112
    601c:	19 f0       	breq	.+6      	; 0x6024 <vfprintf+0x24e>
    601e:	88 37       	cpi	r24, 0x78	; 120
    6020:	21 f0       	breq	.+8      	; 0x602a <vfprintf+0x254>
    6022:	b0 c0       	rjmp	.+352    	; 0x6184 <vfprintf+0x3ae>
    6024:	e9 2f       	mov	r30, r25
    6026:	e0 61       	ori	r30, 0x10	; 16
    6028:	be 2e       	mov	r11, r30
    602a:	b4 fe       	sbrs	r11, 4
    602c:	0d c0       	rjmp	.+26     	; 0x6048 <vfprintf+0x272>
    602e:	fb 2d       	mov	r31, r11
    6030:	f4 60       	ori	r31, 0x04	; 4
    6032:	bf 2e       	mov	r11, r31
    6034:	09 c0       	rjmp	.+18     	; 0x6048 <vfprintf+0x272>
    6036:	34 fe       	sbrs	r3, 4
    6038:	0a c0       	rjmp	.+20     	; 0x604e <vfprintf+0x278>
    603a:	29 2f       	mov	r18, r25
    603c:	26 60       	ori	r18, 0x06	; 6
    603e:	b2 2e       	mov	r11, r18
    6040:	06 c0       	rjmp	.+12     	; 0x604e <vfprintf+0x278>
    6042:	28 e0       	ldi	r18, 0x08	; 8
    6044:	30 e0       	ldi	r19, 0x00	; 0
    6046:	05 c0       	rjmp	.+10     	; 0x6052 <vfprintf+0x27c>
    6048:	20 e1       	ldi	r18, 0x10	; 16
    604a:	30 e0       	ldi	r19, 0x00	; 0
    604c:	02 c0       	rjmp	.+4      	; 0x6052 <vfprintf+0x27c>
    604e:	20 e1       	ldi	r18, 0x10	; 16
    6050:	32 e0       	ldi	r19, 0x02	; 2
    6052:	f8 01       	movw	r30, r16
    6054:	b7 fe       	sbrs	r11, 7
    6056:	07 c0       	rjmp	.+14     	; 0x6066 <vfprintf+0x290>
    6058:	60 81       	ld	r22, Z
    605a:	71 81       	ldd	r23, Z+1	; 0x01
    605c:	82 81       	ldd	r24, Z+2	; 0x02
    605e:	93 81       	ldd	r25, Z+3	; 0x03
    6060:	0c 5f       	subi	r16, 0xFC	; 252
    6062:	1f 4f       	sbci	r17, 0xFF	; 255
    6064:	06 c0       	rjmp	.+12     	; 0x6072 <vfprintf+0x29c>
    6066:	60 81       	ld	r22, Z
    6068:	71 81       	ldd	r23, Z+1	; 0x01
    606a:	80 e0       	ldi	r24, 0x00	; 0
    606c:	90 e0       	ldi	r25, 0x00	; 0
    606e:	0e 5f       	subi	r16, 0xFE	; 254
    6070:	1f 4f       	sbci	r17, 0xFF	; 255
    6072:	a3 01       	movw	r20, r6
    6074:	0e 94 1e 31 	call	0x623c	; 0x623c <__ultoa_invert>
    6078:	88 2e       	mov	r8, r24
    607a:	86 18       	sub	r8, r6
    607c:	fb 2d       	mov	r31, r11
    607e:	ff 77       	andi	r31, 0x7F	; 127
    6080:	3f 2e       	mov	r3, r31
    6082:	36 fe       	sbrs	r3, 6
    6084:	0d c0       	rjmp	.+26     	; 0x60a0 <vfprintf+0x2ca>
    6086:	23 2d       	mov	r18, r3
    6088:	2e 7f       	andi	r18, 0xFE	; 254
    608a:	a2 2e       	mov	r10, r18
    608c:	89 14       	cp	r8, r9
    608e:	58 f4       	brcc	.+22     	; 0x60a6 <vfprintf+0x2d0>
    6090:	34 fe       	sbrs	r3, 4
    6092:	0b c0       	rjmp	.+22     	; 0x60aa <vfprintf+0x2d4>
    6094:	32 fc       	sbrc	r3, 2
    6096:	09 c0       	rjmp	.+18     	; 0x60aa <vfprintf+0x2d4>
    6098:	83 2d       	mov	r24, r3
    609a:	8e 7e       	andi	r24, 0xEE	; 238
    609c:	a8 2e       	mov	r10, r24
    609e:	05 c0       	rjmp	.+10     	; 0x60aa <vfprintf+0x2d4>
    60a0:	b8 2c       	mov	r11, r8
    60a2:	a3 2c       	mov	r10, r3
    60a4:	03 c0       	rjmp	.+6      	; 0x60ac <vfprintf+0x2d6>
    60a6:	b8 2c       	mov	r11, r8
    60a8:	01 c0       	rjmp	.+2      	; 0x60ac <vfprintf+0x2d6>
    60aa:	b9 2c       	mov	r11, r9
    60ac:	a4 fe       	sbrs	r10, 4
    60ae:	0f c0       	rjmp	.+30     	; 0x60ce <vfprintf+0x2f8>
    60b0:	fe 01       	movw	r30, r28
    60b2:	e8 0d       	add	r30, r8
    60b4:	f1 1d       	adc	r31, r1
    60b6:	80 81       	ld	r24, Z
    60b8:	80 33       	cpi	r24, 0x30	; 48
    60ba:	21 f4       	brne	.+8      	; 0x60c4 <vfprintf+0x2ee>
    60bc:	9a 2d       	mov	r25, r10
    60be:	99 7e       	andi	r25, 0xE9	; 233
    60c0:	a9 2e       	mov	r10, r25
    60c2:	09 c0       	rjmp	.+18     	; 0x60d6 <vfprintf+0x300>
    60c4:	a2 fe       	sbrs	r10, 2
    60c6:	06 c0       	rjmp	.+12     	; 0x60d4 <vfprintf+0x2fe>
    60c8:	b3 94       	inc	r11
    60ca:	b3 94       	inc	r11
    60cc:	04 c0       	rjmp	.+8      	; 0x60d6 <vfprintf+0x300>
    60ce:	8a 2d       	mov	r24, r10
    60d0:	86 78       	andi	r24, 0x86	; 134
    60d2:	09 f0       	breq	.+2      	; 0x60d6 <vfprintf+0x300>
    60d4:	b3 94       	inc	r11
    60d6:	a3 fc       	sbrc	r10, 3
    60d8:	11 c0       	rjmp	.+34     	; 0x60fc <vfprintf+0x326>
    60da:	a0 fe       	sbrs	r10, 0
    60dc:	06 c0       	rjmp	.+12     	; 0x60ea <vfprintf+0x314>
    60de:	b2 14       	cp	r11, r2
    60e0:	88 f4       	brcc	.+34     	; 0x6104 <vfprintf+0x32e>
    60e2:	28 0c       	add	r2, r8
    60e4:	92 2c       	mov	r9, r2
    60e6:	9b 18       	sub	r9, r11
    60e8:	0e c0       	rjmp	.+28     	; 0x6106 <vfprintf+0x330>
    60ea:	b2 14       	cp	r11, r2
    60ec:	60 f4       	brcc	.+24     	; 0x6106 <vfprintf+0x330>
    60ee:	b6 01       	movw	r22, r12
    60f0:	80 e2       	ldi	r24, 0x20	; 32
    60f2:	90 e0       	ldi	r25, 0x00	; 0
    60f4:	0e 94 e2 30 	call	0x61c4	; 0x61c4 <fputc>
    60f8:	b3 94       	inc	r11
    60fa:	f7 cf       	rjmp	.-18     	; 0x60ea <vfprintf+0x314>
    60fc:	b2 14       	cp	r11, r2
    60fe:	18 f4       	brcc	.+6      	; 0x6106 <vfprintf+0x330>
    6100:	2b 18       	sub	r2, r11
    6102:	02 c0       	rjmp	.+4      	; 0x6108 <vfprintf+0x332>
    6104:	98 2c       	mov	r9, r8
    6106:	21 2c       	mov	r2, r1
    6108:	a4 fe       	sbrs	r10, 4
    610a:	10 c0       	rjmp	.+32     	; 0x612c <vfprintf+0x356>
    610c:	b6 01       	movw	r22, r12
    610e:	80 e3       	ldi	r24, 0x30	; 48
    6110:	90 e0       	ldi	r25, 0x00	; 0
    6112:	0e 94 e2 30 	call	0x61c4	; 0x61c4 <fputc>
    6116:	a2 fe       	sbrs	r10, 2
    6118:	17 c0       	rjmp	.+46     	; 0x6148 <vfprintf+0x372>
    611a:	a1 fc       	sbrc	r10, 1
    611c:	03 c0       	rjmp	.+6      	; 0x6124 <vfprintf+0x34e>
    611e:	88 e7       	ldi	r24, 0x78	; 120
    6120:	90 e0       	ldi	r25, 0x00	; 0
    6122:	02 c0       	rjmp	.+4      	; 0x6128 <vfprintf+0x352>
    6124:	88 e5       	ldi	r24, 0x58	; 88
    6126:	90 e0       	ldi	r25, 0x00	; 0
    6128:	b6 01       	movw	r22, r12
    612a:	0c c0       	rjmp	.+24     	; 0x6144 <vfprintf+0x36e>
    612c:	8a 2d       	mov	r24, r10
    612e:	86 78       	andi	r24, 0x86	; 134
    6130:	59 f0       	breq	.+22     	; 0x6148 <vfprintf+0x372>
    6132:	a1 fe       	sbrs	r10, 1
    6134:	02 c0       	rjmp	.+4      	; 0x613a <vfprintf+0x364>
    6136:	8b e2       	ldi	r24, 0x2B	; 43
    6138:	01 c0       	rjmp	.+2      	; 0x613c <vfprintf+0x366>
    613a:	80 e2       	ldi	r24, 0x20	; 32
    613c:	a7 fc       	sbrc	r10, 7
    613e:	8d e2       	ldi	r24, 0x2D	; 45
    6140:	b6 01       	movw	r22, r12
    6142:	90 e0       	ldi	r25, 0x00	; 0
    6144:	0e 94 e2 30 	call	0x61c4	; 0x61c4 <fputc>
    6148:	89 14       	cp	r8, r9
    614a:	38 f4       	brcc	.+14     	; 0x615a <vfprintf+0x384>
    614c:	b6 01       	movw	r22, r12
    614e:	80 e3       	ldi	r24, 0x30	; 48
    6150:	90 e0       	ldi	r25, 0x00	; 0
    6152:	0e 94 e2 30 	call	0x61c4	; 0x61c4 <fputc>
    6156:	9a 94       	dec	r9
    6158:	f7 cf       	rjmp	.-18     	; 0x6148 <vfprintf+0x372>
    615a:	8a 94       	dec	r8
    615c:	f3 01       	movw	r30, r6
    615e:	e8 0d       	add	r30, r8
    6160:	f1 1d       	adc	r31, r1
    6162:	80 81       	ld	r24, Z
    6164:	b6 01       	movw	r22, r12
    6166:	90 e0       	ldi	r25, 0x00	; 0
    6168:	0e 94 e2 30 	call	0x61c4	; 0x61c4 <fputc>
    616c:	81 10       	cpse	r8, r1
    616e:	f5 cf       	rjmp	.-22     	; 0x615a <vfprintf+0x384>
    6170:	22 20       	and	r2, r2
    6172:	09 f4       	brne	.+2      	; 0x6176 <vfprintf+0x3a0>
    6174:	42 ce       	rjmp	.-892    	; 0x5dfa <vfprintf+0x24>
    6176:	b6 01       	movw	r22, r12
    6178:	80 e2       	ldi	r24, 0x20	; 32
    617a:	90 e0       	ldi	r25, 0x00	; 0
    617c:	0e 94 e2 30 	call	0x61c4	; 0x61c4 <fputc>
    6180:	2a 94       	dec	r2
    6182:	f6 cf       	rjmp	.-20     	; 0x6170 <vfprintf+0x39a>
    6184:	f6 01       	movw	r30, r12
    6186:	86 81       	ldd	r24, Z+6	; 0x06
    6188:	97 81       	ldd	r25, Z+7	; 0x07
    618a:	02 c0       	rjmp	.+4      	; 0x6190 <vfprintf+0x3ba>
    618c:	8f ef       	ldi	r24, 0xFF	; 255
    618e:	9f ef       	ldi	r25, 0xFF	; 255
    6190:	2b 96       	adiw	r28, 0x0b	; 11
    6192:	e2 e1       	ldi	r30, 0x12	; 18
    6194:	0c 94 95 31 	jmp	0x632a	; 0x632a <__epilogue_restores__>

00006198 <strnlen_P>:
    6198:	fc 01       	movw	r30, r24
    619a:	05 90       	lpm	r0, Z+
    619c:	61 50       	subi	r22, 0x01	; 1
    619e:	70 40       	sbci	r23, 0x00	; 0
    61a0:	01 10       	cpse	r0, r1
    61a2:	d8 f7       	brcc	.-10     	; 0x619a <strnlen_P+0x2>
    61a4:	80 95       	com	r24
    61a6:	90 95       	com	r25
    61a8:	8e 0f       	add	r24, r30
    61aa:	9f 1f       	adc	r25, r31
    61ac:	08 95       	ret

000061ae <strnlen>:
    61ae:	fc 01       	movw	r30, r24
    61b0:	61 50       	subi	r22, 0x01	; 1
    61b2:	70 40       	sbci	r23, 0x00	; 0
    61b4:	01 90       	ld	r0, Z+
    61b6:	01 10       	cpse	r0, r1
    61b8:	d8 f7       	brcc	.-10     	; 0x61b0 <strnlen+0x2>
    61ba:	80 95       	com	r24
    61bc:	90 95       	com	r25
    61be:	8e 0f       	add	r24, r30
    61c0:	9f 1f       	adc	r25, r31
    61c2:	08 95       	ret

000061c4 <fputc>:
    61c4:	0f 93       	push	r16
    61c6:	1f 93       	push	r17
    61c8:	cf 93       	push	r28
    61ca:	df 93       	push	r29
    61cc:	fb 01       	movw	r30, r22
    61ce:	23 81       	ldd	r18, Z+3	; 0x03
    61d0:	21 fd       	sbrc	r18, 1
    61d2:	03 c0       	rjmp	.+6      	; 0x61da <fputc+0x16>
    61d4:	8f ef       	ldi	r24, 0xFF	; 255
    61d6:	9f ef       	ldi	r25, 0xFF	; 255
    61d8:	2c c0       	rjmp	.+88     	; 0x6232 <fputc+0x6e>
    61da:	22 ff       	sbrs	r18, 2
    61dc:	16 c0       	rjmp	.+44     	; 0x620a <fputc+0x46>
    61de:	46 81       	ldd	r20, Z+6	; 0x06
    61e0:	57 81       	ldd	r21, Z+7	; 0x07
    61e2:	24 81       	ldd	r18, Z+4	; 0x04
    61e4:	35 81       	ldd	r19, Z+5	; 0x05
    61e6:	42 17       	cp	r20, r18
    61e8:	53 07       	cpc	r21, r19
    61ea:	44 f4       	brge	.+16     	; 0x61fc <fputc+0x38>
    61ec:	a0 81       	ld	r26, Z
    61ee:	b1 81       	ldd	r27, Z+1	; 0x01
    61f0:	9d 01       	movw	r18, r26
    61f2:	2f 5f       	subi	r18, 0xFF	; 255
    61f4:	3f 4f       	sbci	r19, 0xFF	; 255
    61f6:	20 83       	st	Z, r18
    61f8:	31 83       	std	Z+1, r19	; 0x01
    61fa:	8c 93       	st	X, r24
    61fc:	26 81       	ldd	r18, Z+6	; 0x06
    61fe:	37 81       	ldd	r19, Z+7	; 0x07
    6200:	2f 5f       	subi	r18, 0xFF	; 255
    6202:	3f 4f       	sbci	r19, 0xFF	; 255
    6204:	26 83       	std	Z+6, r18	; 0x06
    6206:	37 83       	std	Z+7, r19	; 0x07
    6208:	14 c0       	rjmp	.+40     	; 0x6232 <fputc+0x6e>
    620a:	8b 01       	movw	r16, r22
    620c:	ec 01       	movw	r28, r24
    620e:	fb 01       	movw	r30, r22
    6210:	00 84       	ldd	r0, Z+8	; 0x08
    6212:	f1 85       	ldd	r31, Z+9	; 0x09
    6214:	e0 2d       	mov	r30, r0
    6216:	09 95       	icall
    6218:	89 2b       	or	r24, r25
    621a:	e1 f6       	brne	.-72     	; 0x61d4 <fputc+0x10>
    621c:	d8 01       	movw	r26, r16
    621e:	16 96       	adiw	r26, 0x06	; 6
    6220:	8d 91       	ld	r24, X+
    6222:	9c 91       	ld	r25, X
    6224:	17 97       	sbiw	r26, 0x07	; 7
    6226:	01 96       	adiw	r24, 0x01	; 1
    6228:	16 96       	adiw	r26, 0x06	; 6
    622a:	8d 93       	st	X+, r24
    622c:	9c 93       	st	X, r25
    622e:	17 97       	sbiw	r26, 0x07	; 7
    6230:	ce 01       	movw	r24, r28
    6232:	df 91       	pop	r29
    6234:	cf 91       	pop	r28
    6236:	1f 91       	pop	r17
    6238:	0f 91       	pop	r16
    623a:	08 95       	ret

0000623c <__ultoa_invert>:
    623c:	fa 01       	movw	r30, r20
    623e:	aa 27       	eor	r26, r26
    6240:	28 30       	cpi	r18, 0x08	; 8
    6242:	51 f1       	breq	.+84     	; 0x6298 <__ultoa_invert+0x5c>
    6244:	20 31       	cpi	r18, 0x10	; 16
    6246:	81 f1       	breq	.+96     	; 0x62a8 <__ultoa_invert+0x6c>
    6248:	e8 94       	clt
    624a:	6f 93       	push	r22
    624c:	6e 7f       	andi	r22, 0xFE	; 254
    624e:	6e 5f       	subi	r22, 0xFE	; 254
    6250:	7f 4f       	sbci	r23, 0xFF	; 255
    6252:	8f 4f       	sbci	r24, 0xFF	; 255
    6254:	9f 4f       	sbci	r25, 0xFF	; 255
    6256:	af 4f       	sbci	r26, 0xFF	; 255
    6258:	b1 e0       	ldi	r27, 0x01	; 1
    625a:	3e d0       	rcall	.+124    	; 0x62d8 <__ultoa_invert+0x9c>
    625c:	b4 e0       	ldi	r27, 0x04	; 4
    625e:	3c d0       	rcall	.+120    	; 0x62d8 <__ultoa_invert+0x9c>
    6260:	67 0f       	add	r22, r23
    6262:	78 1f       	adc	r23, r24
    6264:	89 1f       	adc	r24, r25
    6266:	9a 1f       	adc	r25, r26
    6268:	a1 1d       	adc	r26, r1
    626a:	68 0f       	add	r22, r24
    626c:	79 1f       	adc	r23, r25
    626e:	8a 1f       	adc	r24, r26
    6270:	91 1d       	adc	r25, r1
    6272:	a1 1d       	adc	r26, r1
    6274:	6a 0f       	add	r22, r26
    6276:	71 1d       	adc	r23, r1
    6278:	81 1d       	adc	r24, r1
    627a:	91 1d       	adc	r25, r1
    627c:	a1 1d       	adc	r26, r1
    627e:	20 d0       	rcall	.+64     	; 0x62c0 <__ultoa_invert+0x84>
    6280:	09 f4       	brne	.+2      	; 0x6284 <__ultoa_invert+0x48>
    6282:	68 94       	set
    6284:	3f 91       	pop	r19
    6286:	2a e0       	ldi	r18, 0x0A	; 10
    6288:	26 9f       	mul	r18, r22
    628a:	11 24       	eor	r1, r1
    628c:	30 19       	sub	r19, r0
    628e:	30 5d       	subi	r19, 0xD0	; 208
    6290:	31 93       	st	Z+, r19
    6292:	de f6       	brtc	.-74     	; 0x624a <__ultoa_invert+0xe>
    6294:	cf 01       	movw	r24, r30
    6296:	08 95       	ret
    6298:	46 2f       	mov	r20, r22
    629a:	47 70       	andi	r20, 0x07	; 7
    629c:	40 5d       	subi	r20, 0xD0	; 208
    629e:	41 93       	st	Z+, r20
    62a0:	b3 e0       	ldi	r27, 0x03	; 3
    62a2:	0f d0       	rcall	.+30     	; 0x62c2 <__ultoa_invert+0x86>
    62a4:	c9 f7       	brne	.-14     	; 0x6298 <__ultoa_invert+0x5c>
    62a6:	f6 cf       	rjmp	.-20     	; 0x6294 <__ultoa_invert+0x58>
    62a8:	46 2f       	mov	r20, r22
    62aa:	4f 70       	andi	r20, 0x0F	; 15
    62ac:	40 5d       	subi	r20, 0xD0	; 208
    62ae:	4a 33       	cpi	r20, 0x3A	; 58
    62b0:	18 f0       	brcs	.+6      	; 0x62b8 <__ultoa_invert+0x7c>
    62b2:	49 5d       	subi	r20, 0xD9	; 217
    62b4:	31 fd       	sbrc	r19, 1
    62b6:	40 52       	subi	r20, 0x20	; 32
    62b8:	41 93       	st	Z+, r20
    62ba:	02 d0       	rcall	.+4      	; 0x62c0 <__ultoa_invert+0x84>
    62bc:	a9 f7       	brne	.-22     	; 0x62a8 <__ultoa_invert+0x6c>
    62be:	ea cf       	rjmp	.-44     	; 0x6294 <__ultoa_invert+0x58>
    62c0:	b4 e0       	ldi	r27, 0x04	; 4
    62c2:	a6 95       	lsr	r26
    62c4:	97 95       	ror	r25
    62c6:	87 95       	ror	r24
    62c8:	77 95       	ror	r23
    62ca:	67 95       	ror	r22
    62cc:	ba 95       	dec	r27
    62ce:	c9 f7       	brne	.-14     	; 0x62c2 <__ultoa_invert+0x86>
    62d0:	00 97       	sbiw	r24, 0x00	; 0
    62d2:	61 05       	cpc	r22, r1
    62d4:	71 05       	cpc	r23, r1
    62d6:	08 95       	ret
    62d8:	9b 01       	movw	r18, r22
    62da:	ac 01       	movw	r20, r24
    62dc:	0a 2e       	mov	r0, r26
    62de:	06 94       	lsr	r0
    62e0:	57 95       	ror	r21
    62e2:	47 95       	ror	r20
    62e4:	37 95       	ror	r19
    62e6:	27 95       	ror	r18
    62e8:	ba 95       	dec	r27
    62ea:	c9 f7       	brne	.-14     	; 0x62de <__ultoa_invert+0xa2>
    62ec:	62 0f       	add	r22, r18
    62ee:	73 1f       	adc	r23, r19
    62f0:	84 1f       	adc	r24, r20
    62f2:	95 1f       	adc	r25, r21
    62f4:	a0 1d       	adc	r26, r0
    62f6:	08 95       	ret

000062f8 <__prologue_saves__>:
    62f8:	2f 92       	push	r2
    62fa:	3f 92       	push	r3
    62fc:	4f 92       	push	r4
    62fe:	5f 92       	push	r5
    6300:	6f 92       	push	r6
    6302:	7f 92       	push	r7
    6304:	8f 92       	push	r8
    6306:	9f 92       	push	r9
    6308:	af 92       	push	r10
    630a:	bf 92       	push	r11
    630c:	cf 92       	push	r12
    630e:	df 92       	push	r13
    6310:	ef 92       	push	r14
    6312:	ff 92       	push	r15
    6314:	0f 93       	push	r16
    6316:	1f 93       	push	r17
    6318:	cf 93       	push	r28
    631a:	df 93       	push	r29
    631c:	cd b7       	in	r28, 0x3d	; 61
    631e:	de b7       	in	r29, 0x3e	; 62
    6320:	ca 1b       	sub	r28, r26
    6322:	db 0b       	sbc	r29, r27
    6324:	cd bf       	out	0x3d, r28	; 61
    6326:	de bf       	out	0x3e, r29	; 62
    6328:	09 94       	ijmp

0000632a <__epilogue_restores__>:
    632a:	2a 88       	ldd	r2, Y+18	; 0x12
    632c:	39 88       	ldd	r3, Y+17	; 0x11
    632e:	48 88       	ldd	r4, Y+16	; 0x10
    6330:	5f 84       	ldd	r5, Y+15	; 0x0f
    6332:	6e 84       	ldd	r6, Y+14	; 0x0e
    6334:	7d 84       	ldd	r7, Y+13	; 0x0d
    6336:	8c 84       	ldd	r8, Y+12	; 0x0c
    6338:	9b 84       	ldd	r9, Y+11	; 0x0b
    633a:	aa 84       	ldd	r10, Y+10	; 0x0a
    633c:	b9 84       	ldd	r11, Y+9	; 0x09
    633e:	c8 84       	ldd	r12, Y+8	; 0x08
    6340:	df 80       	ldd	r13, Y+7	; 0x07
    6342:	ee 80       	ldd	r14, Y+6	; 0x06
    6344:	fd 80       	ldd	r15, Y+5	; 0x05
    6346:	0c 81       	ldd	r16, Y+4	; 0x04
    6348:	1b 81       	ldd	r17, Y+3	; 0x03
    634a:	aa 81       	ldd	r26, Y+2	; 0x02
    634c:	b9 81       	ldd	r27, Y+1	; 0x01
    634e:	ce 0f       	add	r28, r30
    6350:	d1 1d       	adc	r29, r1
    6352:	cd bf       	out	0x3d, r28	; 61
    6354:	de bf       	out	0x3e, r29	; 62
    6356:	ed 01       	movw	r28, r26
    6358:	08 95       	ret

0000635a <_exit>:
    635a:	f8 94       	cli

0000635c <__stop_program>:
    635c:	ff cf       	rjmp	.-2      	; 0x635c <__stop_program>
