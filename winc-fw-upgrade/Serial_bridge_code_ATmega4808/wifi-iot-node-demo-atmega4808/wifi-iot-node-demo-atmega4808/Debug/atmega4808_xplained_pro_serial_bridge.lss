
atmega4808_xplained_pro_serial_bridge.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000042  00802800  0000274b  000027ff  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000271c  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002f  0000671c  0000271c  000027d0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          000002ab  00802842  00802842  00002841  2**0
                  ALLOC
  4 .comment      00000030  00000000  00000000  00002841  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002874  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000888  00000000  00000000  000028b8  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000f155  00000000  00000000  00003140  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000046d2  00000000  00000000  00012295  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00004b4e  00000000  00000000  00016967  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001e10  00000000  00000000  0001b4b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000057b0  00000000  00000000  0001d2c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000081bb  00000000  00000000  00022a78  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000007a8  00000000  00000000  0002ac33  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__ctors_end>
       4:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
       8:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
       c:	0c 94 7f 07 	jmp	0xefe	; 0xefe <__vector_3>
      10:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
      14:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
      18:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
      1c:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
      20:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
      24:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
      28:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
      2c:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
      30:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
      34:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
      38:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
      3c:	0c 94 7c 06 	jmp	0xcf8	; 0xcf8 <__vector_15>
      40:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
      44:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
      48:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
      4c:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
      50:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
      54:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
      58:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
      5c:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
      60:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
      64:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
      68:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
      6c:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
      70:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
      74:	0c 94 da 08 	jmp	0x11b4	; 0x11b4 <__vector_29>
      78:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
      7c:	0c 94 25 08 	jmp	0x104a	; 0x104a <__vector_31>
      80:	0c 94 4c 08 	jmp	0x1098	; 0x1098 <__vector_32>
      84:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
      88:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
      8c:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
      90:	c6 0d       	add	r28, r6
      92:	c6 0d       	add	r28, r6
      94:	d4 0d       	add	r29, r4
      96:	b3 0d       	add	r27, r3
      98:	bd 0d       	add	r27, r13
      9a:	bd 0d       	add	r27, r13
      9c:	cd 0d       	add	r28, r13
      9e:	cd 0d       	add	r28, r13
      a0:	e2 0d       	add	r30, r2
      a2:	af 0d       	add	r26, r15
      a4:	fb 0d       	add	r31, r11
      a6:	fb 0d       	add	r31, r11
      a8:	fb 0d       	add	r31, r11
      aa:	fb 0d       	add	r31, r11
      ac:	c0 0d       	add	r28, r0

000000ae <__trampolines_end>:
      ae:	00 09       	sbc	r16, r0
      b0:	12 1b       	sub	r17, r18
      b2:	24 2d       	mov	r18, r4
      b4:	36 3f       	cpi	r19, 0xF6	; 246
      b6:	48 41       	sbci	r20, 0x18	; 24
      b8:	5a 53       	subi	r21, 0x3A	; 58
      ba:	6c 65       	ori	r22, 0x5C	; 92
      bc:	7e 77       	andi	r23, 0x7E	; 126
      be:	19 10       	cpse	r1, r9
      c0:	0b 02       	muls	r16, r27
      c2:	3d 34       	cpi	r19, 0x4D	; 77
      c4:	2f 26       	eor	r2, r31
      c6:	51 58       	subi	r21, 0x81	; 129
      c8:	43 4a       	sbci	r20, 0xA3	; 163
      ca:	75 7c       	andi	r23, 0xC5	; 197
      cc:	67 6e       	ori	r22, 0xE7	; 231
      ce:	32 3b       	cpi	r19, 0xB2	; 178
      d0:	20 29       	or	r18, r0
      d2:	16 1f       	adc	r17, r22
      d4:	04 0d       	add	r16, r4
      d6:	7a 73       	andi	r23, 0x3A	; 58
      d8:	68 61       	ori	r22, 0x18	; 24
      da:	5e 57       	subi	r21, 0x7E	; 126
      dc:	4c 45       	sbci	r20, 0x5C	; 92
      de:	2b 22       	and	r2, r27
      e0:	39 30       	cpi	r19, 0x09	; 9
      e2:	0f 06       	cpc	r0, r31
      e4:	1d 14       	cp	r1, r13
      e6:	63 6a       	ori	r22, 0xA3	; 163
      e8:	71 78       	andi	r23, 0x81	; 129
      ea:	47 4e       	sbci	r20, 0xE7	; 231
      ec:	55 5c       	subi	r21, 0xC5	; 197
      ee:	64 6d       	ori	r22, 0xD4	; 212
      f0:	76 7f       	andi	r23, 0xF6	; 246
      f2:	40 49       	sbci	r20, 0x90	; 144
      f4:	52 5b       	subi	r21, 0xB2	; 178
      f6:	2c 25       	eor	r18, r12
      f8:	3e 37       	cpi	r19, 0x7E	; 126
      fa:	08 01       	movw	r0, r16
      fc:	1a 13       	cpse	r17, r26
      fe:	7d 74       	andi	r23, 0x4D	; 77
     100:	6f 66       	ori	r22, 0x6F	; 111
     102:	59 50       	subi	r21, 0x09	; 9
     104:	4b 42       	sbci	r20, 0x2B	; 43
     106:	35 3c       	cpi	r19, 0xC5	; 197
     108:	27 2e       	mov	r2, r23
     10a:	11 18       	sub	r1, r1
     10c:	03 0a       	sbc	r0, r19
     10e:	56 5f       	subi	r21, 0xF6	; 246
     110:	44 4d       	sbci	r20, 0xD4	; 212
     112:	72 7b       	andi	r23, 0xB2	; 178
     114:	60 69       	ori	r22, 0x90	; 144
     116:	1e 17       	cp	r17, r30
     118:	0c 05       	cpc	r16, r12
     11a:	3a 33       	cpi	r19, 0x3A	; 58
     11c:	28 21       	and	r18, r8
     11e:	4f 46       	sbci	r20, 0x6F	; 111
     120:	5d 54       	subi	r21, 0x4D	; 77
     122:	6b 62       	ori	r22, 0x2B	; 43
     124:	79 70       	andi	r23, 0x09	; 9
     126:	07 0e       	add	r0, r23
     128:	15 1c       	adc	r1, r5
     12a:	23 2a       	or	r2, r19
     12c:	31 38       	cpi	r19, 0x81	; 129
     12e:	41 48       	sbci	r20, 0x81	; 129
     130:	53 5a       	subi	r21, 0xA3	; 163
     132:	65 6c       	ori	r22, 0xC5	; 197
     134:	77 7e       	andi	r23, 0xE7	; 231
     136:	09 00       	.word	0x0009	; ????
     138:	1b 12       	cpse	r1, r27
     13a:	2d 24       	eor	r2, r13
     13c:	3f 36       	cpi	r19, 0x6F	; 111
     13e:	58 51       	subi	r21, 0x18	; 24
     140:	4a 43       	sbci	r20, 0x3A	; 58
     142:	7c 75       	andi	r23, 0x5C	; 92
     144:	6e 67       	ori	r22, 0x7E	; 126
     146:	10 19       	sub	r17, r0
     148:	02 0b       	sbc	r16, r18
     14a:	34 3d       	cpi	r19, 0xD4	; 212
     14c:	26 2f       	mov	r18, r22
     14e:	73 7a       	andi	r23, 0xA3	; 163
     150:	61 68       	ori	r22, 0x81	; 129
     152:	57 5e       	subi	r21, 0xE7	; 231
     154:	45 4c       	sbci	r20, 0xC5	; 197
     156:	3b 32       	cpi	r19, 0x2B	; 43
     158:	29 20       	and	r2, r9
     15a:	1f 16       	cp	r1, r31
     15c:	0d 04       	cpc	r0, r13
     15e:	6a 63       	ori	r22, 0x3A	; 58
     160:	78 71       	andi	r23, 0x18	; 24
     162:	4e 47       	sbci	r20, 0x7E	; 126
     164:	5c 55       	subi	r21, 0x5C	; 92
     166:	22 2b       	or	r18, r18
     168:	30 39       	cpi	r19, 0x90	; 144
     16a:	06 0f       	add	r16, r22
     16c:	14 1d       	adc	r17, r4
     16e:	25 2c       	mov	r2, r5
     170:	37 3e       	cpi	r19, 0xE7	; 231
     172:	01 08       	sbc	r0, r1
     174:	13 1a       	sub	r1, r19
     176:	6d 64       	ori	r22, 0x4D	; 77
     178:	7f 76       	andi	r23, 0x6F	; 111
     17a:	49 40       	sbci	r20, 0x09	; 9
     17c:	5b 52       	subi	r21, 0x2B	; 43
     17e:	3c 35       	cpi	r19, 0x5C	; 92
     180:	2e 27       	eor	r18, r30
     182:	18 11       	cpse	r17, r8
     184:	0a 03       	fmul	r16, r18
     186:	74 7d       	andi	r23, 0xD4	; 212
     188:	66 6f       	ori	r22, 0xF6	; 246
     18a:	50 59       	subi	r21, 0x90	; 144
     18c:	42 4b       	sbci	r20, 0xB2	; 178
     18e:	17 1e       	adc	r1, r23
     190:	05 0c       	add	r0, r5
     192:	33 3a       	cpi	r19, 0xA3	; 163
     194:	21 28       	or	r2, r1
     196:	5f 56       	subi	r21, 0x6F	; 111
     198:	4d 44       	sbci	r20, 0x4D	; 77
     19a:	7b 72       	andi	r23, 0x2B	; 43
     19c:	69 60       	ori	r22, 0x09	; 9
     19e:	0e 07       	cpc	r16, r30
     1a0:	1c 15       	cp	r17, r12
     1a2:	2a 23       	and	r18, r26
     1a4:	38 31       	cpi	r19, 0x18	; 24
     1a6:	46 4f       	sbci	r20, 0xF6	; 246
     1a8:	54 5d       	subi	r21, 0xD4	; 212
     1aa:	62 6b       	ori	r22, 0xB2	; 178
     1ac:	70 79       	andi	r23, 0x90	; 144

000001ae <__ctors_end>:
     1ae:	11 24       	eor	r1, r1
     1b0:	1f be       	out	0x3f, r1	; 63
     1b2:	cf ef       	ldi	r28, 0xFF	; 255
     1b4:	cd bf       	out	0x3d, r28	; 61
     1b6:	df e3       	ldi	r29, 0x3F	; 63
     1b8:	de bf       	out	0x3e, r29	; 62

000001ba <__do_copy_data>:
     1ba:	18 e2       	ldi	r17, 0x28	; 40
     1bc:	a0 e0       	ldi	r26, 0x00	; 0
     1be:	b8 e2       	ldi	r27, 0x28	; 40
     1c0:	eb e4       	ldi	r30, 0x4B	; 75
     1c2:	f7 e2       	ldi	r31, 0x27	; 39
     1c4:	02 c0       	rjmp	.+4      	; 0x1ca <__do_copy_data+0x10>
     1c6:	05 90       	lpm	r0, Z+
     1c8:	0d 92       	st	X+, r0
     1ca:	a2 34       	cpi	r26, 0x42	; 66
     1cc:	b1 07       	cpc	r27, r17
     1ce:	d9 f7       	brne	.-10     	; 0x1c6 <__do_copy_data+0xc>

000001d0 <__do_clear_bss>:
     1d0:	2a e2       	ldi	r18, 0x2A	; 42
     1d2:	a2 e4       	ldi	r26, 0x42	; 66
     1d4:	b8 e2       	ldi	r27, 0x28	; 40
     1d6:	01 c0       	rjmp	.+2      	; 0x1da <.do_clear_bss_start>

000001d8 <.do_clear_bss_loop>:
     1d8:	1d 92       	st	X+, r1

000001da <.do_clear_bss_start>:
     1da:	ad 3e       	cpi	r26, 0xED	; 237
     1dc:	b2 07       	cpc	r27, r18
     1de:	e1 f7       	brne	.-8      	; 0x1d8 <.do_clear_bss_loop>
     1e0:	0e 94 c5 02 	call	0x58a	; 0x58a <main>
     1e4:	0c 94 8c 13 	jmp	0x2718	; 0x2718 <_exit>

000001e8 <__bad_interrupt>:
     1e8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001ec <usart_receive_handler>:
static void usart_receive_handler(void);
extern void default_rx_isr(void);

static void usart_receive_handler(void)
{
	uint8_t rx_status = USART2.RXDATAH;
     1ec:	80 91 41 08 	lds	r24, 0x0841	; 0x800841 <__TEXT_REGION_LENGTH__+0x700841>
	
	if (rx_status & (USART_BUFOVF_bm | USART_FERR_bm)) {
     1f0:	84 74       	andi	r24, 0x44	; 68
     1f2:	19 f0       	breq	.+6      	; 0x1fa <usart_receive_handler+0xe>
		rx_status = USART2.RXDATAL; // Clear flag by reading buffer
     1f4:	80 91 40 08 	lds	r24, 0x0840	; 0x800840 <__TEXT_REGION_LENGTH__+0x700840>
     1f8:	08 95       	ret
		//usart_err_on_reception = 1;
			// error handler
	} else {
		default_rx_isr();
     1fa:	0c 94 cf 07 	jmp	0xf9e	; 0xf9e <default_rx_isr>

000001fe <usart_read_buffer>:
	}	
}

static void usart_read_buffer(uint8_t *rx_buffer, uint8_t rx_length)
{
     1fe:	0f 93       	push	r16
     200:	1f 93       	push	r17
     202:	cf 93       	push	r28
     204:	df 93       	push	r29
     206:	ec 01       	movw	r28, r24
     208:	8c 01       	movw	r16, r24
     20a:	06 0f       	add	r16, r22
     20c:	11 1d       	adc	r17, r1
	uint8_t i = 0;
	
	
	while (i < rx_length)
     20e:	c0 17       	cp	r28, r16
     210:	d1 07       	cpc	r29, r17
     212:	31 f0       	breq	.+12     	; 0x220 <usart_read_buffer+0x22>
	{
		if (USART_0_is_rx_ready());
     214:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <USART_0_is_rx_ready>
		{
			rx_buffer[i] = USART_0_read();
     218:	0e 94 81 08 	call	0x1102	; 0x1102 <USART_0_read>
     21c:	89 93       	st	Y+, r24
     21e:	f7 cf       	rjmp	.-18     	; 0x20e <usart_read_buffer+0x10>
			i++;
		}
	}
}
     220:	df 91       	pop	r29
     222:	cf 91       	pop	r28
     224:	1f 91       	pop	r17
     226:	0f 91       	pop	r16
     228:	08 95       	ret

0000022a <usart_write_buffer>:

static void usart_write_buffer(uint8_t *tx_buffer, uint8_t tx_length)
{
     22a:	0f 93       	push	r16
     22c:	1f 93       	push	r17
     22e:	cf 93       	push	r28
     230:	df 93       	push	r29
     232:	ec 01       	movw	r28, r24
     234:	8c 01       	movw	r16, r24
     236:	06 0f       	add	r16, r22
     238:	11 1d       	adc	r17, r1
	uint8_t i;
	
	for (i = 0; i < tx_length; i++)
     23a:	c0 17       	cp	r28, r16
     23c:	d1 07       	cpc	r29, r17
     23e:	21 f0       	breq	.+8      	; 0x248 <usart_write_buffer+0x1e>
	{
		USART_0_write(tx_buffer[i]);
     240:	89 91       	ld	r24, Y+
     242:	0e 94 9a 08 	call	0x1134	; 0x1134 <USART_0_write>
     246:	f9 cf       	rjmp	.-14     	; 0x23a <usart_write_buffer+0x10>
	}
}
     248:	df 91       	pop	r29
     24a:	cf 91       	pop	r28
     24c:	1f 91       	pop	r17
     24e:	0f 91       	pop	r16
     250:	08 95       	ret

00000252 <usart_tx_complete_handler>:

static void usart_tx_complete_handler(void)
{
	if (schedule_rx) {
     252:	80 91 6b 28 	lds	r24, 0x286B	; 0x80286b <schedule_rx>
     256:	88 23       	and	r24, r24
     258:	51 f0       	breq	.+20     	; 0x26e <usart_tx_complete_handler+0x1c>
		if (schedule_rx_length == 1) {
     25a:	60 91 6c 28 	lds	r22, 0x286C	; 0x80286c <schedule_rx_length>
     25e:	80 91 69 28 	lds	r24, 0x2869	; 0x802869 <schedule_rx_buffer>
     262:	90 91 6a 28 	lds	r25, 0x286A	; 0x80286a <schedule_rx_buffer+0x1>
			usart_read_buffer((uint8_t *)schedule_rx_buffer, 1);
		} else {
			usart_read_buffer((uint8_t *)schedule_rx_buffer, schedule_rx_length);
     266:	0e 94 ff 00 	call	0x1fe	; 0x1fe <usart_read_buffer>
		}

		schedule_rx = 0;
     26a:	10 92 6b 28 	sts	0x286B, r1	; 0x80286b <schedule_rx>
	}

	if (change_state) {
     26e:	80 91 64 28 	lds	r24, 0x2864	; 0x802864 <change_state>
     272:	88 23       	and	r24, r24
     274:	31 f0       	breq	.+12     	; 0x282 <usart_tx_complete_handler+0x30>
		usart_prot_handler_status = new_state;
     276:	80 91 65 28 	lds	r24, 0x2865	; 0x802865 <new_state>
     27a:	80 93 66 28 	sts	0x2866, r24	; 0x802866 <usart_prot_handler_status>
		change_state = 0;
     27e:	10 92 64 28 	sts	0x2864, r1	; 0x802864 <change_state>
     282:	08 95       	ret

00000284 <usart_rx_complete_handler>:
	}
}

static void usart_rx_complete_handler(void)
{
	usart_pkt_received = 1;
     284:	81 e0       	ldi	r24, 0x01	; 1
     286:	80 93 7c 28 	sts	0x287C, r24	; 0x80287c <usart_pkt_received>
	usart_pkt = &rx_data;
     28a:	84 e4       	ldi	r24, 0x44	; 68
     28c:	98 e2       	ldi	r25, 0x28	; 40
     28e:	80 93 67 28 	sts	0x2867, r24	; 0x802867 <usart_pkt>
     292:	90 93 68 28 	sts	0x2868, r25	; 0x802868 <usart_pkt+0x1>
	if (change_state) {
     296:	80 91 64 28 	lds	r24, 0x2864	; 0x802864 <change_state>
     29a:	88 23       	and	r24, r24
     29c:	31 f0       	breq	.+12     	; 0x2aa <usart_rx_complete_handler+0x26>

		schedule_rx = 0;
	}

	if (change_state) {
		usart_prot_handler_status = new_state;
     29e:	80 91 65 28 	lds	r24, 0x2865	; 0x802865 <new_state>
     2a2:	80 93 66 28 	sts	0x2866, r24	; 0x802866 <usart_prot_handler_status>
		change_state = 0;
     2a6:	10 92 64 28 	sts	0x2864, r1	; 0x802864 <change_state>
     2aa:	08 95       	ret

000002ac <nm_usart_protocol_handler>:
	}
	usart_write_buffer(tx_data, length);
}

static void nm_usart_protocol_handler(enum nm_usart_event_types event_name)
{
     2ac:	cf 93       	push	r28
     2ae:	df 93       	push	r29
     2b0:	1f 92       	push	r1
     2b2:	cd b7       	in	r28, 0x3d	; 61
     2b4:	de b7       	in	r29, 0x3e	; 62
	static uint16_t payload_length = 0;
	uint8 checksum = 0;
	uint8_t uartdata;
	uint8_t i;

	switch (usart_prot_handler_status) {
     2b6:	90 91 66 28 	lds	r25, 0x2866	; 0x802866 <usart_prot_handler_status>
     2ba:	92 30       	cpi	r25, 0x02	; 2
     2bc:	09 f4       	brne	.+2      	; 0x2c0 <nm_usart_protocol_handler+0x14>
     2be:	89 c0       	rjmp	.+274    	; 0x3d2 <nm_usart_protocol_handler+0x126>
     2c0:	30 f4       	brcc	.+12     	; 0x2ce <nm_usart_protocol_handler+0x22>
     2c2:	99 23       	and	r25, r25
     2c4:	59 f0       	breq	.+22     	; 0x2dc <nm_usart_protocol_handler+0x30>
     2c6:	91 30       	cpi	r25, 0x01	; 1
     2c8:	09 f4       	brne	.+2      	; 0x2cc <nm_usart_protocol_handler+0x20>
     2ca:	51 c0       	rjmp	.+162    	; 0x36e <nm_usart_protocol_handler+0xc2>
     2cc:	57 c1       	rjmp	.+686    	; 0x57c <__LOCK_REGION_LENGTH__+0x17c>
     2ce:	93 30       	cpi	r25, 0x03	; 3
     2d0:	09 f4       	brne	.+2      	; 0x2d4 <nm_usart_protocol_handler+0x28>
     2d2:	ae c0       	rjmp	.+348    	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
     2d4:	94 30       	cpi	r25, 0x04	; 4
     2d6:	09 f4       	brne	.+2      	; 0x2da <nm_usart_protocol_handler+0x2e>
     2d8:	25 c1       	rjmp	.+586    	; 0x524 <__LOCK_REGION_LENGTH__+0x124>
     2da:	50 c1       	rjmp	.+672    	; 0x57c <__LOCK_REGION_LENGTH__+0x17c>
	case INIT:
		if ((event_name == USART_PKT_RECEIVED) && (schedule_rx_length == 1)) {
     2dc:	81 11       	cpse	r24, r1
     2de:	36 c0       	rjmp	.+108    	; 0x34c <nm_usart_protocol_handler+0xa0>
     2e0:	80 91 6c 28 	lds	r24, 0x286C	; 0x80286c <schedule_rx_length>
     2e4:	81 30       	cpi	r24, 0x01	; 1
     2e6:	91 f5       	brne	.+100    	; 0x34c <nm_usart_protocol_handler+0xa0>
			if ((usart_pkt[0] == 0x12)) {
     2e8:	e0 91 67 28 	lds	r30, 0x2867	; 0x802867 <usart_pkt>
     2ec:	f0 91 68 28 	lds	r31, 0x2868	; 0x802868 <usart_pkt+0x1>
     2f0:	90 81       	ld	r25, Z
     2f2:	92 31       	cpi	r25, 0x12	; 18
     2f4:	79 f4       	brne	.+30     	; 0x314 <nm_usart_protocol_handler+0x68>
				usart_prot_handler_status = WAIT_SYNC;
     2f6:	80 93 66 28 	sts	0x2866, r24	; 0x802866 <usart_prot_handler_status>
				usart_cmd_recv_buffer[0] = 0xFF;
     2fa:	9f ef       	ldi	r25, 0xFF	; 255
     2fc:	90 93 8e 2a 	sts	0x2A8E, r25	; 0x802a8e <usart_cmd_recv_buffer>
				schedule_rx_buffer = &usart_cmd_recv_buffer[0];
     300:	2e e8       	ldi	r18, 0x8E	; 142
     302:	3a e2       	ldi	r19, 0x2A	; 42
     304:	20 93 69 28 	sts	0x2869, r18	; 0x802869 <schedule_rx_buffer>
     308:	30 93 6a 28 	sts	0x286A, r19	; 0x80286a <schedule_rx_buffer+0x1>
				schedule_rx_length = 1;
				schedule_rx = 1;
     30c:	80 93 6b 28 	sts	0x286B, r24	; 0x80286b <schedule_rx>
				uartdata = 0x5B;
     310:	8b e5       	ldi	r24, 0x5B	; 91
     312:	2b c0       	rjmp	.+86     	; 0x36a <nm_usart_protocol_handler+0xbe>
				usart_write_buffer(&uartdata, schedule_rx_length);
				usart_tx_complete_handler();
				rx_data = *schedule_rx_buffer;
				usart_rx_complete_handler();
			} else {
				schedule_rx_buffer = &usart_cmd_recv_buffer[0];
     314:	2e e8       	ldi	r18, 0x8E	; 142
     316:	3a e2       	ldi	r19, 0x2A	; 42
     318:	20 93 69 28 	sts	0x2869, r18	; 0x802869 <schedule_rx_buffer>
     31c:	30 93 6a 28 	sts	0x286A, r19	; 0x80286a <schedule_rx_buffer+0x1>
				schedule_rx_length = 1;
     320:	80 93 6c 28 	sts	0x286C, r24	; 0x80286c <schedule_rx_length>
				schedule_rx = 1;
     324:	80 93 6b 28 	sts	0x286B, r24	; 0x80286b <schedule_rx>
				uartdata = usart_pkt[0];
     328:	99 83       	std	Y+1, r25	; 0x01
				usart_write_buffer(&uartdata, schedule_rx_length);
     32a:	61 e0       	ldi	r22, 0x01	; 1
     32c:	ce 01       	movw	r24, r28
     32e:	01 96       	adiw	r24, 0x01	; 1
     330:	0e 94 15 01 	call	0x22a	; 0x22a <usart_write_buffer>
				usart_tx_complete_handler();
     334:	0e 94 29 01 	call	0x252	; 0x252 <usart_tx_complete_handler>
				rx_data = *schedule_rx_buffer;
     338:	e0 91 69 28 	lds	r30, 0x2869	; 0x802869 <schedule_rx_buffer>
     33c:	f0 91 6a 28 	lds	r31, 0x286A	; 0x80286a <schedule_rx_buffer+0x1>
     340:	80 81       	ld	r24, Z
     342:	80 93 44 28 	sts	0x2844, r24	; 0x802844 <rx_data>
				usart_rx_complete_handler();
     346:	0e 94 42 01 	call	0x284	; 0x284 <usart_rx_complete_handler>
     34a:	1b c1       	rjmp	.+566    	; 0x582 <__LOCK_REGION_LENGTH__+0x182>
				/* usart_read_job(module,&usart_cmd_recv_buffer[0]); */
				//usart_tx_complete_handler();
			}
		} else {
			usart_cmd_recv_buffer[0] = 0xFF;
     34c:	8f ef       	ldi	r24, 0xFF	; 255
     34e:	80 93 8e 2a 	sts	0x2A8E, r24	; 0x802a8e <usart_cmd_recv_buffer>
			schedule_rx_buffer = &usart_cmd_recv_buffer[0];
     352:	8e e8       	ldi	r24, 0x8E	; 142
     354:	9a e2       	ldi	r25, 0x2A	; 42
     356:	80 93 69 28 	sts	0x2869, r24	; 0x802869 <schedule_rx_buffer>
     35a:	90 93 6a 28 	sts	0x286A, r25	; 0x80286a <schedule_rx_buffer+0x1>
			schedule_rx_length = 1;
     35e:	81 e0       	ldi	r24, 0x01	; 1
     360:	80 93 6c 28 	sts	0x286C, r24	; 0x80286c <schedule_rx_length>
			schedule_rx = 1;
     364:	80 93 6b 28 	sts	0x286B, r24	; 0x80286b <schedule_rx>
			uartdata = 0xEA;
     368:	8a ee       	ldi	r24, 0xEA	; 234
     36a:	89 83       	std	Y+1, r24	; 0x01
     36c:	de cf       	rjmp	.-68     	; 0x32a <nm_usart_protocol_handler+0x7e>
		}

		break;

	case WAIT_SYNC:
		if (event_name == USART_PKT_RECEIVED) {
     36e:	81 11       	cpse	r24, r1
     370:	08 c1       	rjmp	.+528    	; 0x582 <__LOCK_REGION_LENGTH__+0x182>
			if (usart_pkt[0] == 0xA5) {
     372:	e0 91 67 28 	lds	r30, 0x2867	; 0x802867 <usart_pkt>
     376:	f0 91 68 28 	lds	r31, 0x2868	; 0x802868 <usart_pkt+0x1>
     37a:	80 81       	ld	r24, Z
     37c:	85 3a       	cpi	r24, 0xA5	; 165
     37e:	71 f4       	brne	.+28     	; 0x39c <nm_usart_protocol_handler+0xf0>
				uint8 *usart_cmd_recv_buffer_u8 = (uint8 *)&usart_cmd_recv_buffer[0];
				usart_prot_handler_status = WAITING;
     380:	82 e0       	ldi	r24, 0x02	; 2
     382:	80 93 66 28 	sts	0x2866, r24	; 0x802866 <usart_prot_handler_status>
				usart_cmd_recv_buffer_u8[4] = 0xFF;
     386:	8f ef       	ldi	r24, 0xFF	; 255
     388:	80 93 92 2a 	sts	0x2A92, r24	; 0x802a92 <usart_cmd_recv_buffer+0x4>
				schedule_rx_length = 1;
     38c:	90 93 6c 28 	sts	0x286C, r25	; 0x80286c <schedule_rx_length>
				usart_read_buffer(&usart_cmd_recv_buffer[2], schedule_rx_length);
     390:	61 e0       	ldi	r22, 0x01	; 1
     392:	80 e9       	ldi	r24, 0x90	; 144
     394:	9a e2       	ldi	r25, 0x2A	; 42
     396:	0e 94 ff 00 	call	0x1fe	; 0x1fe <usart_read_buffer>
     39a:	f3 c0       	rjmp	.+486    	; 0x582 <__LOCK_REGION_LENGTH__+0x182>
			} else if (usart_pkt[0] == 0x12) {
     39c:	82 31       	cpi	r24, 0x12	; 18
     39e:	11 f4       	brne	.+4      	; 0x3a4 <nm_usart_protocol_handler+0xf8>
				/* UART identification command. */
				uartdata = 0x5B;
     3a0:	8b e5       	ldi	r24, 0x5B	; 91
     3a2:	05 c0       	rjmp	.+10     	; 0x3ae <nm_usart_protocol_handler+0x102>
				usart_write_buffer(&uartdata, schedule_rx_length);
				usart_tx_complete_handler();
				rx_data = *schedule_rx_buffer;
				usart_rx_complete_handler();
			} else {
				if (!uart_reconfigure) {
     3a4:	80 91 63 28 	lds	r24, 0x2863	; 0x802863 <uart_reconfigure>
     3a8:	81 11       	cpse	r24, r1
     3aa:	10 c0       	rjmp	.+32     	; 0x3cc <nm_usart_protocol_handler+0x120>
					uartdata = 0x5A;
     3ac:	8a e5       	ldi	r24, 0x5A	; 90
     3ae:	89 83       	std	Y+1, r24	; 0x01
					usart_cmd_recv_buffer[0] = 0xFF;
     3b0:	8f ef       	ldi	r24, 0xFF	; 255
     3b2:	80 93 8e 2a 	sts	0x2A8E, r24	; 0x802a8e <usart_cmd_recv_buffer>
					schedule_rx_buffer = &usart_cmd_recv_buffer[0];
     3b6:	2e e8       	ldi	r18, 0x8E	; 142
     3b8:	3a e2       	ldi	r19, 0x2A	; 42
     3ba:	20 93 69 28 	sts	0x2869, r18	; 0x802869 <schedule_rx_buffer>
     3be:	30 93 6a 28 	sts	0x286A, r19	; 0x80286a <schedule_rx_buffer+0x1>
					schedule_rx_length = 1;
     3c2:	90 93 6c 28 	sts	0x286C, r25	; 0x80286c <schedule_rx_length>
					schedule_rx = 1;
     3c6:	90 93 6b 28 	sts	0x286B, r25	; 0x80286b <schedule_rx>
     3ca:	af cf       	rjmp	.-162    	; 0x32a <nm_usart_protocol_handler+0x7e>
					usart_tx_complete_handler();
					rx_data = *schedule_rx_buffer;
					usart_rx_complete_handler();
					//usart_tx_complete_handler();
				} else {
					schedule_rx_length = 1;
     3cc:	90 93 6c 28 	sts	0x286C, r25	; 0x80286c <schedule_rx_length>
     3d0:	d8 c0       	rjmp	.+432    	; 0x582 <__LOCK_REGION_LENGTH__+0x182>
		}

		break;

	case WAITING:
		if (event_name == USART_PKT_RECEIVED) {
     3d2:	81 11       	cpse	r24, r1
     3d4:	1d c0       	rjmp	.+58     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
			usart_prot_handler_status = COLLECTING_HDR;
     3d6:	83 e0       	ldi	r24, 0x03	; 3
     3d8:	80 93 66 28 	sts	0x2866, r24	; 0x802866 <usart_prot_handler_status>
			buffer[0] = usart_cmd_recv_buffer[2];
     3dc:	80 91 90 2a 	lds	r24, 0x2A90	; 0x802a90 <usart_cmd_recv_buffer+0x2>
     3e0:	80 93 45 28 	sts	0x2845, r24	; 0x802845 <buffer>
			buffer[1] = rx_data;
     3e4:	80 91 44 28 	lds	r24, 0x2844	; 0x802844 <rx_data>
     3e8:	80 93 46 28 	sts	0x2846, r24	; 0x802846 <buffer+0x1>
			uart_cmd_buf = &buffer[0];
     3ec:	85 e4       	ldi	r24, 0x45	; 69
     3ee:	98 e2       	ldi	r25, 0x28	; 40
     3f0:	80 93 79 28 	sts	0x2879, r24	; 0x802879 <uart_cmd_buf>
     3f4:	90 93 7a 28 	sts	0x287A, r25	; 0x80287a <uart_cmd_buf+0x1>
			schedule_rx_length = (USART_CMD_HDR_LENGTH - 2);
     3f8:	8a e0       	ldi	r24, 0x0A	; 10
     3fa:	80 93 6c 28 	sts	0x286C, r24	; 0x80286c <schedule_rx_length>
			usart_read_buffer(&buffer[2], schedule_rx_length);
     3fe:	6a e0       	ldi	r22, 0x0A	; 10
     400:	87 e4       	ldi	r24, 0x47	; 71
     402:	98 e2       	ldi	r25, 0x28	; 40
     404:	0e 94 ff 00 	call	0x1fe	; 0x1fe <usart_read_buffer>
     408:	9e cf       	rjmp	.-196    	; 0x346 <nm_usart_protocol_handler+0x9a>
					usart_tx_complete_handler();
					//rx_data = *schedule_rx_buffer;
					//usart_rx_complete_handler();
				}
			}
		} else if (event_name == USART_ERROR_ON_RECEPTION) {
     40a:	82 30       	cpi	r24, 0x02	; 2
     40c:	09 f0       	breq	.+2      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
     40e:	b9 c0       	rjmp	.+370    	; 0x582 <__LOCK_REGION_LENGTH__+0x182>
			uart_cmd_buf = &buffer[0];
			schedule_rx_length = (USART_CMD_HDR_LENGTH - 2);
			usart_read_buffer(&buffer[2], schedule_rx_length);
			usart_rx_complete_handler();
		} else {
			usart_prot_handler_status = WAIT_SYNC;
     410:	81 e0       	ldi	r24, 0x01	; 1
     412:	80 93 66 28 	sts	0x2866, r24	; 0x802866 <usart_prot_handler_status>
			schedule_rx_buffer = &usart_cmd_recv_buffer[0];
     416:	2e e8       	ldi	r18, 0x8E	; 142
     418:	3a e2       	ldi	r19, 0x2A	; 42
     41a:	20 93 69 28 	sts	0x2869, r18	; 0x802869 <schedule_rx_buffer>
     41e:	30 93 6a 28 	sts	0x286A, r19	; 0x80286a <schedule_rx_buffer+0x1>
			schedule_rx = 1;
     422:	80 93 6b 28 	sts	0x286B, r24	; 0x80286b <schedule_rx>
			schedule_rx_length = 1;
     426:	80 93 6c 28 	sts	0x286C, r24	; 0x80286c <schedule_rx_length>
			uartdata = 0xEA;
     42a:	8a ee       	ldi	r24, 0xEA	; 234
     42c:	89 83       	std	Y+1, r24	; 0x01
     42e:	a0 c0       	rjmp	.+320    	; 0x570 <__LOCK_REGION_LENGTH__+0x170>
		}

		break;

	case COLLECTING_HDR:
		if (event_name == USART_PKT_RECEIVED) {
     430:	81 11       	cpse	r24, r1
     432:	eb cf       	rjmp	.-42     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
			/* Verify checksum. */
			for (i = 0; i < (USART_CMD_HDR_LENGTH); i++) {
				checksum ^= *(((uint8_t *)uart_cmd_buf) + i);
     434:	e0 91 79 28 	lds	r30, 0x2879	; 0x802879 <uart_cmd_buf>
     438:	f0 91 7a 28 	lds	r31, 0x287A	; 0x80287a <uart_cmd_buf+0x1>
     43c:	df 01       	movw	r26, r30
     43e:	9f 01       	movw	r18, r30
     440:	24 5f       	subi	r18, 0xF4	; 244
     442:	3f 4f       	sbci	r19, 0xFF	; 255
     444:	9d 91       	ld	r25, X+
     446:	89 27       	eor	r24, r25
		break;

	case COLLECTING_HDR:
		if (event_name == USART_PKT_RECEIVED) {
			/* Verify checksum. */
			for (i = 0; i < (USART_CMD_HDR_LENGTH); i++) {
     448:	a2 17       	cp	r26, r18
     44a:	b3 07       	cpc	r27, r19
     44c:	d9 f7       	brne	.-10     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
				checksum ^= *(((uint8_t *)uart_cmd_buf) + i);
			}
			
			if (checksum != 0) {
     44e:	88 23       	and	r24, r24
     450:	e9 f0       	breq	.+58     	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
				usart_prot_handler_status = WAIT_SYNC;
     452:	81 e0       	ldi	r24, 0x01	; 1
     454:	80 93 66 28 	sts	0x2866, r24	; 0x802866 <usart_prot_handler_status>
				usart_cmd_recv_buffer[0] = 0xFF;
     458:	9f ef       	ldi	r25, 0xFF	; 255
     45a:	90 93 8e 2a 	sts	0x2A8E, r25	; 0x802a8e <usart_cmd_recv_buffer>
				schedule_rx_buffer = &usart_cmd_recv_buffer[0];
     45e:	2e e8       	ldi	r18, 0x8E	; 142
     460:	3a e2       	ldi	r19, 0x2A	; 42
     462:	20 93 69 28 	sts	0x2869, r18	; 0x802869 <schedule_rx_buffer>
     466:	30 93 6a 28 	sts	0x286A, r19	; 0x80286a <schedule_rx_buffer+0x1>
				schedule_rx_length = 1;
     46a:	80 93 6c 28 	sts	0x286C, r24	; 0x80286c <schedule_rx_length>
				schedule_rx = 1;
     46e:	80 93 6b 28 	sts	0x286B, r24	; 0x80286b <schedule_rx>
				uartdata = 0x5A;
     472:	8a e5       	ldi	r24, 0x5A	; 90
     474:	89 83       	std	Y+1, r24	; 0x01
				usart_write_buffer(&uartdata, schedule_rx_length);
     476:	61 e0       	ldi	r22, 0x01	; 1
     478:	ce 01       	movw	r24, r28
     47a:	01 96       	adiw	r24, 0x01	; 1
     47c:	0e 94 15 01 	call	0x22a	; 0x22a <usart_write_buffer>
				usart_write_buffer(uart_cmd_buf, USART_CMD_HDR_LENGTH);
     480:	6c e0       	ldi	r22, 0x0C	; 12
     482:	80 91 79 28 	lds	r24, 0x2879	; 0x802879 <uart_cmd_buf>
     486:	90 91 7a 28 	lds	r25, 0x287A	; 0x80287a <uart_cmd_buf+0x1>
     48a:	52 cf       	rjmp	.-348    	; 0x330 <nm_usart_protocol_handler+0x84>
				usart_tx_complete_handler();
				rx_data = *schedule_rx_buffer;
				usart_rx_complete_handler();
			} else {
				memcpy(&uart_cmd, uart_cmd_buf, sizeof(uart_cmd_hdr));
     48c:	8c e0       	ldi	r24, 0x0C	; 12
     48e:	ad e6       	ldi	r26, 0x6D	; 109
     490:	b8 e2       	ldi	r27, 0x28	; 40
     492:	01 90       	ld	r0, Z+
     494:	0d 92       	st	X+, r0
     496:	8a 95       	dec	r24
     498:	e1 f7       	brne	.-8      	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
				/* Process the Command. */
				if ((uart_cmd.cmd & 0xFF) == WRITE_BUFF) {
     49a:	80 91 6d 28 	lds	r24, 0x286D	; 0x80286d <uart_cmd>
     49e:	90 91 6e 28 	lds	r25, 0x286E	; 0x80286e <uart_cmd+0x1>
     4a2:	a0 91 6f 28 	lds	r26, 0x286F	; 0x80286f <uart_cmd+0x2>
     4a6:	b0 91 70 28 	lds	r27, 0x2870	; 0x802870 <uart_cmd+0x3>
     4aa:	ac 01       	movw	r20, r24
     4ac:	bd 01       	movw	r22, r26
     4ae:	55 27       	eor	r21, r21
     4b0:	66 27       	eor	r22, r22
     4b2:	77 27       	eor	r23, r23
     4b4:	43 30       	cpi	r20, 0x03	; 3
     4b6:	51 05       	cpc	r21, r1
     4b8:	61 05       	cpc	r22, r1
     4ba:	71 05       	cpc	r23, r1
     4bc:	b9 f4       	brne	.+46     	; 0x4ec <__LOCK_REGION_LENGTH__+0xec>
					usart_prot_handler_status = COLLECTING_PAYLOAD;
     4be:	24 e0       	ldi	r18, 0x04	; 4
     4c0:	20 93 66 28 	sts	0x2866, r18	; 0x802866 <usart_prot_handler_status>
					payload_length = (uart_cmd.cmd >> 16) & 0xFFFF;
     4c4:	cd 01       	movw	r24, r26
     4c6:	aa 27       	eor	r26, r26
     4c8:	bb 27       	eor	r27, r27
     4ca:	80 93 42 28 	sts	0x2842, r24	; 0x802842 <__data_end>
     4ce:	90 93 43 28 	sts	0x2843, r25	; 0x802843 <__data_end+0x1>
					schedule_rx = 1;
     4d2:	21 e0       	ldi	r18, 0x01	; 1
     4d4:	20 93 6b 28 	sts	0x286B, r18	; 0x80286b <schedule_rx>
					schedule_rx_buffer = &usart_payload_buffer[0];
     4d8:	2e e8       	ldi	r18, 0x8E	; 142
     4da:	38 e2       	ldi	r19, 0x28	; 40
     4dc:	20 93 69 28 	sts	0x2869, r18	; 0x802869 <schedule_rx_buffer>
     4e0:	30 93 6a 28 	sts	0x286A, r19	; 0x80286a <schedule_rx_buffer+0x1>
					schedule_rx_length = payload_length;
     4e4:	80 93 6c 28 	sts	0x286C, r24	; 0x80286c <schedule_rx_length>
					uartdata = 0xAC;
     4e8:	8c ea       	ldi	r24, 0xAC	; 172
     4ea:	3f cf       	rjmp	.-386    	; 0x36a <nm_usart_protocol_handler+0xbe>
					usart_write_buffer(&uartdata, 1);
					usart_tx_complete_handler();
					rx_data = *schedule_rx_buffer;
					usart_rx_complete_handler();
				} else if ((uart_cmd.cmd & 0xFF) == WRITE_REG) {
     4ec:	41 30       	cpi	r20, 0x01	; 1
     4ee:	51 05       	cpc	r21, r1
     4f0:	61 05       	cpc	r22, r1
     4f2:	71 05       	cpc	r23, r1
     4f4:	29 f4       	brne	.+10     	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
					serial_command_pending = 1;
     4f6:	81 e0       	ldi	r24, 0x01	; 1
     4f8:	80 93 7d 28 	sts	0x287D, r24	; 0x80287d <serial_command_pending>
					usart_prot_handler_status = PROCESSING;
     4fc:	85 e0       	ldi	r24, 0x05	; 5
     4fe:	3f c0       	rjmp	.+126    	; 0x57e <__LOCK_REGION_LENGTH__+0x17e>
				} else {
					serial_command_pending = 1;
     500:	81 e0       	ldi	r24, 0x01	; 1
     502:	80 93 7d 28 	sts	0x287D, r24	; 0x80287d <serial_command_pending>
					change_state = 1;
     506:	80 93 64 28 	sts	0x2864, r24	; 0x802864 <change_state>
					new_state = PROCESSING;
     50a:	85 e0       	ldi	r24, 0x05	; 5
     50c:	80 93 65 28 	sts	0x2865, r24	; 0x802865 <new_state>
					uartdata = 0xAC;
     510:	8c ea       	ldi	r24, 0xAC	; 172
     512:	89 83       	std	Y+1, r24	; 0x01
					usart_write_buffer(&uartdata, 1);
     514:	61 e0       	ldi	r22, 0x01	; 1
     516:	ce 01       	movw	r24, r28
     518:	01 96       	adiw	r24, 0x01	; 1
     51a:	0e 94 15 01 	call	0x22a	; 0x22a <usart_write_buffer>
					usart_tx_complete_handler();
     51e:	0e 94 29 01 	call	0x252	; 0x252 <usart_tx_complete_handler>
     522:	2f c0       	rjmp	.+94     	; 0x582 <__LOCK_REGION_LENGTH__+0x182>
		}

		break;

	case COLLECTING_PAYLOAD:
		if ((event_name == USART_PKT_RECEIVED) && (schedule_rx_length == payload_length)) {
     524:	81 11       	cpse	r24, r1
     526:	0b c0       	rjmp	.+22     	; 0x53e <__LOCK_REGION_LENGTH__+0x13e>
     528:	80 91 6c 28 	lds	r24, 0x286C	; 0x80286c <schedule_rx_length>
     52c:	90 e0       	ldi	r25, 0x00	; 0
     52e:	20 91 42 28 	lds	r18, 0x2842	; 0x802842 <__data_end>
     532:	30 91 43 28 	lds	r19, 0x2843	; 0x802843 <__data_end+0x1>
     536:	82 17       	cp	r24, r18
     538:	93 07       	cpc	r25, r19
     53a:	41 f4       	brne	.+16     	; 0x54c <__LOCK_REGION_LENGTH__+0x14c>
     53c:	dc cf       	rjmp	.-72     	; 0x4f6 <__LOCK_REGION_LENGTH__+0xf6>
			serial_command_pending = 1;
			usart_prot_handler_status = PROCESSING;
		} else if (event_name == USART_ERROR_ON_RECEPTION) {
     53e:	82 30       	cpi	r24, 0x02	; 2
     540:	29 f4       	brne	.+10     	; 0x54c <__LOCK_REGION_LENGTH__+0x14c>
			usart_prot_handler_status = WAIT_SYNC;
     542:	81 e0       	ldi	r24, 0x01	; 1
     544:	80 93 66 28 	sts	0x2866, r24	; 0x802866 <usart_prot_handler_status>
			uartdata = 0xEA;
     548:	9a ee       	ldi	r25, 0xEA	; 234
     54a:	04 c0       	rjmp	.+8      	; 0x554 <__LOCK_REGION_LENGTH__+0x154>
			schedule_rx_buffer = &usart_cmd_recv_buffer[0];
			schedule_rx = 1;
			usart_write_buffer(&uartdata, schedule_rx_length);
			//usart_tx_complete_handler();
		} else {
			usart_prot_handler_status = WAIT_SYNC;
     54c:	81 e0       	ldi	r24, 0x01	; 1
     54e:	80 93 66 28 	sts	0x2866, r24	; 0x802866 <usart_prot_handler_status>
			uartdata = 0x5A;
     552:	9a e5       	ldi	r25, 0x5A	; 90
     554:	99 83       	std	Y+1, r25	; 0x01
			usart_cmd_recv_buffer[0] = 0xFF;
     556:	9f ef       	ldi	r25, 0xFF	; 255
     558:	90 93 8e 2a 	sts	0x2A8E, r25	; 0x802a8e <usart_cmd_recv_buffer>
			schedule_rx_length = 1;
     55c:	80 93 6c 28 	sts	0x286C, r24	; 0x80286c <schedule_rx_length>
			schedule_rx_buffer = &usart_cmd_recv_buffer[0];
     560:	2e e8       	ldi	r18, 0x8E	; 142
     562:	3a e2       	ldi	r19, 0x2A	; 42
     564:	20 93 69 28 	sts	0x2869, r18	; 0x802869 <schedule_rx_buffer>
     568:	30 93 6a 28 	sts	0x286A, r19	; 0x80286a <schedule_rx_buffer+0x1>
			schedule_rx = 1;
     56c:	80 93 6b 28 	sts	0x286B, r24	; 0x80286b <schedule_rx>
			usart_write_buffer(&uartdata, schedule_rx_length);
     570:	61 e0       	ldi	r22, 0x01	; 1
     572:	ce 01       	movw	r24, r28
     574:	01 96       	adiw	r24, 0x01	; 1
     576:	0e 94 15 01 	call	0x22a	; 0x22a <usart_write_buffer>
     57a:	03 c0       	rjmp	.+6      	; 0x582 <__LOCK_REGION_LENGTH__+0x182>
		}

		break;

	default:
		usart_prot_handler_status = WAIT_SYNC;
     57c:	81 e0       	ldi	r24, 0x01	; 1
     57e:	80 93 66 28 	sts	0x2866, r24	; 0x802866 <usart_prot_handler_status>
		break;
	}
	
}
     582:	0f 90       	pop	r0
     584:	df 91       	pop	r29
     586:	cf 91       	pop	r28
     588:	08 95       	ret

0000058a <main>:
 * Application entry point.
 *
 * \return program return value.
 */
int main(void)
{
     58a:	cf 92       	push	r12
     58c:	df 92       	push	r13
     58e:	ef 92       	push	r14
     590:	ff 92       	push	r15
     592:	0f 93       	push	r16
     594:	1f 93       	push	r17
     596:	cf 93       	push	r28
     598:	df 93       	push	r29
     59a:	1f 92       	push	r1
     59c:	cd b7       	in	r28, 0x3d	; 61
     59e:	de b7       	in	r29, 0x3e	; 62
	/* Initialize the system. */
	system_init();
     5a0:	0e 94 a4 04 	call	0x948	; 0x948 <system_init>
	USART_0_set_ISR_cb(&usart_receive_handler, RX_CB);
     5a4:	61 e0       	ldi	r22, 0x01	; 1
     5a6:	86 ef       	ldi	r24, 0xF6	; 246
     5a8:	90 e0       	ldi	r25, 0x00	; 0
     5aa:	0e 94 16 08 	call	0x102c	; 0x102c <USART_0_set_ISR_cb>
	
	do {
		(void)USART2.RXDATAL;
     5ae:	80 91 40 08 	lds	r24, 0x0840	; 0x800840 <__TEXT_REGION_LENGTH__+0x700840>
	} while ((USART2.STATUS & USART_RXCIF_bm) != 0);
     5b2:	80 91 44 08 	lds	r24, 0x0844	; 0x800844 <__TEXT_REGION_LENGTH__+0x700844>
     5b6:	87 fd       	sbrc	r24, 7
     5b8:	fa cf       	rjmp	.-12     	; 0x5ae <main+0x24>
	USART2.CTRLA |=  1 << USART_RXCIE_bp;// | 1 << USART_TXCIE_bp;
     5ba:	80 91 45 08 	lds	r24, 0x0845	; 0x800845 <__TEXT_REGION_LENGTH__+0x700845>
     5be:	80 68       	ori	r24, 0x80	; 128
     5c0:	80 93 45 08 	sts	0x0845, r24	; 0x800845 <__TEXT_REGION_LENGTH__+0x700845>
	schedule_rx_length = 1;
     5c4:	81 e0       	ldi	r24, 0x01	; 1
     5c6:	80 93 6c 28 	sts	0x286C, r24	; 0x80286c <schedule_rx_length>
	//usart_read_buffer(&usart_cmd_recv_buffer[0], schedule_rx_length);
	/* Initialize the UART console. */
	usart_tx_complete_handler();
     5ca:	0e 94 29 01 	call	0x252	; 0x252 <usart_tx_complete_handler>
	rx_data = *schedule_rx_buffer;
     5ce:	e0 91 69 28 	lds	r30, 0x2869	; 0x802869 <schedule_rx_buffer>
     5d2:	f0 91 6a 28 	lds	r31, 0x286A	; 0x80286a <schedule_rx_buffer+0x1>
     5d6:	80 81       	ld	r24, Z
     5d8:	80 93 44 28 	sts	0x2844, r24	; 0x802844 <rx_data>
	usart_rx_complete_handler();
     5dc:	0e 94 42 01 	call	0x284	; 0x284 <usart_rx_complete_handler>
	
	/* Initialize WINC IOs. */
	nm_bsp_init();
     5e0:	0e 94 29 09 	call	0x1252	; 0x1252 <nm_bsp_init>
static sint8 enter_wifi_firmware_download(void)
{
	uint8_t uartdata;
	sint8 ret;
	
	ret = m2m_wifi_download_mode();
     5e4:	0e 94 9d 09 	call	0x133a	; 0x133a <m2m_wifi_download_mode>
	if (ret != M2M_SUCCESS) {
     5e8:	81 11       	cpse	r24, r1
     5ea:	13 c1       	rjmp	.+550    	; 0x812 <main+0x288>
				break;

			case READ_BUFF:
				/* Translate it to SPI Read buffer command. */
				nm_read_block(uart_cmd.addr, (uint8 *)&usart_payload_buffer[0], ((uart_cmd.cmd >> 16) & 0xFFFF));
				schedule_rx_buffer = &usart_cmd_recv_buffer[0];
     5ec:	3e e8       	ldi	r19, 0x8E	; 142
     5ee:	c3 2e       	mov	r12, r19
     5f0:	3a e2       	ldi	r19, 0x2A	; 42
     5f2:	d3 2e       	mov	r13, r19
				schedule_rx_length = 1;
     5f4:	ff 24       	eor	r15, r15
     5f6:	f3 94       	inc	r15
				/* Translate it to SPI Write buffer command. */
				nm_write_block(uart_cmd.addr, (uint8 *)&usart_payload_buffer[0], ((uart_cmd.cmd >> 16) & 0xFFFF));
				schedule_rx_buffer = &usart_cmd_recv_buffer[0];
				schedule_rx_length = 1;
				schedule_rx = 1;
				uartdata = 0xAC;
     5f8:	4c ea       	ldi	r20, 0xAC	; 172
     5fa:	e4 2e       	mov	r14, r20
		return M2M_ERR_INIT;
	}

	/* Process UART input command and forward to SPI. */
	while (1) {
		if (USART_0_is_rx_ready() && !usart_pkt_received && !usart_err_on_reception)
     5fc:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <USART_0_is_rx_ready>
     600:	88 23       	and	r24, r24
     602:	71 f0       	breq	.+28     	; 0x620 <main+0x96>
     604:	80 91 7c 28 	lds	r24, 0x287C	; 0x80287c <usart_pkt_received>
     608:	81 11       	cpse	r24, r1
     60a:	0a c0       	rjmp	.+20     	; 0x620 <main+0x96>
     60c:	80 91 7b 28 	lds	r24, 0x287B	; 0x80287b <usart_err_on_reception>
     610:	81 11       	cpse	r24, r1
     612:	06 c0       	rjmp	.+12     	; 0x620 <main+0x96>
		{
			rx_data = USART_0_read();
     614:	0e 94 81 08 	call	0x1102	; 0x1102 <USART_0_read>
     618:	80 93 44 28 	sts	0x2844, r24	; 0x802844 <rx_data>
			usart_rx_complete_handler();	
     61c:	0e 94 42 01 	call	0x284	; 0x284 <usart_rx_complete_handler>
		}
		
		if (usart_pkt_received) {
     620:	80 91 7c 28 	lds	r24, 0x287C	; 0x80287c <usart_pkt_received>
     624:	88 23       	and	r24, r24
     626:	29 f0       	breq	.+10     	; 0x632 <main+0xa8>
			usart_pkt_received = 0;
     628:	10 92 7c 28 	sts	0x287C, r1	; 0x80287c <usart_pkt_received>
			nm_usart_protocol_handler(USART_PKT_RECEIVED);
     62c:	80 e0       	ldi	r24, 0x00	; 0
     62e:	0e 94 56 01 	call	0x2ac	; 0x2ac <nm_usart_protocol_handler>
		}

		if (usart_err_on_reception) {
     632:	80 91 7b 28 	lds	r24, 0x287B	; 0x80287b <usart_err_on_reception>
     636:	88 23       	and	r24, r24
     638:	29 f0       	breq	.+10     	; 0x644 <main+0xba>
			usart_err_on_reception = 0;
     63a:	10 92 7b 28 	sts	0x287B, r1	; 0x80287b <usart_err_on_reception>
			nm_usart_protocol_handler(USART_ERROR_ON_RECEPTION);
     63e:	82 e0       	ldi	r24, 0x02	; 2
     640:	0e 94 56 01 	call	0x2ac	; 0x2ac <nm_usart_protocol_handler>
		}

		if (serial_command_pending && (usart_prot_handler_status == PROCESSING)) {
     644:	80 91 7d 28 	lds	r24, 0x287D	; 0x80287d <serial_command_pending>
     648:	88 23       	and	r24, r24
     64a:	c1 f2       	breq	.-80     	; 0x5fc <main+0x72>
     64c:	80 91 66 28 	lds	r24, 0x2866	; 0x802866 <usart_prot_handler_status>
     650:	85 30       	cpi	r24, 0x05	; 5
     652:	a1 f6       	brne	.-88     	; 0x5fc <main+0x72>
			uint32_t temp;
			switch ((uart_cmd.cmd) & 0xFF) {
     654:	00 91 6d 28 	lds	r16, 0x286D	; 0x80286d <uart_cmd>
     658:	10 91 6e 28 	lds	r17, 0x286E	; 0x80286e <uart_cmd+0x1>
     65c:	20 91 6f 28 	lds	r18, 0x286F	; 0x80286f <uart_cmd+0x2>
     660:	30 91 70 28 	lds	r19, 0x2870	; 0x802870 <uart_cmd+0x3>
     664:	d9 01       	movw	r26, r18
     666:	c8 01       	movw	r24, r16
     668:	99 27       	eor	r25, r25
     66a:	aa 27       	eor	r26, r26
     66c:	bb 27       	eor	r27, r27
     66e:	82 30       	cpi	r24, 0x02	; 2
     670:	91 05       	cpc	r25, r1
     672:	a1 05       	cpc	r26, r1
     674:	b1 05       	cpc	r27, r1
     676:	09 f4       	brne	.+2      	; 0x67a <main+0xf0>
     678:	4d c0       	rjmp	.+154    	; 0x714 <main+0x18a>
     67a:	e0 f4       	brcc	.+56     	; 0x6b4 <main+0x12a>
     67c:	00 97       	sbiw	r24, 0x00	; 0
     67e:	a1 05       	cpc	r26, r1
     680:	b1 05       	cpc	r27, r1
     682:	41 f1       	breq	.+80     	; 0x6d4 <main+0x14a>
     684:	01 97       	sbiw	r24, 0x01	; 1
     686:	a1 05       	cpc	r26, r1
     688:	b1 05       	cpc	r27, r1
     68a:	09 f0       	breq	.+2      	; 0x68e <main+0x104>
     68c:	bf c0       	rjmp	.+382    	; 0x80c <main+0x282>
				usart_rx_complete_handler();
				break;

			case WRITE_REG:
				/* Translate it to SPI Write register command. */
				nm_write_reg(uart_cmd.addr, uart_cmd.val);
     68e:	20 91 75 28 	lds	r18, 0x2875	; 0x802875 <uart_cmd+0x8>
     692:	30 91 76 28 	lds	r19, 0x2876	; 0x802876 <uart_cmd+0x9>
     696:	40 91 77 28 	lds	r20, 0x2877	; 0x802877 <uart_cmd+0xa>
     69a:	50 91 78 28 	lds	r21, 0x2878	; 0x802878 <uart_cmd+0xb>
     69e:	60 91 71 28 	lds	r22, 0x2871	; 0x802871 <uart_cmd+0x4>
     6a2:	70 91 72 28 	lds	r23, 0x2872	; 0x802872 <uart_cmd+0x5>
     6a6:	80 91 73 28 	lds	r24, 0x2873	; 0x802873 <uart_cmd+0x6>
     6aa:	90 91 74 28 	lds	r25, 0x2874	; 0x802874 <uart_cmd+0x7>
     6ae:	0e 94 9f 0b 	call	0x173e	; 0x173e <nm_write_reg>
     6b2:	66 c0       	rjmp	.+204    	; 0x780 <main+0x1f6>
			nm_usart_protocol_handler(USART_ERROR_ON_RECEPTION);
		}

		if (serial_command_pending && (usart_prot_handler_status == PROCESSING)) {
			uint32_t temp;
			switch ((uart_cmd.cmd) & 0xFF) {
     6b4:	83 30       	cpi	r24, 0x03	; 3
     6b6:	91 05       	cpc	r25, r1
     6b8:	a1 05       	cpc	r26, r1
     6ba:	b1 05       	cpc	r27, r1
     6bc:	09 f4       	brne	.+2      	; 0x6c0 <main+0x136>
     6be:	51 c0       	rjmp	.+162    	; 0x762 <main+0x1d8>
     6c0:	05 97       	sbiw	r24, 0x05	; 5
     6c2:	a1 05       	cpc	r26, r1
     6c4:	b1 05       	cpc	r27, r1
     6c6:	09 f0       	breq	.+2      	; 0x6ca <main+0x140>
     6c8:	a1 c0       	rjmp	.+322    	; 0x80c <main+0x282>
				usart_rx_complete_handler();
				break;

			case RECONFIGURE_UART:
				/* Send ACK. */
				usart_prot_handler_status = WAIT_SYNC;
     6ca:	f0 92 66 28 	sts	0x2866, r15	; 0x802866 <usart_prot_handler_status>
				uart_reconfigure = 1;
     6ce:	f0 92 63 28 	sts	0x2863, r15	; 0x802863 <uart_reconfigure>
     6d2:	70 c0       	rjmp	.+224    	; 0x7b4 <main+0x22a>
			uint32_t temp;
			switch ((uart_cmd.cmd) & 0xFF) {
			/* Forward it to SPI. */
			case READ_REG:
				/* Translate it to SPI Read register command. */
				temp = nm_read_reg(uart_cmd.addr);
     6d4:	60 91 71 28 	lds	r22, 0x2871	; 0x802871 <uart_cmd+0x4>
     6d8:	70 91 72 28 	lds	r23, 0x2872	; 0x802872 <uart_cmd+0x5>
     6dc:	80 91 73 28 	lds	r24, 0x2873	; 0x802873 <uart_cmd+0x6>
     6e0:	90 91 74 28 	lds	r25, 0x2874	; 0x802874 <uart_cmd+0x7>
     6e4:	0e 94 9b 0b 	call	0x1736	; 0x1736 <nm_read_reg>
				usart_tx_buffer[0] = (uint8)(temp >> 0);
				usart_tx_buffer[1] = (uint8)(temp >> 8);
				usart_tx_buffer[2] = (uint8)(temp >> 16);
				usart_tx_buffer[3] = (uint8)(temp >> 24);
				schedule_rx_buffer = &usart_cmd_recv_buffer[0];
     6e8:	c0 92 69 28 	sts	0x2869, r12	; 0x802869 <schedule_rx_buffer>
     6ec:	d0 92 6a 28 	sts	0x286A, r13	; 0x80286a <schedule_rx_buffer+0x1>
				schedule_rx_length = 1;
     6f0:	f0 92 6c 28 	sts	0x286C, r15	; 0x80286c <schedule_rx_length>
				schedule_rx = 1;
     6f4:	f0 92 6b 28 	sts	0x286B, r15	; 0x80286b <schedule_rx>
				usart_prot_handler_status = WAIT_SYNC;
     6f8:	f0 92 66 28 	sts	0x2866, r15	; 0x802866 <usart_prot_handler_status>
static void nm_usart_send_regval(uint8_t *tx_data, uint16_t length)
{
	uint8_t temp, i, j;
	for (i = 0, j = (length - 1); i < j; i++, j--) {
		temp = tx_data[i];
		tx_data[i] = tx_data[j];
     6fc:	90 93 7e 28 	sts	0x287E, r25	; 0x80287e <usart_tx_buffer>
		tx_data[j] = temp;
     700:	60 93 81 28 	sts	0x2881, r22	; 0x802881 <usart_tx_buffer+0x3>
static void nm_usart_send_regval(uint8_t *tx_data, uint16_t length)
{
	uint8_t temp, i, j;
	for (i = 0, j = (length - 1); i < j; i++, j--) {
		temp = tx_data[i];
		tx_data[i] = tx_data[j];
     704:	80 93 7f 28 	sts	0x287F, r24	; 0x80287f <usart_tx_buffer+0x1>
		tx_data[j] = temp;
     708:	70 93 80 28 	sts	0x2880, r23	; 0x802880 <usart_tx_buffer+0x2>
	}
	usart_write_buffer(tx_data, length);
     70c:	64 e0       	ldi	r22, 0x04	; 4
     70e:	8e e7       	ldi	r24, 0x7E	; 126
     710:	98 e2       	ldi	r25, 0x28	; 40
     712:	44 c0       	rjmp	.+136    	; 0x79c <main+0x212>
				usart_rx_complete_handler();
				break;

			case READ_BUFF:
				/* Translate it to SPI Read buffer command. */
				nm_read_block(uart_cmd.addr, (uint8 *)&usart_payload_buffer[0], ((uart_cmd.cmd >> 16) & 0xFFFF));
     714:	89 01       	movw	r16, r18
     716:	22 27       	eor	r18, r18
     718:	33 27       	eor	r19, r19
     71a:	60 91 71 28 	lds	r22, 0x2871	; 0x802871 <uart_cmd+0x4>
     71e:	70 91 72 28 	lds	r23, 0x2872	; 0x802872 <uart_cmd+0x5>
     722:	80 91 73 28 	lds	r24, 0x2873	; 0x802873 <uart_cmd+0x6>
     726:	90 91 74 28 	lds	r25, 0x2874	; 0x802874 <uart_cmd+0x7>
     72a:	4e e8       	ldi	r20, 0x8E	; 142
     72c:	58 e2       	ldi	r21, 0x28	; 40
     72e:	0e 94 a1 0b 	call	0x1742	; 0x1742 <nm_read_block>
				schedule_rx_buffer = &usart_cmd_recv_buffer[0];
     732:	c0 92 69 28 	sts	0x2869, r12	; 0x802869 <schedule_rx_buffer>
     736:	d0 92 6a 28 	sts	0x286A, r13	; 0x80286a <schedule_rx_buffer+0x1>
				schedule_rx_length = 1;
     73a:	f0 92 6c 28 	sts	0x286C, r15	; 0x80286c <schedule_rx_length>
				schedule_rx = 1;
     73e:	f0 92 6b 28 	sts	0x286B, r15	; 0x80286b <schedule_rx>
				usart_prot_handler_status = WAIT_SYNC;
     742:	f0 92 66 28 	sts	0x2866, r15	; 0x802866 <usart_prot_handler_status>
				usart_write_buffer((uint8 *)&usart_payload_buffer[0], ((uart_cmd.cmd >> 16) & 0xFFFF));
     746:	80 91 6d 28 	lds	r24, 0x286D	; 0x80286d <uart_cmd>
     74a:	90 91 6e 28 	lds	r25, 0x286E	; 0x80286e <uart_cmd+0x1>
     74e:	a0 91 6f 28 	lds	r26, 0x286F	; 0x80286f <uart_cmd+0x2>
     752:	b0 91 70 28 	lds	r27, 0x2870	; 0x802870 <uart_cmd+0x3>
     756:	bd 01       	movw	r22, r26
     758:	88 27       	eor	r24, r24
     75a:	99 27       	eor	r25, r25
     75c:	8e e8       	ldi	r24, 0x8E	; 142
     75e:	98 e2       	ldi	r25, 0x28	; 40
     760:	1d c0       	rjmp	.+58     	; 0x79c <main+0x212>
				usart_rx_complete_handler();
				break;

			case WRITE_BUFF:
				/* Translate it to SPI Write buffer command. */
				nm_write_block(uart_cmd.addr, (uint8 *)&usart_payload_buffer[0], ((uart_cmd.cmd >> 16) & 0xFFFF));
     762:	89 01       	movw	r16, r18
     764:	22 27       	eor	r18, r18
     766:	33 27       	eor	r19, r19
     768:	60 91 71 28 	lds	r22, 0x2871	; 0x802871 <uart_cmd+0x4>
     76c:	70 91 72 28 	lds	r23, 0x2872	; 0x802872 <uart_cmd+0x5>
     770:	80 91 73 28 	lds	r24, 0x2873	; 0x802873 <uart_cmd+0x6>
     774:	90 91 74 28 	lds	r25, 0x2874	; 0x802874 <uart_cmd+0x7>
     778:	4e e8       	ldi	r20, 0x8E	; 142
     77a:	58 e2       	ldi	r21, 0x28	; 40
     77c:	0e 94 1e 0c 	call	0x183c	; 0x183c <nm_write_block>
				schedule_rx_buffer = &usart_cmd_recv_buffer[0];
     780:	c0 92 69 28 	sts	0x2869, r12	; 0x802869 <schedule_rx_buffer>
     784:	d0 92 6a 28 	sts	0x286A, r13	; 0x80286a <schedule_rx_buffer+0x1>
				schedule_rx_length = 1;
     788:	f0 92 6c 28 	sts	0x286C, r15	; 0x80286c <schedule_rx_length>
				schedule_rx = 1;
     78c:	f0 92 6b 28 	sts	0x286B, r15	; 0x80286b <schedule_rx>
				uartdata = 0xAC;
     790:	e9 82       	std	Y+1, r14	; 0x01
				usart_prot_handler_status = WAIT_SYNC;
     792:	f0 92 66 28 	sts	0x2866, r15	; 0x802866 <usart_prot_handler_status>
				usart_write_buffer(&uartdata, schedule_rx_length);
     796:	61 e0       	ldi	r22, 0x01	; 1
     798:	ce 01       	movw	r24, r28
     79a:	01 96       	adiw	r24, 0x01	; 1
     79c:	0e 94 15 01 	call	0x22a	; 0x22a <usart_write_buffer>
				usart_tx_complete_handler();
     7a0:	0e 94 29 01 	call	0x252	; 0x252 <usart_tx_complete_handler>
				rx_data = *schedule_rx_buffer;
     7a4:	e0 91 69 28 	lds	r30, 0x2869	; 0x802869 <schedule_rx_buffer>
     7a8:	f0 91 6a 28 	lds	r31, 0x286A	; 0x80286a <schedule_rx_buffer+0x1>
     7ac:	80 81       	ld	r24, Z
     7ae:	80 93 44 28 	sts	0x2844, r24	; 0x802844 <rx_data>
     7b2:	2a c0       	rjmp	.+84     	; 0x808 <main+0x27e>

			case RECONFIGURE_UART:
				/* Send ACK. */
				usart_prot_handler_status = WAIT_SYNC;
				uart_reconfigure = 1;
				while(!USART_0_is_tx_ready());
     7b4:	0e 94 73 08 	call	0x10e6	; 0x10e6 <USART_0_is_tx_ready>
     7b8:	88 23       	and	r24, r24
     7ba:	e1 f3       	breq	.-8      	; 0x7b4 <main+0x22a>
				USART2.BAUD = (uint16_t)USART2_BAUD_RATE(uart_cmd.val);
     7bc:	60 91 75 28 	lds	r22, 0x2875	; 0x802875 <uart_cmd+0x8>
     7c0:	70 91 76 28 	lds	r23, 0x2876	; 0x802876 <uart_cmd+0x9>
     7c4:	80 91 77 28 	lds	r24, 0x2877	; 0x802877 <uart_cmd+0xa>
     7c8:	90 91 78 28 	lds	r25, 0x2878	; 0x802878 <uart_cmd+0xb>
     7cc:	0e 94 5b 12 	call	0x24b6	; 0x24b6 <__floatunsisf>
     7d0:	20 e0       	ldi	r18, 0x00	; 0
     7d2:	30 e0       	ldi	r19, 0x00	; 0
     7d4:	40 e8       	ldi	r20, 0x80	; 128
     7d6:	51 e4       	ldi	r21, 0x41	; 65
     7d8:	0e 94 e9 12 	call	0x25d2	; 0x25d2 <__mulsf3>
     7dc:	9b 01       	movw	r18, r22
     7de:	ac 01       	movw	r20, r24
     7e0:	60 e8       	ldi	r22, 0x80	; 128
     7e2:	76 e9       	ldi	r23, 0x96	; 150
     7e4:	88 e1       	ldi	r24, 0x18	; 24
     7e6:	9e e4       	ldi	r25, 0x4E	; 78
     7e8:	0e 94 ba 11 	call	0x2374	; 0x2374 <__divsf3>
     7ec:	20 e0       	ldi	r18, 0x00	; 0
     7ee:	30 e0       	ldi	r19, 0x00	; 0
     7f0:	40 e0       	ldi	r20, 0x00	; 0
     7f2:	5f e3       	ldi	r21, 0x3F	; 63
     7f4:	0e 94 4e 11 	call	0x229c	; 0x229c <__addsf3>
     7f8:	0e 94 2c 12 	call	0x2458	; 0x2458 <__fixunssfsi>
     7fc:	60 93 48 08 	sts	0x0848, r22	; 0x800848 <__TEXT_REGION_LENGTH__+0x700848>
     800:	70 93 49 08 	sts	0x0849, r23	; 0x800849 <__TEXT_REGION_LENGTH__+0x700849>
				//do {
				//	(void)USART2.RXDATAL;
				//} while ((USART2.STATUS & USART_RXCIF_bm) != 0);
				//USART2.CTRLA |=  1 << USART_RXCIE_bp;// | 1 << USART_TXCIE_bp;*/
				rx_data = 0;
     804:	10 92 44 28 	sts	0x2844, r1	; 0x802844 <rx_data>
				usart_rx_complete_handler();
     808:	0e 94 42 01 	call	0x284	; 0x284 <usart_rx_complete_handler>

			default:
				break;
			}
			
			serial_command_pending = 0;
     80c:	10 92 7d 28 	sts	0x287D, r1	; 0x80287d <serial_command_pending>
     810:	f5 ce       	rjmp	.-534    	; 0x5fc <main+0x72>
	uint8_t uartdata;
	sint8 ret;
	
	ret = m2m_wifi_download_mode();
	if (ret != M2M_SUCCESS) {
		puts("Failed to put the WiFi Chip in download mode!\n");
     812:	8c e1       	ldi	r24, 0x1C	; 28
     814:	97 e6       	ldi	r25, 0x67	; 103
     816:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <puts>
	nm_bsp_init();
	/* Enter WiFi firmware download mode. */
	enter_wifi_firmware_download();

	return 0;
}
     81a:	80 e0       	ldi	r24, 0x00	; 0
     81c:	90 e0       	ldi	r25, 0x00	; 0
     81e:	0f 90       	pop	r0
     820:	df 91       	pop	r29
     822:	cf 91       	pop	r28
     824:	1f 91       	pop	r17
     826:	0f 91       	pop	r16
     828:	ff 90       	pop	r15
     82a:	ef 90       	pop	r14
     82c:	df 90       	pop	r13
     82e:	cf 90       	pop	r12
     830:	08 95       	ret

00000832 <ADC_0_init>:

	// ADC0.CALIB = ADC_DUTYCYC_DUTY50_gc; /* 50% Duty cycle */

	// ADC0.CTRLB = ADC_SAMPNUM_ACC1_gc; /* 1 ADC sample */

	ADC0.CTRLC = ADC_PRESC_DIV16_gc     /* CLK_PER divided by 16 */
     832:	e0 e0       	ldi	r30, 0x00	; 0
     834:	f6 e0       	ldi	r31, 0x06	; 6
     836:	83 e1       	ldi	r24, 0x13	; 19
     838:	82 83       	std	Z+2, r24	; 0x02
	// ADC0.EVCTRL = 0 << ADC_STARTEI_bp; /* Start Event Input Enable: disabled */

	// ADC0.INTCTRL = 0 << ADC_RESRDY_bp /* Result Ready Interrupt Enable: disabled */
	//		 | 0 << ADC_WCMP_bp; /* Window Comparator Interrupt Enable: disabled */

	ADC0.MUXPOS = ADC_MUXPOS_AIN5_gc; /* ADC input pin 5 */
     83a:	85 e0       	ldi	r24, 0x05	; 5
     83c:	86 83       	std	Z+6, r24	; 0x06

	// ADC0.WINHT = 0x0; /* Window Comparator High Threshold: 0x0 */

	// ADC0.WINLT = 0x0; /* Window Comparator Low Threshold: 0x0 */

	ADC0.CTRLA = 1 << ADC_ENABLE_bp     /* ADC Enable: enabled */
     83e:	81 e0       	ldi	r24, 0x01	; 1
     840:	80 83       	st	Z, r24
	             | 0 << ADC_FREERUN_bp  /* ADC Freerun mode: disabled */
	             | ADC_RESSEL_10BIT_gc  /* 10-bit mode */
	             | 0 << ADC_RUNSTBY_bp; /* Run standby mode: disabled */

	return 0;
}
     842:	80 e0       	ldi	r24, 0x00	; 0
     844:	08 95       	ret

00000846 <BOD_init>:
	//		 | BOD_VLMCFG_ABOVE_gc; /* Interrupt when supply goes above VLM level */

	// BOD.VLMCTRLA = BOD_VLMLVL_5ABOVE_gc; /* VLM threshold 5% above BOD level */

	return 0;
}
     846:	80 e0       	ldi	r24, 0x00	; 0
     848:	08 95       	ret

0000084a <CLKCTRL_init>:
 *       on calling convention. The memory model is not visible to the
 *       preprocessor, so it must be defined in the Assembler preprocessor directives.
 */
static inline void ccp_write_io(void *addr, uint8_t value)
{
	protected_write_io(addr, CCP_IOREG_gc, value);
     84a:	41 e0       	ldi	r20, 0x01	; 1
     84c:	68 ed       	ldi	r22, 0xD8	; 216
     84e:	81 e6       	ldi	r24, 0x61	; 97
     850:	90 e0       	ldi	r25, 0x00	; 0
     852:	0e 94 a0 06 	call	0xd40	; 0xd40 <protected_write_io>
	//		 | 0 << CLKCTRL_CLKOUT_bp /* System clock out: disabled */);

	// ccp_write_io((void*)&(CLKCTRL.MCLKLOCK),0 << CLKCTRL_LOCKEN_bp /* lock enable: disabled */);

	return 0;
}
     856:	80 e0       	ldi	r24, 0x00	; 0
     858:	08 95       	ret

0000085a <CPUINT_init>:

	// CPUINT.LVL0PRI = 0x0 << CPUINT_LVL0PRI_gp; /* Interrupt Level Priority: 0x0 */

	// CPUINT.LVL1VEC = 0x0 << CPUINT_LVL1VEC_gp; /* Interrupt Vector with High Priority: 0x0 */

	ENABLE_INTERRUPTS();
     85a:	78 94       	sei

	return 0;
}
     85c:	80 e0       	ldi	r24, 0x00	; 0
     85e:	08 95       	ret

00000860 <mcu_init>:
#ifdef __cplusplus
extern "C" {
#endif

void mcu_init(void)
{
     860:	e0 e1       	ldi	r30, 0x10	; 16
     862:	f4 e0       	ldi	r31, 0x04	; 4
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     864:	80 81       	ld	r24, Z
     866:	88 60       	ori	r24, 0x08	; 8
     868:	81 93       	st	Z+, r24
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
     86a:	e8 31       	cpi	r30, 0x18	; 24
     86c:	84 e0       	ldi	r24, 0x04	; 4
     86e:	f8 07       	cpc	r31, r24
     870:	c9 f7       	brne	.-14     	; 0x864 <mcu_init+0x4>
     872:	e0 e3       	ldi	r30, 0x30	; 48
     874:	f4 e0       	ldi	r31, 0x04	; 4
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     876:	80 81       	ld	r24, Z
     878:	88 60       	ori	r24, 0x08	; 8
     87a:	81 93       	st	Z+, r24

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     87c:	e8 33       	cpi	r30, 0x38	; 56
     87e:	84 e0       	ldi	r24, 0x04	; 4
     880:	f8 07       	cpc	r31, r24
     882:	c9 f7       	brne	.-14     	; 0x876 <mcu_init+0x16>
     884:	e0 e5       	ldi	r30, 0x50	; 80
     886:	f4 e0       	ldi	r31, 0x04	; 4
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     888:	80 81       	ld	r24, Z
     88a:	88 60       	ori	r24, 0x08	; 8
     88c:	81 93       	st	Z+, r24

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     88e:	e8 35       	cpi	r30, 0x58	; 88
     890:	84 e0       	ldi	r24, 0x04	; 4
     892:	f8 07       	cpc	r31, r24
     894:	c9 f7       	brne	.-14     	; 0x888 <mcu_init+0x28>
     896:	e0 e7       	ldi	r30, 0x70	; 112
     898:	f4 e0       	ldi	r31, 0x04	; 4
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     89a:	80 81       	ld	r24, Z
     89c:	88 60       	ori	r24, 0x08	; 8
     89e:	81 93       	st	Z+, r24

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     8a0:	e8 37       	cpi	r30, 0x78	; 120
     8a2:	84 e0       	ldi	r24, 0x04	; 4
     8a4:	f8 07       	cpc	r31, r24
     8a6:	c9 f7       	brne	.-14     	; 0x89a <mcu_init+0x3a>
     8a8:	e0 e9       	ldi	r30, 0x90	; 144
     8aa:	f4 e0       	ldi	r31, 0x04	; 4
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     8ac:	80 81       	ld	r24, Z
     8ae:	88 60       	ori	r24, 0x08	; 8
     8b0:	81 93       	st	Z+, r24

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     8b2:	e8 39       	cpi	r30, 0x98	; 152
     8b4:	84 e0       	ldi	r24, 0x04	; 4
     8b6:	f8 07       	cpc	r31, r24
     8b8:	c9 f7       	brne	.-14     	; 0x8ac <mcu_init+0x4c>
     8ba:	e0 eb       	ldi	r30, 0xB0	; 176
     8bc:	f4 e0       	ldi	r31, 0x04	; 4
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     8be:	80 81       	ld	r24, Z
     8c0:	88 60       	ori	r24, 0x08	; 8
     8c2:	81 93       	st	Z+, r24

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     8c4:	e8 3b       	cpi	r30, 0xB8	; 184
     8c6:	84 e0       	ldi	r24, 0x04	; 4
     8c8:	f8 07       	cpc	r31, r24
     8ca:	c9 f7       	brne	.-14     	; 0x8be <mcu_init+0x5e>
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}
}
     8cc:	08 95       	ret

000008ce <ADC_0_initialization>:
 */
static inline void PORTD_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTD + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
     8ce:	e5 e7       	ldi	r30, 0x75	; 117
     8d0:	f4 e0       	ldi	r31, 0x04	; 4
     8d2:	80 81       	ld	r24, Z
     8d4:	88 7f       	andi	r24, 0xF8	; 248
     8d6:	84 60       	ori	r24, 0x04	; 4
     8d8:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTD + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     8da:	80 81       	ld	r24, Z
     8dc:	87 7f       	andi	r24, 0xF7	; 247
     8de:	80 83       	st	Z, r24
	// Disable digital input buffer
	PD5_set_isc(PORT_ISC_INPUT_DISABLE_gc);
	// Disable pull-up resistor
	PD5_set_pull_mode(PORT_PULL_OFF);

	ADC_0_init();
     8e0:	0c 94 19 04 	jmp	0x832	; 0x832 <ADC_0_init>

000008e4 <USART_0_initialization>:
 */
static inline void PORTF_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTF.DIR &= ~(1 << pin);
     8e4:	a1 98       	cbi	0x14, 1	; 20
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTF + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     8e6:	e1 eb       	ldi	r30, 0xB1	; 177
     8e8:	f4 e0       	ldi	r31, 0x04	; 4
     8ea:	80 81       	ld	r24, Z
     8ec:	87 7f       	andi	r24, 0xF7	; 247
     8ee:	80 83       	st	Z, r24
	switch (dir) {
	case PORT_DIR_IN:
		VPORTF.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTF.DIR |= (1 << pin);
     8f0:	a0 9a       	sbi	0x14, 0	; 20
 *                  false = Pin level set to "low" state
 */
static inline void PORTF_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTF.OUT |= (1 << pin);
     8f2:	a8 9a       	sbi	0x15, 0	; 21
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    true);

	USART_0_init();
     8f4:	0c 94 be 08 	jmp	0x117c	; 0x117c <USART_0_init>

000008f8 <SPI_0_initialization>:
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
     8f8:	05 98       	cbi	0x00, 5	; 0
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     8fa:	e5 e1       	ldi	r30, 0x15	; 21
     8fc:	f4 e0       	ldi	r31, 0x04	; 4
     8fe:	80 81       	ld	r24, Z
     900:	87 7f       	andi	r24, 0xF7	; 247
     902:	80 83       	st	Z, r24
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
     904:	04 9a       	sbi	0x00, 4	; 0
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
     906:	0c 98       	cbi	0x01, 4	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
     908:	06 9a       	sbi	0x00, 6	; 0
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
     90a:	0e 98       	cbi	0x01, 6	; 1
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	SPI_0_init();
     90c:	0c 94 a7 06 	jmp	0xd4e	; 0xd4e <SPI_0_init>

00000910 <I2C_0_initialization>:
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
     910:	03 9a       	sbi	0x00, 3	; 0
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
     912:	0b 98       	cbi	0x01, 3	; 1
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     914:	e3 e1       	ldi	r30, 0x13	; 19
     916:	f4 e0       	ldi	r31, 0x04	; 4
     918:	80 81       	ld	r24, Z
     91a:	87 7f       	andi	r24, 0xF7	; 247
     91c:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (inverted) {
		*port_pin_ctrl |= PORT_INVEN_bm;
	} else {
		*port_pin_ctrl &= ~PORT_INVEN_bm;
     91e:	80 81       	ld	r24, Z
     920:	8f 77       	andi	r24, 0x7F	; 127
     922:	80 83       	st	Z, r24
 */
static inline void PORTA_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
     924:	80 81       	ld	r24, Z
     926:	88 7f       	andi	r24, 0xF8	; 248
     928:	80 83       	st	Z, r24
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
     92a:	02 9a       	sbi	0x00, 2	; 0
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
     92c:	0a 98       	cbi	0x01, 2	; 1
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     92e:	e2 e1       	ldi	r30, 0x12	; 18
     930:	f4 e0       	ldi	r31, 0x04	; 4
     932:	80 81       	ld	r24, Z
     934:	87 7f       	andi	r24, 0xF7	; 247
     936:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (inverted) {
		*port_pin_ctrl |= PORT_INVEN_bm;
	} else {
		*port_pin_ctrl &= ~PORT_INVEN_bm;
     938:	80 81       	ld	r24, Z
     93a:	8f 77       	andi	r24, 0x7F	; 127
     93c:	80 83       	st	Z, r24
 */
static inline void PORTA_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
     93e:	80 81       	ld	r24, Z
     940:	88 7f       	andi	r24, 0xF8	; 248
     942:	80 83       	st	Z, r24
	    // <PORT_ISC_FALLING_gc"> Sense Falling Edge
	    // <PORT_ISC_INPUT_DISABLE_gc"> Digital Input Buffer disabled
	    // <PORT_ISC_LEVEL_gc"> Sense low Level
	    PORT_ISC_INTDISABLE_gc);

	I2C_0_init();
     944:	0c 94 74 06 	jmp	0xce8	; 0xce8 <I2C_0_init>

00000948 <system_init>:
/**
 * \brief System initialization
 */
void system_init()
{
	mcu_init();
     948:	0e 94 30 04 	call	0x860	; 0x860 <mcu_init>
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
     94c:	01 9a       	sbi	0x00, 1	; 0
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
     94e:	09 98       	cbi	0x01, 1	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
     950:	07 9a       	sbi	0x00, 7	; 0
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
     952:	0f 9a       	sbi	0x01, 7	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTD.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTD.DIR |= (1 << pin);
     954:	60 9a       	sbi	0x0c, 0	; 12
 *                  false = Pin level set to "low" state
 */
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTD.OUT |= (1 << pin);
     956:	68 9a       	sbi	0x0d, 0	; 13
	switch (dir) {
	case PORT_DIR_IN:
		VPORTD.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTD.DIR |= (1 << pin);
     958:	61 9a       	sbi	0x0c, 1	; 12
 *                  false = Pin level set to "low" state
 */
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTD.OUT |= (1 << pin);
     95a:	69 9a       	sbi	0x0d, 1	; 13
	switch (dir) {
	case PORT_DIR_IN:
		VPORTD.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTD.DIR |= (1 << pin);
     95c:	62 9a       	sbi	0x0c, 2	; 12
 *                  false = Pin level set to "low" state
 */
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTD.OUT |= (1 << pin);
     95e:	6a 9a       	sbi	0x0d, 2	; 13
	switch (dir) {
	case PORT_DIR_IN:
		VPORTD.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTD.DIR |= (1 << pin);
     960:	63 9a       	sbi	0x0c, 3	; 12
 *                  false = Pin level set to "low" state
 */
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTD.OUT |= (1 << pin);
     962:	6b 9a       	sbi	0x0d, 3	; 13
 */
static inline void PORTF_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTF.DIR &= ~(1 << pin);
     964:	a2 98       	cbi	0x14, 2	; 20
static inline void PORTF_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTF.OUT |= (1 << pin);
	} else {
		VPORTF.OUT &= ~(1 << pin);
     966:	aa 98       	cbi	0x15, 2	; 21
static inline void PORTF_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTF + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
     968:	e2 eb       	ldi	r30, 0xB2	; 178
     96a:	f4 e0       	ldi	r31, 0x04	; 4
     96c:	80 81       	ld	r24, Z
     96e:	88 60       	ori	r24, 0x08	; 8
     970:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTF + 0x10 + pin);

	if (inverted) {
		*port_pin_ctrl |= PORT_INVEN_bm;
	} else {
		*port_pin_ctrl &= ~PORT_INVEN_bm;
     972:	80 81       	ld	r24, Z
     974:	8f 77       	andi	r24, 0x7F	; 127
     976:	80 83       	st	Z, r24
 */
static inline void PORTF_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTF + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
     978:	80 81       	ld	r24, Z
     97a:	88 7f       	andi	r24, 0xF8	; 248
     97c:	83 60       	ori	r24, 0x03	; 3
     97e:	80 83       	st	Z, r24
	switch (dir) {
	case PORT_DIR_IN:
		VPORTF.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTF.DIR |= (1 << pin);
     980:	a3 9a       	sbi	0x14, 3	; 20
static inline void PORTF_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTF.OUT |= (1 << pin);
	} else {
		VPORTF.OUT &= ~(1 << pin);
     982:	ab 98       	cbi	0x15, 3	; 21
	switch (dir) {
	case PORT_DIR_IN:
		VPORTF.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTF.DIR |= (1 << pin);
     984:	a4 9a       	sbi	0x14, 4	; 20
static inline void PORTF_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTF.OUT |= (1 << pin);
	} else {
		VPORTF.OUT &= ~(1 << pin);
     986:	ac 98       	cbi	0x15, 4	; 21
 */
static inline void PORTF_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTF.DIR &= ~(1 << pin);
     988:	a5 98       	cbi	0x14, 5	; 20
static inline void PORTF_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTF + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
     98a:	e5 eb       	ldi	r30, 0xB5	; 181
     98c:	f4 e0       	ldi	r31, 0x04	; 4
     98e:	80 81       	ld	r24, Z
     990:	88 60       	ori	r24, 0x08	; 8
     992:	80 83       	st	Z, r24
 */
static inline void PORTF_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTF.DIR &= ~(1 << pin);
     994:	a6 98       	cbi	0x14, 6	; 20
static inline void PORTF_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTF + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
     996:	e6 eb       	ldi	r30, 0xB6	; 182
     998:	f4 e0       	ldi	r31, 0x04	; 4
     99a:	80 81       	ld	r24, Z
     99c:	88 60       	ori	r24, 0x08	; 8
     99e:	80 83       	st	Z, r24
	    // <id> pad_pull_config
	    // <PORT_PULL_OFF"> Off
	    // <PORT_PULL_UP"> Pull-up
	    PORT_PULL_UP);

	CLKCTRL_init();
     9a0:	0e 94 25 04 	call	0x84a	; 0x84a <CLKCTRL_init>

	scheduler_timeout_init();
     9a4:	0e 94 c5 06 	call	0xd8a	; 0xd8a <scheduler_timeout_init>

	ADC_0_initialization();
     9a8:	0e 94 67 04 	call	0x8ce	; 0x8ce <ADC_0_initialization>

	USART_0_initialization();
     9ac:	0e 94 72 04 	call	0x8e4	; 0x8e4 <USART_0_initialization>

	SPI_0_initialization();
     9b0:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <SPI_0_initialization>

	CPUINT_init();
     9b4:	0e 94 2d 04 	call	0x85a	; 0x85a <CPUINT_init>

	SLPCTRL_init();
     9b8:	0e 94 a5 06 	call	0xd4a	; 0xd4a <SLPCTRL_init>

	I2C_0_initialization();
     9bc:	0e 94 88 04 	call	0x910	; 0x910 <I2C_0_initialization>

	BOD_init();
     9c0:	0c 94 23 04 	jmp	0x846	; 0x846 <BOD_init>

000009c4 <I2C_0_do_I2C_RESET>:
/**
 * \brief Identical to I2C_0_master_operation(false);
 */
i2c_error_t I2C_0_master_write(void)
{
	return I2C_0_master_operation(false);
     9c4:	e0 ea       	ldi	r30, 0xA0	; 160
     9c6:	f8 e0       	ldi	r31, 0x08	; 8
     9c8:	84 81       	ldd	r24, Z+4	; 0x04
     9ca:	88 60       	ori	r24, 0x08	; 8
     9cc:	84 83       	std	Z+4, r24	; 0x04
     9ce:	85 81       	ldd	r24, Z+5	; 0x05
     9d0:	81 60       	ori	r24, 0x01	; 1
     9d2:	85 83       	std	Z+5, r24	; 0x05
     9d4:	e6 e9       	ldi	r30, 0x96	; 150
     9d6:	fa e2       	ldi	r31, 0x2A	; 42
     9d8:	80 81       	ld	r24, Z
     9da:	8e 7f       	andi	r24, 0xFE	; 254
     9dc:	80 83       	st	Z, r24
     9de:	13 86       	std	Z+11, r1	; 0x0b
     9e0:	8e e0       	ldi	r24, 0x0E	; 14
     9e2:	08 95       	ret

000009e4 <I2C_0_do_I2C_IDLE>:
     9e4:	e6 e9       	ldi	r30, 0x96	; 150
     9e6:	fa e2       	ldi	r31, 0x2A	; 42
     9e8:	80 81       	ld	r24, Z
     9ea:	8e 7f       	andi	r24, 0xFE	; 254
     9ec:	80 83       	st	Z, r24
     9ee:	13 86       	std	Z+11, r1	; 0x0b
     9f0:	80 e0       	ldi	r24, 0x00	; 0
     9f2:	08 95       	ret

000009f4 <I2C_0_do_I2C_SEND_STOP>:
     9f4:	e0 ea       	ldi	r30, 0xA0	; 160
     9f6:	f8 e0       	ldi	r31, 0x08	; 8
     9f8:	84 81       	ldd	r24, Z+4	; 0x04
     9fa:	83 60       	ori	r24, 0x03	; 3
     9fc:	84 83       	std	Z+4, r24	; 0x04
     9fe:	e6 e9       	ldi	r30, 0x96	; 150
     a00:	fa e2       	ldi	r31, 0x2A	; 42
     a02:	80 81       	ld	r24, Z
     a04:	8e 7f       	andi	r24, 0xFE	; 254
     a06:	80 83       	st	Z, r24
     a08:	13 86       	std	Z+11, r1	; 0x0b
     a0a:	80 e0       	ldi	r24, 0x00	; 0
     a0c:	08 95       	ret

00000a0e <I2C_0_do_I2C_SEND_ADR_READ>:
     a0e:	e6 e9       	ldi	r30, 0x96	; 150
     a10:	fa e2       	ldi	r31, 0x2A	; 42
     a12:	80 81       	ld	r24, Z
     a14:	88 60       	ori	r24, 0x08	; 8
     a16:	80 83       	st	Z, r24
     a18:	81 81       	ldd	r24, Z+1	; 0x01
     a1a:	88 0f       	add	r24, r24
     a1c:	81 60       	ori	r24, 0x01	; 1
     a1e:	80 93 a7 08 	sts	0x08A7, r24	; 0x8008a7 <__TEXT_REGION_LENGTH__+0x7008a7>
     a22:	84 e0       	ldi	r24, 0x04	; 4
     a24:	08 95       	ret

00000a26 <I2C_0_do_I2C_SEND_RESTART>:
     a26:	0c 94 07 05 	jmp	0xa0e	; 0xa0e <I2C_0_do_I2C_SEND_ADR_READ>

00000a2a <I2C_0_do_I2C_SEND_ADR_WRITE>:
     a2a:	e6 e9       	ldi	r30, 0x96	; 150
     a2c:	fa e2       	ldi	r31, 0x2A	; 42
     a2e:	80 81       	ld	r24, Z
     a30:	88 60       	ori	r24, 0x08	; 8
     a32:	80 83       	st	Z, r24
     a34:	81 81       	ldd	r24, Z+1	; 0x01
     a36:	88 0f       	add	r24, r24
     a38:	80 93 a7 08 	sts	0x08A7, r24	; 0x8008a7 <__TEXT_REGION_LENGTH__+0x7008a7>
     a3c:	83 e0       	ldi	r24, 0x03	; 3
     a3e:	08 95       	ret

00000a40 <I2C_0_do_I2C_SEND_RESTART_WRITE>:
     a40:	0c 94 15 05 	jmp	0xa2a	; 0xa2a <I2C_0_do_I2C_SEND_ADR_WRITE>

00000a44 <I2C_0_do_I2C_DO_ADDRESS_NACK>:
     a44:	80 91 96 2a 	lds	r24, 0x2A96	; 0x802a96 <I2C_0_status>
     a48:	87 7f       	andi	r24, 0xF7	; 247
     a4a:	80 93 96 2a 	sts	0x2A96, r24	; 0x802a96 <I2C_0_status>
     a4e:	82 e0       	ldi	r24, 0x02	; 2
     a50:	80 93 a1 2a 	sts	0x2AA1, r24	; 0x802aa1 <I2C_0_status+0xb>
     a54:	e0 91 a6 2a 	lds	r30, 0x2AA6	; 0x802aa6 <I2C_0_status+0x10>
     a58:	f0 91 a7 2a 	lds	r31, 0x2AA7	; 0x802aa7 <I2C_0_status+0x11>
     a5c:	80 91 b2 2a 	lds	r24, 0x2AB2	; 0x802ab2 <I2C_0_status+0x1c>
     a60:	90 91 b3 2a 	lds	r25, 0x2AB3	; 0x802ab3 <I2C_0_status+0x1d>
     a64:	09 95       	icall
     a66:	82 30       	cpi	r24, 0x02	; 2
     a68:	21 f0       	breq	.+8      	; 0xa72 <I2C_0_do_I2C_DO_ADDRESS_NACK+0x2e>
     a6a:	83 30       	cpi	r24, 0x03	; 3
     a6c:	21 f4       	brne	.+8      	; 0xa76 <I2C_0_do_I2C_DO_ADDRESS_NACK+0x32>
     a6e:	0c 94 15 05 	jmp	0xa2a	; 0xa2a <I2C_0_do_I2C_SEND_ADR_WRITE>
     a72:	0c 94 07 05 	jmp	0xa0e	; 0xa0e <I2C_0_do_I2C_SEND_ADR_READ>
     a76:	0c 94 fa 04 	jmp	0x9f4	; 0x9f4 <I2C_0_do_I2C_SEND_STOP>

00000a7a <I2C_0_do_I2C_RX_DO_ACK>:
     a7a:	e0 ea       	ldi	r30, 0xA0	; 160
     a7c:	f8 e0       	ldi	r31, 0x08	; 8
     a7e:	84 81       	ldd	r24, Z+4	; 0x04
     a80:	8b 7f       	andi	r24, 0xFB	; 251
     a82:	84 83       	std	Z+4, r24	; 0x04
     a84:	84 e0       	ldi	r24, 0x04	; 4
     a86:	08 95       	ret

00000a88 <I2C_0_do_I2C_TX_DO_ACK>:
     a88:	e0 ea       	ldi	r30, 0xA0	; 160
     a8a:	f8 e0       	ldi	r31, 0x08	; 8
     a8c:	84 81       	ldd	r24, Z+4	; 0x04
     a8e:	8b 7f       	andi	r24, 0xFB	; 251
     a90:	84 83       	std	Z+4, r24	; 0x04
     a92:	83 e0       	ldi	r24, 0x03	; 3
     a94:	08 95       	ret

00000a96 <I2C_0_do_I2C_DO_NACK_STOP>:
     a96:	e0 ea       	ldi	r30, 0xA0	; 160
     a98:	f8 e0       	ldi	r31, 0x08	; 8
     a9a:	84 81       	ldd	r24, Z+4	; 0x04
     a9c:	84 60       	ori	r24, 0x04	; 4
     a9e:	84 83       	std	Z+4, r24	; 0x04
     aa0:	84 81       	ldd	r24, Z+4	; 0x04
     aa2:	83 60       	ori	r24, 0x03	; 3
     aa4:	84 83       	std	Z+4, r24	; 0x04
     aa6:	e6 e9       	ldi	r30, 0x96	; 150
     aa8:	fa e2       	ldi	r31, 0x2A	; 42
     aaa:	80 81       	ld	r24, Z
     aac:	8e 7f       	andi	r24, 0xFE	; 254
     aae:	80 83       	st	Z, r24
     ab0:	13 86       	std	Z+11, r1	; 0x0b
     ab2:	80 e0       	ldi	r24, 0x00	; 0
     ab4:	08 95       	ret

00000ab6 <I2C_0_do_I2C_DO_NACK_RESTART>:
     ab6:	e0 ea       	ldi	r30, 0xA0	; 160
     ab8:	f8 e0       	ldi	r31, 0x08	; 8
     aba:	84 81       	ldd	r24, Z+4	; 0x04
     abc:	84 60       	ori	r24, 0x04	; 4
     abe:	84 83       	std	Z+4, r24	; 0x04
     ac0:	88 e0       	ldi	r24, 0x08	; 8
     ac2:	08 95       	ret

00000ac4 <I2C_0_do_I2C_BUS_COLLISION>:
     ac4:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7008a5>
     ac8:	88 60       	ori	r24, 0x08	; 8
     aca:	80 93 a5 08 	sts	0x08A5, r24	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7008a5>
     ace:	82 e0       	ldi	r24, 0x02	; 2
     ad0:	80 93 a1 2a 	sts	0x2AA1, r24	; 0x802aa1 <I2C_0_status+0xb>
     ad4:	e0 91 a4 2a 	lds	r30, 0x2AA4	; 0x802aa4 <I2C_0_status+0xe>
     ad8:	f0 91 a5 2a 	lds	r31, 0x2AA5	; 0x802aa5 <I2C_0_status+0xf>
     adc:	80 91 b0 2a 	lds	r24, 0x2AB0	; 0x802ab0 <I2C_0_status+0x1a>
     ae0:	90 91 b1 2a 	lds	r25, 0x2AB1	; 0x802ab1 <I2C_0_status+0x1b>
     ae4:	09 95       	icall
     ae6:	82 30       	cpi	r24, 0x02	; 2
     ae8:	21 f0       	breq	.+8      	; 0xaf2 <I2C_0_do_I2C_BUS_COLLISION+0x2e>
     aea:	83 30       	cpi	r24, 0x03	; 3
     aec:	21 f4       	brne	.+8      	; 0xaf6 <I2C_0_do_I2C_BUS_COLLISION+0x32>
     aee:	0c 94 15 05 	jmp	0xa2a	; 0xa2a <I2C_0_do_I2C_SEND_ADR_WRITE>
     af2:	0c 94 07 05 	jmp	0xa0e	; 0xa0e <I2C_0_do_I2C_SEND_ADR_READ>
     af6:	0c 94 e2 04 	jmp	0x9c4	; 0x9c4 <I2C_0_do_I2C_RESET>

00000afa <I2C_0_do_I2C_BUS_ERROR>:
     afa:	e0 ea       	ldi	r30, 0xA0	; 160
     afc:	f8 e0       	ldi	r31, 0x08	; 8
     afe:	84 81       	ldd	r24, Z+4	; 0x04
     b00:	88 60       	ori	r24, 0x08	; 8
     b02:	84 83       	std	Z+4, r24	; 0x04
     b04:	85 81       	ldd	r24, Z+5	; 0x05
     b06:	81 60       	ori	r24, 0x01	; 1
     b08:	85 83       	std	Z+5, r24	; 0x05
     b0a:	e6 e9       	ldi	r30, 0x96	; 150
     b0c:	fa e2       	ldi	r31, 0x2A	; 42
     b0e:	80 81       	ld	r24, Z
     b10:	8e 7f       	andi	r24, 0xFE	; 254
     b12:	80 83       	st	Z, r24
     b14:	82 e0       	ldi	r24, 0x02	; 2
     b16:	83 87       	std	Z+11, r24	; 0x0b
     b18:	8e e0       	ldi	r24, 0x0E	; 14
     b1a:	08 95       	ret

00000b1c <I2C_0_master_isr>:
     b1c:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7008a5>
     b20:	80 6c       	ori	r24, 0xC0	; 192
     b22:	80 93 a5 08 	sts	0x08A5, r24	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7008a5>
     b26:	80 91 96 2a 	lds	r24, 0x2A96	; 0x802a96 <I2C_0_status>
     b2a:	83 ff       	sbrs	r24, 3
     b2c:	07 c0       	rjmp	.+14     	; 0xb3c <I2C_0_master_isr+0x20>
     b2e:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7008a5>
     b32:	84 ff       	sbrs	r24, 4
     b34:	03 c0       	rjmp	.+6      	; 0xb3c <I2C_0_master_isr+0x20>
     b36:	8f e0       	ldi	r24, 0x0F	; 15
     b38:	80 93 a0 2a 	sts	0x2AA0, r24	; 0x802aa0 <I2C_0_status+0xa>
     b3c:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7008a5>
     b40:	83 ff       	sbrs	r24, 3
     b42:	03 c0       	rjmp	.+6      	; 0xb4a <I2C_0_master_isr+0x2e>
     b44:	80 e1       	ldi	r24, 0x10	; 16
     b46:	80 93 a0 2a 	sts	0x2AA0, r24	; 0x802aa0 <I2C_0_status+0xa>
     b4a:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7008a5>
     b4e:	82 ff       	sbrs	r24, 2
     b50:	03 c0       	rjmp	.+6      	; 0xb58 <I2C_0_master_isr+0x3c>
     b52:	81 e1       	ldi	r24, 0x11	; 17
     b54:	80 93 a0 2a 	sts	0x2AA0, r24	; 0x802aa0 <I2C_0_status+0xa>
     b58:	e0 91 a0 2a 	lds	r30, 0x2AA0	; 0x802aa0 <I2C_0_status+0xa>
     b5c:	f0 e0       	ldi	r31, 0x00	; 0
     b5e:	ee 0f       	add	r30, r30
     b60:	ff 1f       	adc	r31, r31
     b62:	e0 50       	subi	r30, 0x00	; 0
     b64:	f8 4d       	sbci	r31, 0xD8	; 216
     b66:	01 90       	ld	r0, Z+
     b68:	f0 81       	ld	r31, Z
     b6a:	e0 2d       	mov	r30, r0
     b6c:	09 95       	icall
     b6e:	80 93 a0 2a 	sts	0x2AA0, r24	; 0x802aa0 <I2C_0_status+0xa>
     b72:	08 95       	ret

00000b74 <I2C_0_do_I2C_TX>:
     b74:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7008a5>
     b78:	84 ff       	sbrs	r24, 4
     b7a:	13 c0       	rjmp	.+38     	; 0xba2 <I2C_0_do_I2C_TX+0x2e>
     b7c:	e0 91 a8 2a 	lds	r30, 0x2AA8	; 0x802aa8 <I2C_0_status+0x12>
     b80:	f0 91 a9 2a 	lds	r31, 0x2AA9	; 0x802aa9 <I2C_0_status+0x13>
     b84:	80 91 b4 2a 	lds	r24, 0x2AB4	; 0x802ab4 <I2C_0_status+0x1e>
     b88:	90 91 b5 2a 	lds	r25, 0x2AB5	; 0x802ab5 <I2C_0_status+0x1f>
     b8c:	09 95       	icall
     b8e:	82 30       	cpi	r24, 0x02	; 2
     b90:	21 f0       	breq	.+8      	; 0xb9a <I2C_0_do_I2C_TX+0x26>
     b92:	83 30       	cpi	r24, 0x03	; 3
     b94:	21 f4       	brne	.+8      	; 0xb9e <I2C_0_do_I2C_TX+0x2a>
     b96:	0c 94 15 05 	jmp	0xa2a	; 0xa2a <I2C_0_do_I2C_SEND_ADR_WRITE>
     b9a:	0c 94 07 05 	jmp	0xa0e	; 0xa0e <I2C_0_do_I2C_SEND_ADR_READ>
     b9e:	0c 94 fa 04 	jmp	0x9f4	; 0x9f4 <I2C_0_do_I2C_SEND_STOP>
     ba2:	80 91 96 2a 	lds	r24, 0x2A96	; 0x802a96 <I2C_0_status>
     ba6:	87 7f       	andi	r24, 0xF7	; 247
     ba8:	80 93 96 2a 	sts	0x2A96, r24	; 0x802a96 <I2C_0_status>
     bac:	e0 91 98 2a 	lds	r30, 0x2A98	; 0x802a98 <I2C_0_status+0x2>
     bb0:	f0 91 99 2a 	lds	r31, 0x2A99	; 0x802a99 <I2C_0_status+0x3>
     bb4:	cf 01       	movw	r24, r30
     bb6:	01 96       	adiw	r24, 0x01	; 1
     bb8:	80 93 98 2a 	sts	0x2A98, r24	; 0x802a98 <I2C_0_status+0x2>
     bbc:	90 93 99 2a 	sts	0x2A99, r25	; 0x802a99 <I2C_0_status+0x3>
     bc0:	80 81       	ld	r24, Z
     bc2:	80 93 a8 08 	sts	0x08A8, r24	; 0x8008a8 <__TEXT_REGION_LENGTH__+0x7008a8>
     bc6:	80 91 9a 2a 	lds	r24, 0x2A9A	; 0x802a9a <I2C_0_status+0x4>
     bca:	90 91 9b 2a 	lds	r25, 0x2A9B	; 0x802a9b <I2C_0_status+0x5>
     bce:	01 97       	sbiw	r24, 0x01	; 1
     bd0:	80 93 9a 2a 	sts	0x2A9A, r24	; 0x802a9a <I2C_0_status+0x4>
     bd4:	90 93 9b 2a 	sts	0x2A9B, r25	; 0x802a9b <I2C_0_status+0x5>
     bd8:	89 2b       	or	r24, r25
     bda:	11 f4       	brne	.+4      	; 0xbe0 <I2C_0_do_I2C_TX+0x6c>
     bdc:	85 e0       	ldi	r24, 0x05	; 5
     bde:	08 95       	ret
     be0:	83 e0       	ldi	r24, 0x03	; 3
     be2:	08 95       	ret

00000be4 <I2C_0_do_I2C_RX>:
     be4:	80 91 96 2a 	lds	r24, 0x2A96	; 0x802a96 <I2C_0_status>
     be8:	87 7f       	andi	r24, 0xF7	; 247
     bea:	80 93 96 2a 	sts	0x2A96, r24	; 0x802a96 <I2C_0_status>
     bee:	80 91 9a 2a 	lds	r24, 0x2A9A	; 0x802a9a <I2C_0_status+0x4>
     bf2:	90 91 9b 2a 	lds	r25, 0x2A9B	; 0x802a9b <I2C_0_status+0x5>
     bf6:	20 91 a4 08 	lds	r18, 0x08A4	; 0x8008a4 <__TEXT_REGION_LENGTH__+0x7008a4>
     bfa:	81 30       	cpi	r24, 0x01	; 1
     bfc:	91 05       	cpc	r25, r1
     bfe:	11 f4       	brne	.+4      	; 0xc04 <I2C_0_do_I2C_RX+0x20>
     c00:	24 60       	ori	r18, 0x04	; 4
     c02:	01 c0       	rjmp	.+2      	; 0xc06 <I2C_0_do_I2C_RX+0x22>
     c04:	2b 7f       	andi	r18, 0xFB	; 251
     c06:	20 93 a4 08 	sts	0x08A4, r18	; 0x8008a4 <__TEXT_REGION_LENGTH__+0x7008a4>
     c0a:	01 97       	sbiw	r24, 0x01	; 1
     c0c:	80 93 9a 2a 	sts	0x2A9A, r24	; 0x802a9a <I2C_0_status+0x4>
     c10:	90 93 9b 2a 	sts	0x2A9B, r25	; 0x802a9b <I2C_0_status+0x5>
     c14:	e0 91 98 2a 	lds	r30, 0x2A98	; 0x802a98 <I2C_0_status+0x2>
     c18:	f0 91 99 2a 	lds	r31, 0x2A99	; 0x802a99 <I2C_0_status+0x3>
     c1c:	89 2b       	or	r24, r25
     c1e:	09 f5       	brne	.+66     	; 0xc62 <I2C_0_do_I2C_RX+0x7e>
     c20:	80 91 a8 08 	lds	r24, 0x08A8	; 0x8008a8 <__TEXT_REGION_LENGTH__+0x7008a8>
     c24:	80 83       	st	Z, r24
     c26:	80 91 98 2a 	lds	r24, 0x2A98	; 0x802a98 <I2C_0_status+0x2>
     c2a:	90 91 99 2a 	lds	r25, 0x2A99	; 0x802a99 <I2C_0_status+0x3>
     c2e:	01 96       	adiw	r24, 0x01	; 1
     c30:	80 93 98 2a 	sts	0x2A98, r24	; 0x802a98 <I2C_0_status+0x2>
     c34:	90 93 99 2a 	sts	0x2A99, r25	; 0x802a99 <I2C_0_status+0x3>
     c38:	80 91 96 2a 	lds	r24, 0x2A96	; 0x802a96 <I2C_0_status>
     c3c:	84 60       	ori	r24, 0x04	; 4
     c3e:	80 93 96 2a 	sts	0x2A96, r24	; 0x802a96 <I2C_0_status>
     c42:	e0 91 a2 2a 	lds	r30, 0x2AA2	; 0x802aa2 <I2C_0_status+0xc>
     c46:	f0 91 a3 2a 	lds	r31, 0x2AA3	; 0x802aa3 <I2C_0_status+0xd>
     c4a:	80 91 ae 2a 	lds	r24, 0x2AAE	; 0x802aae <I2C_0_status+0x18>
     c4e:	90 91 af 2a 	lds	r25, 0x2AAF	; 0x802aaf <I2C_0_status+0x19>
     c52:	09 95       	icall
     c54:	82 50       	subi	r24, 0x02	; 2
     c56:	82 30       	cpi	r24, 0x02	; 2
     c58:	10 f4       	brcc	.+4      	; 0xc5e <I2C_0_do_I2C_RX+0x7a>
     c5a:	0c 94 5b 05 	jmp	0xab6	; 0xab6 <I2C_0_do_I2C_DO_NACK_RESTART>
     c5e:	0c 94 4b 05 	jmp	0xa96	; 0xa96 <I2C_0_do_I2C_DO_NACK_STOP>
     c62:	80 91 a8 08 	lds	r24, 0x08A8	; 0x8008a8 <__TEXT_REGION_LENGTH__+0x7008a8>
     c66:	80 83       	st	Z, r24
     c68:	80 91 98 2a 	lds	r24, 0x2A98	; 0x802a98 <I2C_0_status+0x2>
     c6c:	90 91 99 2a 	lds	r25, 0x2A99	; 0x802a99 <I2C_0_status+0x3>
     c70:	01 96       	adiw	r24, 0x01	; 1
     c72:	80 93 98 2a 	sts	0x2A98, r24	; 0x802a98 <I2C_0_status+0x2>
     c76:	90 93 99 2a 	sts	0x2A99, r25	; 0x802a99 <I2C_0_status+0x3>
     c7a:	80 91 a4 08 	lds	r24, 0x08A4	; 0x8008a4 <__TEXT_REGION_LENGTH__+0x7008a4>
     c7e:	82 60       	ori	r24, 0x02	; 2
     c80:	80 93 a4 08 	sts	0x08A4, r24	; 0x8008a4 <__TEXT_REGION_LENGTH__+0x7008a4>
     c84:	84 e0       	ldi	r24, 0x04	; 4
     c86:	08 95       	ret

00000c88 <I2C_0_do_I2C_TX_EMPTY>:
     c88:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7008a5>
     c8c:	84 ff       	sbrs	r24, 4
     c8e:	0e c0       	rjmp	.+28     	; 0xcac <I2C_0_do_I2C_TX_EMPTY+0x24>
     c90:	e0 91 a8 2a 	lds	r30, 0x2AA8	; 0x802aa8 <I2C_0_status+0x12>
     c94:	f0 91 a9 2a 	lds	r31, 0x2AA9	; 0x802aa9 <I2C_0_status+0x13>
     c98:	80 91 b4 2a 	lds	r24, 0x2AB4	; 0x802ab4 <I2C_0_status+0x1e>
     c9c:	90 91 b5 2a 	lds	r25, 0x2AB5	; 0x802ab5 <I2C_0_status+0x1f>
     ca0:	09 95       	icall
     ca2:	82 30       	cpi	r24, 0x02	; 2
     ca4:	b9 f0       	breq	.+46     	; 0xcd4 <I2C_0_do_I2C_TX_EMPTY+0x4c>
     ca6:	83 30       	cpi	r24, 0x03	; 3
     ca8:	b9 f0       	breq	.+46     	; 0xcd8 <I2C_0_do_I2C_TX_EMPTY+0x50>
     caa:	1a c0       	rjmp	.+52     	; 0xce0 <I2C_0_do_I2C_TX_EMPTY+0x58>
     cac:	80 91 96 2a 	lds	r24, 0x2A96	; 0x802a96 <I2C_0_status>
     cb0:	84 60       	ori	r24, 0x04	; 4
     cb2:	80 93 96 2a 	sts	0x2A96, r24	; 0x802a96 <I2C_0_status>
     cb6:	e0 91 a2 2a 	lds	r30, 0x2AA2	; 0x802aa2 <I2C_0_status+0xc>
     cba:	f0 91 a3 2a 	lds	r31, 0x2AA3	; 0x802aa3 <I2C_0_status+0xd>
     cbe:	80 91 ae 2a 	lds	r24, 0x2AAE	; 0x802aae <I2C_0_status+0x18>
     cc2:	90 91 af 2a 	lds	r25, 0x2AAF	; 0x802aaf <I2C_0_status+0x19>
     cc6:	09 95       	icall
     cc8:	83 30       	cpi	r24, 0x03	; 3
     cca:	31 f0       	breq	.+12     	; 0xcd8 <I2C_0_do_I2C_TX_EMPTY+0x50>
     ccc:	84 30       	cpi	r24, 0x04	; 4
     cce:	31 f0       	breq	.+12     	; 0xcdc <I2C_0_do_I2C_TX_EMPTY+0x54>
     cd0:	82 30       	cpi	r24, 0x02	; 2
     cd2:	31 f4       	brne	.+12     	; 0xce0 <I2C_0_do_I2C_TX_EMPTY+0x58>
     cd4:	0c 94 07 05 	jmp	0xa0e	; 0xa0e <I2C_0_do_I2C_SEND_ADR_READ>
     cd8:	0c 94 15 05 	jmp	0xa2a	; 0xa2a <I2C_0_do_I2C_SEND_ADR_WRITE>
     cdc:	0c 94 ba 05 	jmp	0xb74	; 0xb74 <I2C_0_do_I2C_TX>
     ce0:	0c 94 fa 04 	jmp	0x9f4	; 0x9f4 <I2C_0_do_I2C_SEND_STOP>

00000ce4 <I2C_0_do_I2C_SEND_RESTART_READ>:
     ce4:	0c 94 07 05 	jmp	0xa0e	; 0xa0e <I2C_0_do_I2C_SEND_ADR_READ>

00000ce8 <I2C_0_init>:
     ce8:	e0 ea       	ldi	r30, 0xA0	; 160
     cea:	f8 e0       	ldi	r31, 0x08	; 8
     cec:	8d e2       	ldi	r24, 0x2D	; 45
     cee:	86 83       	std	Z+6, r24	; 0x06
     cf0:	81 ec       	ldi	r24, 0xC1	; 193
     cf2:	83 83       	std	Z+3, r24	; 0x03
     cf4:	15 82       	std	Z+5, r1	; 0x05
     cf6:	08 95       	ret

00000cf8 <__vector_15>:
    I2C_0_do_I2C_BUS_COLLISION,      // I2C_BUS_COLLISION
    I2C_0_do_I2C_BUS_ERROR           // I2C_BUS_ERROR
};

ISR(TWI0_TWIM_vect)
{
     cf8:	1f 92       	push	r1
     cfa:	0f 92       	push	r0
     cfc:	0f b6       	in	r0, 0x3f	; 63
     cfe:	0f 92       	push	r0
     d00:	11 24       	eor	r1, r1
     d02:	2f 93       	push	r18
     d04:	3f 93       	push	r19
     d06:	4f 93       	push	r20
     d08:	5f 93       	push	r21
     d0a:	6f 93       	push	r22
     d0c:	7f 93       	push	r23
     d0e:	8f 93       	push	r24
     d10:	9f 93       	push	r25
     d12:	af 93       	push	r26
     d14:	bf 93       	push	r27
     d16:	ef 93       	push	r30
     d18:	ff 93       	push	r31
	I2C_0_master_isr();
     d1a:	0e 94 8e 05 	call	0xb1c	; 0xb1c <I2C_0_master_isr>
}
     d1e:	ff 91       	pop	r31
     d20:	ef 91       	pop	r30
     d22:	bf 91       	pop	r27
     d24:	af 91       	pop	r26
     d26:	9f 91       	pop	r25
     d28:	8f 91       	pop	r24
     d2a:	7f 91       	pop	r23
     d2c:	6f 91       	pop	r22
     d2e:	5f 91       	pop	r21
     d30:	4f 91       	pop	r20
     d32:	3f 91       	pop	r19
     d34:	2f 91       	pop	r18
     d36:	0f 90       	pop	r0
     d38:	0f be       	out	0x3f, r0	; 63
     d3a:	0f 90       	pop	r0
     d3c:	1f 90       	pop	r1
     d3e:	18 95       	reti

00000d40 <protected_write_io>:
	PUBLIC_FUNCTION(protected_write_io)

#if defined(__GNUC__)
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
     d40:	1b be       	out	0x3b, r1	; 59
#endif
	movw    r30, r24                // Load addr into Z
     d42:	fc 01       	movw	r30, r24
	out     CCP, r22                // Start CCP handshake
     d44:	64 bf       	out	0x34, r22	; 52
	st      Z, r20                  // Write value to I/O register
     d46:	40 83       	st	Z, r20
	ret                             // Return to caller
     d48:	08 95       	ret

00000d4a <SLPCTRL_init>:

	// SLPCTRL.CTRLA = 0 << SLPCTRL_SEN_bp /* Sleep enable: disabled */
	//		 | SLPCTRL_SMODE_IDLE_gc; /* Idle mode */

	return 0;
}
     d4a:	80 e0       	ldi	r24, 0x00	; 0
     d4c:	08 95       	ret

00000d4e <SPI_0_init>:
 *
 * \return Nothing
 */
void SPI_0_disable()
{
	SPI0.CTRLA &= ~SPI_ENABLE_bm;
     d4e:	83 e3       	ldi	r24, 0x33	; 51
     d50:	80 93 c0 08 	sts	0x08C0, r24	; 0x8008c0 <__TEXT_REGION_LENGTH__+0x7008c0>
     d54:	10 92 ba 2a 	sts	0x2ABA, r1	; 0x802aba <SPI_0_desc>
     d58:	08 95       	ret

00000d5a <SPI_0_enable>:
     d5a:	e0 ec       	ldi	r30, 0xC0	; 192
     d5c:	f8 e0       	ldi	r31, 0x08	; 8
     d5e:	80 81       	ld	r24, Z
     d60:	81 60       	ori	r24, 0x01	; 1
     d62:	80 83       	st	Z, r24
     d64:	08 95       	ret

00000d66 <SPI_0_exchange_byte>:
 */
uint8_t SPI_0_exchange_byte(uint8_t data)
{
	// Blocking wait for SPI free makes the function work
	// seamlessly also with IRQ drivers.
	while (SPI_0_desc.status == SPI_BUSY)
     d66:	90 91 ba 2a 	lds	r25, 0x2ABA	; 0x802aba <SPI_0_desc>
     d6a:	92 30       	cpi	r25, 0x02	; 2
     d6c:	09 f4       	brne	.+2      	; 0xd70 <SPI_0_exchange_byte+0xa>
     d6e:	ff cf       	rjmp	.-2      	; 0xd6e <SPI_0_exchange_byte+0x8>
		;
	SPI0.DATA = data;
     d70:	80 93 c4 08 	sts	0x08C4, r24	; 0x8008c4 <__TEXT_REGION_LENGTH__+0x7008c4>
	while (!(SPI0.INTFLAGS & SPI_RXCIF_bm))
     d74:	80 91 c3 08 	lds	r24, 0x08C3	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
     d78:	87 ff       	sbrs	r24, 7
     d7a:	fc cf       	rjmp	.-8      	; 0xd74 <SPI_0_exchange_byte+0xe>
		;
	return SPI0.DATA;
     d7c:	80 91 c4 08 	lds	r24, 0x08C4	; 0x8008c4 <__TEXT_REGION_LENGTH__+0x7008c4>
}
     d80:	08 95       	ret

00000d82 <scheduler_dummy_handler>:

	// Do we have to reschedule it? If yes then add delta to absolute for reschedule
	if (reschedule) {
		scheduler_timeout_create(callback_timer, reschedule);
	}
}
     d82:	60 e0       	ldi	r22, 0x00	; 0
     d84:	70 e0       	ldi	r23, 0x00	; 0
     d86:	cb 01       	movw	r24, r22
     d88:	08 95       	ret

00000d8a <scheduler_timeout_init>:
     d8a:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     d8e:	81 11       	cpse	r24, r1
     d90:	fc cf       	rjmp	.-8      	; 0xd8a <scheduler_timeout_init>
     d92:	81 e0       	ldi	r24, 0x01	; 1
     d94:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <__TEXT_REGION_LENGTH__+0x700140>
     d98:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <__TEXT_REGION_LENGTH__+0x700147>
     d9c:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     da0:	08 95       	ret

00000da2 <scheduler_stop_timeouts>:
     da2:	e0 e4       	ldi	r30, 0x40	; 64
     da4:	f1 e0       	ldi	r31, 0x01	; 1
     da6:	82 81       	ldd	r24, Z+2	; 0x02
     da8:	8e 7f       	andi	r24, 0xFE	; 254
     daa:	82 83       	std	Z+2, r24	; 0x02
     dac:	10 92 c0 2a 	sts	0x2AC0, r1	; 0x802ac0 <scheduler_absolute_time_of_last_timeout>
     db0:	10 92 c1 2a 	sts	0x2AC1, r1	; 0x802ac1 <scheduler_absolute_time_of_last_timeout+0x1>
     db4:	10 92 c2 2a 	sts	0x2AC2, r1	; 0x802ac2 <scheduler_absolute_time_of_last_timeout+0x2>
     db8:	10 92 c3 2a 	sts	0x2AC3, r1	; 0x802ac3 <scheduler_absolute_time_of_last_timeout+0x3>
     dbc:	10 92 bb 2a 	sts	0x2ABB, r1	; 0x802abb <scheduler_is_running>
     dc0:	08 95       	ret

00000dc2 <scheduler_set_timer_duration>:
     dc2:	cf 92       	push	r12
     dc4:	df 92       	push	r13
     dc6:	ef 92       	push	r14
     dc8:	ff 92       	push	r15
     dca:	0f 93       	push	r16
     dcc:	1f 93       	push	r17
     dce:	0f ef       	ldi	r16, 0xFF	; 255
     dd0:	1f ef       	ldi	r17, 0xFF	; 255
     dd2:	20 e0       	ldi	r18, 0x00	; 0
     dd4:	30 e0       	ldi	r19, 0x00	; 0
     dd6:	68 01       	movw	r12, r16
     dd8:	79 01       	movw	r14, r18
     dda:	c6 1a       	sub	r12, r22
     ddc:	d7 0a       	sbc	r13, r23
     dde:	e8 0a       	sbc	r14, r24
     de0:	f9 0a       	sbc	r15, r25
     de2:	c0 92 bc 2a 	sts	0x2ABC, r12	; 0x802abc <scheduler_last_timer_load>
     de6:	d0 92 bd 2a 	sts	0x2ABD, r13	; 0x802abd <scheduler_last_timer_load+0x1>
     dea:	e0 92 be 2a 	sts	0x2ABE, r14	; 0x802abe <scheduler_last_timer_load+0x2>
     dee:	f0 92 bf 2a 	sts	0x2ABF, r15	; 0x802abf <scheduler_last_timer_load+0x3>
     df2:	80 91 bc 2a 	lds	r24, 0x2ABC	; 0x802abc <scheduler_last_timer_load>
     df6:	90 91 bd 2a 	lds	r25, 0x2ABD	; 0x802abd <scheduler_last_timer_load+0x1>
     dfa:	a0 91 be 2a 	lds	r26, 0x2ABE	; 0x802abe <scheduler_last_timer_load+0x2>
     dfe:	b0 91 bf 2a 	lds	r27, 0x2ABF	; 0x802abf <scheduler_last_timer_load+0x3>
     e02:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     e06:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     e0a:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     e0e:	81 fd       	sbrc	r24, 1
     e10:	fc cf       	rjmp	.-8      	; 0xe0a <scheduler_set_timer_duration+0x48>
     e12:	1f 91       	pop	r17
     e14:	0f 91       	pop	r16
     e16:	ff 90       	pop	r15
     e18:	ef 90       	pop	r14
     e1a:	df 90       	pop	r13
     e1c:	cf 90       	pop	r12
     e1e:	08 95       	ret

00000e20 <scheduler_start_timer_at_head>:
     e20:	0f 93       	push	r16
     e22:	1f 93       	push	r17
     e24:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     e28:	8e 7f       	andi	r24, 0xFE	; 254
     e2a:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     e2e:	e0 91 c6 2a 	lds	r30, 0x2AC6	; 0x802ac6 <scheduler_list_head>
     e32:	f0 91 c7 2a 	lds	r31, 0x2AC7	; 0x802ac7 <scheduler_list_head+0x1>
     e36:	30 97       	sbiw	r30, 0x00	; 0
     e38:	21 f4       	brne	.+8      	; 0xe42 <scheduler_start_timer_at_head+0x22>
     e3a:	1f 91       	pop	r17
     e3c:	0f 91       	pop	r16
     e3e:	0c 94 d1 06 	jmp	0xda2	; 0xda2 <scheduler_stop_timeouts>
     e42:	00 91 c0 2a 	lds	r16, 0x2AC0	; 0x802ac0 <scheduler_absolute_time_of_last_timeout>
     e46:	10 91 c1 2a 	lds	r17, 0x2AC1	; 0x802ac1 <scheduler_absolute_time_of_last_timeout+0x1>
     e4a:	20 91 c2 2a 	lds	r18, 0x2AC2	; 0x802ac2 <scheduler_absolute_time_of_last_timeout+0x2>
     e4e:	30 91 c3 2a 	lds	r19, 0x2AC3	; 0x802ac3 <scheduler_absolute_time_of_last_timeout+0x3>
     e52:	86 81       	ldd	r24, Z+6	; 0x06
     e54:	97 81       	ldd	r25, Z+7	; 0x07
     e56:	a0 85       	ldd	r26, Z+8	; 0x08
     e58:	b1 85       	ldd	r27, Z+9	; 0x09
     e5a:	bc 01       	movw	r22, r24
     e5c:	cd 01       	movw	r24, r26
     e5e:	60 1b       	sub	r22, r16
     e60:	71 0b       	sbc	r23, r17
     e62:	82 0b       	sbc	r24, r18
     e64:	93 0b       	sbc	r25, r19
     e66:	61 15       	cp	r22, r1
     e68:	71 05       	cpc	r23, r1
     e6a:	21 e0       	ldi	r18, 0x01	; 1
     e6c:	82 07       	cpc	r24, r18
     e6e:	91 05       	cpc	r25, r1
     e70:	08 f1       	brcs	.+66     	; 0xeb4 <scheduler_start_timer_at_head+0x94>
     e72:	80 91 c0 2a 	lds	r24, 0x2AC0	; 0x802ac0 <scheduler_absolute_time_of_last_timeout>
     e76:	90 91 c1 2a 	lds	r25, 0x2AC1	; 0x802ac1 <scheduler_absolute_time_of_last_timeout+0x1>
     e7a:	a0 91 c2 2a 	lds	r26, 0x2AC2	; 0x802ac2 <scheduler_absolute_time_of_last_timeout+0x2>
     e7e:	b0 91 c3 2a 	lds	r27, 0x2AC3	; 0x802ac3 <scheduler_absolute_time_of_last_timeout+0x3>
     e82:	01 97       	sbiw	r24, 0x01	; 1
     e84:	af 4f       	sbci	r26, 0xFF	; 255
     e86:	bf 4f       	sbci	r27, 0xFF	; 255
     e88:	80 93 2a 28 	sts	0x282A, r24	; 0x80282a <scheduler_dummy+0x6>
     e8c:	90 93 2b 28 	sts	0x282B, r25	; 0x80282b <scheduler_dummy+0x7>
     e90:	a0 93 2c 28 	sts	0x282C, r26	; 0x80282c <scheduler_dummy+0x8>
     e94:	b0 93 2d 28 	sts	0x282D, r27	; 0x80282d <scheduler_dummy+0x9>
     e98:	e0 93 28 28 	sts	0x2828, r30	; 0x802828 <scheduler_dummy+0x4>
     e9c:	f0 93 29 28 	sts	0x2829, r31	; 0x802829 <scheduler_dummy+0x5>
     ea0:	84 e2       	ldi	r24, 0x24	; 36
     ea2:	98 e2       	ldi	r25, 0x28	; 40
     ea4:	80 93 c6 2a 	sts	0x2AC6, r24	; 0x802ac6 <scheduler_list_head>
     ea8:	90 93 c7 2a 	sts	0x2AC7, r25	; 0x802ac7 <scheduler_list_head+0x1>
     eac:	6f ef       	ldi	r22, 0xFF	; 255
     eae:	7f ef       	ldi	r23, 0xFF	; 255
     eb0:	80 e0       	ldi	r24, 0x00	; 0
     eb2:	90 e0       	ldi	r25, 0x00	; 0
     eb4:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <scheduler_set_timer_duration>
     eb8:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     ebc:	81 60       	ori	r24, 0x01	; 1
     ebe:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     ec2:	81 e0       	ldi	r24, 0x01	; 1
     ec4:	80 93 bb 2a 	sts	0x2ABB, r24	; 0x802abb <scheduler_is_running>
     ec8:	1f 91       	pop	r17
     eca:	0f 91       	pop	r16
     ecc:	08 95       	ret

00000ece <scheduler_enqueue_callback>:
     ece:	fc 01       	movw	r30, r24
     ed0:	14 82       	std	Z+4, r1	; 0x04
     ed2:	15 82       	std	Z+5, r1	; 0x05
     ed4:	e0 91 c4 2a 	lds	r30, 0x2AC4	; 0x802ac4 <scheduler_execute_queue_head>
     ed8:	f0 91 c5 2a 	lds	r31, 0x2AC5	; 0x802ac5 <scheduler_execute_queue_head+0x1>
     edc:	30 97       	sbiw	r30, 0x00	; 0
     ede:	29 f4       	brne	.+10     	; 0xeea <scheduler_enqueue_callback+0x1c>
     ee0:	80 93 c4 2a 	sts	0x2AC4, r24	; 0x802ac4 <scheduler_execute_queue_head>
     ee4:	90 93 c5 2a 	sts	0x2AC5, r25	; 0x802ac5 <scheduler_execute_queue_head+0x1>
     ee8:	08 95       	ret
     eea:	24 81       	ldd	r18, Z+4	; 0x04
     eec:	35 81       	ldd	r19, Z+5	; 0x05
     eee:	21 15       	cp	r18, r1
     ef0:	31 05       	cpc	r19, r1
     ef2:	11 f0       	breq	.+4      	; 0xef8 <scheduler_enqueue_callback+0x2a>
     ef4:	f9 01       	movw	r30, r18
     ef6:	f9 cf       	rjmp	.-14     	; 0xeea <scheduler_enqueue_callback+0x1c>
     ef8:	84 83       	std	Z+4, r24	; 0x04
     efa:	95 83       	std	Z+5, r25	; 0x05
     efc:	08 95       	ret

00000efe <__vector_3>:
	}
}

// NOTE: assumes the callback completes before the next timer tick
ISR(RTC_CNT_vect)
{
     efe:	1f 92       	push	r1
     f00:	0f 92       	push	r0
     f02:	0f b6       	in	r0, 0x3f	; 63
     f04:	0f 92       	push	r0
     f06:	11 24       	eor	r1, r1
     f08:	2f 93       	push	r18
     f0a:	3f 93       	push	r19
     f0c:	4f 93       	push	r20
     f0e:	5f 93       	push	r21
     f10:	6f 93       	push	r22
     f12:	7f 93       	push	r23
     f14:	8f 93       	push	r24
     f16:	9f 93       	push	r25
     f18:	af 93       	push	r26
     f1a:	bf 93       	push	r27
     f1c:	cf 93       	push	r28
     f1e:	df 93       	push	r29
     f20:	ef 93       	push	r30
     f22:	ff 93       	push	r31
	timer_struct_t *next                    = scheduler_list_head->next;
     f24:	80 91 c6 2a 	lds	r24, 0x2AC6	; 0x802ac6 <scheduler_list_head>
     f28:	90 91 c7 2a 	lds	r25, 0x2AC7	; 0x802ac7 <scheduler_list_head+0x1>
     f2c:	fc 01       	movw	r30, r24
     f2e:	c4 81       	ldd	r28, Z+4	; 0x04
     f30:	d5 81       	ldd	r29, Z+5	; 0x05
	scheduler_absolute_time_of_last_timeout = scheduler_list_head->absolute_time;
     f32:	46 81       	ldd	r20, Z+6	; 0x06
     f34:	57 81       	ldd	r21, Z+7	; 0x07
     f36:	60 85       	ldd	r22, Z+8	; 0x08
     f38:	71 85       	ldd	r23, Z+9	; 0x09
     f3a:	40 93 c0 2a 	sts	0x2AC0, r20	; 0x802ac0 <scheduler_absolute_time_of_last_timeout>
     f3e:	50 93 c1 2a 	sts	0x2AC1, r21	; 0x802ac1 <scheduler_absolute_time_of_last_timeout+0x1>
     f42:	60 93 c2 2a 	sts	0x2AC2, r22	; 0x802ac2 <scheduler_absolute_time_of_last_timeout+0x2>
     f46:	70 93 c3 2a 	sts	0x2AC3, r23	; 0x802ac3 <scheduler_absolute_time_of_last_timeout+0x3>
	scheduler_last_timer_load               = 0;
     f4a:	10 92 bc 2a 	sts	0x2ABC, r1	; 0x802abc <scheduler_last_timer_load>
     f4e:	10 92 bd 2a 	sts	0x2ABD, r1	; 0x802abd <scheduler_last_timer_load+0x1>
     f52:	10 92 be 2a 	sts	0x2ABE, r1	; 0x802abe <scheduler_last_timer_load+0x2>
     f56:	10 92 bf 2a 	sts	0x2ABF, r1	; 0x802abf <scheduler_last_timer_load+0x3>

	if (scheduler_list_head != &scheduler_dummy)
     f5a:	f8 e2       	ldi	r31, 0x28	; 40
     f5c:	84 32       	cpi	r24, 0x24	; 36
     f5e:	9f 07       	cpc	r25, r31
     f60:	11 f0       	breq	.+4      	; 0xf66 <__vector_3+0x68>
		scheduler_enqueue_callback(scheduler_list_head);
     f62:	0e 94 67 07 	call	0xece	; 0xece <scheduler_enqueue_callback>

	// Remove expired timer for the list now (it is always the one at the head)
	scheduler_list_head = next;
     f66:	c0 93 c6 2a 	sts	0x2AC6, r28	; 0x802ac6 <scheduler_list_head>
     f6a:	d0 93 c7 2a 	sts	0x2AC7, r29	; 0x802ac7 <scheduler_list_head+0x1>

	scheduler_start_timer_at_head();
     f6e:	0e 94 10 07 	call	0xe20	; 0xe20 <scheduler_start_timer_at_head>

	RTC.INTFLAGS = RTC_OVF_bm;
     f72:	81 e0       	ldi	r24, 0x01	; 1
     f74:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
}
     f78:	ff 91       	pop	r31
     f7a:	ef 91       	pop	r30
     f7c:	df 91       	pop	r29
     f7e:	cf 91       	pop	r28
     f80:	bf 91       	pop	r27
     f82:	af 91       	pop	r26
     f84:	9f 91       	pop	r25
     f86:	8f 91       	pop	r24
     f88:	7f 91       	pop	r23
     f8a:	6f 91       	pop	r22
     f8c:	5f 91       	pop	r21
     f8e:	4f 91       	pop	r20
     f90:	3f 91       	pop	r19
     f92:	2f 91       	pop	r18
     f94:	0f 90       	pop	r0
     f96:	0f be       	out	0x3f, r0	; 63
     f98:	0f 90       	pop	r0
     f9a:	1f 90       	pop	r1
     f9c:	18 95       	reti

00000f9e <default_rx_isr>:
}

bool USART_0_is_tx_busy()
{
	return (!(USART2.STATUS & USART_TXCIF_bm));
}
     f9e:	80 91 40 08 	lds	r24, 0x0840	; 0x800840 <__TEXT_REGION_LENGTH__+0x700840>
     fa2:	e0 91 d7 2a 	lds	r30, 0x2AD7	; 0x802ad7 <USART_0_rx_head>
     fa6:	ef 5f       	subi	r30, 0xFF	; 255
     fa8:	e7 70       	andi	r30, 0x07	; 7
     faa:	e0 93 d7 2a 	sts	0x2AD7, r30	; 0x802ad7 <USART_0_rx_head>
     fae:	90 91 d6 2a 	lds	r25, 0x2AD6	; 0x802ad6 <USART_0_rx_tail>
     fb2:	f0 e0       	ldi	r31, 0x00	; 0
     fb4:	e8 52       	subi	r30, 0x28	; 40
     fb6:	f5 4d       	sbci	r31, 0xD5	; 213
     fb8:	80 83       	st	Z, r24
     fba:	80 91 d5 2a 	lds	r24, 0x2AD5	; 0x802ad5 <USART_0_rx_elements>
     fbe:	8f 5f       	subi	r24, 0xFF	; 255
     fc0:	80 93 d5 2a 	sts	0x2AD5, r24	; 0x802ad5 <USART_0_rx_elements>
     fc4:	08 95       	ret

00000fc6 <default_udre_isr>:
     fc6:	80 91 ca 2a 	lds	r24, 0x2ACA	; 0x802aca <USART_0_tx_elements>
     fca:	88 23       	and	r24, r24
     fcc:	29 f1       	breq	.+74     	; 0x1018 <default_udre_isr+0x52>
     fce:	e0 91 cb 2a 	lds	r30, 0x2ACB	; 0x802acb <USART_0_tx_tail>
     fd2:	ef 5f       	subi	r30, 0xFF	; 255
     fd4:	e7 70       	andi	r30, 0x07	; 7
     fd6:	e0 93 cb 2a 	sts	0x2ACB, r30	; 0x802acb <USART_0_tx_tail>
     fda:	10 92 c8 2a 	sts	0x2AC8, r1	; 0x802ac8 <ij>
     fde:	10 92 c9 2a 	sts	0x2AC9, r1	; 0x802ac9 <ij+0x1>
     fe2:	80 91 c8 2a 	lds	r24, 0x2AC8	; 0x802ac8 <ij>
     fe6:	90 91 c9 2a 	lds	r25, 0x2AC9	; 0x802ac9 <ij+0x1>
     fea:	0a 97       	sbiw	r24, 0x0a	; 10
     fec:	54 f4       	brge	.+20     	; 0x1002 <default_udre_isr+0x3c>
     fee:	80 91 c8 2a 	lds	r24, 0x2AC8	; 0x802ac8 <ij>
     ff2:	90 91 c9 2a 	lds	r25, 0x2AC9	; 0x802ac9 <ij+0x1>
     ff6:	01 96       	adiw	r24, 0x01	; 1
     ff8:	80 93 c8 2a 	sts	0x2AC8, r24	; 0x802ac8 <ij>
     ffc:	90 93 c9 2a 	sts	0x2AC9, r25	; 0x802ac9 <ij+0x1>
    1000:	f0 cf       	rjmp	.-32     	; 0xfe2 <default_udre_isr+0x1c>
    1002:	f0 e0       	ldi	r31, 0x00	; 0
    1004:	e3 53       	subi	r30, 0x33	; 51
    1006:	f5 4d       	sbci	r31, 0xD5	; 213
    1008:	80 81       	ld	r24, Z
    100a:	80 93 42 08 	sts	0x0842, r24	; 0x800842 <__TEXT_REGION_LENGTH__+0x700842>
    100e:	80 91 ca 2a 	lds	r24, 0x2ACA	; 0x802aca <USART_0_tx_elements>
    1012:	81 50       	subi	r24, 0x01	; 1
    1014:	80 93 ca 2a 	sts	0x2ACA, r24	; 0x802aca <USART_0_tx_elements>
    1018:	80 91 ca 2a 	lds	r24, 0x2ACA	; 0x802aca <USART_0_tx_elements>
    101c:	81 11       	cpse	r24, r1
    101e:	05 c0       	rjmp	.+10     	; 0x102a <default_udre_isr+0x64>
    1020:	80 91 45 08 	lds	r24, 0x0845	; 0x800845 <__TEXT_REGION_LENGTH__+0x700845>
    1024:	8f 7d       	andi	r24, 0xDF	; 223
    1026:	80 93 45 08 	sts	0x0845, r24	; 0x800845 <__TEXT_REGION_LENGTH__+0x700845>
    102a:	08 95       	ret

0000102c <USART_0_set_ISR_cb>:
    102c:	61 30       	cpi	r22, 0x01	; 1
    102e:	19 f0       	breq	.+6      	; 0x1036 <USART_0_set_ISR_cb+0xa>
    1030:	62 30       	cpi	r22, 0x02	; 2
    1032:	31 f0       	breq	.+12     	; 0x1040 <USART_0_set_ISR_cb+0x14>
    1034:	08 95       	ret
    1036:	80 93 30 28 	sts	0x2830, r24	; 0x802830 <rx_isr_cb>
    103a:	90 93 31 28 	sts	0x2831, r25	; 0x802831 <rx_isr_cb+0x1>
    103e:	08 95       	ret
    1040:	80 93 2e 28 	sts	0x282E, r24	; 0x80282e <udre_isr_cb>
    1044:	90 93 2f 28 	sts	0x282F, r25	; 0x80282f <udre_isr_cb+0x1>
    1048:	08 95       	ret

0000104a <__vector_31>:
    104a:	1f 92       	push	r1
    104c:	0f 92       	push	r0
    104e:	0f b6       	in	r0, 0x3f	; 63
    1050:	0f 92       	push	r0
    1052:	11 24       	eor	r1, r1
    1054:	2f 93       	push	r18
    1056:	3f 93       	push	r19
    1058:	4f 93       	push	r20
    105a:	5f 93       	push	r21
    105c:	6f 93       	push	r22
    105e:	7f 93       	push	r23
    1060:	8f 93       	push	r24
    1062:	9f 93       	push	r25
    1064:	af 93       	push	r26
    1066:	bf 93       	push	r27
    1068:	ef 93       	push	r30
    106a:	ff 93       	push	r31
    106c:	e0 91 30 28 	lds	r30, 0x2830	; 0x802830 <rx_isr_cb>
    1070:	f0 91 31 28 	lds	r31, 0x2831	; 0x802831 <rx_isr_cb+0x1>
    1074:	09 95       	icall
    1076:	ff 91       	pop	r31
    1078:	ef 91       	pop	r30
    107a:	bf 91       	pop	r27
    107c:	af 91       	pop	r26
    107e:	9f 91       	pop	r25
    1080:	8f 91       	pop	r24
    1082:	7f 91       	pop	r23
    1084:	6f 91       	pop	r22
    1086:	5f 91       	pop	r21
    1088:	4f 91       	pop	r20
    108a:	3f 91       	pop	r19
    108c:	2f 91       	pop	r18
    108e:	0f 90       	pop	r0
    1090:	0f be       	out	0x3f, r0	; 63
    1092:	0f 90       	pop	r0
    1094:	1f 90       	pop	r1
    1096:	18 95       	reti

00001098 <__vector_32>:
    1098:	1f 92       	push	r1
    109a:	0f 92       	push	r0
    109c:	0f b6       	in	r0, 0x3f	; 63
    109e:	0f 92       	push	r0
    10a0:	11 24       	eor	r1, r1
    10a2:	2f 93       	push	r18
    10a4:	3f 93       	push	r19
    10a6:	4f 93       	push	r20
    10a8:	5f 93       	push	r21
    10aa:	6f 93       	push	r22
    10ac:	7f 93       	push	r23
    10ae:	8f 93       	push	r24
    10b0:	9f 93       	push	r25
    10b2:	af 93       	push	r26
    10b4:	bf 93       	push	r27
    10b6:	ef 93       	push	r30
    10b8:	ff 93       	push	r31
    10ba:	e0 91 2e 28 	lds	r30, 0x282E	; 0x80282e <udre_isr_cb>
    10be:	f0 91 2f 28 	lds	r31, 0x282F	; 0x80282f <udre_isr_cb+0x1>
    10c2:	09 95       	icall
    10c4:	ff 91       	pop	r31
    10c6:	ef 91       	pop	r30
    10c8:	bf 91       	pop	r27
    10ca:	af 91       	pop	r26
    10cc:	9f 91       	pop	r25
    10ce:	8f 91       	pop	r24
    10d0:	7f 91       	pop	r23
    10d2:	6f 91       	pop	r22
    10d4:	5f 91       	pop	r21
    10d6:	4f 91       	pop	r20
    10d8:	3f 91       	pop	r19
    10da:	2f 91       	pop	r18
    10dc:	0f 90       	pop	r0
    10de:	0f be       	out	0x3f, r0	; 63
    10e0:	0f 90       	pop	r0
    10e2:	1f 90       	pop	r1
    10e4:	18 95       	reti

000010e6 <USART_0_is_tx_ready>:
    10e6:	90 91 ca 2a 	lds	r25, 0x2ACA	; 0x802aca <USART_0_tx_elements>
    10ea:	81 e0       	ldi	r24, 0x01	; 1
    10ec:	98 30       	cpi	r25, 0x08	; 8
    10ee:	09 f4       	brne	.+2      	; 0x10f2 <USART_0_is_tx_ready+0xc>
    10f0:	80 e0       	ldi	r24, 0x00	; 0
    10f2:	08 95       	ret

000010f4 <USART_0_is_rx_ready>:
    10f4:	90 91 d5 2a 	lds	r25, 0x2AD5	; 0x802ad5 <USART_0_rx_elements>
    10f8:	81 e0       	ldi	r24, 0x01	; 1
    10fa:	91 11       	cpse	r25, r1
    10fc:	01 c0       	rjmp	.+2      	; 0x1100 <USART_0_is_rx_ready+0xc>
    10fe:	80 e0       	ldi	r24, 0x00	; 0
    1100:	08 95       	ret

00001102 <USART_0_read>:
uint8_t USART_0_read(void)
{
	uint8_t tmptail;

	/* Wait for incoming data */
	while (USART_0_rx_elements == 0)
    1102:	80 91 d5 2a 	lds	r24, 0x2AD5	; 0x802ad5 <USART_0_rx_elements>
    1106:	88 23       	and	r24, r24
    1108:	e1 f3       	breq	.-8      	; 0x1102 <USART_0_read>
		;
	/* Calculate buffer index */
	tmptail = (USART_0_rx_tail + 1) & USART_0_RX_BUFFER_MASK;
    110a:	e0 91 d6 2a 	lds	r30, 0x2AD6	; 0x802ad6 <USART_0_rx_tail>
    110e:	ef 5f       	subi	r30, 0xFF	; 255
    1110:	e7 70       	andi	r30, 0x07	; 7
	/* Store new index */
	USART_0_rx_tail = tmptail;
    1112:	e0 93 d6 2a 	sts	0x2AD6, r30	; 0x802ad6 <USART_0_rx_tail>
	ENTER_CRITICAL(R);
    1116:	0f b6       	in	r0, 0x3f	; 63
    1118:	f8 94       	cli
    111a:	0f 92       	push	r0
	USART_0_rx_elements--;
    111c:	80 91 d5 2a 	lds	r24, 0x2AD5	; 0x802ad5 <USART_0_rx_elements>
    1120:	81 50       	subi	r24, 0x01	; 1
    1122:	80 93 d5 2a 	sts	0x2AD5, r24	; 0x802ad5 <USART_0_rx_elements>
	EXIT_CRITICAL(R);
    1126:	0f 90       	pop	r0
    1128:	0f be       	out	0x3f, r0	; 63

	/* Return data */
	return USART_0_rxbuf[tmptail];
    112a:	f0 e0       	ldi	r31, 0x00	; 0
    112c:	e8 52       	subi	r30, 0x28	; 40
    112e:	f5 4d       	sbci	r31, 0xD5	; 213
}
    1130:	80 81       	ld	r24, Z
    1132:	08 95       	ret

00001134 <USART_0_write>:
void USART_0_write(const uint8_t data)
{
	uint8_t tmphead;

	/* Calculate buffer index */
	tmphead = (USART_0_tx_head + 1) & USART_0_TX_BUFFER_MASK;
    1134:	90 91 cc 2a 	lds	r25, 0x2ACC	; 0x802acc <USART_0_tx_head>
    1138:	9f 5f       	subi	r25, 0xFF	; 255
    113a:	97 70       	andi	r25, 0x07	; 7
	/* Wait for free space in buffer */
	while (USART_0_tx_elements == USART_0_TX_BUFFER_SIZE)
    113c:	20 91 ca 2a 	lds	r18, 0x2ACA	; 0x802aca <USART_0_tx_elements>
    1140:	28 30       	cpi	r18, 0x08	; 8
    1142:	e1 f3       	breq	.-8      	; 0x113c <USART_0_write+0x8>
		;
	/* Store data in buffer */
	USART_0_txbuf[tmphead] = data;
    1144:	e9 2f       	mov	r30, r25
    1146:	f0 e0       	ldi	r31, 0x00	; 0
    1148:	e3 53       	subi	r30, 0x33	; 51
    114a:	f5 4d       	sbci	r31, 0xD5	; 213
    114c:	80 83       	st	Z, r24
	/* Store new index */
	USART_0_tx_head = tmphead;
    114e:	90 93 cc 2a 	sts	0x2ACC, r25	; 0x802acc <USART_0_tx_head>
	ENTER_CRITICAL(W);
    1152:	0f b6       	in	r0, 0x3f	; 63
    1154:	f8 94       	cli
    1156:	0f 92       	push	r0
	USART_0_tx_elements++;
    1158:	80 91 ca 2a 	lds	r24, 0x2ACA	; 0x802aca <USART_0_tx_elements>
    115c:	8f 5f       	subi	r24, 0xFF	; 255
    115e:	80 93 ca 2a 	sts	0x2ACA, r24	; 0x802aca <USART_0_tx_elements>
	EXIT_CRITICAL(W);
    1162:	0f 90       	pop	r0
    1164:	0f be       	out	0x3f, r0	; 63
	/* Enable UDRE interrupt */
	USART2.CTRLA |= (1 << USART_DREIE_bp);
    1166:	80 91 45 08 	lds	r24, 0x0845	; 0x800845 <__TEXT_REGION_LENGTH__+0x700845>
    116a:	80 62       	ori	r24, 0x20	; 32
    116c:	80 93 45 08 	sts	0x0845, r24	; 0x800845 <__TEXT_REGION_LENGTH__+0x700845>
    1170:	08 95       	ret

00001172 <USART_0_printCHAR>:

#if defined(__GNUC__)

int USART_0_printCHAR(char character, FILE *stream)
{
	USART_0_write(character);
    1172:	0e 94 9a 08 	call	0x1134	; 0x1134 <USART_0_write>
	return 0;
}
    1176:	80 e0       	ldi	r24, 0x00	; 0
    1178:	90 e0       	ldi	r25, 0x00	; 0
    117a:	08 95       	ret

0000117c <USART_0_init>:
 * \retval 1 the USART init was not successful
 */
int8_t USART_0_init()
{

	USART2.BAUD = (uint16_t)USART2_BAUD_RATE(115200); /* set baud rate register */
    117c:	e0 e4       	ldi	r30, 0x40	; 64
    117e:	f8 e0       	ldi	r31, 0x08	; 8
    1180:	8b e5       	ldi	r24, 0x5B	; 91
    1182:	91 e0       	ldi	r25, 0x01	; 1
    1184:	80 87       	std	Z+8, r24	; 0x08
    1186:	91 87       	std	Z+9, r25	; 0x09
	//		 | USART_RS485_OFF_gc /* RS485 Mode disabled */
	//		 | 0 << USART_RXCIE_bp /* Receive Complete Interrupt Enable: disabled */
	//		 | 0 << USART_RXSIE_bp /* Receiver Start Frame Interrupt Enable: disabled */
	//		 | 0 << USART_TXCIE_bp; /* Transmit Complete Interrupt Enable: disabled */

	USART2.CTRLB = 0 << USART_MPCM_bp       /* Multi-processor Communication Mode: disabled */
    1188:	80 ec       	ldi	r24, 0xC0	; 192
    118a:	86 83       	std	Z+6, r24	; 0x06
	uint8_t x;

	/* Initialize ringbuffers */
	x = 0;

	USART_0_rx_tail     = x;
    118c:	10 92 d6 2a 	sts	0x2AD6, r1	; 0x802ad6 <USART_0_rx_tail>
	USART_0_rx_head     = x;
    1190:	10 92 d7 2a 	sts	0x2AD7, r1	; 0x802ad7 <USART_0_rx_head>
	USART_0_rx_elements = x;
    1194:	10 92 d5 2a 	sts	0x2AD5, r1	; 0x802ad5 <USART_0_rx_elements>
	USART_0_tx_tail     = x;
    1198:	10 92 cb 2a 	sts	0x2ACB, r1	; 0x802acb <USART_0_tx_tail>
	USART_0_tx_head     = x;
    119c:	10 92 cc 2a 	sts	0x2ACC, r1	; 0x802acc <USART_0_tx_head>
	USART_0_tx_elements = x;
    11a0:	10 92 ca 2a 	sts	0x2ACA, r1	; 0x802aca <USART_0_tx_elements>

#if defined(__GNUC__)
	stdout = &USART_0_stream;
    11a4:	82 e3       	ldi	r24, 0x32	; 50
    11a6:	98 e2       	ldi	r25, 0x28	; 40
    11a8:	80 93 e9 2a 	sts	0x2AE9, r24	; 0x802ae9 <__iob+0x2>
    11ac:	90 93 ea 2a 	sts	0x2AEA, r25	; 0x802aea <__iob+0x3>
#endif

	return 0;
}
    11b0:	80 e0       	ldi	r24, 0x00	; 0
    11b2:	08 95       	ret

000011b4 <__vector_29>:
 *	@return	0 in case of success and -1 in case of failure
 */
sint8 nm_bsp_deinit(void)
{
	return M2M_SUCCESS;
}
    11b4:	1f 92       	push	r1
    11b6:	0f 92       	push	r0
    11b8:	0f b6       	in	r0, 0x3f	; 63
    11ba:	0f 92       	push	r0
    11bc:	11 24       	eor	r1, r1
    11be:	2f 93       	push	r18
    11c0:	3f 93       	push	r19
    11c2:	4f 93       	push	r20
    11c4:	5f 93       	push	r21
    11c6:	6f 93       	push	r22
    11c8:	7f 93       	push	r23
    11ca:	8f 93       	push	r24
    11cc:	9f 93       	push	r25
    11ce:	af 93       	push	r26
    11d0:	bf 93       	push	r27
    11d2:	ef 93       	push	r30
    11d4:	ff 93       	push	r31
    11d6:	b2 99       	sbic	0x16, 2	; 22
    11d8:	07 c0       	rjmp	.+14     	; 0x11e8 <__vector_29+0x34>
    11da:	e0 91 e0 2a 	lds	r30, 0x2AE0	; 0x802ae0 <gpfIsr>
    11de:	f0 91 e1 2a 	lds	r31, 0x2AE1	; 0x802ae1 <gpfIsr+0x1>
    11e2:	30 97       	sbiw	r30, 0x00	; 0
    11e4:	09 f0       	breq	.+2      	; 0x11e8 <__vector_29+0x34>
    11e6:	09 95       	icall
    11e8:	84 e0       	ldi	r24, 0x04	; 4
    11ea:	87 bb       	out	0x17, r24	; 23
    11ec:	ff 91       	pop	r31
    11ee:	ef 91       	pop	r30
    11f0:	bf 91       	pop	r27
    11f2:	af 91       	pop	r26
    11f4:	9f 91       	pop	r25
    11f6:	8f 91       	pop	r24
    11f8:	7f 91       	pop	r23
    11fa:	6f 91       	pop	r22
    11fc:	5f 91       	pop	r21
    11fe:	4f 91       	pop	r20
    1200:	3f 91       	pop	r19
    1202:	2f 91       	pop	r18
    1204:	0f 90       	pop	r0
    1206:	0f be       	out	0x3f, r0	; 63
    1208:	0f 90       	pop	r0
    120a:	1f 90       	pop	r1
    120c:	18 95       	reti

0000120e <nm_bsp_sleep>:
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
	while (u32TimeMsec--) {
    120e:	61 15       	cp	r22, r1
    1210:	71 05       	cpc	r23, r1
    1212:	81 05       	cpc	r24, r1
    1214:	91 05       	cpc	r25, r1
    1216:	59 f0       	breq	.+22     	; 0x122e <nm_bsp_sleep+0x20>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1218:	e3 ec       	ldi	r30, 0xC3	; 195
    121a:	f9 e0       	ldi	r31, 0x09	; 9
    121c:	31 97       	sbiw	r30, 0x01	; 1
    121e:	f1 f7       	brne	.-4      	; 0x121c <nm_bsp_sleep+0xe>
    1220:	00 c0       	rjmp	.+0      	; 0x1222 <nm_bsp_sleep+0x14>
    1222:	00 00       	nop
    1224:	61 50       	subi	r22, 0x01	; 1
    1226:	71 09       	sbc	r23, r1
    1228:	81 09       	sbc	r24, r1
    122a:	91 09       	sbc	r25, r1
    122c:	f0 cf       	rjmp	.-32     	; 0x120e <nm_bsp_sleep>
		_delay_ms(1);
	}
}
    122e:	08 95       	ret

00001230 <nm_bsp_reset>:
static inline void PORTF_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTF.OUT |= (1 << pin);
	} else {
		VPORTF.OUT &= ~(1 << pin);
    1230:	ab 98       	cbi	0x15, 3	; 21
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
    1232:	09 98       	cbi	0x01, 1	; 1
	//ioport_set_pin_level(CONF_WIFI_M2M_RESET_PIN, false);
	CONF_WIFI_M2M_RESET_PIN_set_level(false);
	
// 	asm volatile ("nop");
// 	PORTB_set_pin_level(5,true);
	nm_bsp_sleep(1);
    1234:	61 e0       	ldi	r22, 0x01	; 1
    1236:	70 e0       	ldi	r23, 0x00	; 0
    1238:	80 e0       	ldi	r24, 0x00	; 0
    123a:	90 e0       	ldi	r25, 0x00	; 0
    123c:	0e 94 07 09 	call	0x120e	; 0x120e <nm_bsp_sleep>
 *                  false = Pin level set to "low" state
 */
static inline void PORTF_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTF.OUT |= (1 << pin);
    1240:	ab 9a       	sbi	0x15, 3	; 21
// 	asm volatile ("nop");

	//ioport_set_pin_level(CONF_WIFI_M2M_CHIP_ENABLE_PIN, true);
	CONF_WIFI_M2M_CHIP_ENABLE_PIN_set_level(true);
	
	nm_bsp_sleep(10);
    1242:	6a e0       	ldi	r22, 0x0A	; 10
    1244:	70 e0       	ldi	r23, 0x00	; 0
    1246:	80 e0       	ldi	r24, 0x00	; 0
    1248:	90 e0       	ldi	r25, 0x00	; 0
    124a:	0e 94 07 09 	call	0x120e	; 0x120e <nm_bsp_sleep>
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
    124e:	09 9a       	sbi	0x01, 1	; 1
    1250:	08 95       	ret

00001252 <nm_bsp_init>:
 *	@brief	Initialize BSP
 *	@return	0 in case of success and -1 in case of failure
 */
sint8 nm_bsp_init(void)
{
	gpfIsr = NULL;
    1252:	10 92 e0 2a 	sts	0x2AE0, r1	; 0x802ae0 <gpfIsr>
    1256:	10 92 e1 2a 	sts	0x2AE1, r1	; 0x802ae1 <gpfIsr+0x1>
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
    125a:	01 9a       	sbi	0x00, 1	; 0
	switch (dir) {
	case PORT_DIR_IN:
		VPORTF.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTF.DIR |= (1 << pin);
    125c:	a3 9a       	sbi	0x14, 3	; 20
    125e:	a4 9a       	sbi	0x14, 4	; 20

	/* Initialize the delay driver. */
	//delay_init();

	/* Perform chip reset. */
	nm_bsp_reset();
    1260:	0e 94 18 09 	call	0x1230	; 0x1230 <nm_bsp_reset>

	cpu_irq_enable();
    1264:	78 94       	sei

	return M2M_SUCCESS;
}
    1266:	80 e0       	ldi	r24, 0x00	; 0
    1268:	08 95       	ret

0000126a <nm_bus_init>:
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
    126a:	07 9a       	sbi	0x00, 7	; 0
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
    126c:	0f 9a       	sbi	0x01, 7	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
    126e:	04 9a       	sbi	0x00, 4	; 0
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
    1270:	0c 9a       	sbi	0x01, 4	; 1
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
    1272:	05 98       	cbi	0x00, 5	; 0
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
    1274:	06 9a       	sbi	0x00, 6	; 0
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
    1276:	0e 98       	cbi	0x01, 6	; 1
	//struct spi_device spi_device_conf;
	//spi_device_conf.id = CONF_WIFI_M2M_SPI_CS_PIN;
	 
	/* Configure the SPI master. */
	//spi_master_init(CONF_WIFI_M2M_SPI_MODULE);
	SPI_0_init();
    1278:	0e 94 a7 06 	call	0xd4e	; 0xd4e <SPI_0_init>
	
	//spi_master_setup_device(CONF_WIFI_M2M_SPI_MODULE, &spi_device_conf, SPI_MODE_0, CONF_WIFI_M2M_SPI_BAUDRATE, 0);
	
	/* Enable the SPI master. */
	//spi_enable(CONF_WIFI_M2M_SPI_MODULE);
	SPI_0_enable();
    127c:	0e 94 ad 06 	call	0xd5a	; 0xd5a <SPI_0_enable>

	nm_bsp_reset();
    1280:	0e 94 18 09 	call	0x1230	; 0x1230 <nm_bsp_reset>
	nm_bsp_sleep(1);
    1284:	61 e0       	ldi	r22, 0x01	; 1
    1286:	70 e0       	ldi	r23, 0x00	; 0
    1288:	80 e0       	ldi	r24, 0x00	; 0
    128a:	90 e0       	ldi	r25, 0x00	; 0
    128c:	0e 94 07 09 	call	0x120e	; 0x120e <nm_bsp_sleep>
#endif
	return result;
}
    1290:	80 e0       	ldi	r24, 0x00	; 0
    1292:	08 95       	ret

00001294 <nm_bus_ioctl>:
*					Arbitrary parameter depenging on IOCTL
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
    1294:	af 92       	push	r10
    1296:	bf 92       	push	r11
    1298:	cf 92       	push	r12
    129a:	df 92       	push	r13
    129c:	ef 92       	push	r14
    129e:	ff 92       	push	r15
    12a0:	0f 93       	push	r16
    12a2:	1f 93       	push	r17
    12a4:	cf 93       	push	r28
    12a6:	df 93       	push	r29
    12a8:	1f 92       	push	r1
    12aa:	cd b7       	in	r28, 0x3d	; 61
    12ac:	de b7       	in	r29, 0x3e	; 62
    12ae:	fb 01       	movw	r30, r22
	sint8 s8Ret = 0;
	switch(u8Cmd)
    12b0:	83 30       	cpi	r24, 0x03	; 3
    12b2:	b1 f5       	brne	.+108    	; 0x1320 <nm_bus_ioctl+0x8c>
		}
		break;
#elif defined CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
    12b4:	c4 80       	ldd	r12, Z+4	; 0x04
    12b6:	d5 80       	ldd	r13, Z+5	; 0x05
    12b8:	e2 80       	ldd	r14, Z+2	; 0x02
    12ba:	f3 80       	ldd	r15, Z+3	; 0x03
    12bc:	00 81       	ld	r16, Z
    12be:	11 81       	ldd	r17, Z+1	; 0x01
#ifdef CONF_WINC_USE_SPI
static sint8 spi_rw(uint8* pu8Mosi, uint8* pu8Miso, uint16 u16Sz)
{
	//struct spi_device spi_device_conf;
	//spi_device_conf.id = CONF_WIFI_M2M_SPI_CS_PIN;
	uint8 u8Dummy = 0;
    12c0:	19 82       	std	Y+1, r1	; 0x01
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
	uint16_t txd_data = 0;
	uint16_t rxd_data = 0;

	if (!pu8Mosi) {
    12c2:	01 15       	cp	r16, r1
    12c4:	11 05       	cpc	r17, r1
    12c6:	49 f0       	breq	.+18     	; 0x12da <nm_bus_ioctl+0x46>
		pu8Mosi = &u8Dummy;
		u8SkipMosi = 1;
	}
	else if(!pu8Miso) {
    12c8:	ef 28       	or	r14, r15
    12ca:	41 f5       	brne	.+80     	; 0x131c <nm_bus_ioctl+0x88>
		pu8Miso = &u8Dummy;
		u8SkipMiso = 1;
    12cc:	bb 24       	eor	r11, r11
    12ce:	b3 94       	inc	r11
static sint8 spi_rw(uint8* pu8Mosi, uint8* pu8Miso, uint16 u16Sz)
{
	//struct spi_device spi_device_conf;
	//spi_device_conf.id = CONF_WIFI_M2M_SPI_CS_PIN;
	uint8 u8Dummy = 0;
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
    12d0:	a1 2c       	mov	r10, r1
	if (!pu8Mosi) {
		pu8Mosi = &u8Dummy;
		u8SkipMosi = 1;
	}
	else if(!pu8Miso) {
		pu8Miso = &u8Dummy;
    12d2:	ce 01       	movw	r24, r28
    12d4:	01 96       	adiw	r24, 0x01	; 1
    12d6:	7c 01       	movw	r14, r24
    12d8:	06 c0       	rjmp	.+12     	; 0x12e6 <nm_bus_ioctl+0x52>
static sint8 spi_rw(uint8* pu8Mosi, uint8* pu8Miso, uint16 u16Sz)
{
	//struct spi_device spi_device_conf;
	//spi_device_conf.id = CONF_WIFI_M2M_SPI_CS_PIN;
	uint8 u8Dummy = 0;
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
    12da:	b1 2c       	mov	r11, r1
	uint16_t txd_data = 0;
	uint16_t rxd_data = 0;

	if (!pu8Mosi) {
		pu8Mosi = &u8Dummy;
		u8SkipMosi = 1;
    12dc:	aa 24       	eor	r10, r10
    12de:	a3 94       	inc	r10
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
	uint16_t txd_data = 0;
	uint16_t rxd_data = 0;

	if (!pu8Mosi) {
		pu8Mosi = &u8Dummy;
    12e0:	8e 01       	movw	r16, r28
    12e2:	0f 5f       	subi	r16, 0xFF	; 255
    12e4:	1f 4f       	sbci	r17, 0xFF	; 255
    12e6:	0f 98       	cbi	0x01, 7	; 1
	}

	//spi_select_device(CONF_WIFI_M2M_SPI_MODULE, &spi_device_conf);
	CONF_WIFI_M2M_SPI_CS_PIN_set_level(false);
	
	while (u16Sz) {
    12e8:	c1 14       	cp	r12, r1
    12ea:	d1 04       	cpc	r13, r1
    12ec:	a1 f0       	breq	.+40     	; 0x1316 <nm_bus_ioctl+0x82>
//		spi_read_single((uint8_t*)(&rxd_data));
		//SPI_0_read_block((uint8_t*)(&rxd_data), 1);
		
		
		
		rxd_data = SPI_0_exchange_byte(txd_data);		
    12ee:	f8 01       	movw	r30, r16
    12f0:	80 81       	ld	r24, Z
    12f2:	90 e0       	ldi	r25, 0x00	; 0
    12f4:	0e 94 b3 06 	call	0xd66	; 0xd66 <SPI_0_exchange_byte>
		
		*pu8Miso = rxd_data;
    12f8:	f7 01       	movw	r30, r14
    12fa:	80 83       	st	Z, r24

		u16Sz--;
    12fc:	f1 e0       	ldi	r31, 0x01	; 1
    12fe:	cf 1a       	sub	r12, r31
    1300:	d1 08       	sbc	r13, r1
		if (!u8SkipMiso)
    1302:	b1 10       	cpse	r11, r1
    1304:	03 c0       	rjmp	.+6      	; 0x130c <nm_bus_ioctl+0x78>
			pu8Miso++;
    1306:	8f ef       	ldi	r24, 0xFF	; 255
    1308:	e8 1a       	sub	r14, r24
    130a:	f8 0a       	sbc	r15, r24
		if (!u8SkipMosi)
    130c:	a1 10       	cpse	r10, r1
    130e:	ec cf       	rjmp	.-40     	; 0x12e8 <nm_bus_ioctl+0x54>
			pu8Mosi++;
    1310:	0f 5f       	subi	r16, 0xFF	; 255
    1312:	1f 4f       	sbci	r17, 0xFF	; 255
    1314:	e9 cf       	rjmp	.-46     	; 0x12e8 <nm_bus_ioctl+0x54>
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
    1316:	0f 9a       	sbi	0x01, 7	; 1
	}

	//spi_deselect_device(CONF_WIFI_M2M_SPI_MODULE, &spi_device_conf);
	CONF_WIFI_M2M_SPI_CS_PIN_set_level(true);

	return M2M_SUCCESS;
    1318:	80 e0       	ldi	r24, 0x00	; 0
    131a:	03 c0       	rjmp	.+6      	; 0x1322 <nm_bus_ioctl+0x8e>
	else if(!pu8Miso) {
		pu8Miso = &u8Dummy;
		u8SkipMiso = 1;
	}
	else {
		return M2M_ERR_BUS_FAIL;
    131c:	8a ef       	ldi	r24, 0xFA	; 250
#elif defined CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
		}
		break;
    131e:	01 c0       	rjmp	.+2      	; 0x1322 <nm_bus_ioctl+0x8e>
#endif
		default:
			s8Ret = -1;
    1320:	8f ef       	ldi	r24, 0xFF	; 255
			M2M_ERR("invalide ioclt cmd\n");
			break;
	}

	return s8Ret;
}
    1322:	0f 90       	pop	r0
    1324:	df 91       	pop	r29
    1326:	cf 91       	pop	r28
    1328:	1f 91       	pop	r17
    132a:	0f 91       	pop	r16
    132c:	ff 90       	pop	r15
    132e:	ef 90       	pop	r14
    1330:	df 90       	pop	r13
    1332:	cf 90       	pop	r12
    1334:	bf 90       	pop	r11
    1336:	af 90       	pop	r10
    1338:	08 95       	ret

0000133a <m2m_wifi_download_mode>:
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}

sint8 m2m_wifi_download_mode()
{
    133a:	cf 93       	push	r28
	sint8 ret = M2M_SUCCESS;
	/* Apply device specific initialization. */
	ret = nm_drv_init_download_mode();
    133c:	0e 94 9b 0c 	call	0x1936	; 0x1936 <nm_drv_init_download_mode>
    1340:	c8 2f       	mov	r28, r24
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
    1342:	81 11       	cpse	r24, r1
    1344:	02 c0       	rjmp	.+4      	; 0x134a <m2m_wifi_download_mode+0x10>



	enable_interrupts();
    1346:	0e 94 a8 09 	call	0x1350	; 0x1350 <enable_interrupts>

_EXIT0:
	return ret;
}
    134a:	8c 2f       	mov	r24, r28
    134c:	cf 91       	pop	r28
    134e:	08 95       	ret

00001350 <enable_interrupts>:
		if(ret != M2M_SUCCESS)goto ERR1;
	}

ERR1:
	return ret;
}
    1350:	cf 93       	push	r28
    1352:	df 93       	push	r29
    1354:	00 d0       	rcall	.+0      	; 0x1356 <enable_interrupts+0x6>
    1356:	00 d0       	rcall	.+0      	; 0x1358 <enable_interrupts+0x8>
    1358:	cd b7       	in	r28, 0x3d	; 61
    135a:	de b7       	in	r29, 0x3e	; 62
    135c:	19 82       	std	Y+1, r1	; 0x01
    135e:	1a 82       	std	Y+2, r1	; 0x02
    1360:	1b 82       	std	Y+3, r1	; 0x03
    1362:	1c 82       	std	Y+4, r1	; 0x04
    1364:	ae 01       	movw	r20, r28
    1366:	4f 5f       	subi	r20, 0xFF	; 255
    1368:	5f 4f       	sbci	r21, 0xFF	; 255
    136a:	68 e0       	ldi	r22, 0x08	; 8
    136c:	74 e1       	ldi	r23, 0x14	; 20
    136e:	80 e0       	ldi	r24, 0x00	; 0
    1370:	90 e0       	ldi	r25, 0x00	; 0
    1372:	0e 94 9d 0b 	call	0x173a	; 0x173a <nm_read_reg_with_ret>
    1376:	81 11       	cpse	r24, r1
    1378:	2f c0       	rjmp	.+94     	; 0x13d8 <enable_interrupts+0x88>
    137a:	89 81       	ldd	r24, Y+1	; 0x01
    137c:	9a 81       	ldd	r25, Y+2	; 0x02
    137e:	ab 81       	ldd	r26, Y+3	; 0x03
    1380:	bc 81       	ldd	r27, Y+4	; 0x04
    1382:	9c 01       	movw	r18, r24
    1384:	ad 01       	movw	r20, r26
    1386:	31 60       	ori	r19, 0x01	; 1
    1388:	29 83       	std	Y+1, r18	; 0x01
    138a:	3a 83       	std	Y+2, r19	; 0x02
    138c:	4b 83       	std	Y+3, r20	; 0x03
    138e:	5c 83       	std	Y+4, r21	; 0x04
    1390:	68 e0       	ldi	r22, 0x08	; 8
    1392:	74 e1       	ldi	r23, 0x14	; 20
    1394:	80 e0       	ldi	r24, 0x00	; 0
    1396:	90 e0       	ldi	r25, 0x00	; 0
    1398:	0e 94 9f 0b 	call	0x173e	; 0x173e <nm_write_reg>
    139c:	81 11       	cpse	r24, r1
    139e:	1c c0       	rjmp	.+56     	; 0x13d8 <enable_interrupts+0x88>
    13a0:	ae 01       	movw	r20, r28
    13a2:	4f 5f       	subi	r20, 0xFF	; 255
    13a4:	5f 4f       	sbci	r21, 0xFF	; 255
    13a6:	60 e0       	ldi	r22, 0x00	; 0
    13a8:	7a e1       	ldi	r23, 0x1A	; 26
    13aa:	80 e0       	ldi	r24, 0x00	; 0
    13ac:	90 e0       	ldi	r25, 0x00	; 0
    13ae:	0e 94 9d 0b 	call	0x173a	; 0x173a <nm_read_reg_with_ret>
    13b2:	81 11       	cpse	r24, r1
    13b4:	11 c0       	rjmp	.+34     	; 0x13d8 <enable_interrupts+0x88>
    13b6:	89 81       	ldd	r24, Y+1	; 0x01
    13b8:	9a 81       	ldd	r25, Y+2	; 0x02
    13ba:	ab 81       	ldd	r26, Y+3	; 0x03
    13bc:	bc 81       	ldd	r27, Y+4	; 0x04
    13be:	9c 01       	movw	r18, r24
    13c0:	ad 01       	movw	r20, r26
    13c2:	41 60       	ori	r20, 0x01	; 1
    13c4:	29 83       	std	Y+1, r18	; 0x01
    13c6:	3a 83       	std	Y+2, r19	; 0x02
    13c8:	4b 83       	std	Y+3, r20	; 0x03
    13ca:	5c 83       	std	Y+4, r21	; 0x04
    13cc:	60 e0       	ldi	r22, 0x00	; 0
    13ce:	7a e1       	ldi	r23, 0x1A	; 26
    13d0:	80 e0       	ldi	r24, 0x00	; 0
    13d2:	90 e0       	ldi	r25, 0x00	; 0
    13d4:	0e 94 9f 0b 	call	0x173e	; 0x173e <nm_write_reg>
    13d8:	24 96       	adiw	r28, 0x04	; 4
    13da:	cd bf       	out	0x3d, r28	; 61
    13dc:	de bf       	out	0x3e, r29	; 62
    13de:	df 91       	pop	r29
    13e0:	cf 91       	pop	r28
    13e2:	08 95       	ret

000013e4 <nmi_get_chipid>:
    13e4:	cf 92       	push	r12
    13e6:	df 92       	push	r13
    13e8:	ef 92       	push	r14
    13ea:	ff 92       	push	r15
    13ec:	cf 93       	push	r28
    13ee:	df 93       	push	r29
    13f0:	00 d0       	rcall	.+0      	; 0x13f2 <nmi_get_chipid+0xe>
    13f2:	00 d0       	rcall	.+0      	; 0x13f4 <nmi_get_chipid+0x10>
    13f4:	cd b7       	in	r28, 0x3d	; 61
    13f6:	de b7       	in	r29, 0x3e	; 62
    13f8:	c0 90 e2 2a 	lds	r12, 0x2AE2	; 0x802ae2 <chipid.2327>
    13fc:	d0 90 e3 2a 	lds	r13, 0x2AE3	; 0x802ae3 <chipid.2327+0x1>
    1400:	e0 90 e4 2a 	lds	r14, 0x2AE4	; 0x802ae4 <chipid.2327+0x2>
    1404:	f0 90 e5 2a 	lds	r15, 0x2AE5	; 0x802ae5 <chipid.2327+0x3>
    1408:	c1 14       	cp	r12, r1
    140a:	d1 04       	cpc	r13, r1
    140c:	e1 04       	cpc	r14, r1
    140e:	f1 04       	cpc	r15, r1
    1410:	09 f0       	breq	.+2      	; 0x1414 <nmi_get_chipid+0x30>
    1412:	81 c0       	rjmp	.+258    	; 0x1516 <nmi_get_chipid+0x132>
    1414:	42 ee       	ldi	r20, 0xE2	; 226
    1416:	5a e2       	ldi	r21, 0x2A	; 42
    1418:	60 e0       	ldi	r22, 0x00	; 0
    141a:	70 e1       	ldi	r23, 0x10	; 16
    141c:	80 e0       	ldi	r24, 0x00	; 0
    141e:	90 e0       	ldi	r25, 0x00	; 0
    1420:	0e 94 9d 0b 	call	0x173a	; 0x173a <nm_read_reg_with_ret>
    1424:	88 23       	and	r24, r24
    1426:	49 f0       	breq	.+18     	; 0x143a <nmi_get_chipid+0x56>
    1428:	10 92 e2 2a 	sts	0x2AE2, r1	; 0x802ae2 <chipid.2327>
    142c:	10 92 e3 2a 	sts	0x2AE3, r1	; 0x802ae3 <chipid.2327+0x1>
    1430:	10 92 e4 2a 	sts	0x2AE4, r1	; 0x802ae4 <chipid.2327+0x2>
    1434:	10 92 e5 2a 	sts	0x2AE5, r1	; 0x802ae5 <chipid.2327+0x3>
    1438:	76 c0       	rjmp	.+236    	; 0x1526 <nmi_get_chipid+0x142>
    143a:	ae 01       	movw	r20, r28
    143c:	4f 5f       	subi	r20, 0xFF	; 255
    143e:	5f 4f       	sbci	r21, 0xFF	; 255
    1440:	64 ef       	ldi	r22, 0xF4	; 244
    1442:	73 e1       	ldi	r23, 0x13	; 19
    1444:	80 e0       	ldi	r24, 0x00	; 0
    1446:	90 e0       	ldi	r25, 0x00	; 0
    1448:	0e 94 9d 0b 	call	0x173a	; 0x173a <nm_read_reg_with_ret>
    144c:	81 11       	cpse	r24, r1
    144e:	ec cf       	rjmp	.-40     	; 0x1428 <nmi_get_chipid+0x44>
    1450:	80 91 e2 2a 	lds	r24, 0x2AE2	; 0x802ae2 <chipid.2327>
    1454:	90 91 e3 2a 	lds	r25, 0x2AE3	; 0x802ae3 <chipid.2327+0x1>
    1458:	a0 91 e4 2a 	lds	r26, 0x2AE4	; 0x802ae4 <chipid.2327+0x2>
    145c:	b0 91 e5 2a 	lds	r27, 0x2AE5	; 0x802ae5 <chipid.2327+0x3>
    1460:	80 3a       	cpi	r24, 0xA0	; 160
    1462:	22 e0       	ldi	r18, 0x02	; 2
    1464:	92 07       	cpc	r25, r18
    1466:	20 e1       	ldi	r18, 0x10	; 16
    1468:	a2 07       	cpc	r26, r18
    146a:	b1 05       	cpc	r27, r1
    146c:	69 f4       	brne	.+26     	; 0x1488 <nmi_get_chipid+0xa4>
    146e:	89 81       	ldd	r24, Y+1	; 0x01
    1470:	9a 81       	ldd	r25, Y+2	; 0x02
    1472:	ab 81       	ldd	r26, Y+3	; 0x03
    1474:	bc 81       	ldd	r27, Y+4	; 0x04
    1476:	01 97       	sbiw	r24, 0x01	; 1
    1478:	a1 05       	cpc	r26, r1
    147a:	b1 05       	cpc	r27, r1
    147c:	d1 f1       	breq	.+116    	; 0x14f2 <nmi_get_chipid+0x10e>
    147e:	81 ea       	ldi	r24, 0xA1	; 161
    1480:	92 e0       	ldi	r25, 0x02	; 2
    1482:	a0 e1       	ldi	r26, 0x10	; 16
    1484:	b0 e0       	ldi	r27, 0x00	; 0
    1486:	18 c0       	rjmp	.+48     	; 0x14b8 <nmi_get_chipid+0xd4>
    1488:	80 3b       	cpi	r24, 0xB0	; 176
    148a:	22 e0       	ldi	r18, 0x02	; 2
    148c:	92 07       	cpc	r25, r18
    148e:	20 e1       	ldi	r18, 0x10	; 16
    1490:	a2 07       	cpc	r26, r18
    1492:	b1 05       	cpc	r27, r1
    1494:	f9 f4       	brne	.+62     	; 0x14d4 <nmi_get_chipid+0xf0>
    1496:	89 81       	ldd	r24, Y+1	; 0x01
    1498:	9a 81       	ldd	r25, Y+2	; 0x02
    149a:	ab 81       	ldd	r26, Y+3	; 0x03
    149c:	bc 81       	ldd	r27, Y+4	; 0x04
    149e:	83 30       	cpi	r24, 0x03	; 3
    14a0:	91 05       	cpc	r25, r1
    14a2:	a1 05       	cpc	r26, r1
    14a4:	b1 05       	cpc	r27, r1
    14a6:	29 f1       	breq	.+74     	; 0x14f2 <nmi_get_chipid+0x10e>
    14a8:	04 97       	sbiw	r24, 0x04	; 4
    14aa:	a1 05       	cpc	r26, r1
    14ac:	b1 05       	cpc	r27, r1
    14ae:	69 f4       	brne	.+26     	; 0x14ca <nmi_get_chipid+0xe6>
    14b0:	81 eb       	ldi	r24, 0xB1	; 177
    14b2:	92 e0       	ldi	r25, 0x02	; 2
    14b4:	a0 e1       	ldi	r26, 0x10	; 16
    14b6:	b0 e0       	ldi	r27, 0x00	; 0
    14b8:	80 93 e2 2a 	sts	0x2AE2, r24	; 0x802ae2 <chipid.2327>
    14bc:	90 93 e3 2a 	sts	0x2AE3, r25	; 0x802ae3 <chipid.2327+0x1>
    14c0:	a0 93 e4 2a 	sts	0x2AE4, r26	; 0x802ae4 <chipid.2327+0x2>
    14c4:	b0 93 e5 2a 	sts	0x2AE5, r27	; 0x802ae5 <chipid.2327+0x3>
    14c8:	14 c0       	rjmp	.+40     	; 0x14f2 <nmi_get_chipid+0x10e>
    14ca:	82 eb       	ldi	r24, 0xB2	; 178
    14cc:	92 e0       	ldi	r25, 0x02	; 2
    14ce:	a0 e1       	ldi	r26, 0x10	; 16
    14d0:	b0 e0       	ldi	r27, 0x00	; 0
    14d2:	f2 cf       	rjmp	.-28     	; 0x14b8 <nmi_get_chipid+0xd4>
    14d4:	80 3f       	cpi	r24, 0xF0	; 240
    14d6:	91 05       	cpc	r25, r1
    14d8:	a0 41       	sbci	r26, 0x10	; 16
    14da:	b1 05       	cpc	r27, r1
    14dc:	51 f4       	brne	.+20     	; 0x14f2 <nmi_get_chipid+0x10e>
    14de:	42 ee       	ldi	r20, 0xE2	; 226
    14e0:	5a e2       	ldi	r21, 0x2A	; 42
    14e2:	60 e0       	ldi	r22, 0x00	; 0
    14e4:	70 e0       	ldi	r23, 0x00	; 0
    14e6:	8b e3       	ldi	r24, 0x3B	; 59
    14e8:	90 e0       	ldi	r25, 0x00	; 0
    14ea:	0e 94 9d 0b 	call	0x173a	; 0x173a <nm_read_reg_with_ret>
    14ee:	81 11       	cpse	r24, r1
    14f0:	9b cf       	rjmp	.-202    	; 0x1428 <nmi_get_chipid+0x44>
    14f2:	80 91 e2 2a 	lds	r24, 0x2AE2	; 0x802ae2 <chipid.2327>
    14f6:	90 91 e3 2a 	lds	r25, 0x2AE3	; 0x802ae3 <chipid.2327+0x1>
    14fa:	a0 91 e4 2a 	lds	r26, 0x2AE4	; 0x802ae4 <chipid.2327+0x2>
    14fe:	b0 91 e5 2a 	lds	r27, 0x2AE5	; 0x802ae5 <chipid.2327+0x3>
    1502:	a0 7f       	andi	r26, 0xF0	; 240
    1504:	a5 60       	ori	r26, 0x05	; 5
    1506:	80 93 e2 2a 	sts	0x2AE2, r24	; 0x802ae2 <chipid.2327>
    150a:	90 93 e3 2a 	sts	0x2AE3, r25	; 0x802ae3 <chipid.2327+0x1>
    150e:	a0 93 e4 2a 	sts	0x2AE4, r26	; 0x802ae4 <chipid.2327+0x2>
    1512:	b0 93 e5 2a 	sts	0x2AE5, r27	; 0x802ae5 <chipid.2327+0x3>
    1516:	c0 90 e2 2a 	lds	r12, 0x2AE2	; 0x802ae2 <chipid.2327>
    151a:	d0 90 e3 2a 	lds	r13, 0x2AE3	; 0x802ae3 <chipid.2327+0x1>
    151e:	e0 90 e4 2a 	lds	r14, 0x2AE4	; 0x802ae4 <chipid.2327+0x2>
    1522:	f0 90 e5 2a 	lds	r15, 0x2AE5	; 0x802ae5 <chipid.2327+0x3>
    1526:	c7 01       	movw	r24, r14
    1528:	b6 01       	movw	r22, r12
    152a:	24 96       	adiw	r28, 0x04	; 4
    152c:	cd bf       	out	0x3d, r28	; 61
    152e:	de bf       	out	0x3e, r29	; 62
    1530:	df 91       	pop	r29
    1532:	cf 91       	pop	r28
    1534:	ff 90       	pop	r15
    1536:	ef 90       	pop	r14
    1538:	df 90       	pop	r13
    153a:	cf 90       	pop	r12
    153c:	08 95       	ret

0000153e <chip_wake>:
sint8 chip_wake(void)
{
    153e:	ef 92       	push	r14
    1540:	ff 92       	push	r15
    1542:	1f 93       	push	r17
    1544:	cf 93       	push	r28
    1546:	df 93       	push	r29
    1548:	cd b7       	in	r28, 0x3d	; 61
    154a:	de b7       	in	r29, 0x3e	; 62
    154c:	28 97       	sbiw	r28, 0x08	; 8
    154e:	cd bf       	out	0x3d, r28	; 61
    1550:	de bf       	out	0x3e, r29	; 62
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, clk_status_reg = 0,trials = 0;
    1552:	1d 82       	std	Y+5, r1	; 0x05
    1554:	1e 82       	std	Y+6, r1	; 0x06
    1556:	1f 82       	std	Y+7, r1	; 0x07
    1558:	18 86       	std	Y+8, r1	; 0x08
    155a:	19 82       	std	Y+1, r1	; 0x01
    155c:	1a 82       	std	Y+2, r1	; 0x02
    155e:	1b 82       	std	Y+3, r1	; 0x03
    1560:	1c 82       	std	Y+4, r1	; 0x04

	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
    1562:	ae 01       	movw	r20, r28
    1564:	4b 5f       	subi	r20, 0xFB	; 251
    1566:	5f 4f       	sbci	r21, 0xFF	; 255
    1568:	6b e0       	ldi	r22, 0x0B	; 11
    156a:	70 e0       	ldi	r23, 0x00	; 0
    156c:	80 e0       	ldi	r24, 0x00	; 0
    156e:	90 e0       	ldi	r25, 0x00	; 0
    1570:	0e 94 9d 0b 	call	0x173a	; 0x173a <nm_read_reg_with_ret>
    1574:	18 2f       	mov	r17, r24
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    1576:	81 11       	cpse	r24, r1
    1578:	56 c0       	rjmp	.+172    	; 0x1626 <chip_wake+0xe8>
	
	if(!(reg & NBIT0))
    157a:	8d 81       	ldd	r24, Y+5	; 0x05
    157c:	9e 81       	ldd	r25, Y+6	; 0x06
    157e:	af 81       	ldd	r26, Y+7	; 0x07
    1580:	b8 85       	ldd	r27, Y+8	; 0x08
    1582:	80 ff       	sbrs	r24, 0
    1584:	0d c0       	rjmp	.+26     	; 0x15a0 <chip_wake+0x62>
		/*USE bit 0 to indicate host wakeup*/
		ret = nm_write_reg(HOST_CORT_COMM, reg|NBIT0);
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
	}
		
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
    1586:	ae 01       	movw	r20, r28
    1588:	4b 5f       	subi	r20, 0xFB	; 251
    158a:	5f 4f       	sbci	r21, 0xFF	; 255
    158c:	61 e0       	ldi	r22, 0x01	; 1
    158e:	70 e0       	ldi	r23, 0x00	; 0
    1590:	80 e0       	ldi	r24, 0x00	; 0
    1592:	90 e0       	ldi	r25, 0x00	; 0
    1594:	0e 94 9d 0b 	call	0x173a	; 0x173a <nm_read_reg_with_ret>
    1598:	18 2f       	mov	r17, r24
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    159a:	88 23       	and	r24, r24
    159c:	71 f0       	breq	.+28     	; 0x15ba <chip_wake+0x7c>
    159e:	43 c0       	rjmp	.+134    	; 0x1626 <chip_wake+0xe8>
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
	
	if(!(reg & NBIT0))
	{
		/*USE bit 0 to indicate host wakeup*/
		ret = nm_write_reg(HOST_CORT_COMM, reg|NBIT0);
    15a0:	9c 01       	movw	r18, r24
    15a2:	ad 01       	movw	r20, r26
    15a4:	21 60       	ori	r18, 0x01	; 1
    15a6:	6b e0       	ldi	r22, 0x0B	; 11
    15a8:	70 e0       	ldi	r23, 0x00	; 0
    15aa:	80 e0       	ldi	r24, 0x00	; 0
    15ac:	90 e0       	ldi	r25, 0x00	; 0
    15ae:	0e 94 9f 0b 	call	0x173e	; 0x173e <nm_write_reg>
    15b2:	18 2f       	mov	r17, r24
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    15b4:	88 23       	and	r24, r24
    15b6:	39 f3       	breq	.-50     	; 0x1586 <chip_wake+0x48>
    15b8:	36 c0       	rjmp	.+108    	; 0x1626 <chip_wake+0xe8>
	}
		
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
	/* Set bit 1 */
	if(!(reg & NBIT1))
    15ba:	8d 81       	ldd	r24, Y+5	; 0x05
    15bc:	9e 81       	ldd	r25, Y+6	; 0x06
    15be:	af 81       	ldd	r26, Y+7	; 0x07
    15c0:	b8 85       	ldd	r27, Y+8	; 0x08
    15c2:	81 ff       	sbrs	r24, 1
    15c4:	03 c0       	rjmp	.+6      	; 0x15cc <chip_wake+0x8e>

ERR1:
	return ret;
}
sint8 chip_wake(void)
{
    15c6:	e1 2c       	mov	r14, r1
    15c8:	f1 2c       	mov	r15, r1
    15ca:	0d c0       	rjmp	.+26     	; 0x15e6 <chip_wake+0xa8>
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
	/* Set bit 1 */
	if(!(reg & NBIT1))
	{
		ret = nm_write_reg(WAKE_CLK_REG, reg | NBIT1);
    15cc:	9c 01       	movw	r18, r24
    15ce:	ad 01       	movw	r20, r26
    15d0:	22 60       	ori	r18, 0x02	; 2
    15d2:	61 e0       	ldi	r22, 0x01	; 1
    15d4:	70 e0       	ldi	r23, 0x00	; 0
    15d6:	80 e0       	ldi	r24, 0x00	; 0
    15d8:	90 e0       	ldi	r25, 0x00	; 0
    15da:	0e 94 9f 0b 	call	0x173e	; 0x173e <nm_write_reg>
    15de:	18 2f       	mov	r17, r24
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
    15e0:	88 23       	and	r24, r24
    15e2:	89 f3       	breq	.-30     	; 0x15c6 <chip_wake+0x88>
    15e4:	20 c0       	rjmp	.+64     	; 0x1626 <chip_wake+0xe8>
	}

	do
	{
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
    15e6:	ae 01       	movw	r20, r28
    15e8:	4f 5f       	subi	r20, 0xFF	; 255
    15ea:	5f 4f       	sbci	r21, 0xFF	; 255
    15ec:	6f e0       	ldi	r22, 0x0F	; 15
    15ee:	70 e0       	ldi	r23, 0x00	; 0
    15f0:	80 e0       	ldi	r24, 0x00	; 0
    15f2:	90 e0       	ldi	r25, 0x00	; 0
    15f4:	0e 94 9d 0b 	call	0x173a	; 0x173a <nm_read_reg_with_ret>
    15f8:	18 2f       	mov	r17, r24
		if(ret != M2M_SUCCESS) {
    15fa:	81 11       	cpse	r24, r1
    15fc:	14 c0       	rjmp	.+40     	; 0x1626 <chip_wake+0xe8>
			M2M_ERR("Bus error (5).%d %lx\n",ret,clk_status_reg);
			goto _WAKE_EXIT;
		}
		if(clk_status_reg & NBIT2) {
    15fe:	89 81       	ldd	r24, Y+1	; 0x01
    1600:	82 fd       	sbrc	r24, 2
    1602:	0f c0       	rjmp	.+30     	; 0x1622 <chip_wake+0xe4>
			break;
		}
		nm_bsp_sleep(2);
    1604:	62 e0       	ldi	r22, 0x02	; 2
    1606:	70 e0       	ldi	r23, 0x00	; 0
    1608:	80 e0       	ldi	r24, 0x00	; 0
    160a:	90 e0       	ldi	r25, 0x00	; 0
    160c:	0e 94 07 09 	call	0x120e	; 0x120e <nm_bsp_sleep>
    1610:	8f ef       	ldi	r24, 0xFF	; 255
    1612:	e8 1a       	sub	r14, r24
    1614:	f8 0a       	sbc	r15, r24
		trials++;
		if(trials > WAKUP_TRAILS_TIMEOUT)
    1616:	85 e0       	ldi	r24, 0x05	; 5
    1618:	e8 16       	cp	r14, r24
    161a:	f1 04       	cpc	r15, r1
    161c:	21 f7       	brne	.-56     	; 0x15e6 <chip_wake+0xa8>
		{
			M2M_ERR("Failed to wakup the chip\n");
			ret = M2M_ERR_TIME_OUT;
    161e:	1c ef       	ldi	r17, 0xFC	; 252
    1620:	02 c0       	rjmp	.+4      	; 0x1626 <chip_wake+0xe8>
			goto _WAKE_EXIT;
		}
	}while(1);
	
	/*workaround sometimes spi fail to read clock regs after reading/writing clockless registers*/
	nm_bus_reset();
    1622:	0e 94 99 0b 	call	0x1732	; 0x1732 <nm_bus_reset>
	
_WAKE_EXIT:
	return ret;
}
    1626:	81 2f       	mov	r24, r17
    1628:	28 96       	adiw	r28, 0x08	; 8
    162a:	cd bf       	out	0x3d, r28	; 61
    162c:	de bf       	out	0x3e, r29	; 62
    162e:	df 91       	pop	r29
    1630:	cf 91       	pop	r28
    1632:	1f 91       	pop	r17
    1634:	ff 90       	pop	r15
    1636:	ef 90       	pop	r14
    1638:	08 95       	ret

0000163a <cpu_halt>:
sint8 cpu_halt(void)
{
    163a:	0f 93       	push	r16
    163c:	1f 93       	push	r17
    163e:	cf 93       	push	r28
    1640:	df 93       	push	r29
    1642:	00 d0       	rcall	.+0      	; 0x1644 <cpu_halt+0xa>
    1644:	00 d0       	rcall	.+0      	; 0x1646 <cpu_halt+0xc>
    1646:	cd b7       	in	r28, 0x3d	; 61
    1648:	de b7       	in	r29, 0x3e	; 62
	sint8 ret;
	uint32 reg = 0;
    164a:	19 82       	std	Y+1, r1	; 0x01
    164c:	1a 82       	std	Y+2, r1	; 0x02
    164e:	1b 82       	std	Y+3, r1	; 0x03
    1650:	1c 82       	std	Y+4, r1	; 0x04
	ret = nm_read_reg_with_ret(0x1118, &reg);
    1652:	ae 01       	movw	r20, r28
    1654:	4f 5f       	subi	r20, 0xFF	; 255
    1656:	5f 4f       	sbci	r21, 0xFF	; 255
    1658:	68 e1       	ldi	r22, 0x18	; 24
    165a:	71 e1       	ldi	r23, 0x11	; 17
    165c:	80 e0       	ldi	r24, 0x00	; 0
    165e:	90 e0       	ldi	r25, 0x00	; 0
    1660:	0e 94 9d 0b 	call	0x173a	; 0x173a <nm_read_reg_with_ret>
    1664:	18 2f       	mov	r17, r24
	reg |= (1 << 0);
    1666:	89 81       	ldd	r24, Y+1	; 0x01
    1668:	9a 81       	ldd	r25, Y+2	; 0x02
    166a:	ab 81       	ldd	r26, Y+3	; 0x03
    166c:	bc 81       	ldd	r27, Y+4	; 0x04
    166e:	9c 01       	movw	r18, r24
    1670:	ad 01       	movw	r20, r26
    1672:	21 60       	ori	r18, 0x01	; 1
    1674:	29 83       	std	Y+1, r18	; 0x01
    1676:	3a 83       	std	Y+2, r19	; 0x02
    1678:	4b 83       	std	Y+3, r20	; 0x03
    167a:	5c 83       	std	Y+4, r21	; 0x04
	ret += nm_write_reg(0x1118, reg);
    167c:	68 e1       	ldi	r22, 0x18	; 24
    167e:	71 e1       	ldi	r23, 0x11	; 17
    1680:	80 e0       	ldi	r24, 0x00	; 0
    1682:	90 e0       	ldi	r25, 0x00	; 0
    1684:	0e 94 9f 0b 	call	0x173e	; 0x173e <nm_write_reg>
    1688:	18 0f       	add	r17, r24
	ret += nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
    168a:	ae 01       	movw	r20, r28
    168c:	4f 5f       	subi	r20, 0xFF	; 255
    168e:	5f 4f       	sbci	r21, 0xFF	; 255
    1690:	60 e0       	ldi	r22, 0x00	; 0
    1692:	74 e1       	ldi	r23, 0x14	; 20
    1694:	80 e0       	ldi	r24, 0x00	; 0
    1696:	90 e0       	ldi	r25, 0x00	; 0
    1698:	0e 94 9d 0b 	call	0x173a	; 0x173a <nm_read_reg_with_ret>
    169c:	18 0f       	add	r17, r24
	if ((reg & (1ul << 10)) == (1ul << 10)) {
    169e:	89 81       	ldd	r24, Y+1	; 0x01
    16a0:	9a 81       	ldd	r25, Y+2	; 0x02
    16a2:	ab 81       	ldd	r26, Y+3	; 0x03
    16a4:	bc 81       	ldd	r27, Y+4	; 0x04
    16a6:	92 fd       	sbrc	r25, 2
    16a8:	02 c0       	rjmp	.+4      	; 0x16ae <cpu_halt+0x74>
	sint8 ret;
	uint32 reg = 0;
	ret = nm_read_reg_with_ret(0x1118, &reg);
	reg |= (1 << 0);
	ret += nm_write_reg(0x1118, reg);
	ret += nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
    16aa:	81 2f       	mov	r24, r17
    16ac:	19 c0       	rjmp	.+50     	; 0x16e0 <cpu_halt+0xa6>
	if ((reg & (1ul << 10)) == (1ul << 10)) {
		reg &= ~(1ul << 10);
    16ae:	9c 01       	movw	r18, r24
    16b0:	ad 01       	movw	r20, r26
    16b2:	3b 7f       	andi	r19, 0xFB	; 251
    16b4:	29 83       	std	Y+1, r18	; 0x01
    16b6:	3a 83       	std	Y+2, r19	; 0x02
    16b8:	4b 83       	std	Y+3, r20	; 0x03
    16ba:	5c 83       	std	Y+4, r21	; 0x04
		ret += nm_write_reg(NMI_GLB_RESET_0, reg);
    16bc:	60 e0       	ldi	r22, 0x00	; 0
    16be:	74 e1       	ldi	r23, 0x14	; 20
    16c0:	80 e0       	ldi	r24, 0x00	; 0
    16c2:	90 e0       	ldi	r25, 0x00	; 0
    16c4:	0e 94 9f 0b 	call	0x173e	; 0x173e <nm_write_reg>
    16c8:	08 2f       	mov	r16, r24
		ret += nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
    16ca:	ae 01       	movw	r20, r28
    16cc:	4f 5f       	subi	r20, 0xFF	; 255
    16ce:	5f 4f       	sbci	r21, 0xFF	; 255
    16d0:	60 e0       	ldi	r22, 0x00	; 0
    16d2:	74 e1       	ldi	r23, 0x14	; 20
    16d4:	80 e0       	ldi	r24, 0x00	; 0
    16d6:	90 e0       	ldi	r25, 0x00	; 0
    16d8:	0e 94 9d 0b 	call	0x173a	; 0x173a <nm_read_reg_with_ret>
    16dc:	80 0f       	add	r24, r16
    16de:	81 0f       	add	r24, r17
	}
	return ret;
}
    16e0:	24 96       	adiw	r28, 0x04	; 4
    16e2:	cd bf       	out	0x3d, r28	; 61
    16e4:	de bf       	out	0x3e, r29	; 62
    16e6:	df 91       	pop	r29
    16e8:	cf 91       	pop	r28
    16ea:	1f 91       	pop	r17
    16ec:	0f 91       	pop	r16
    16ee:	08 95       	ret

000016f0 <chip_reset>:
	if(ret != M2M_SUCCESS) goto ERR1;	
ERR1:
	return ret;
}
sint8 chip_reset(void)
{
    16f0:	cf 93       	push	r28
	sint8 ret = M2M_SUCCESS;
	ret = nm_write_reg(NMI_GLB_RESET_0, 0);
    16f2:	20 e0       	ldi	r18, 0x00	; 0
    16f4:	30 e0       	ldi	r19, 0x00	; 0
    16f6:	a9 01       	movw	r20, r18
    16f8:	60 e0       	ldi	r22, 0x00	; 0
    16fa:	74 e1       	ldi	r23, 0x14	; 20
    16fc:	80 e0       	ldi	r24, 0x00	; 0
    16fe:	90 e0       	ldi	r25, 0x00	; 0
    1700:	0e 94 9f 0b 	call	0x173e	; 0x173e <nm_write_reg>
    1704:	c8 2f       	mov	r28, r24
	nm_bsp_sleep(50);
    1706:	62 e3       	ldi	r22, 0x32	; 50
    1708:	70 e0       	ldi	r23, 0x00	; 0
    170a:	80 e0       	ldi	r24, 0x00	; 0
    170c:	90 e0       	ldi	r25, 0x00	; 0
    170e:	0e 94 07 09 	call	0x120e	; 0x120e <nm_bsp_sleep>
	return ret;
}
    1712:	8c 2f       	mov	r24, r28
    1714:	cf 91       	pop	r28
    1716:	08 95       	ret

00001718 <chip_reset_and_cpu_halt>:
sint8 chip_reset_and_cpu_halt(void)
{
	sint8 ret = M2M_SUCCESS;

	/*Wakeup needed only for I2C interface*/
	ret = chip_wake();
    1718:	0e 94 9f 0a 	call	0x153e	; 0x153e <chip_wake>
	if(ret != M2M_SUCCESS) goto ERR1;
    171c:	81 11       	cpse	r24, r1
    171e:	06 c0       	rjmp	.+12     	; 0x172c <chip_reset_and_cpu_halt+0x14>
	/*Reset and CPU halt need for no wait board only*/
	ret = chip_reset();
    1720:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <chip_reset>
	if(ret != M2M_SUCCESS) goto ERR1;
    1724:	81 11       	cpse	r24, r1
    1726:	02 c0       	rjmp	.+4      	; 0x172c <chip_reset_and_cpu_halt+0x14>
	ret = cpu_halt();
    1728:	0c 94 1d 0b 	jmp	0x163a	; 0x163a <cpu_halt>
	if(ret != M2M_SUCCESS) goto ERR1;	
ERR1:
	return ret;
}
    172c:	08 95       	ret

0000172e <nm_bus_iface_init>:
	sint8 ret = M2M_SUCCESS;
#ifdef CONF_WINC_USE_UART
	ret = nm_uart_reconfigure(ptr);
#endif
	return ret;
}
    172e:	0c 94 35 09 	jmp	0x126a	; 0x126a <nm_bus_init>

00001732 <nm_bus_reset>:
    1732:	0c 94 3f 0f 	jmp	0x1e7e	; 0x1e7e <nm_spi_reset>

00001736 <nm_read_reg>:
uint32 nm_read_reg(uint32 u32Addr)
{
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
    1736:	0c 94 5f 0f 	jmp	0x1ebe	; 0x1ebe <nm_spi_read_reg>

0000173a <nm_read_reg_with_ret>:
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
    173a:	0c 94 74 0f 	jmp	0x1ee8	; 0x1ee8 <nm_spi_read_reg_with_ret>

0000173e <nm_write_reg>:
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
    173e:	0c 94 7c 0f 	jmp	0x1ef8	; 0x1ef8 <nm_spi_write_reg>

00001742 <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    1742:	2f 92       	push	r2
    1744:	3f 92       	push	r3
    1746:	4f 92       	push	r4
    1748:	5f 92       	push	r5
    174a:	6f 92       	push	r6
    174c:	7f 92       	push	r7
    174e:	8f 92       	push	r8
    1750:	9f 92       	push	r9
    1752:	af 92       	push	r10
    1754:	bf 92       	push	r11
    1756:	cf 92       	push	r12
    1758:	df 92       	push	r13
    175a:	ef 92       	push	r14
    175c:	ff 92       	push	r15
    175e:	0f 93       	push	r16
    1760:	1f 93       	push	r17
    1762:	cf 93       	push	r28
    1764:	df 93       	push	r29
    1766:	cd b7       	in	r28, 0x3d	; 61
    1768:	de b7       	in	r29, 0x3e	; 62
    176a:	26 97       	sbiw	r28, 0x06	; 6
    176c:	cd bf       	out	0x3d, r28	; 61
    176e:	de bf       	out	0x3e, r29	; 62
    1770:	69 83       	std	Y+1, r22	; 0x01
    1772:	7a 83       	std	Y+2, r23	; 0x02
    1774:	8b 83       	std	Y+3, r24	; 0x03
    1776:	9c 83       	std	Y+4, r25	; 0x04
    1778:	4d 83       	std	Y+5, r20	; 0x05
    177a:	5e 83       	std	Y+6, r21	; 0x06
    177c:	48 01       	movw	r8, r16
    177e:	59 01       	movw	r10, r18
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    1780:	20 90 40 28 	lds	r2, 0x2840	; 0x802840 <egstrNmBusCapabilities>
    1784:	30 90 41 28 	lds	r3, 0x2841	; 0x802841 <egstrNmBusCapabilities+0x1>
    1788:	88 e0       	ldi	r24, 0x08	; 8
    178a:	28 1a       	sub	r2, r24
    178c:	31 08       	sbc	r3, r1
    178e:	8a 01       	movw	r16, r20
	uint32 off = 0;
    1790:	c1 2c       	mov	r12, r1
    1792:	d1 2c       	mov	r13, r1
    1794:	76 01       	movw	r14, r12
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    1796:	21 01       	movw	r4, r2
    1798:	61 2c       	mov	r6, r1
    179a:	71 2c       	mov	r7, r1
    179c:	69 81       	ldd	r22, Y+1	; 0x01
    179e:	7a 81       	ldd	r23, Y+2	; 0x02
    17a0:	8b 81       	ldd	r24, Y+3	; 0x03
    17a2:	9c 81       	ldd	r25, Y+4	; 0x04
    17a4:	6c 0d       	add	r22, r12
    17a6:	7d 1d       	adc	r23, r13
    17a8:	8e 1d       	adc	r24, r14
    17aa:	9f 1d       	adc	r25, r15
    17ac:	48 14       	cp	r4, r8
    17ae:	59 04       	cpc	r5, r9
    17b0:	6a 04       	cpc	r6, r10
    17b2:	7b 04       	cpc	r7, r11
    17b4:	e0 f0       	brcs	.+56     	; 0x17ee <nm_read_block+0xac>
static sint8 p_nm_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    17b6:	4d 81       	ldd	r20, Y+5	; 0x05
    17b8:	5e 81       	ldd	r21, Y+6	; 0x06
    17ba:	4c 0d       	add	r20, r12
    17bc:	5d 1d       	adc	r21, r13
    17be:	94 01       	movw	r18, r8
			u32Addr += u16MaxTrxSz;
		}
	}

	return s8Ret;
}
    17c0:	26 96       	adiw	r28, 0x06	; 6
    17c2:	cd bf       	out	0x3d, r28	; 61
    17c4:	de bf       	out	0x3e, r29	; 62
    17c6:	df 91       	pop	r29
    17c8:	cf 91       	pop	r28
    17ca:	1f 91       	pop	r17
    17cc:	0f 91       	pop	r16
    17ce:	ff 90       	pop	r15
    17d0:	ef 90       	pop	r14
    17d2:	df 90       	pop	r13
    17d4:	cf 90       	pop	r12
    17d6:	bf 90       	pop	r11
    17d8:	af 90       	pop	r10
    17da:	9f 90       	pop	r9
    17dc:	8f 90       	pop	r8
    17de:	7f 90       	pop	r7
    17e0:	6f 90       	pop	r6
    17e2:	5f 90       	pop	r5
    17e4:	4f 90       	pop	r4
    17e6:	3f 90       	pop	r3
    17e8:	2f 90       	pop	r2
static sint8 p_nm_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    17ea:	0c 94 ed 0f 	jmp	0x1fda	; 0x1fda <nm_spi_read_block>
    17ee:	91 01       	movw	r18, r2
    17f0:	a8 01       	movw	r20, r16
    17f2:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <nm_spi_read_block>
    17f6:	02 0d       	add	r16, r2
    17f8:	13 1d       	adc	r17, r3
			break;
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
    17fa:	81 11       	cpse	r24, r1
    17fc:	09 c0       	rjmp	.+18     	; 0x1810 <nm_read_block+0xce>
    17fe:	84 18       	sub	r8, r4
    1800:	95 08       	sbc	r9, r5
    1802:	a6 08       	sbc	r10, r6
    1804:	b7 08       	sbc	r11, r7
    1806:	c4 0c       	add	r12, r4
    1808:	d5 1c       	adc	r13, r5
    180a:	e6 1c       	adc	r14, r6
    180c:	f7 1c       	adc	r15, r7
			u32Sz -= u16MaxTrxSz;
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
		}
	}
    180e:	c6 cf       	rjmp	.-116    	; 0x179c <nm_read_block+0x5a>

	return s8Ret;
}
    1810:	26 96       	adiw	r28, 0x06	; 6
    1812:	cd bf       	out	0x3d, r28	; 61
    1814:	de bf       	out	0x3e, r29	; 62
    1816:	df 91       	pop	r29
    1818:	cf 91       	pop	r28
    181a:	1f 91       	pop	r17
    181c:	0f 91       	pop	r16
    181e:	ff 90       	pop	r15
    1820:	ef 90       	pop	r14
    1822:	df 90       	pop	r13
    1824:	cf 90       	pop	r12
    1826:	bf 90       	pop	r11
    1828:	af 90       	pop	r10
    182a:	9f 90       	pop	r9
    182c:	8f 90       	pop	r8
    182e:	7f 90       	pop	r7
    1830:	6f 90       	pop	r6
    1832:	5f 90       	pop	r5
    1834:	4f 90       	pop	r4
    1836:	3f 90       	pop	r3
    1838:	2f 90       	pop	r2
    183a:	08 95       	ret

0000183c <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    183c:	2f 92       	push	r2
    183e:	3f 92       	push	r3
    1840:	4f 92       	push	r4
    1842:	5f 92       	push	r5
    1844:	6f 92       	push	r6
    1846:	7f 92       	push	r7
    1848:	8f 92       	push	r8
    184a:	9f 92       	push	r9
    184c:	af 92       	push	r10
    184e:	bf 92       	push	r11
    1850:	cf 92       	push	r12
    1852:	df 92       	push	r13
    1854:	ef 92       	push	r14
    1856:	ff 92       	push	r15
    1858:	0f 93       	push	r16
    185a:	1f 93       	push	r17
    185c:	cf 93       	push	r28
    185e:	df 93       	push	r29
    1860:	cd b7       	in	r28, 0x3d	; 61
    1862:	de b7       	in	r29, 0x3e	; 62
    1864:	26 97       	sbiw	r28, 0x06	; 6
    1866:	cd bf       	out	0x3d, r28	; 61
    1868:	de bf       	out	0x3e, r29	; 62
    186a:	69 83       	std	Y+1, r22	; 0x01
    186c:	7a 83       	std	Y+2, r23	; 0x02
    186e:	8b 83       	std	Y+3, r24	; 0x03
    1870:	9c 83       	std	Y+4, r25	; 0x04
    1872:	4d 83       	std	Y+5, r20	; 0x05
    1874:	5e 83       	std	Y+6, r21	; 0x06
    1876:	48 01       	movw	r8, r16
    1878:	59 01       	movw	r10, r18
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    187a:	20 90 40 28 	lds	r2, 0x2840	; 0x802840 <egstrNmBusCapabilities>
    187e:	30 90 41 28 	lds	r3, 0x2841	; 0x802841 <egstrNmBusCapabilities+0x1>
    1882:	88 e0       	ldi	r24, 0x08	; 8
    1884:	28 1a       	sub	r2, r24
    1886:	31 08       	sbc	r3, r1
    1888:	8a 01       	movw	r16, r20
	uint32 off = 0;
    188a:	c1 2c       	mov	r12, r1
    188c:	d1 2c       	mov	r13, r1
    188e:	76 01       	movw	r14, r12
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    1890:	21 01       	movw	r4, r2
    1892:	61 2c       	mov	r6, r1
    1894:	71 2c       	mov	r7, r1
    1896:	69 81       	ldd	r22, Y+1	; 0x01
    1898:	7a 81       	ldd	r23, Y+2	; 0x02
    189a:	8b 81       	ldd	r24, Y+3	; 0x03
    189c:	9c 81       	ldd	r25, Y+4	; 0x04
    189e:	6c 0d       	add	r22, r12
    18a0:	7d 1d       	adc	r23, r13
    18a2:	8e 1d       	adc	r24, r14
    18a4:	9f 1d       	adc	r25, r15
    18a6:	48 14       	cp	r4, r8
    18a8:	59 04       	cpc	r5, r9
    18aa:	6a 04       	cpc	r6, r10
    18ac:	7b 04       	cpc	r7, r11
    18ae:	e0 f0       	brcs	.+56     	; 0x18e8 <nm_write_block+0xac>
static sint8 p_nm_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    18b0:	4d 81       	ldd	r20, Y+5	; 0x05
    18b2:	5e 81       	ldd	r21, Y+6	; 0x06
    18b4:	4c 0d       	add	r20, r12
    18b6:	5d 1d       	adc	r21, r13
    18b8:	94 01       	movw	r18, r8
			u32Addr += u16MaxTrxSz;
		}
	}

	return s8Ret;
}
    18ba:	26 96       	adiw	r28, 0x06	; 6
    18bc:	cd bf       	out	0x3d, r28	; 61
    18be:	de bf       	out	0x3e, r29	; 62
    18c0:	df 91       	pop	r29
    18c2:	cf 91       	pop	r28
    18c4:	1f 91       	pop	r17
    18c6:	0f 91       	pop	r16
    18c8:	ff 90       	pop	r15
    18ca:	ef 90       	pop	r14
    18cc:	df 90       	pop	r13
    18ce:	cf 90       	pop	r12
    18d0:	bf 90       	pop	r11
    18d2:	af 90       	pop	r10
    18d4:	9f 90       	pop	r9
    18d6:	8f 90       	pop	r8
    18d8:	7f 90       	pop	r7
    18da:	6f 90       	pop	r6
    18dc:	5f 90       	pop	r5
    18de:	4f 90       	pop	r4
    18e0:	3f 90       	pop	r3
    18e2:	2f 90       	pop	r2
static sint8 p_nm_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    18e4:	0c 94 7c 10 	jmp	0x20f8	; 0x20f8 <nm_spi_write_block>
    18e8:	91 01       	movw	r18, r2
    18ea:	a8 01       	movw	r20, r16
    18ec:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <nm_spi_write_block>
    18f0:	02 0d       	add	r16, r2
    18f2:	13 1d       	adc	r17, r3
			break;
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
    18f4:	81 11       	cpse	r24, r1
    18f6:	09 c0       	rjmp	.+18     	; 0x190a <nm_write_block+0xce>
    18f8:	84 18       	sub	r8, r4
    18fa:	95 08       	sbc	r9, r5
    18fc:	a6 08       	sbc	r10, r6
    18fe:	b7 08       	sbc	r11, r7
    1900:	c4 0c       	add	r12, r4
    1902:	d5 1c       	adc	r13, r5
    1904:	e6 1c       	adc	r14, r6
    1906:	f7 1c       	adc	r15, r7
			u32Sz -= u16MaxTrxSz;
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
		}
	}
    1908:	c6 cf       	rjmp	.-116    	; 0x1896 <nm_write_block+0x5a>

	return s8Ret;
}
    190a:	26 96       	adiw	r28, 0x06	; 6
    190c:	cd bf       	out	0x3d, r28	; 61
    190e:	de bf       	out	0x3e, r29	; 62
    1910:	df 91       	pop	r29
    1912:	cf 91       	pop	r28
    1914:	1f 91       	pop	r17
    1916:	0f 91       	pop	r16
    1918:	ff 90       	pop	r15
    191a:	ef 90       	pop	r14
    191c:	df 90       	pop	r13
    191e:	cf 90       	pop	r12
    1920:	bf 90       	pop	r11
    1922:	af 90       	pop	r10
    1924:	9f 90       	pop	r9
    1926:	8f 90       	pop	r8
    1928:	7f 90       	pop	r7
    192a:	6f 90       	pop	r6
    192c:	5f 90       	pop	r5
    192e:	4f 90       	pop	r4
    1930:	3f 90       	pop	r3
    1932:	2f 90       	pop	r2
    1934:	08 95       	ret

00001936 <nm_drv_init_download_mode>:
*	@author	Viswanathan Murugesan
*	@date	10 Oct 2014
*	@version	1.0
*/
sint8 nm_drv_init_download_mode()
{
    1936:	cf 93       	push	r28
	sint8 ret = M2M_SUCCESS;

	ret = nm_bus_iface_init(NULL);
    1938:	80 e0       	ldi	r24, 0x00	; 0
    193a:	90 e0       	ldi	r25, 0x00	; 0
    193c:	0e 94 97 0b 	call	0x172e	; 0x172e <nm_bus_iface_init>
    1940:	c8 2f       	mov	r28, r24
	if (M2M_SUCCESS != ret) {
    1942:	81 11       	cpse	r24, r1
    1944:	18 c0       	rjmp	.+48     	; 0x1976 <nm_drv_init_download_mode+0x40>
	}

	/**
		TODO:reset the chip and halt the cpu in case of no wait efuse is set (add the no wait effuse check)
	*/
	if(!ISNMC3000(GET_CHIPID()))
    1946:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <nmi_get_chipid>
    194a:	dc 01       	movw	r26, r24
    194c:	cb 01       	movw	r24, r22
    194e:	88 27       	eor	r24, r24
    1950:	99 27       	eor	r25, r25
    1952:	a0 7f       	andi	r26, 0xF0	; 240
    1954:	00 97       	sbiw	r24, 0x00	; 0
    1956:	a0 43       	sbci	r26, 0x30	; 48
    1958:	b1 05       	cpc	r27, r1
    195a:	11 f0       	breq	.+4      	; 0x1960 <nm_drv_init_download_mode+0x2a>
	{
		/*Execuate that function only for 1500A/B, no room in 3000, but it may be needed in 3400 no wait*/
		chip_reset_and_cpu_halt();
    195c:	0e 94 8c 0b 	call	0x1718	; 0x1718 <chip_reset_and_cpu_halt>
	}

#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
    1960:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <nm_spi_init>
#endif

	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());

	/*disable all interrupt in ROM (to disable uart) in 2b0 chip*/
	nm_write_reg(0x20300,0);
    1964:	20 e0       	ldi	r18, 0x00	; 0
    1966:	30 e0       	ldi	r19, 0x00	; 0
    1968:	a9 01       	movw	r20, r18
    196a:	60 e0       	ldi	r22, 0x00	; 0
    196c:	73 e0       	ldi	r23, 0x03	; 3
    196e:	82 e0       	ldi	r24, 0x02	; 2
    1970:	90 e0       	ldi	r25, 0x00	; 0
    1972:	0e 94 9f 0b 	call	0x173e	; 0x173e <nm_write_reg>

ERR1:
	return ret;
}
    1976:	8c 2f       	mov	r24, r28
    1978:	cf 91       	pop	r28
    197a:	08 95       	ret

0000197c <nmi_spi_write>:
*/ 
sint8 nm_spi_deinit(void)
{
	gu8Crc_off = 0;
	return M2M_SUCCESS;
}
    197c:	cf 93       	push	r28
    197e:	df 93       	push	r29
    1980:	cd b7       	in	r28, 0x3d	; 61
    1982:	de b7       	in	r29, 0x3e	; 62
    1984:	26 97       	sbiw	r28, 0x06	; 6
    1986:	cd bf       	out	0x3d, r28	; 61
    1988:	de bf       	out	0x3e, r29	; 62
    198a:	89 83       	std	Y+1, r24	; 0x01
    198c:	9a 83       	std	Y+2, r25	; 0x02
    198e:	1b 82       	std	Y+3, r1	; 0x03
    1990:	1c 82       	std	Y+4, r1	; 0x04
    1992:	6d 83       	std	Y+5, r22	; 0x05
    1994:	7e 83       	std	Y+6, r23	; 0x06
    1996:	be 01       	movw	r22, r28
    1998:	6f 5f       	subi	r22, 0xFF	; 255
    199a:	7f 4f       	sbci	r23, 0xFF	; 255
    199c:	83 e0       	ldi	r24, 0x03	; 3
    199e:	0e 94 4a 09 	call	0x1294	; 0x1294 <nm_bus_ioctl>
    19a2:	26 96       	adiw	r28, 0x06	; 6
    19a4:	cd bf       	out	0x3d, r28	; 61
    19a6:	de bf       	out	0x3e, r29	; 62
    19a8:	df 91       	pop	r29
    19aa:	cf 91       	pop	r28
    19ac:	08 95       	ret

000019ae <nmi_spi_read>:
    19ae:	cf 93       	push	r28
    19b0:	df 93       	push	r29
    19b2:	cd b7       	in	r28, 0x3d	; 61
    19b4:	de b7       	in	r29, 0x3e	; 62
    19b6:	26 97       	sbiw	r28, 0x06	; 6
    19b8:	cd bf       	out	0x3d, r28	; 61
    19ba:	de bf       	out	0x3e, r29	; 62
    19bc:	19 82       	std	Y+1, r1	; 0x01
    19be:	1a 82       	std	Y+2, r1	; 0x02
    19c0:	8b 83       	std	Y+3, r24	; 0x03
    19c2:	9c 83       	std	Y+4, r25	; 0x04
    19c4:	6d 83       	std	Y+5, r22	; 0x05
    19c6:	7e 83       	std	Y+6, r23	; 0x06
    19c8:	be 01       	movw	r22, r28
    19ca:	6f 5f       	subi	r22, 0xFF	; 255
    19cc:	7f 4f       	sbci	r23, 0xFF	; 255
    19ce:	83 e0       	ldi	r24, 0x03	; 3
    19d0:	0e 94 4a 09 	call	0x1294	; 0x1294 <nm_bus_ioctl>
    19d4:	26 96       	adiw	r28, 0x06	; 6
    19d6:	cd bf       	out	0x3d, r28	; 61
    19d8:	de bf       	out	0x3e, r29	; 62
    19da:	df 91       	pop	r29
    19dc:	cf 91       	pop	r28
    19de:	08 95       	ret

000019e0 <spi_cmd_rsp>:
    19e0:	0f 93       	push	r16
    19e2:	1f 93       	push	r17
    19e4:	cf 93       	push	r28
    19e6:	df 93       	push	r29
    19e8:	1f 92       	push	r1
    19ea:	cd b7       	in	r28, 0x3d	; 61
    19ec:	de b7       	in	r29, 0x3e	; 62
    19ee:	08 2f       	mov	r16, r24
    19f0:	8f 3c       	cpi	r24, 0xCF	; 207
    19f2:	31 f0       	breq	.+12     	; 0x1a00 <spi_cmd_rsp+0x20>
    19f4:	8b e3       	ldi	r24, 0x3B	; 59
    19f6:	80 0f       	add	r24, r16
    19f8:	82 30       	cpi	r24, 0x02	; 2
    19fa:	10 f0       	brcs	.+4      	; 0x1a00 <spi_cmd_rsp+0x20>
    19fc:	1b e0       	ldi	r17, 0x0B	; 11
    19fe:	0f c0       	rjmp	.+30     	; 0x1a1e <spi_cmd_rsp+0x3e>
    1a00:	61 e0       	ldi	r22, 0x01	; 1
    1a02:	70 e0       	ldi	r23, 0x00	; 0
    1a04:	ce 01       	movw	r24, r28
    1a06:	01 96       	adiw	r24, 0x01	; 1
    1a08:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <nmi_spi_read>
    1a0c:	88 23       	and	r24, r24
    1a0e:	b1 f3       	breq	.-20     	; 0x19fc <spi_cmd_rsp+0x1c>
    1a10:	80 e0       	ldi	r24, 0x00	; 0
    1a12:	1d c0       	rjmp	.+58     	; 0x1a4e <spi_cmd_rsp+0x6e>
    1a14:	89 81       	ldd	r24, Y+1	; 0x01
    1a16:	08 17       	cp	r16, r24
    1a18:	59 f0       	breq	.+22     	; 0x1a30 <spi_cmd_rsp+0x50>
    1a1a:	11 50       	subi	r17, 0x01	; 1
    1a1c:	49 f0       	breq	.+18     	; 0x1a30 <spi_cmd_rsp+0x50>
    1a1e:	61 e0       	ldi	r22, 0x01	; 1
    1a20:	70 e0       	ldi	r23, 0x00	; 0
    1a22:	ce 01       	movw	r24, r28
    1a24:	01 96       	adiw	r24, 0x01	; 1
    1a26:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <nmi_spi_read>
    1a2a:	88 23       	and	r24, r24
    1a2c:	99 f3       	breq	.-26     	; 0x1a14 <spi_cmd_rsp+0x34>
    1a2e:	f0 cf       	rjmp	.-32     	; 0x1a10 <spi_cmd_rsp+0x30>
    1a30:	1b e0       	ldi	r17, 0x0B	; 11
    1a32:	61 e0       	ldi	r22, 0x01	; 1
    1a34:	70 e0       	ldi	r23, 0x00	; 0
    1a36:	ce 01       	movw	r24, r28
    1a38:	01 96       	adiw	r24, 0x01	; 1
    1a3a:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <nmi_spi_read>
    1a3e:	81 11       	cpse	r24, r1
    1a40:	e7 cf       	rjmp	.-50     	; 0x1a10 <spi_cmd_rsp+0x30>
    1a42:	89 81       	ldd	r24, Y+1	; 0x01
    1a44:	88 23       	and	r24, r24
    1a46:	11 f0       	breq	.+4      	; 0x1a4c <spi_cmd_rsp+0x6c>
    1a48:	11 50       	subi	r17, 0x01	; 1
    1a4a:	99 f7       	brne	.-26     	; 0x1a32 <spi_cmd_rsp+0x52>
    1a4c:	81 e0       	ldi	r24, 0x01	; 1
    1a4e:	0f 90       	pop	r0
    1a50:	df 91       	pop	r29
    1a52:	cf 91       	pop	r28
    1a54:	1f 91       	pop	r17
    1a56:	0f 91       	pop	r16
    1a58:	08 95       	ret

00001a5a <spi_data_read>:
    1a5a:	7f 92       	push	r7
    1a5c:	8f 92       	push	r8
    1a5e:	9f 92       	push	r9
    1a60:	af 92       	push	r10
    1a62:	bf 92       	push	r11
    1a64:	cf 92       	push	r12
    1a66:	df 92       	push	r13
    1a68:	ef 92       	push	r14
    1a6a:	ff 92       	push	r15
    1a6c:	0f 93       	push	r16
    1a6e:	1f 93       	push	r17
    1a70:	cf 93       	push	r28
    1a72:	df 93       	push	r29
    1a74:	00 d0       	rcall	.+0      	; 0x1a76 <spi_data_read+0x1c>
    1a76:	1f 92       	push	r1
    1a78:	cd b7       	in	r28, 0x3d	; 61
    1a7a:	de b7       	in	r29, 0x3e	; 62
    1a7c:	4c 01       	movw	r8, r24
    1a7e:	8b 01       	movw	r16, r22
    1a80:	74 2e       	mov	r7, r20
    1a82:	a1 2c       	mov	r10, r1
    1a84:	b1 2c       	mov	r11, r1
    1a86:	01 30       	cpi	r16, 0x01	; 1
    1a88:	80 e2       	ldi	r24, 0x20	; 32
    1a8a:	18 07       	cpc	r17, r24
    1a8c:	10 f4       	brcc	.+4      	; 0x1a92 <spi_data_read+0x38>
    1a8e:	68 01       	movw	r12, r16
    1a90:	03 c0       	rjmp	.+6      	; 0x1a98 <spi_data_read+0x3e>
    1a92:	c1 2c       	mov	r12, r1
    1a94:	90 e2       	ldi	r25, 0x20	; 32
    1a96:	d9 2e       	mov	r13, r25
    1a98:	8a e0       	ldi	r24, 0x0A	; 10
    1a9a:	e8 2e       	mov	r14, r24
    1a9c:	f1 2c       	mov	r15, r1
    1a9e:	61 e0       	ldi	r22, 0x01	; 1
    1aa0:	70 e0       	ldi	r23, 0x00	; 0
    1aa2:	ce 01       	movw	r24, r28
    1aa4:	03 96       	adiw	r24, 0x03	; 3
    1aa6:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <nmi_spi_read>
    1aaa:	88 23       	and	r24, r24
    1aac:	11 f0       	breq	.+4      	; 0x1ab2 <spi_data_read+0x58>
    1aae:	80 e0       	ldi	r24, 0x00	; 0
    1ab0:	2a c0       	rjmp	.+84     	; 0x1b06 <spi_data_read+0xac>
    1ab2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab4:	82 95       	swap	r24
    1ab6:	8f 70       	andi	r24, 0x0F	; 15
    1ab8:	8f 30       	cpi	r24, 0x0F	; 15
    1aba:	29 f0       	breq	.+10     	; 0x1ac6 <spi_data_read+0x6c>
    1abc:	81 e0       	ldi	r24, 0x01	; 1
    1abe:	e8 1a       	sub	r14, r24
    1ac0:	f1 08       	sbc	r15, r1
    1ac2:	68 f7       	brcc	.-38     	; 0x1a9e <spi_data_read+0x44>
    1ac4:	f4 cf       	rjmp	.-24     	; 0x1aae <spi_data_read+0x54>
    1ac6:	ef 28       	or	r14, r15
    1ac8:	91 f3       	breq	.-28     	; 0x1aae <spi_data_read+0x54>
    1aca:	b6 01       	movw	r22, r12
    1acc:	c4 01       	movw	r24, r8
    1ace:	8a 0d       	add	r24, r10
    1ad0:	9b 1d       	adc	r25, r11
    1ad2:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <nmi_spi_read>
    1ad6:	81 11       	cpse	r24, r1
    1ad8:	ea cf       	rjmp	.-44     	; 0x1aae <spi_data_read+0x54>
    1ada:	77 20       	and	r7, r7
    1adc:	39 f0       	breq	.+14     	; 0x1aec <spi_data_read+0x92>
    1ade:	ac 0c       	add	r10, r12
    1ae0:	bd 1c       	adc	r11, r13
    1ae2:	0c 19       	sub	r16, r12
    1ae4:	1d 09       	sbc	r17, r13
    1ae6:	79 f6       	brne	.-98     	; 0x1a86 <spi_data_read+0x2c>
    1ae8:	81 e0       	ldi	r24, 0x01	; 1
    1aea:	0d c0       	rjmp	.+26     	; 0x1b06 <spi_data_read+0xac>
    1aec:	80 91 e6 2a 	lds	r24, 0x2AE6	; 0x802ae6 <gu8Crc_off>
    1af0:	81 11       	cpse	r24, r1
    1af2:	f5 cf       	rjmp	.-22     	; 0x1ade <spi_data_read+0x84>
    1af4:	62 e0       	ldi	r22, 0x02	; 2
    1af6:	70 e0       	ldi	r23, 0x00	; 0
    1af8:	ce 01       	movw	r24, r28
    1afa:	01 96       	adiw	r24, 0x01	; 1
    1afc:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <nmi_spi_read>
    1b00:	88 23       	and	r24, r24
    1b02:	69 f3       	breq	.-38     	; 0x1ade <spi_data_read+0x84>
    1b04:	d4 cf       	rjmp	.-88     	; 0x1aae <spi_data_read+0x54>
    1b06:	23 96       	adiw	r28, 0x03	; 3
    1b08:	cd bf       	out	0x3d, r28	; 61
    1b0a:	de bf       	out	0x3e, r29	; 62
    1b0c:	df 91       	pop	r29
    1b0e:	cf 91       	pop	r28
    1b10:	1f 91       	pop	r17
    1b12:	0f 91       	pop	r16
    1b14:	ff 90       	pop	r15
    1b16:	ef 90       	pop	r14
    1b18:	df 90       	pop	r13
    1b1a:	cf 90       	pop	r12
    1b1c:	bf 90       	pop	r11
    1b1e:	af 90       	pop	r10
    1b20:	9f 90       	pop	r9
    1b22:	8f 90       	pop	r8
    1b24:	7f 90       	pop	r7
    1b26:	08 95       	ret

00001b28 <spi_cmd>:
    1b28:	af 92       	push	r10
    1b2a:	cf 92       	push	r12
    1b2c:	df 92       	push	r13
    1b2e:	ef 92       	push	r14
    1b30:	ff 92       	push	r15
    1b32:	0f 93       	push	r16
    1b34:	1f 93       	push	r17
    1b36:	cf 93       	push	r28
    1b38:	df 93       	push	r29
    1b3a:	cd b7       	in	r28, 0x3d	; 61
    1b3c:	de b7       	in	r29, 0x3e	; 62
    1b3e:	29 97       	sbiw	r28, 0x09	; 9
    1b40:	cd bf       	out	0x3d, r28	; 61
    1b42:	de bf       	out	0x3e, r29	; 62
    1b44:	89 83       	std	Y+1, r24	; 0x01
    1b46:	90 e0       	ldi	r25, 0x00	; 0
    1b48:	fc 01       	movw	r30, r24
    1b4a:	e1 5c       	subi	r30, 0xC1	; 193
    1b4c:	f1 09       	sbc	r31, r1
    1b4e:	ef 30       	cpi	r30, 0x0F	; 15
    1b50:	f1 05       	cpc	r31, r1
    1b52:	08 f0       	brcs	.+2      	; 0x1b56 <spi_cmd+0x2e>
    1b54:	50 c0       	rjmp	.+160    	; 0x1bf6 <spi_cmd+0xce>
    1b56:	e8 5b       	subi	r30, 0xB8	; 184
    1b58:	ff 4f       	sbci	r31, 0xFF	; 255
    1b5a:	0c 94 56 13 	jmp	0x26ac	; 0x26ac <__tablejump2__>
    1b5e:	6a 83       	std	Y+2, r22	; 0x02
    1b60:	5b 83       	std	Y+3, r21	; 0x03
    1b62:	4c 83       	std	Y+4, r20	; 0x04
    1b64:	11 c0       	rjmp	.+34     	; 0x1b88 <spi_cmd+0x60>
    1b66:	bb 27       	eor	r27, r27
    1b68:	a7 2f       	mov	r26, r23
    1b6a:	96 2f       	mov	r25, r22
    1b6c:	85 2f       	mov	r24, r21
    1b6e:	a1 10       	cpse	r10, r1
    1b70:	80 68       	ori	r24, 0x80	; 128
    1b72:	8a 83       	std	Y+2, r24	; 0x02
    1b74:	4b 83       	std	Y+3, r20	; 0x03
    1b76:	1c 82       	std	Y+4, r1	; 0x04
    1b78:	07 c0       	rjmp	.+14     	; 0x1b88 <spi_cmd+0x60>
    1b7a:	1a 82       	std	Y+2, r1	; 0x02
    1b7c:	1b 82       	std	Y+3, r1	; 0x03
    1b7e:	fb cf       	rjmp	.-10     	; 0x1b76 <spi_cmd+0x4e>
    1b80:	8f ef       	ldi	r24, 0xFF	; 255
    1b82:	8a 83       	std	Y+2, r24	; 0x02
    1b84:	8b 83       	std	Y+3, r24	; 0x03
    1b86:	8c 83       	std	Y+4, r24	; 0x04
    1b88:	65 e0       	ldi	r22, 0x05	; 5
    1b8a:	37 c0       	rjmp	.+110    	; 0x1bfa <spi_cmd+0xd2>
    1b8c:	6a 83       	std	Y+2, r22	; 0x02
    1b8e:	5b 83       	std	Y+3, r21	; 0x03
    1b90:	4c 83       	std	Y+4, r20	; 0x04
    1b92:	dd 82       	std	Y+5, r13	; 0x05
    1b94:	ce 82       	std	Y+6, r12	; 0x06
    1b96:	67 e0       	ldi	r22, 0x07	; 7
    1b98:	30 c0       	rjmp	.+96     	; 0x1bfa <spi_cmd+0xd2>
    1b9a:	6a 83       	std	Y+2, r22	; 0x02
    1b9c:	5b 83       	std	Y+3, r21	; 0x03
    1b9e:	4c 83       	std	Y+4, r20	; 0x04
    1ba0:	ed 82       	std	Y+5, r14	; 0x05
    1ba2:	de 82       	std	Y+6, r13	; 0x06
    1ba4:	cf 82       	std	Y+7, r12	; 0x07
    1ba6:	0c c0       	rjmp	.+24     	; 0x1bc0 <spi_cmd+0x98>
    1ba8:	bb 27       	eor	r27, r27
    1baa:	a7 2f       	mov	r26, r23
    1bac:	96 2f       	mov	r25, r22
    1bae:	85 2f       	mov	r24, r21
    1bb0:	a1 10       	cpse	r10, r1
    1bb2:	80 68       	ori	r24, 0x80	; 128
    1bb4:	8a 83       	std	Y+2, r24	; 0x02
    1bb6:	4b 83       	std	Y+3, r20	; 0x03
    1bb8:	3c 83       	std	Y+4, r19	; 0x04
    1bba:	2d 83       	std	Y+5, r18	; 0x05
    1bbc:	1e 83       	std	Y+6, r17	; 0x06
    1bbe:	0f 83       	std	Y+7, r16	; 0x07
    1bc0:	68 e0       	ldi	r22, 0x08	; 8
    1bc2:	1b c0       	rjmp	.+54     	; 0x1bfa <spi_cmd+0xd2>
    1bc4:	6a 83       	std	Y+2, r22	; 0x02
    1bc6:	5b 83       	std	Y+3, r21	; 0x03
    1bc8:	4c 83       	std	Y+4, r20	; 0x04
    1bca:	3d 83       	std	Y+5, r19	; 0x05
    1bcc:	2e 83       	std	Y+6, r18	; 0x06
    1bce:	1f 83       	std	Y+7, r17	; 0x07
    1bd0:	08 87       	std	Y+8, r16	; 0x08
    1bd2:	69 e0       	ldi	r22, 0x09	; 9
    1bd4:	12 c0       	rjmp	.+36     	; 0x1bfa <spi_cmd+0xd2>
    1bd6:	a1 e0       	ldi	r26, 0x01	; 1
    1bd8:	b0 e0       	ldi	r27, 0x00	; 0
    1bda:	ac 0f       	add	r26, r28
    1bdc:	bd 1f       	adc	r27, r29
    1bde:	a8 0f       	add	r26, r24
    1be0:	b9 1f       	adc	r27, r25
    1be2:	ee 0f       	add	r30, r30
    1be4:	ec 93       	st	X, r30
    1be6:	70 e0       	ldi	r23, 0x00	; 0
    1be8:	ce 01       	movw	r24, r28
    1bea:	01 96       	adiw	r24, 0x01	; 1
    1bec:	0e 94 be 0c 	call	0x197c	; 0x197c <nmi_spi_write>
    1bf0:	91 e0       	ldi	r25, 0x01	; 1
    1bf2:	88 23       	and	r24, r24
    1bf4:	09 f1       	breq	.+66     	; 0x1c38 <spi_cmd+0x110>
    1bf6:	90 e0       	ldi	r25, 0x00	; 0
    1bf8:	1f c0       	rjmp	.+62     	; 0x1c38 <spi_cmd+0x110>
    1bfa:	80 91 e6 2a 	lds	r24, 0x2AE6	; 0x802ae6 <gu8Crc_off>
    1bfe:	81 11       	cpse	r24, r1
    1c00:	19 c0       	rjmp	.+50     	; 0x1c34 <spi_cmd+0x10c>
    1c02:	86 2f       	mov	r24, r22
    1c04:	90 e0       	ldi	r25, 0x00	; 0
    1c06:	01 97       	sbiw	r24, 0x01	; 1
    1c08:	8c 01       	movw	r16, r24
    1c0a:	09 2e       	mov	r0, r25
    1c0c:	00 0c       	add	r0, r0
    1c0e:	22 0b       	sbc	r18, r18
    1c10:	33 0b       	sbc	r19, r19
    1c12:	de 01       	movw	r26, r28
    1c14:	11 96       	adiw	r26, 0x01	; 1
    1c16:	ef e7       	ldi	r30, 0x7F	; 127
    1c18:	01 50       	subi	r16, 0x01	; 1
    1c1a:	11 09       	sbc	r17, r1
    1c1c:	21 09       	sbc	r18, r1
    1c1e:	31 09       	sbc	r19, r1
    1c20:	d0 f2       	brcs	.-76     	; 0x1bd6 <spi_cmd+0xae>
    1c22:	4d 91       	ld	r20, X+
    1c24:	f0 e0       	ldi	r31, 0x00	; 0
    1c26:	ee 0f       	add	r30, r30
    1c28:	ff 1f       	adc	r31, r31
    1c2a:	e4 27       	eor	r30, r20
    1c2c:	e2 55       	subi	r30, 0x52	; 82
    1c2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c30:	e4 91       	lpm	r30, Z
    1c32:	f2 cf       	rjmp	.-28     	; 0x1c18 <spi_cmd+0xf0>
    1c34:	61 50       	subi	r22, 0x01	; 1
    1c36:	d7 cf       	rjmp	.-82     	; 0x1be6 <spi_cmd+0xbe>
    1c38:	89 2f       	mov	r24, r25
    1c3a:	29 96       	adiw	r28, 0x09	; 9
    1c3c:	cd bf       	out	0x3d, r28	; 61
    1c3e:	de bf       	out	0x3e, r29	; 62
    1c40:	df 91       	pop	r29
    1c42:	cf 91       	pop	r28
    1c44:	1f 91       	pop	r17
    1c46:	0f 91       	pop	r16
    1c48:	ff 90       	pop	r15
    1c4a:	ef 90       	pop	r14
    1c4c:	df 90       	pop	r13
    1c4e:	cf 90       	pop	r12
    1c50:	af 90       	pop	r10
    1c52:	08 95       	ret

00001c54 <spi_write_reg>:
    1c54:	4f 92       	push	r4
    1c56:	5f 92       	push	r5
    1c58:	6f 92       	push	r6
    1c5a:	7f 92       	push	r7
    1c5c:	9f 92       	push	r9
    1c5e:	af 92       	push	r10
    1c60:	bf 92       	push	r11
    1c62:	cf 92       	push	r12
    1c64:	df 92       	push	r13
    1c66:	ef 92       	push	r14
    1c68:	ff 92       	push	r15
    1c6a:	0f 93       	push	r16
    1c6c:	1f 93       	push	r17
    1c6e:	cf 93       	push	r28
    1c70:	df 93       	push	r29
    1c72:	cd b7       	in	r28, 0x3d	; 61
    1c74:	de b7       	in	r29, 0x3e	; 62
    1c76:	26 97       	sbiw	r28, 0x06	; 6
    1c78:	cd bf       	out	0x3d, r28	; 61
    1c7a:	de bf       	out	0x3e, r29	; 62
    1c7c:	2b 01       	movw	r4, r22
    1c7e:	3c 01       	movw	r6, r24
    1c80:	29 83       	std	Y+1, r18	; 0x01
    1c82:	3a 83       	std	Y+2, r19	; 0x02
    1c84:	4b 83       	std	Y+3, r20	; 0x03
    1c86:	5c 83       	std	Y+4, r21	; 0x04
    1c88:	81 e3       	ldi	r24, 0x31	; 49
    1c8a:	48 16       	cp	r4, r24
    1c8c:	51 04       	cpc	r5, r1
    1c8e:	61 04       	cpc	r6, r1
    1c90:	71 04       	cpc	r7, r1
    1c92:	18 f4       	brcc	.+6      	; 0x1c9a <spi_write_reg+0x46>
    1c94:	23 ec       	ldi	r18, 0xC3	; 195
    1c96:	b2 2e       	mov	r11, r18
    1c98:	02 c0       	rjmp	.+4      	; 0x1c9e <spi_write_reg+0x4a>
    1c9a:	99 ec       	ldi	r25, 0xC9	; 201
    1c9c:	b9 2e       	mov	r11, r25
    1c9e:	81 e3       	ldi	r24, 0x31	; 49
    1ca0:	48 16       	cp	r4, r24
    1ca2:	51 04       	cpc	r5, r1
    1ca4:	61 04       	cpc	r6, r1
    1ca6:	71 04       	cpc	r7, r1
    1ca8:	18 f4       	brcc	.+6      	; 0x1cb0 <spi_write_reg+0x5c>
    1caa:	99 24       	eor	r9, r9
    1cac:	93 94       	inc	r9
    1cae:	01 c0       	rjmp	.+2      	; 0x1cb2 <spi_write_reg+0x5e>
    1cb0:	91 2c       	mov	r9, r1
    1cb2:	8a e0       	ldi	r24, 0x0A	; 10
    1cb4:	8e 83       	std	Y+6, r24	; 0x06
    1cb6:	a9 2c       	mov	r10, r9
    1cb8:	84 e0       	ldi	r24, 0x04	; 4
    1cba:	c8 2e       	mov	r12, r24
    1cbc:	d1 2c       	mov	r13, r1
    1cbe:	e1 2c       	mov	r14, r1
    1cc0:	f1 2c       	mov	r15, r1
    1cc2:	09 81       	ldd	r16, Y+1	; 0x01
    1cc4:	1a 81       	ldd	r17, Y+2	; 0x02
    1cc6:	2b 81       	ldd	r18, Y+3	; 0x03
    1cc8:	3c 81       	ldd	r19, Y+4	; 0x04
    1cca:	b3 01       	movw	r22, r6
    1ccc:	a2 01       	movw	r20, r4
    1cce:	8b 2d       	mov	r24, r11
    1cd0:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <spi_cmd>
    1cd4:	8d 83       	std	Y+5, r24	; 0x05
    1cd6:	81 30       	cpi	r24, 0x01	; 1
    1cd8:	31 f4       	brne	.+12     	; 0x1ce6 <spi_write_reg+0x92>
    1cda:	8b 2d       	mov	r24, r11
    1cdc:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <spi_cmd_rsp>
    1ce0:	8d 83       	std	Y+5, r24	; 0x05
    1ce2:	81 30       	cpi	r24, 0x01	; 1
    1ce4:	09 f1       	breq	.+66     	; 0x1d28 <spi_write_reg+0xd4>
    1ce6:	61 e0       	ldi	r22, 0x01	; 1
    1ce8:	70 e0       	ldi	r23, 0x00	; 0
    1cea:	80 e0       	ldi	r24, 0x00	; 0
    1cec:	90 e0       	ldi	r25, 0x00	; 0
    1cee:	0e 94 07 09 	call	0x120e	; 0x120e <nm_bsp_sleep>
    1cf2:	a1 2c       	mov	r10, r1
    1cf4:	c1 2c       	mov	r12, r1
    1cf6:	d1 2c       	mov	r13, r1
    1cf8:	76 01       	movw	r14, r12
    1cfa:	00 e0       	ldi	r16, 0x00	; 0
    1cfc:	10 e0       	ldi	r17, 0x00	; 0
    1cfe:	98 01       	movw	r18, r16
    1d00:	40 e0       	ldi	r20, 0x00	; 0
    1d02:	50 e0       	ldi	r21, 0x00	; 0
    1d04:	ba 01       	movw	r22, r20
    1d06:	8f ec       	ldi	r24, 0xCF	; 207
    1d08:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <spi_cmd>
    1d0c:	8f ec       	ldi	r24, 0xCF	; 207
    1d0e:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <spi_cmd_rsp>
    1d12:	61 e0       	ldi	r22, 0x01	; 1
    1d14:	70 e0       	ldi	r23, 0x00	; 0
    1d16:	80 e0       	ldi	r24, 0x00	; 0
    1d18:	90 e0       	ldi	r25, 0x00	; 0
    1d1a:	0e 94 07 09 	call	0x120e	; 0x120e <nm_bsp_sleep>
    1d1e:	8e 81       	ldd	r24, Y+6	; 0x06
    1d20:	81 50       	subi	r24, 0x01	; 1
    1d22:	8e 83       	std	Y+6, r24	; 0x06
    1d24:	81 11       	cpse	r24, r1
    1d26:	c7 cf       	rjmp	.-114    	; 0x1cb6 <spi_write_reg+0x62>
    1d28:	8d 81       	ldd	r24, Y+5	; 0x05
    1d2a:	26 96       	adiw	r28, 0x06	; 6
    1d2c:	cd bf       	out	0x3d, r28	; 61
    1d2e:	de bf       	out	0x3e, r29	; 62
    1d30:	df 91       	pop	r29
    1d32:	cf 91       	pop	r28
    1d34:	1f 91       	pop	r17
    1d36:	0f 91       	pop	r16
    1d38:	ff 90       	pop	r15
    1d3a:	ef 90       	pop	r14
    1d3c:	df 90       	pop	r13
    1d3e:	cf 90       	pop	r12
    1d40:	bf 90       	pop	r11
    1d42:	af 90       	pop	r10
    1d44:	9f 90       	pop	r9
    1d46:	7f 90       	pop	r7
    1d48:	6f 90       	pop	r6
    1d4a:	5f 90       	pop	r5
    1d4c:	4f 90       	pop	r4
    1d4e:	08 95       	ret

00001d50 <spi_read_reg>:
    1d50:	2f 92       	push	r2
    1d52:	3f 92       	push	r3
    1d54:	4f 92       	push	r4
    1d56:	5f 92       	push	r5
    1d58:	6f 92       	push	r6
    1d5a:	7f 92       	push	r7
    1d5c:	8f 92       	push	r8
    1d5e:	9f 92       	push	r9
    1d60:	af 92       	push	r10
    1d62:	bf 92       	push	r11
    1d64:	cf 92       	push	r12
    1d66:	df 92       	push	r13
    1d68:	ef 92       	push	r14
    1d6a:	ff 92       	push	r15
    1d6c:	0f 93       	push	r16
    1d6e:	1f 93       	push	r17
    1d70:	cf 93       	push	r28
    1d72:	df 93       	push	r29
    1d74:	cd b7       	in	r28, 0x3d	; 61
    1d76:	de b7       	in	r29, 0x3e	; 62
    1d78:	25 97       	sbiw	r28, 0x05	; 5
    1d7a:	cd bf       	out	0x3d, r28	; 61
    1d7c:	de bf       	out	0x3e, r29	; 62
    1d7e:	1b 01       	movw	r2, r22
    1d80:	2c 01       	movw	r4, r24
    1d82:	3a 01       	movw	r6, r20
    1d84:	8f ef       	ldi	r24, 0xFF	; 255
    1d86:	28 16       	cp	r2, r24
    1d88:	31 04       	cpc	r3, r1
    1d8a:	41 04       	cpc	r4, r1
    1d8c:	51 04       	cpc	r5, r1
    1d8e:	09 f0       	breq	.+2      	; 0x1d92 <spi_read_reg+0x42>
    1d90:	18 f4       	brcc	.+6      	; 0x1d98 <spi_read_reg+0x48>
    1d92:	e4 ec       	ldi	r30, 0xC4	; 196
    1d94:	ed 83       	std	Y+5, r30	; 0x05
    1d96:	02 c0       	rjmp	.+4      	; 0x1d9c <spi_read_reg+0x4c>
    1d98:	fa ec       	ldi	r31, 0xCA	; 202
    1d9a:	fd 83       	std	Y+5, r31	; 0x05
    1d9c:	8f ef       	ldi	r24, 0xFF	; 255
    1d9e:	28 16       	cp	r2, r24
    1da0:	31 04       	cpc	r3, r1
    1da2:	41 04       	cpc	r4, r1
    1da4:	51 04       	cpc	r5, r1
    1da6:	09 f0       	breq	.+2      	; 0x1daa <spi_read_reg+0x5a>
    1da8:	18 f4       	brcc	.+6      	; 0x1db0 <spi_read_reg+0x60>
    1daa:	88 24       	eor	r8, r8
    1dac:	83 94       	inc	r8
    1dae:	01 c0       	rjmp	.+2      	; 0x1db2 <spi_read_reg+0x62>
    1db0:	81 2c       	mov	r8, r1
    1db2:	9a e0       	ldi	r25, 0x0A	; 10
    1db4:	99 2e       	mov	r9, r25
    1db6:	a8 2c       	mov	r10, r8
    1db8:	84 e0       	ldi	r24, 0x04	; 4
    1dba:	c8 2e       	mov	r12, r24
    1dbc:	d1 2c       	mov	r13, r1
    1dbe:	e1 2c       	mov	r14, r1
    1dc0:	f1 2c       	mov	r15, r1
    1dc2:	00 e0       	ldi	r16, 0x00	; 0
    1dc4:	10 e0       	ldi	r17, 0x00	; 0
    1dc6:	98 01       	movw	r18, r16
    1dc8:	b2 01       	movw	r22, r4
    1dca:	a1 01       	movw	r20, r2
    1dcc:	8d 81       	ldd	r24, Y+5	; 0x05
    1dce:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <spi_cmd>
    1dd2:	b8 2e       	mov	r11, r24
    1dd4:	e1 e0       	ldi	r30, 0x01	; 1
    1dd6:	8e 13       	cpse	r24, r30
    1dd8:	1c c0       	rjmp	.+56     	; 0x1e12 <spi_read_reg+0xc2>
    1dda:	8d 81       	ldd	r24, Y+5	; 0x05
    1ddc:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <spi_cmd_rsp>
    1de0:	b8 2e       	mov	r11, r24
    1de2:	f1 e0       	ldi	r31, 0x01	; 1
    1de4:	8f 13       	cpse	r24, r31
    1de6:	15 c0       	rjmp	.+42     	; 0x1e12 <spi_read_reg+0xc2>
    1de8:	48 2d       	mov	r20, r8
    1dea:	64 e0       	ldi	r22, 0x04	; 4
    1dec:	70 e0       	ldi	r23, 0x00	; 0
    1dee:	ce 01       	movw	r24, r28
    1df0:	01 96       	adiw	r24, 0x01	; 1
    1df2:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <spi_data_read>
    1df6:	b8 2e       	mov	r11, r24
    1df8:	81 e0       	ldi	r24, 0x01	; 1
    1dfa:	b8 12       	cpse	r11, r24
    1dfc:	0a c0       	rjmp	.+20     	; 0x1e12 <spi_read_reg+0xc2>
    1dfe:	89 81       	ldd	r24, Y+1	; 0x01
    1e00:	9a 81       	ldd	r25, Y+2	; 0x02
    1e02:	ab 81       	ldd	r26, Y+3	; 0x03
    1e04:	bc 81       	ldd	r27, Y+4	; 0x04
    1e06:	f3 01       	movw	r30, r6
    1e08:	80 83       	st	Z, r24
    1e0a:	91 83       	std	Z+1, r25	; 0x01
    1e0c:	a2 83       	std	Z+2, r26	; 0x02
    1e0e:	b3 83       	std	Z+3, r27	; 0x03
    1e10:	1f c0       	rjmp	.+62     	; 0x1e50 <spi_read_reg+0x100>
    1e12:	61 e0       	ldi	r22, 0x01	; 1
    1e14:	70 e0       	ldi	r23, 0x00	; 0
    1e16:	80 e0       	ldi	r24, 0x00	; 0
    1e18:	90 e0       	ldi	r25, 0x00	; 0
    1e1a:	0e 94 07 09 	call	0x120e	; 0x120e <nm_bsp_sleep>
    1e1e:	a1 2c       	mov	r10, r1
    1e20:	c1 2c       	mov	r12, r1
    1e22:	d1 2c       	mov	r13, r1
    1e24:	76 01       	movw	r14, r12
    1e26:	00 e0       	ldi	r16, 0x00	; 0
    1e28:	10 e0       	ldi	r17, 0x00	; 0
    1e2a:	98 01       	movw	r18, r16
    1e2c:	40 e0       	ldi	r20, 0x00	; 0
    1e2e:	50 e0       	ldi	r21, 0x00	; 0
    1e30:	ba 01       	movw	r22, r20
    1e32:	8f ec       	ldi	r24, 0xCF	; 207
    1e34:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <spi_cmd>
    1e38:	8f ec       	ldi	r24, 0xCF	; 207
    1e3a:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <spi_cmd_rsp>
    1e3e:	61 e0       	ldi	r22, 0x01	; 1
    1e40:	70 e0       	ldi	r23, 0x00	; 0
    1e42:	80 e0       	ldi	r24, 0x00	; 0
    1e44:	90 e0       	ldi	r25, 0x00	; 0
    1e46:	0e 94 07 09 	call	0x120e	; 0x120e <nm_bsp_sleep>
    1e4a:	9a 94       	dec	r9
    1e4c:	91 10       	cpse	r9, r1
    1e4e:	b3 cf       	rjmp	.-154    	; 0x1db6 <spi_read_reg+0x66>
    1e50:	8b 2d       	mov	r24, r11
    1e52:	25 96       	adiw	r28, 0x05	; 5
    1e54:	cd bf       	out	0x3d, r28	; 61
    1e56:	de bf       	out	0x3e, r29	; 62
    1e58:	df 91       	pop	r29
    1e5a:	cf 91       	pop	r28
    1e5c:	1f 91       	pop	r17
    1e5e:	0f 91       	pop	r16
    1e60:	ff 90       	pop	r15
    1e62:	ef 90       	pop	r14
    1e64:	df 90       	pop	r13
    1e66:	cf 90       	pop	r12
    1e68:	bf 90       	pop	r11
    1e6a:	af 90       	pop	r10
    1e6c:	9f 90       	pop	r9
    1e6e:	8f 90       	pop	r8
    1e70:	7f 90       	pop	r7
    1e72:	6f 90       	pop	r6
    1e74:	5f 90       	pop	r5
    1e76:	4f 90       	pop	r4
    1e78:	3f 90       	pop	r3
    1e7a:	2f 90       	pop	r2
    1e7c:	08 95       	ret

00001e7e <nm_spi_reset>:
    1e7e:	af 92       	push	r10
    1e80:	cf 92       	push	r12
    1e82:	df 92       	push	r13
    1e84:	ef 92       	push	r14
    1e86:	ff 92       	push	r15
    1e88:	0f 93       	push	r16
    1e8a:	1f 93       	push	r17
    1e8c:	a1 2c       	mov	r10, r1
    1e8e:	c1 2c       	mov	r12, r1
    1e90:	d1 2c       	mov	r13, r1
    1e92:	76 01       	movw	r14, r12
    1e94:	00 e0       	ldi	r16, 0x00	; 0
    1e96:	10 e0       	ldi	r17, 0x00	; 0
    1e98:	98 01       	movw	r18, r16
    1e9a:	40 e0       	ldi	r20, 0x00	; 0
    1e9c:	50 e0       	ldi	r21, 0x00	; 0
    1e9e:	ba 01       	movw	r22, r20
    1ea0:	8f ec       	ldi	r24, 0xCF	; 207
    1ea2:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <spi_cmd>
    1ea6:	8f ec       	ldi	r24, 0xCF	; 207
    1ea8:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <spi_cmd_rsp>
    1eac:	80 e0       	ldi	r24, 0x00	; 0
    1eae:	1f 91       	pop	r17
    1eb0:	0f 91       	pop	r16
    1eb2:	ff 90       	pop	r15
    1eb4:	ef 90       	pop	r14
    1eb6:	df 90       	pop	r13
    1eb8:	cf 90       	pop	r12
    1eba:	af 90       	pop	r10
    1ebc:	08 95       	ret

00001ebe <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
    1ebe:	cf 93       	push	r28
    1ec0:	df 93       	push	r29
    1ec2:	00 d0       	rcall	.+0      	; 0x1ec4 <nm_spi_read_reg+0x6>
    1ec4:	00 d0       	rcall	.+0      	; 0x1ec6 <nm_spi_read_reg+0x8>
    1ec6:	cd b7       	in	r28, 0x3d	; 61
    1ec8:	de b7       	in	r29, 0x3e	; 62
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
    1eca:	ae 01       	movw	r20, r28
    1ecc:	4f 5f       	subi	r20, 0xFF	; 255
    1ece:	5f 4f       	sbci	r21, 0xFF	; 255
    1ed0:	0e 94 a8 0e 	call	0x1d50	; 0x1d50 <spi_read_reg>

	return u32Val;
    1ed4:	69 81       	ldd	r22, Y+1	; 0x01
    1ed6:	7a 81       	ldd	r23, Y+2	; 0x02
    1ed8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eda:	9c 81       	ldd	r25, Y+4	; 0x04
}
    1edc:	24 96       	adiw	r28, 0x04	; 4
    1ede:	cd bf       	out	0x3d, r28	; 61
    1ee0:	de bf       	out	0x3e, r29	; 62
    1ee2:	df 91       	pop	r29
    1ee4:	cf 91       	pop	r28
    1ee6:	08 95       	ret

00001ee8 <nm_spi_read_reg_with_ret>:
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
    1ee8:	0e 94 a8 0e 	call	0x1d50	; 0x1d50 <spi_read_reg>

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    1eec:	81 30       	cpi	r24, 0x01	; 1
    1eee:	11 f0       	breq	.+4      	; 0x1ef4 <nm_spi_read_reg_with_ret+0xc>
	else s8Ret = M2M_ERR_BUS_FAIL;
    1ef0:	8a ef       	ldi	r24, 0xFA	; 250
    1ef2:	08 95       	ret
{
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    1ef4:	80 e0       	ldi	r24, 0x00	; 0
	else s8Ret = M2M_ERR_BUS_FAIL;

	return s8Ret;
}
    1ef6:	08 95       	ret

00001ef8 <nm_spi_write_reg>:
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
    1ef8:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <spi_write_reg>

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    1efc:	81 30       	cpi	r24, 0x01	; 1
    1efe:	11 f0       	breq	.+4      	; 0x1f04 <nm_spi_write_reg+0xc>
	else s8Ret = M2M_ERR_BUS_FAIL;
    1f00:	8a ef       	ldi	r24, 0xFA	; 250
    1f02:	08 95       	ret
{
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    1f04:	80 e0       	ldi	r24, 0x00	; 0
	else s8Ret = M2M_ERR_BUS_FAIL;

	return s8Ret;
}
    1f06:	08 95       	ret

00001f08 <nm_spi_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_init(void)
{
    1f08:	cf 93       	push	r28
    1f0a:	df 93       	push	r29
    1f0c:	cd b7       	in	r28, 0x3d	; 61
    1f0e:	de b7       	in	r29, 0x3e	; 62
    1f10:	28 97       	sbiw	r28, 0x08	; 8
    1f12:	cd bf       	out	0x3d, r28	; 61
    1f14:	de bf       	out	0x3e, r29	; 62
	uint32 chipid;
	uint32 reg = 0;
    1f16:	19 82       	std	Y+1, r1	; 0x01
    1f18:	1a 82       	std	Y+2, r1	; 0x02
    1f1a:	1b 82       	std	Y+3, r1	; 0x03
    1f1c:	1c 82       	std	Y+4, r1	; 0x04
	

	/**
		configure protocol
	**/
	gu8Crc_off = 0;
    1f1e:	10 92 e6 2a 	sts	0x2AE6, r1	; 0x802ae6 <gu8Crc_off>

	// TODO: We can remove the CRC trials if there is a definite way to reset
	// the SPI to it's initial value.
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
    1f22:	ae 01       	movw	r20, r28
    1f24:	4f 5f       	subi	r20, 0xFF	; 255
    1f26:	5f 4f       	sbci	r21, 0xFF	; 255
    1f28:	64 e2       	ldi	r22, 0x24	; 36
    1f2a:	78 ee       	ldi	r23, 0xE8	; 232
    1f2c:	80 e0       	ldi	r24, 0x00	; 0
    1f2e:	90 e0       	ldi	r25, 0x00	; 0
    1f30:	0e 94 a8 0e 	call	0x1d50	; 0x1d50 <spi_read_reg>
    1f34:	88 23       	and	r24, r24
    1f36:	29 f0       	breq	.+10     	; 0x1f42 <nm_spi_init+0x3a>
			// Reaad failed with both CRC on and off, something went bad
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
			return 0;
		}
	}
	if(gu8Crc_off == 0)
    1f38:	80 91 e6 2a 	lds	r24, 0x2AE6	; 0x802ae6 <gu8Crc_off>
    1f3c:	88 23       	and	r24, r24
    1f3e:	81 f0       	breq	.+32     	; 0x1f60 <nm_spi_init+0x58>
    1f40:	26 c0       	rjmp	.+76     	; 0x1f8e <nm_spi_init+0x86>
	// TODO: We can remove the CRC trials if there is a definite way to reset
	// the SPI to it's initial value.
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
		/* Read failed. Try with CRC off. This might happen when module
		is removed but chip isn't reset*/
		gu8Crc_off = 1;
    1f42:	81 e0       	ldi	r24, 0x01	; 1
    1f44:	80 93 e6 2a 	sts	0x2AE6, r24	; 0x802ae6 <gu8Crc_off>
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
    1f48:	ae 01       	movw	r20, r28
    1f4a:	4f 5f       	subi	r20, 0xFF	; 255
    1f4c:	5f 4f       	sbci	r21, 0xFF	; 255
    1f4e:	64 e2       	ldi	r22, 0x24	; 36
    1f50:	78 ee       	ldi	r23, 0xE8	; 232
    1f52:	80 e0       	ldi	r24, 0x00	; 0
    1f54:	90 e0       	ldi	r25, 0x00	; 0
    1f56:	0e 94 a8 0e 	call	0x1d50	; 0x1d50 <spi_read_reg>
    1f5a:	81 11       	cpse	r24, r1
    1f5c:	ed cf       	rjmp	.-38     	; 0x1f38 <nm_spi_init+0x30>
    1f5e:	34 c0       	rjmp	.+104    	; 0x1fc8 <nm_spi_init+0xc0>
	}
	if(gu8Crc_off == 0)
	{
		reg &= ~0xc;	/* disable crc checking */
		reg &= ~0x70;
		reg |= (0x5 << 4);
    1f60:	89 81       	ldd	r24, Y+1	; 0x01
    1f62:	9a 81       	ldd	r25, Y+2	; 0x02
    1f64:	ab 81       	ldd	r26, Y+3	; 0x03
    1f66:	bc 81       	ldd	r27, Y+4	; 0x04
    1f68:	83 78       	andi	r24, 0x83	; 131
    1f6a:	9c 01       	movw	r18, r24
    1f6c:	ad 01       	movw	r20, r26
    1f6e:	20 65       	ori	r18, 0x50	; 80
    1f70:	29 83       	std	Y+1, r18	; 0x01
    1f72:	3a 83       	std	Y+2, r19	; 0x02
    1f74:	4b 83       	std	Y+3, r20	; 0x03
    1f76:	5c 83       	std	Y+4, r21	; 0x04
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
    1f78:	64 e2       	ldi	r22, 0x24	; 36
    1f7a:	78 ee       	ldi	r23, 0xE8	; 232
    1f7c:	80 e0       	ldi	r24, 0x00	; 0
    1f7e:	90 e0       	ldi	r25, 0x00	; 0
    1f80:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <spi_write_reg>
    1f84:	88 23       	and	r24, r24
    1f86:	01 f1       	breq	.+64     	; 0x1fc8 <nm_spi_init+0xc0>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
			return 0;
		}
		gu8Crc_off = 1;
    1f88:	81 e0       	ldi	r24, 0x01	; 1
    1f8a:	80 93 e6 2a 	sts	0x2AE6, r24	; 0x802ae6 <gu8Crc_off>
	}

	/**
		make sure can read back chip id correctly
	**/
	if (!spi_read_reg(0x1000, &chipid)) {
    1f8e:	ae 01       	movw	r20, r28
    1f90:	4b 5f       	subi	r20, 0xFB	; 251
    1f92:	5f 4f       	sbci	r21, 0xFF	; 255
    1f94:	60 e0       	ldi	r22, 0x00	; 0
    1f96:	70 e1       	ldi	r23, 0x10	; 16
    1f98:	80 e0       	ldi	r24, 0x00	; 0
    1f9a:	90 e0       	ldi	r25, 0x00	; 0
    1f9c:	0e 94 a8 0e 	call	0x1d50	; 0x1d50 <spi_read_reg>
    1fa0:	88 23       	and	r24, r24
    1fa2:	a1 f0       	breq	.+40     	; 0x1fcc <nm_spi_init+0xc4>
static void spi_init_pkt_sz(void)
{
	uint32 val32;

	/* Make sure SPI max. packet size fits the defined DATA_PKT_SZ.  */
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
    1fa4:	64 e2       	ldi	r22, 0x24	; 36
    1fa6:	78 ee       	ldi	r23, 0xE8	; 232
    1fa8:	80 e0       	ldi	r24, 0x00	; 0
    1faa:	90 e0       	ldi	r25, 0x00	; 0
    1fac:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <nm_spi_read_reg>
	val32 &= ~(0x7 << 4);
    1fb0:	dc 01       	movw	r26, r24
    1fb2:	cb 01       	movw	r24, r22
    1fb4:	8f 78       	andi	r24, 0x8F	; 143
	case 2048: val32 |= (3 << 4); break;
	case 4096: val32 |= (4 << 4); break;
	case 8192: val32 |= (5 << 4); break;

	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
    1fb6:	9c 01       	movw	r18, r24
    1fb8:	ad 01       	movw	r20, r26
    1fba:	20 65       	ori	r18, 0x50	; 80
    1fbc:	64 e2       	ldi	r22, 0x24	; 36
    1fbe:	78 ee       	ldi	r23, 0xE8	; 232
    1fc0:	80 e0       	ldi	r24, 0x00	; 0
    1fc2:	90 e0       	ldi	r25, 0x00	; 0
    1fc4:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <nm_spi_write_reg>

	M2M_DBG("[nmi spi]: chipid (%08x)\n", (unsigned int)chipid);
	spi_init_pkt_sz();


	return M2M_SUCCESS;
    1fc8:	80 e0       	ldi	r24, 0x00	; 0
    1fca:	01 c0       	rjmp	.+2      	; 0x1fce <nm_spi_init+0xc6>
	/**
		make sure can read back chip id correctly
	**/
	if (!spi_read_reg(0x1000, &chipid)) {
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
		return M2M_ERR_BUS_FAIL;
    1fcc:	8a ef       	ldi	r24, 0xFA	; 250
	M2M_DBG("[nmi spi]: chipid (%08x)\n", (unsigned int)chipid);
	spi_init_pkt_sz();


	return M2M_SUCCESS;
}
    1fce:	28 96       	adiw	r28, 0x08	; 8
    1fd0:	cd bf       	out	0x3d, r28	; 61
    1fd2:	de bf       	out	0x3e, r29	; 62
    1fd4:	df 91       	pop	r29
    1fd6:	cf 91       	pop	r28
    1fd8:	08 95       	ret

00001fda <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    1fda:	2f 92       	push	r2
    1fdc:	3f 92       	push	r3
    1fde:	4f 92       	push	r4
    1fe0:	5f 92       	push	r5
    1fe2:	6f 92       	push	r6
    1fe4:	7f 92       	push	r7
    1fe6:	8f 92       	push	r8
    1fe8:	9f 92       	push	r9
    1fea:	af 92       	push	r10
    1fec:	bf 92       	push	r11
    1fee:	cf 92       	push	r12
    1ff0:	df 92       	push	r13
    1ff2:	ef 92       	push	r14
    1ff4:	ff 92       	push	r15
    1ff6:	0f 93       	push	r16
    1ff8:	1f 93       	push	r17
    1ffa:	cf 93       	push	r28
    1ffc:	df 93       	push	r29
    1ffe:	00 d0       	rcall	.+0      	; 0x2000 <nm_spi_read_block+0x26>
    2000:	00 d0       	rcall	.+0      	; 0x2002 <nm_spi_read_block+0x28>
    2002:	cd b7       	in	r28, 0x3d	; 61
    2004:	de b7       	in	r29, 0x3e	; 62
    2006:	1b 01       	movw	r2, r22
    2008:	2c 01       	movw	r4, r24
    200a:	3a 01       	movw	r6, r20
    200c:	49 01       	movw	r8, r18
    200e:	8a e0       	ldi	r24, 0x0A	; 10
    2010:	8b 83       	std	Y+3, r24	; 0x03
	uint8 cmd = CMD_DMA_EXT_READ;
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
#if defined USE_OLD_SPI_SW
	uint8 tmp[2];
	uint8 single_byte_workaround = 0;
    2012:	1c 82       	std	Y+4, r1	; 0x04

	/**
		Command
	**/
#if defined USE_OLD_SPI_SW
	if (size == 1)
    2014:	e1 e0       	ldi	r30, 0x01	; 1
    2016:	8e 16       	cp	r8, r30
    2018:	91 04       	cpc	r9, r1
    201a:	29 f4       	brne	.+10     	; 0x2026 <nm_spi_read_block+0x4c>
	{
		//Workaround hardware problem with single byte transfers over SPI bus
		size = 2;
		single_byte_workaround = 1;
    201c:	f1 e0       	ldi	r31, 0x01	; 1
    201e:	fc 83       	std	Y+4, r31	; 0x04
	**/
#if defined USE_OLD_SPI_SW
	if (size == 1)
	{
		//Workaround hardware problem with single byte transfers over SPI bus
		size = 2;
    2020:	82 e0       	ldi	r24, 0x02	; 2
    2022:	88 2e       	mov	r8, r24
    2024:	91 2c       	mov	r9, r1
		single_byte_workaround = 1;
	}
	result = spi_cmd(cmd, addr, 0, size,0);
    2026:	64 01       	movw	r12, r8
    2028:	e1 2c       	mov	r14, r1
    202a:	f1 2c       	mov	r15, r1
    202c:	a1 2c       	mov	r10, r1
    202e:	00 e0       	ldi	r16, 0x00	; 0
    2030:	10 e0       	ldi	r17, 0x00	; 0
    2032:	98 01       	movw	r18, r16
    2034:	b2 01       	movw	r22, r4
    2036:	a1 01       	movw	r20, r2
    2038:	88 ec       	ldi	r24, 0xC8	; 200
    203a:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <spi_cmd>
    203e:	b8 2e       	mov	r11, r24
	if (result != N_OK) {
    2040:	81 e0       	ldi	r24, 0x01	; 1
    2042:	b8 12       	cpse	r11, r24
    2044:	1c c0       	rjmp	.+56     	; 0x207e <nm_spi_read_block+0xa4>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}

	result = spi_cmd_rsp(cmd);
    2046:	88 ec       	ldi	r24, 0xC8	; 200
    2048:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <spi_cmd_rsp>
    204c:	b8 2e       	mov	r11, r24
	if (result != N_OK) {
    204e:	e1 e0       	ldi	r30, 0x01	; 1
    2050:	8e 13       	cpse	r24, r30
    2052:	15 c0       	rjmp	.+42     	; 0x207e <nm_spi_read_block+0xa4>
	}

	/**
		Data
	**/
	if (single_byte_workaround)
    2054:	fc 81       	ldd	r31, Y+4	; 0x04
	{
		result = spi_data_read(tmp, size,0);
    2056:	40 e0       	ldi	r20, 0x00	; 0
    2058:	b4 01       	movw	r22, r8
	}

	/**
		Data
	**/
	if (single_byte_workaround)
    205a:	ff 23       	and	r31, r31
    205c:	49 f0       	breq	.+18     	; 0x2070 <nm_spi_read_block+0x96>
	{
		result = spi_data_read(tmp, size,0);
    205e:	ce 01       	movw	r24, r28
    2060:	01 96       	adiw	r24, 0x01	; 1
    2062:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <spi_data_read>
    2066:	b8 2e       	mov	r11, r24
		buf[0] = tmp[0];
    2068:	89 81       	ldd	r24, Y+1	; 0x01
    206a:	f3 01       	movw	r30, r6
    206c:	80 83       	st	Z, r24
    206e:	04 c0       	rjmp	.+8      	; 0x2078 <nm_spi_read_block+0x9e>
	}
	else
		result = spi_data_read(buf, size,0);
    2070:	c3 01       	movw	r24, r6
    2072:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <spi_data_read>
    2076:	b8 2e       	mov	r11, r24
		goto _FAIL_;
	}
#endif

_FAIL_:
	if(result != N_OK)
    2078:	f1 e0       	ldi	r31, 0x01	; 1
    207a:	bf 16       	cp	r11, r31
    207c:	31 f1       	breq	.+76     	; 0x20ca <nm_spi_read_block+0xf0>
	{
		nm_bsp_sleep(1);
    207e:	61 e0       	ldi	r22, 0x01	; 1
    2080:	70 e0       	ldi	r23, 0x00	; 0
    2082:	80 e0       	ldi	r24, 0x00	; 0
    2084:	90 e0       	ldi	r25, 0x00	; 0
    2086:	0e 94 07 09 	call	0x120e	; 0x120e <nm_bsp_sleep>
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    208a:	a1 2c       	mov	r10, r1
    208c:	c1 2c       	mov	r12, r1
    208e:	d1 2c       	mov	r13, r1
    2090:	76 01       	movw	r14, r12
    2092:	00 e0       	ldi	r16, 0x00	; 0
    2094:	10 e0       	ldi	r17, 0x00	; 0
    2096:	98 01       	movw	r18, r16
    2098:	40 e0       	ldi	r20, 0x00	; 0
    209a:	50 e0       	ldi	r21, 0x00	; 0
    209c:	ba 01       	movw	r22, r20
    209e:	8f ec       	ldi	r24, 0xCF	; 207
    20a0:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <spi_cmd>
		spi_cmd_rsp(CMD_RESET);
    20a4:	8f ec       	ldi	r24, 0xCF	; 207
    20a6:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <spi_cmd_rsp>
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
		nm_bsp_sleep(1);
    20aa:	61 e0       	ldi	r22, 0x01	; 1
    20ac:	70 e0       	ldi	r23, 0x00	; 0
    20ae:	80 e0       	ldi	r24, 0x00	; 0
    20b0:	90 e0       	ldi	r25, 0x00	; 0
    20b2:	0e 94 07 09 	call	0x120e	; 0x120e <nm_bsp_sleep>
    20b6:	8b 81       	ldd	r24, Y+3	; 0x03
    20b8:	81 50       	subi	r24, 0x01	; 1
    20ba:	8b 83       	std	Y+3, r24	; 0x03
		retry--;
		if(retry) goto _RETRY_;
    20bc:	81 11       	cpse	r24, r1
    20be:	aa cf       	rjmp	.-172    	; 0x2014 <nm_spi_read_block+0x3a>
{
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    20c0:	e1 e0       	ldi	r30, 0x01	; 1
    20c2:	be 16       	cp	r11, r30
    20c4:	11 f0       	breq	.+4      	; 0x20ca <nm_spi_read_block+0xf0>
	else s8Ret = M2M_ERR_BUS_FAIL;
    20c6:	8a ef       	ldi	r24, 0xFA	; 250
    20c8:	01 c0       	rjmp	.+2      	; 0x20cc <nm_spi_read_block+0xf2>
{
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    20ca:	80 e0       	ldi	r24, 0x00	; 0
	else s8Ret = M2M_ERR_BUS_FAIL;

	return s8Ret;
}
    20cc:	24 96       	adiw	r28, 0x04	; 4
    20ce:	cd bf       	out	0x3d, r28	; 61
    20d0:	de bf       	out	0x3e, r29	; 62
    20d2:	df 91       	pop	r29
    20d4:	cf 91       	pop	r28
    20d6:	1f 91       	pop	r17
    20d8:	0f 91       	pop	r16
    20da:	ff 90       	pop	r15
    20dc:	ef 90       	pop	r14
    20de:	df 90       	pop	r13
    20e0:	cf 90       	pop	r12
    20e2:	bf 90       	pop	r11
    20e4:	af 90       	pop	r10
    20e6:	9f 90       	pop	r9
    20e8:	8f 90       	pop	r8
    20ea:	7f 90       	pop	r7
    20ec:	6f 90       	pop	r6
    20ee:	5f 90       	pop	r5
    20f0:	4f 90       	pop	r4
    20f2:	3f 90       	pop	r3
    20f4:	2f 90       	pop	r2
    20f6:	08 95       	ret

000020f8 <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    20f8:	2f 92       	push	r2
    20fa:	3f 92       	push	r3
    20fc:	4f 92       	push	r4
    20fe:	5f 92       	push	r5
    2100:	6f 92       	push	r6
    2102:	7f 92       	push	r7
    2104:	8f 92       	push	r8
    2106:	9f 92       	push	r9
    2108:	af 92       	push	r10
    210a:	bf 92       	push	r11
    210c:	cf 92       	push	r12
    210e:	df 92       	push	r13
    2110:	ef 92       	push	r14
    2112:	ff 92       	push	r15
    2114:	0f 93       	push	r16
    2116:	1f 93       	push	r17
    2118:	cf 93       	push	r28
    211a:	df 93       	push	r29
    211c:	00 d0       	rcall	.+0      	; 0x211e <nm_spi_write_block+0x26>
    211e:	00 d0       	rcall	.+0      	; 0x2120 <nm_spi_write_block+0x28>
    2120:	cd b7       	in	r28, 0x3d	; 61
    2122:	de b7       	in	r29, 0x3e	; 62
    2124:	2b 01       	movw	r4, r22
    2126:	3c 01       	movw	r6, r24
    2128:	1a 01       	movw	r2, r20
    212a:	49 01       	movw	r8, r18
    212c:	2a e0       	ldi	r18, 0x0A	; 10
    212e:	b2 2e       	mov	r11, r18
	/**
		Command
	**/
#if defined USE_OLD_SPI_SW
	//Workaround hardware problem with single byte transfers over SPI bus
	if (size == 1)
    2130:	81 e0       	ldi	r24, 0x01	; 1
    2132:	88 16       	cp	r8, r24
    2134:	91 04       	cpc	r9, r1
    2136:	19 f4       	brne	.+6      	; 0x213e <nm_spi_write_block+0x46>
		size = 2;
    2138:	92 e0       	ldi	r25, 0x02	; 2
    213a:	89 2e       	mov	r8, r25
    213c:	91 2c       	mov	r9, r1

	result = spi_cmd(cmd, addr, 0, size,0);
    213e:	64 01       	movw	r12, r8
    2140:	e1 2c       	mov	r14, r1
    2142:	f1 2c       	mov	r15, r1
    2144:	a1 2c       	mov	r10, r1
    2146:	00 e0       	ldi	r16, 0x00	; 0
    2148:	10 e0       	ldi	r17, 0x00	; 0
    214a:	98 01       	movw	r18, r16
    214c:	b3 01       	movw	r22, r6
    214e:	a2 01       	movw	r20, r4
    2150:	87 ec       	ldi	r24, 0xC7	; 199
    2152:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <spi_cmd>
	if (result != N_OK) {
    2156:	81 30       	cpi	r24, 0x01	; 1
    2158:	09 f0       	breq	.+2      	; 0x215c <nm_spi_write_block+0x64>
    215a:	69 c0       	rjmp	.+210    	; 0x222e <nm_spi_write_block+0x136>
		M2M_ERR("[nmi spi]: Failed cmd, write block (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}

	result = spi_cmd_rsp(cmd);
    215c:	87 ec       	ldi	r24, 0xC7	; 199
    215e:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <spi_cmd_rsp>
	if (result != N_OK) {
    2162:	81 30       	cpi	r24, 0x01	; 1
    2164:	09 f0       	breq	.+2      	; 0x2168 <nm_spi_write_block+0x70>
    2166:	63 c0       	rjmp	.+198    	; 0x222e <nm_spi_write_block+0x136>
static sint8 spi_data_write(uint8 *b, uint16 sz)
{
	sint16 ix;
	uint16 nbytes;
	sint8 result = 1;
	uint8 cmd, order, crc[2] = {0};
    2168:	19 82       	std	Y+1, r1	; 0x01
    216a:	1a 82       	std	Y+2, r1	; 0x02
    216c:	84 01       	movw	r16, r8
	//uint8 rsp;

	/**
		Data
	**/
	ix = 0;
    216e:	e1 2c       	mov	r14, r1
    2170:	f1 2c       	mov	r15, r1
    2172:	68 01       	movw	r12, r16
    2174:	01 30       	cpi	r16, 0x01	; 1
    2176:	80 e2       	ldi	r24, 0x20	; 32
    2178:	18 07       	cpc	r17, r24
    217a:	18 f0       	brcs	.+6      	; 0x2182 <nm_spi_write_block+0x8a>
    217c:	c1 2c       	mov	r12, r1
    217e:	80 e2       	ldi	r24, 0x20	; 32
    2180:	d8 2e       	mov	r13, r24

		/**
			Write command
		**/
		cmd = 0xf0;
		if (ix == 0)  {
    2182:	e1 14       	cp	r14, r1
    2184:	f1 04       	cpc	r15, r1
    2186:	29 f4       	brne	.+10     	; 0x2192 <nm_spi_write_block+0x9a>
			if (sz <= DATA_PKT_SZ)
    2188:	01 30       	cpi	r16, 0x01	; 1
    218a:	80 e2       	ldi	r24, 0x20	; 32
    218c:	18 07       	cpc	r17, r24
    218e:	38 f4       	brcc	.+14     	; 0x219e <nm_spi_write_block+0xa6>
    2190:	04 c0       	rjmp	.+8      	; 0x219a <nm_spi_write_block+0xa2>
				order = 0x3;
			else
				order = 0x1;
		} else {
			if (sz <= DATA_PKT_SZ)
    2192:	01 30       	cpi	r16, 0x01	; 1
    2194:	80 e2       	ldi	r24, 0x20	; 32
    2196:	18 07       	cpc	r17, r24
    2198:	20 f4       	brcc	.+8      	; 0x21a2 <nm_spi_write_block+0xaa>
			Write command
		**/
		cmd = 0xf0;
		if (ix == 0)  {
			if (sz <= DATA_PKT_SZ)
				order = 0x3;
    219a:	83 e0       	ldi	r24, 0x03	; 3
    219c:	03 c0       	rjmp	.+6      	; 0x21a4 <nm_spi_write_block+0xac>
			else
				order = 0x1;
    219e:	81 e0       	ldi	r24, 0x01	; 1
    21a0:	01 c0       	rjmp	.+2      	; 0x21a4 <nm_spi_write_block+0xac>
		} else {
			if (sz <= DATA_PKT_SZ)
				order = 0x3;
			else
				order = 0x2;
    21a2:	82 e0       	ldi	r24, 0x02	; 2
		}
		cmd |= order;
    21a4:	80 6f       	ori	r24, 0xF0	; 240
    21a6:	8c 83       	std	Y+4, r24	; 0x04
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
    21a8:	61 e0       	ldi	r22, 0x01	; 1
    21aa:	70 e0       	ldi	r23, 0x00	; 0
    21ac:	ce 01       	movw	r24, r28
    21ae:	04 96       	adiw	r24, 0x04	; 4
    21b0:	0e 94 be 0c 	call	0x197c	; 0x197c <nmi_spi_write>
    21b4:	81 11       	cpse	r24, r1
    21b6:	3b c0       	rjmp	.+118    	; 0x222e <nm_spi_write_block+0x136>
		}

		/**
			Write data
		**/
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
    21b8:	b6 01       	movw	r22, r12
    21ba:	c1 01       	movw	r24, r2
    21bc:	8e 0d       	add	r24, r14
    21be:	9f 1d       	adc	r25, r15
    21c0:	0e 94 be 0c 	call	0x197c	; 0x197c <nmi_spi_write>
    21c4:	81 11       	cpse	r24, r1
    21c6:	33 c0       	rjmp	.+102    	; 0x222e <nm_spi_write_block+0x136>
		}

		/**
			Write Crc
		**/
		if (!gu8Crc_off) {
    21c8:	80 91 e6 2a 	lds	r24, 0x2AE6	; 0x802ae6 <gu8Crc_off>
    21cc:	88 23       	and	r24, r24
    21ce:	31 f0       	breq	.+12     	; 0x21dc <nm_spi_write_block+0xe4>
				result = N_FAIL;
				break;
			}
		}

		ix += nbytes;
    21d0:	ec 0c       	add	r14, r12
    21d2:	fd 1c       	adc	r15, r13
		sz -= nbytes;
    21d4:	0c 19       	sub	r16, r12
    21d6:	1d 09       	sbc	r17, r13
	} while (sz);
    21d8:	61 f6       	brne	.-104    	; 0x2172 <nm_spi_write_block+0x7a>
    21da:	09 c0       	rjmp	.+18     	; 0x21ee <nm_spi_write_block+0xf6>

		/**
			Write Crc
		**/
		if (!gu8Crc_off) {
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
    21dc:	62 e0       	ldi	r22, 0x02	; 2
    21de:	70 e0       	ldi	r23, 0x00	; 0
    21e0:	ce 01       	movw	r24, r28
    21e2:	01 96       	adiw	r24, 0x01	; 1
    21e4:	0e 94 be 0c 	call	0x197c	; 0x197c <nmi_spi_write>
    21e8:	88 23       	and	r24, r24
    21ea:	91 f3       	breq	.-28     	; 0x21d0 <nm_spi_write_block+0xd8>
    21ec:	20 c0       	rjmp	.+64     	; 0x222e <nm_spi_write_block+0x136>
{
	uint8 len;
	uint8 rsp[3];
	sint8 result = N_OK;

    if (!gu8Crc_off)
    21ee:	80 91 e6 2a 	lds	r24, 0x2AE6	; 0x802ae6 <gu8Crc_off>
    21f2:	88 23       	and	r24, r24
    21f4:	11 f0       	breq	.+4      	; 0x21fa <nm_spi_write_block+0x102>
		len = 2;
	else
		len = 3;
    21f6:	03 e0       	ldi	r16, 0x03	; 3
    21f8:	01 c0       	rjmp	.+2      	; 0x21fc <nm_spi_write_block+0x104>
	uint8 len;
	uint8 rsp[3];
	sint8 result = N_OK;

    if (!gu8Crc_off)
		len = 2;
    21fa:	02 e0       	ldi	r16, 0x02	; 2
	else
		len = 3;

	if (M2M_SUCCESS != nmi_spi_read(&rsp[0], len)) {
    21fc:	10 e0       	ldi	r17, 0x00	; 0
    21fe:	b8 01       	movw	r22, r16
    2200:	ce 01       	movw	r24, r28
    2202:	01 96       	adiw	r24, 0x01	; 1
    2204:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <nmi_spi_read>
    2208:	81 11       	cpse	r24, r1
    220a:	11 c0       	rjmp	.+34     	; 0x222e <nm_spi_write_block+0x136>
		M2M_ERR("[nmi spi]: Failed bus error...\n");
		result = N_FAIL;
		goto _fail_;
	}
		
	if((rsp[len-1] != 0)||(rsp[len-2] != 0xC3))
    220c:	fe 01       	movw	r30, r28
    220e:	e0 0f       	add	r30, r16
    2210:	f1 1f       	adc	r31, r17
    2212:	80 81       	ld	r24, Z
    2214:	81 11       	cpse	r24, r1
    2216:	0b c0       	rjmp	.+22     	; 0x222e <nm_spi_write_block+0x136>
    2218:	ef ef       	ldi	r30, 0xFF	; 255
    221a:	ff ef       	ldi	r31, 0xFF	; 255
    221c:	ec 0f       	add	r30, r28
    221e:	fd 1f       	adc	r31, r29
    2220:	e0 0f       	add	r30, r16
    2222:	f1 1f       	adc	r31, r17
	{
		M2M_ERR("[nmi spi]: Failed data response read, %x %x %x\n",rsp[0],rsp[1],rsp[2]);
		result = N_FAIL;
    2224:	80 81       	ld	r24, Z
    2226:	83 3c       	cpi	r24, 0xC3	; 195
    2228:	11 f4       	brne	.+4      	; 0x222e <nm_spi_write_block+0x136>
{
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    222a:	80 e0       	ldi	r24, 0x00	; 0
    222c:	20 c0       	rjmp	.+64     	; 0x226e <nm_spi_write_block+0x176>
	}
	
_FAIL_:
	if(result != N_OK)
	{
		nm_bsp_sleep(1);
    222e:	61 e0       	ldi	r22, 0x01	; 1
    2230:	70 e0       	ldi	r23, 0x00	; 0
    2232:	80 e0       	ldi	r24, 0x00	; 0
    2234:	90 e0       	ldi	r25, 0x00	; 0
    2236:	0e 94 07 09 	call	0x120e	; 0x120e <nm_bsp_sleep>
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    223a:	a1 2c       	mov	r10, r1
    223c:	c1 2c       	mov	r12, r1
    223e:	d1 2c       	mov	r13, r1
    2240:	76 01       	movw	r14, r12
    2242:	00 e0       	ldi	r16, 0x00	; 0
    2244:	10 e0       	ldi	r17, 0x00	; 0
    2246:	98 01       	movw	r18, r16
    2248:	40 e0       	ldi	r20, 0x00	; 0
    224a:	50 e0       	ldi	r21, 0x00	; 0
    224c:	ba 01       	movw	r22, r20
    224e:	8f ec       	ldi	r24, 0xCF	; 207
    2250:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <spi_cmd>
		spi_cmd_rsp(CMD_RESET);
    2254:	8f ec       	ldi	r24, 0xCF	; 207
    2256:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <spi_cmd_rsp>
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
		nm_bsp_sleep(1);
    225a:	61 e0       	ldi	r22, 0x01	; 1
    225c:	70 e0       	ldi	r23, 0x00	; 0
    225e:	80 e0       	ldi	r24, 0x00	; 0
    2260:	90 e0       	ldi	r25, 0x00	; 0
    2262:	0e 94 07 09 	call	0x120e	; 0x120e <nm_bsp_sleep>
    2266:	ba 94       	dec	r11
		retry--;
		if(retry) goto _RETRY_;
    2268:	b1 10       	cpse	r11, r1
    226a:	62 cf       	rjmp	.-316    	; 0x2130 <nm_spi_write_block+0x38>
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
	else s8Ret = M2M_ERR_BUS_FAIL;
    226c:	8a ef       	ldi	r24, 0xFA	; 250

	return s8Ret;
}
    226e:	24 96       	adiw	r28, 0x04	; 4
    2270:	cd bf       	out	0x3d, r28	; 61
    2272:	de bf       	out	0x3e, r29	; 62
    2274:	df 91       	pop	r29
    2276:	cf 91       	pop	r28
    2278:	1f 91       	pop	r17
    227a:	0f 91       	pop	r16
    227c:	ff 90       	pop	r15
    227e:	ef 90       	pop	r14
    2280:	df 90       	pop	r13
    2282:	cf 90       	pop	r12
    2284:	bf 90       	pop	r11
    2286:	af 90       	pop	r10
    2288:	9f 90       	pop	r9
    228a:	8f 90       	pop	r8
    228c:	7f 90       	pop	r7
    228e:	6f 90       	pop	r6
    2290:	5f 90       	pop	r5
    2292:	4f 90       	pop	r4
    2294:	3f 90       	pop	r3
    2296:	2f 90       	pop	r2
    2298:	08 95       	ret

0000229a <__subsf3>:
    229a:	50 58       	subi	r21, 0x80	; 128

0000229c <__addsf3>:
    229c:	bb 27       	eor	r27, r27
    229e:	aa 27       	eor	r26, r26
    22a0:	0e 94 65 11 	call	0x22ca	; 0x22ca <__addsf3x>
    22a4:	0c 94 af 12 	jmp	0x255e	; 0x255e <__fp_round>
    22a8:	0e 94 a1 12 	call	0x2542	; 0x2542 <__fp_pscA>
    22ac:	38 f0       	brcs	.+14     	; 0x22bc <__addsf3+0x20>
    22ae:	0e 94 a8 12 	call	0x2550	; 0x2550 <__fp_pscB>
    22b2:	20 f0       	brcs	.+8      	; 0x22bc <__addsf3+0x20>
    22b4:	39 f4       	brne	.+14     	; 0x22c4 <__addsf3+0x28>
    22b6:	9f 3f       	cpi	r25, 0xFF	; 255
    22b8:	19 f4       	brne	.+6      	; 0x22c0 <__addsf3+0x24>
    22ba:	26 f4       	brtc	.+8      	; 0x22c4 <__addsf3+0x28>
    22bc:	0c 94 9e 12 	jmp	0x253c	; 0x253c <__fp_nan>
    22c0:	0e f4       	brtc	.+2      	; 0x22c4 <__addsf3+0x28>
    22c2:	e0 95       	com	r30
    22c4:	e7 fb       	bst	r30, 7
    22c6:	0c 94 98 12 	jmp	0x2530	; 0x2530 <__fp_inf>

000022ca <__addsf3x>:
    22ca:	e9 2f       	mov	r30, r25
    22cc:	0e 94 c0 12 	call	0x2580	; 0x2580 <__fp_split3>
    22d0:	58 f3       	brcs	.-42     	; 0x22a8 <__addsf3+0xc>
    22d2:	ba 17       	cp	r27, r26
    22d4:	62 07       	cpc	r22, r18
    22d6:	73 07       	cpc	r23, r19
    22d8:	84 07       	cpc	r24, r20
    22da:	95 07       	cpc	r25, r21
    22dc:	20 f0       	brcs	.+8      	; 0x22e6 <__addsf3x+0x1c>
    22de:	79 f4       	brne	.+30     	; 0x22fe <__addsf3x+0x34>
    22e0:	a6 f5       	brtc	.+104    	; 0x234a <__addsf3x+0x80>
    22e2:	0c 94 e2 12 	jmp	0x25c4	; 0x25c4 <__fp_zero>
    22e6:	0e f4       	brtc	.+2      	; 0x22ea <__addsf3x+0x20>
    22e8:	e0 95       	com	r30
    22ea:	0b 2e       	mov	r0, r27
    22ec:	ba 2f       	mov	r27, r26
    22ee:	a0 2d       	mov	r26, r0
    22f0:	0b 01       	movw	r0, r22
    22f2:	b9 01       	movw	r22, r18
    22f4:	90 01       	movw	r18, r0
    22f6:	0c 01       	movw	r0, r24
    22f8:	ca 01       	movw	r24, r20
    22fa:	a0 01       	movw	r20, r0
    22fc:	11 24       	eor	r1, r1
    22fe:	ff 27       	eor	r31, r31
    2300:	59 1b       	sub	r21, r25
    2302:	99 f0       	breq	.+38     	; 0x232a <__addsf3x+0x60>
    2304:	59 3f       	cpi	r21, 0xF9	; 249
    2306:	50 f4       	brcc	.+20     	; 0x231c <__addsf3x+0x52>
    2308:	50 3e       	cpi	r21, 0xE0	; 224
    230a:	68 f1       	brcs	.+90     	; 0x2366 <__addsf3x+0x9c>
    230c:	1a 16       	cp	r1, r26
    230e:	f0 40       	sbci	r31, 0x00	; 0
    2310:	a2 2f       	mov	r26, r18
    2312:	23 2f       	mov	r18, r19
    2314:	34 2f       	mov	r19, r20
    2316:	44 27       	eor	r20, r20
    2318:	58 5f       	subi	r21, 0xF8	; 248
    231a:	f3 cf       	rjmp	.-26     	; 0x2302 <__addsf3x+0x38>
    231c:	46 95       	lsr	r20
    231e:	37 95       	ror	r19
    2320:	27 95       	ror	r18
    2322:	a7 95       	ror	r26
    2324:	f0 40       	sbci	r31, 0x00	; 0
    2326:	53 95       	inc	r21
    2328:	c9 f7       	brne	.-14     	; 0x231c <__addsf3x+0x52>
    232a:	7e f4       	brtc	.+30     	; 0x234a <__addsf3x+0x80>
    232c:	1f 16       	cp	r1, r31
    232e:	ba 0b       	sbc	r27, r26
    2330:	62 0b       	sbc	r22, r18
    2332:	73 0b       	sbc	r23, r19
    2334:	84 0b       	sbc	r24, r20
    2336:	ba f0       	brmi	.+46     	; 0x2366 <__addsf3x+0x9c>
    2338:	91 50       	subi	r25, 0x01	; 1
    233a:	a1 f0       	breq	.+40     	; 0x2364 <__addsf3x+0x9a>
    233c:	ff 0f       	add	r31, r31
    233e:	bb 1f       	adc	r27, r27
    2340:	66 1f       	adc	r22, r22
    2342:	77 1f       	adc	r23, r23
    2344:	88 1f       	adc	r24, r24
    2346:	c2 f7       	brpl	.-16     	; 0x2338 <__addsf3x+0x6e>
    2348:	0e c0       	rjmp	.+28     	; 0x2366 <__addsf3x+0x9c>
    234a:	ba 0f       	add	r27, r26
    234c:	62 1f       	adc	r22, r18
    234e:	73 1f       	adc	r23, r19
    2350:	84 1f       	adc	r24, r20
    2352:	48 f4       	brcc	.+18     	; 0x2366 <__addsf3x+0x9c>
    2354:	87 95       	ror	r24
    2356:	77 95       	ror	r23
    2358:	67 95       	ror	r22
    235a:	b7 95       	ror	r27
    235c:	f7 95       	ror	r31
    235e:	9e 3f       	cpi	r25, 0xFE	; 254
    2360:	08 f0       	brcs	.+2      	; 0x2364 <__addsf3x+0x9a>
    2362:	b0 cf       	rjmp	.-160    	; 0x22c4 <__addsf3+0x28>
    2364:	93 95       	inc	r25
    2366:	88 0f       	add	r24, r24
    2368:	08 f0       	brcs	.+2      	; 0x236c <__addsf3x+0xa2>
    236a:	99 27       	eor	r25, r25
    236c:	ee 0f       	add	r30, r30
    236e:	97 95       	ror	r25
    2370:	87 95       	ror	r24
    2372:	08 95       	ret

00002374 <__divsf3>:
    2374:	0e 94 ce 11 	call	0x239c	; 0x239c <__divsf3x>
    2378:	0c 94 af 12 	jmp	0x255e	; 0x255e <__fp_round>
    237c:	0e 94 a8 12 	call	0x2550	; 0x2550 <__fp_pscB>
    2380:	58 f0       	brcs	.+22     	; 0x2398 <__divsf3+0x24>
    2382:	0e 94 a1 12 	call	0x2542	; 0x2542 <__fp_pscA>
    2386:	40 f0       	brcs	.+16     	; 0x2398 <__divsf3+0x24>
    2388:	29 f4       	brne	.+10     	; 0x2394 <__divsf3+0x20>
    238a:	5f 3f       	cpi	r21, 0xFF	; 255
    238c:	29 f0       	breq	.+10     	; 0x2398 <__divsf3+0x24>
    238e:	0c 94 98 12 	jmp	0x2530	; 0x2530 <__fp_inf>
    2392:	51 11       	cpse	r21, r1
    2394:	0c 94 e3 12 	jmp	0x25c6	; 0x25c6 <__fp_szero>
    2398:	0c 94 9e 12 	jmp	0x253c	; 0x253c <__fp_nan>

0000239c <__divsf3x>:
    239c:	0e 94 c0 12 	call	0x2580	; 0x2580 <__fp_split3>
    23a0:	68 f3       	brcs	.-38     	; 0x237c <__divsf3+0x8>

000023a2 <__divsf3_pse>:
    23a2:	99 23       	and	r25, r25
    23a4:	b1 f3       	breq	.-20     	; 0x2392 <__divsf3+0x1e>
    23a6:	55 23       	and	r21, r21
    23a8:	91 f3       	breq	.-28     	; 0x238e <__divsf3+0x1a>
    23aa:	95 1b       	sub	r25, r21
    23ac:	55 0b       	sbc	r21, r21
    23ae:	bb 27       	eor	r27, r27
    23b0:	aa 27       	eor	r26, r26
    23b2:	62 17       	cp	r22, r18
    23b4:	73 07       	cpc	r23, r19
    23b6:	84 07       	cpc	r24, r20
    23b8:	38 f0       	brcs	.+14     	; 0x23c8 <__divsf3_pse+0x26>
    23ba:	9f 5f       	subi	r25, 0xFF	; 255
    23bc:	5f 4f       	sbci	r21, 0xFF	; 255
    23be:	22 0f       	add	r18, r18
    23c0:	33 1f       	adc	r19, r19
    23c2:	44 1f       	adc	r20, r20
    23c4:	aa 1f       	adc	r26, r26
    23c6:	a9 f3       	breq	.-22     	; 0x23b2 <__divsf3_pse+0x10>
    23c8:	35 d0       	rcall	.+106    	; 0x2434 <__divsf3_pse+0x92>
    23ca:	0e 2e       	mov	r0, r30
    23cc:	3a f0       	brmi	.+14     	; 0x23dc <__divsf3_pse+0x3a>
    23ce:	e0 e8       	ldi	r30, 0x80	; 128
    23d0:	32 d0       	rcall	.+100    	; 0x2436 <__divsf3_pse+0x94>
    23d2:	91 50       	subi	r25, 0x01	; 1
    23d4:	50 40       	sbci	r21, 0x00	; 0
    23d6:	e6 95       	lsr	r30
    23d8:	00 1c       	adc	r0, r0
    23da:	ca f7       	brpl	.-14     	; 0x23ce <__divsf3_pse+0x2c>
    23dc:	2b d0       	rcall	.+86     	; 0x2434 <__divsf3_pse+0x92>
    23de:	fe 2f       	mov	r31, r30
    23e0:	29 d0       	rcall	.+82     	; 0x2434 <__divsf3_pse+0x92>
    23e2:	66 0f       	add	r22, r22
    23e4:	77 1f       	adc	r23, r23
    23e6:	88 1f       	adc	r24, r24
    23e8:	bb 1f       	adc	r27, r27
    23ea:	26 17       	cp	r18, r22
    23ec:	37 07       	cpc	r19, r23
    23ee:	48 07       	cpc	r20, r24
    23f0:	ab 07       	cpc	r26, r27
    23f2:	b0 e8       	ldi	r27, 0x80	; 128
    23f4:	09 f0       	breq	.+2      	; 0x23f8 <__divsf3_pse+0x56>
    23f6:	bb 0b       	sbc	r27, r27
    23f8:	80 2d       	mov	r24, r0
    23fa:	bf 01       	movw	r22, r30
    23fc:	ff 27       	eor	r31, r31
    23fe:	93 58       	subi	r25, 0x83	; 131
    2400:	5f 4f       	sbci	r21, 0xFF	; 255
    2402:	3a f0       	brmi	.+14     	; 0x2412 <__divsf3_pse+0x70>
    2404:	9e 3f       	cpi	r25, 0xFE	; 254
    2406:	51 05       	cpc	r21, r1
    2408:	78 f0       	brcs	.+30     	; 0x2428 <__divsf3_pse+0x86>
    240a:	0c 94 98 12 	jmp	0x2530	; 0x2530 <__fp_inf>
    240e:	0c 94 e3 12 	jmp	0x25c6	; 0x25c6 <__fp_szero>
    2412:	5f 3f       	cpi	r21, 0xFF	; 255
    2414:	e4 f3       	brlt	.-8      	; 0x240e <__divsf3_pse+0x6c>
    2416:	98 3e       	cpi	r25, 0xE8	; 232
    2418:	d4 f3       	brlt	.-12     	; 0x240e <__divsf3_pse+0x6c>
    241a:	86 95       	lsr	r24
    241c:	77 95       	ror	r23
    241e:	67 95       	ror	r22
    2420:	b7 95       	ror	r27
    2422:	f7 95       	ror	r31
    2424:	9f 5f       	subi	r25, 0xFF	; 255
    2426:	c9 f7       	brne	.-14     	; 0x241a <__divsf3_pse+0x78>
    2428:	88 0f       	add	r24, r24
    242a:	91 1d       	adc	r25, r1
    242c:	96 95       	lsr	r25
    242e:	87 95       	ror	r24
    2430:	97 f9       	bld	r25, 7
    2432:	08 95       	ret
    2434:	e1 e0       	ldi	r30, 0x01	; 1
    2436:	66 0f       	add	r22, r22
    2438:	77 1f       	adc	r23, r23
    243a:	88 1f       	adc	r24, r24
    243c:	bb 1f       	adc	r27, r27
    243e:	62 17       	cp	r22, r18
    2440:	73 07       	cpc	r23, r19
    2442:	84 07       	cpc	r24, r20
    2444:	ba 07       	cpc	r27, r26
    2446:	20 f0       	brcs	.+8      	; 0x2450 <__divsf3_pse+0xae>
    2448:	62 1b       	sub	r22, r18
    244a:	73 0b       	sbc	r23, r19
    244c:	84 0b       	sbc	r24, r20
    244e:	ba 0b       	sbc	r27, r26
    2450:	ee 1f       	adc	r30, r30
    2452:	88 f7       	brcc	.-30     	; 0x2436 <__divsf3_pse+0x94>
    2454:	e0 95       	com	r30
    2456:	08 95       	ret

00002458 <__fixunssfsi>:
    2458:	0e 94 c8 12 	call	0x2590	; 0x2590 <__fp_splitA>
    245c:	88 f0       	brcs	.+34     	; 0x2480 <__fixunssfsi+0x28>
    245e:	9f 57       	subi	r25, 0x7F	; 127
    2460:	98 f0       	brcs	.+38     	; 0x2488 <__fixunssfsi+0x30>
    2462:	b9 2f       	mov	r27, r25
    2464:	99 27       	eor	r25, r25
    2466:	b7 51       	subi	r27, 0x17	; 23
    2468:	b0 f0       	brcs	.+44     	; 0x2496 <__fixunssfsi+0x3e>
    246a:	e1 f0       	breq	.+56     	; 0x24a4 <__fixunssfsi+0x4c>
    246c:	66 0f       	add	r22, r22
    246e:	77 1f       	adc	r23, r23
    2470:	88 1f       	adc	r24, r24
    2472:	99 1f       	adc	r25, r25
    2474:	1a f0       	brmi	.+6      	; 0x247c <__fixunssfsi+0x24>
    2476:	ba 95       	dec	r27
    2478:	c9 f7       	brne	.-14     	; 0x246c <__fixunssfsi+0x14>
    247a:	14 c0       	rjmp	.+40     	; 0x24a4 <__fixunssfsi+0x4c>
    247c:	b1 30       	cpi	r27, 0x01	; 1
    247e:	91 f0       	breq	.+36     	; 0x24a4 <__fixunssfsi+0x4c>
    2480:	0e 94 e2 12 	call	0x25c4	; 0x25c4 <__fp_zero>
    2484:	b1 e0       	ldi	r27, 0x01	; 1
    2486:	08 95       	ret
    2488:	0c 94 e2 12 	jmp	0x25c4	; 0x25c4 <__fp_zero>
    248c:	67 2f       	mov	r22, r23
    248e:	78 2f       	mov	r23, r24
    2490:	88 27       	eor	r24, r24
    2492:	b8 5f       	subi	r27, 0xF8	; 248
    2494:	39 f0       	breq	.+14     	; 0x24a4 <__fixunssfsi+0x4c>
    2496:	b9 3f       	cpi	r27, 0xF9	; 249
    2498:	cc f3       	brlt	.-14     	; 0x248c <__fixunssfsi+0x34>
    249a:	86 95       	lsr	r24
    249c:	77 95       	ror	r23
    249e:	67 95       	ror	r22
    24a0:	b3 95       	inc	r27
    24a2:	d9 f7       	brne	.-10     	; 0x249a <__fixunssfsi+0x42>
    24a4:	3e f4       	brtc	.+14     	; 0x24b4 <__fixunssfsi+0x5c>
    24a6:	90 95       	com	r25
    24a8:	80 95       	com	r24
    24aa:	70 95       	com	r23
    24ac:	61 95       	neg	r22
    24ae:	7f 4f       	sbci	r23, 0xFF	; 255
    24b0:	8f 4f       	sbci	r24, 0xFF	; 255
    24b2:	9f 4f       	sbci	r25, 0xFF	; 255
    24b4:	08 95       	ret

000024b6 <__floatunsisf>:
    24b6:	e8 94       	clt
    24b8:	09 c0       	rjmp	.+18     	; 0x24cc <__floatsisf+0x12>

000024ba <__floatsisf>:
    24ba:	97 fb       	bst	r25, 7
    24bc:	3e f4       	brtc	.+14     	; 0x24cc <__floatsisf+0x12>
    24be:	90 95       	com	r25
    24c0:	80 95       	com	r24
    24c2:	70 95       	com	r23
    24c4:	61 95       	neg	r22
    24c6:	7f 4f       	sbci	r23, 0xFF	; 255
    24c8:	8f 4f       	sbci	r24, 0xFF	; 255
    24ca:	9f 4f       	sbci	r25, 0xFF	; 255
    24cc:	99 23       	and	r25, r25
    24ce:	a9 f0       	breq	.+42     	; 0x24fa <__floatsisf+0x40>
    24d0:	f9 2f       	mov	r31, r25
    24d2:	96 e9       	ldi	r25, 0x96	; 150
    24d4:	bb 27       	eor	r27, r27
    24d6:	93 95       	inc	r25
    24d8:	f6 95       	lsr	r31
    24da:	87 95       	ror	r24
    24dc:	77 95       	ror	r23
    24de:	67 95       	ror	r22
    24e0:	b7 95       	ror	r27
    24e2:	f1 11       	cpse	r31, r1
    24e4:	f8 cf       	rjmp	.-16     	; 0x24d6 <__floatsisf+0x1c>
    24e6:	fa f4       	brpl	.+62     	; 0x2526 <__floatsisf+0x6c>
    24e8:	bb 0f       	add	r27, r27
    24ea:	11 f4       	brne	.+4      	; 0x24f0 <__floatsisf+0x36>
    24ec:	60 ff       	sbrs	r22, 0
    24ee:	1b c0       	rjmp	.+54     	; 0x2526 <__floatsisf+0x6c>
    24f0:	6f 5f       	subi	r22, 0xFF	; 255
    24f2:	7f 4f       	sbci	r23, 0xFF	; 255
    24f4:	8f 4f       	sbci	r24, 0xFF	; 255
    24f6:	9f 4f       	sbci	r25, 0xFF	; 255
    24f8:	16 c0       	rjmp	.+44     	; 0x2526 <__floatsisf+0x6c>
    24fa:	88 23       	and	r24, r24
    24fc:	11 f0       	breq	.+4      	; 0x2502 <__floatsisf+0x48>
    24fe:	96 e9       	ldi	r25, 0x96	; 150
    2500:	11 c0       	rjmp	.+34     	; 0x2524 <__floatsisf+0x6a>
    2502:	77 23       	and	r23, r23
    2504:	21 f0       	breq	.+8      	; 0x250e <__floatsisf+0x54>
    2506:	9e e8       	ldi	r25, 0x8E	; 142
    2508:	87 2f       	mov	r24, r23
    250a:	76 2f       	mov	r23, r22
    250c:	05 c0       	rjmp	.+10     	; 0x2518 <__floatsisf+0x5e>
    250e:	66 23       	and	r22, r22
    2510:	71 f0       	breq	.+28     	; 0x252e <__floatsisf+0x74>
    2512:	96 e8       	ldi	r25, 0x86	; 134
    2514:	86 2f       	mov	r24, r22
    2516:	70 e0       	ldi	r23, 0x00	; 0
    2518:	60 e0       	ldi	r22, 0x00	; 0
    251a:	2a f0       	brmi	.+10     	; 0x2526 <__floatsisf+0x6c>
    251c:	9a 95       	dec	r25
    251e:	66 0f       	add	r22, r22
    2520:	77 1f       	adc	r23, r23
    2522:	88 1f       	adc	r24, r24
    2524:	da f7       	brpl	.-10     	; 0x251c <__floatsisf+0x62>
    2526:	88 0f       	add	r24, r24
    2528:	96 95       	lsr	r25
    252a:	87 95       	ror	r24
    252c:	97 f9       	bld	r25, 7
    252e:	08 95       	ret

00002530 <__fp_inf>:
    2530:	97 f9       	bld	r25, 7
    2532:	9f 67       	ori	r25, 0x7F	; 127
    2534:	80 e8       	ldi	r24, 0x80	; 128
    2536:	70 e0       	ldi	r23, 0x00	; 0
    2538:	60 e0       	ldi	r22, 0x00	; 0
    253a:	08 95       	ret

0000253c <__fp_nan>:
    253c:	9f ef       	ldi	r25, 0xFF	; 255
    253e:	80 ec       	ldi	r24, 0xC0	; 192
    2540:	08 95       	ret

00002542 <__fp_pscA>:
    2542:	00 24       	eor	r0, r0
    2544:	0a 94       	dec	r0
    2546:	16 16       	cp	r1, r22
    2548:	17 06       	cpc	r1, r23
    254a:	18 06       	cpc	r1, r24
    254c:	09 06       	cpc	r0, r25
    254e:	08 95       	ret

00002550 <__fp_pscB>:
    2550:	00 24       	eor	r0, r0
    2552:	0a 94       	dec	r0
    2554:	12 16       	cp	r1, r18
    2556:	13 06       	cpc	r1, r19
    2558:	14 06       	cpc	r1, r20
    255a:	05 06       	cpc	r0, r21
    255c:	08 95       	ret

0000255e <__fp_round>:
    255e:	09 2e       	mov	r0, r25
    2560:	03 94       	inc	r0
    2562:	00 0c       	add	r0, r0
    2564:	11 f4       	brne	.+4      	; 0x256a <__fp_round+0xc>
    2566:	88 23       	and	r24, r24
    2568:	52 f0       	brmi	.+20     	; 0x257e <__fp_round+0x20>
    256a:	bb 0f       	add	r27, r27
    256c:	40 f4       	brcc	.+16     	; 0x257e <__fp_round+0x20>
    256e:	bf 2b       	or	r27, r31
    2570:	11 f4       	brne	.+4      	; 0x2576 <__fp_round+0x18>
    2572:	60 ff       	sbrs	r22, 0
    2574:	04 c0       	rjmp	.+8      	; 0x257e <__fp_round+0x20>
    2576:	6f 5f       	subi	r22, 0xFF	; 255
    2578:	7f 4f       	sbci	r23, 0xFF	; 255
    257a:	8f 4f       	sbci	r24, 0xFF	; 255
    257c:	9f 4f       	sbci	r25, 0xFF	; 255
    257e:	08 95       	ret

00002580 <__fp_split3>:
    2580:	57 fd       	sbrc	r21, 7
    2582:	90 58       	subi	r25, 0x80	; 128
    2584:	44 0f       	add	r20, r20
    2586:	55 1f       	adc	r21, r21
    2588:	59 f0       	breq	.+22     	; 0x25a0 <__fp_splitA+0x10>
    258a:	5f 3f       	cpi	r21, 0xFF	; 255
    258c:	71 f0       	breq	.+28     	; 0x25aa <__fp_splitA+0x1a>
    258e:	47 95       	ror	r20

00002590 <__fp_splitA>:
    2590:	88 0f       	add	r24, r24
    2592:	97 fb       	bst	r25, 7
    2594:	99 1f       	adc	r25, r25
    2596:	61 f0       	breq	.+24     	; 0x25b0 <__fp_splitA+0x20>
    2598:	9f 3f       	cpi	r25, 0xFF	; 255
    259a:	79 f0       	breq	.+30     	; 0x25ba <__fp_splitA+0x2a>
    259c:	87 95       	ror	r24
    259e:	08 95       	ret
    25a0:	12 16       	cp	r1, r18
    25a2:	13 06       	cpc	r1, r19
    25a4:	14 06       	cpc	r1, r20
    25a6:	55 1f       	adc	r21, r21
    25a8:	f2 cf       	rjmp	.-28     	; 0x258e <__fp_split3+0xe>
    25aa:	46 95       	lsr	r20
    25ac:	f1 df       	rcall	.-30     	; 0x2590 <__fp_splitA>
    25ae:	08 c0       	rjmp	.+16     	; 0x25c0 <__fp_splitA+0x30>
    25b0:	16 16       	cp	r1, r22
    25b2:	17 06       	cpc	r1, r23
    25b4:	18 06       	cpc	r1, r24
    25b6:	99 1f       	adc	r25, r25
    25b8:	f1 cf       	rjmp	.-30     	; 0x259c <__fp_splitA+0xc>
    25ba:	86 95       	lsr	r24
    25bc:	71 05       	cpc	r23, r1
    25be:	61 05       	cpc	r22, r1
    25c0:	08 94       	sec
    25c2:	08 95       	ret

000025c4 <__fp_zero>:
    25c4:	e8 94       	clt

000025c6 <__fp_szero>:
    25c6:	bb 27       	eor	r27, r27
    25c8:	66 27       	eor	r22, r22
    25ca:	77 27       	eor	r23, r23
    25cc:	cb 01       	movw	r24, r22
    25ce:	97 f9       	bld	r25, 7
    25d0:	08 95       	ret

000025d2 <__mulsf3>:
    25d2:	0e 94 fc 12 	call	0x25f8	; 0x25f8 <__mulsf3x>
    25d6:	0c 94 af 12 	jmp	0x255e	; 0x255e <__fp_round>
    25da:	0e 94 a1 12 	call	0x2542	; 0x2542 <__fp_pscA>
    25de:	38 f0       	brcs	.+14     	; 0x25ee <__mulsf3+0x1c>
    25e0:	0e 94 a8 12 	call	0x2550	; 0x2550 <__fp_pscB>
    25e4:	20 f0       	brcs	.+8      	; 0x25ee <__mulsf3+0x1c>
    25e6:	95 23       	and	r25, r21
    25e8:	11 f0       	breq	.+4      	; 0x25ee <__mulsf3+0x1c>
    25ea:	0c 94 98 12 	jmp	0x2530	; 0x2530 <__fp_inf>
    25ee:	0c 94 9e 12 	jmp	0x253c	; 0x253c <__fp_nan>
    25f2:	11 24       	eor	r1, r1
    25f4:	0c 94 e3 12 	jmp	0x25c6	; 0x25c6 <__fp_szero>

000025f8 <__mulsf3x>:
    25f8:	0e 94 c0 12 	call	0x2580	; 0x2580 <__fp_split3>
    25fc:	70 f3       	brcs	.-36     	; 0x25da <__mulsf3+0x8>

000025fe <__mulsf3_pse>:
    25fe:	95 9f       	mul	r25, r21
    2600:	c1 f3       	breq	.-16     	; 0x25f2 <__mulsf3+0x20>
    2602:	95 0f       	add	r25, r21
    2604:	50 e0       	ldi	r21, 0x00	; 0
    2606:	55 1f       	adc	r21, r21
    2608:	62 9f       	mul	r22, r18
    260a:	f0 01       	movw	r30, r0
    260c:	72 9f       	mul	r23, r18
    260e:	bb 27       	eor	r27, r27
    2610:	f0 0d       	add	r31, r0
    2612:	b1 1d       	adc	r27, r1
    2614:	63 9f       	mul	r22, r19
    2616:	aa 27       	eor	r26, r26
    2618:	f0 0d       	add	r31, r0
    261a:	b1 1d       	adc	r27, r1
    261c:	aa 1f       	adc	r26, r26
    261e:	64 9f       	mul	r22, r20
    2620:	66 27       	eor	r22, r22
    2622:	b0 0d       	add	r27, r0
    2624:	a1 1d       	adc	r26, r1
    2626:	66 1f       	adc	r22, r22
    2628:	82 9f       	mul	r24, r18
    262a:	22 27       	eor	r18, r18
    262c:	b0 0d       	add	r27, r0
    262e:	a1 1d       	adc	r26, r1
    2630:	62 1f       	adc	r22, r18
    2632:	73 9f       	mul	r23, r19
    2634:	b0 0d       	add	r27, r0
    2636:	a1 1d       	adc	r26, r1
    2638:	62 1f       	adc	r22, r18
    263a:	83 9f       	mul	r24, r19
    263c:	a0 0d       	add	r26, r0
    263e:	61 1d       	adc	r22, r1
    2640:	22 1f       	adc	r18, r18
    2642:	74 9f       	mul	r23, r20
    2644:	33 27       	eor	r19, r19
    2646:	a0 0d       	add	r26, r0
    2648:	61 1d       	adc	r22, r1
    264a:	23 1f       	adc	r18, r19
    264c:	84 9f       	mul	r24, r20
    264e:	60 0d       	add	r22, r0
    2650:	21 1d       	adc	r18, r1
    2652:	82 2f       	mov	r24, r18
    2654:	76 2f       	mov	r23, r22
    2656:	6a 2f       	mov	r22, r26
    2658:	11 24       	eor	r1, r1
    265a:	9f 57       	subi	r25, 0x7F	; 127
    265c:	50 40       	sbci	r21, 0x00	; 0
    265e:	9a f0       	brmi	.+38     	; 0x2686 <__mulsf3_pse+0x88>
    2660:	f1 f0       	breq	.+60     	; 0x269e <__mulsf3_pse+0xa0>
    2662:	88 23       	and	r24, r24
    2664:	4a f0       	brmi	.+18     	; 0x2678 <__mulsf3_pse+0x7a>
    2666:	ee 0f       	add	r30, r30
    2668:	ff 1f       	adc	r31, r31
    266a:	bb 1f       	adc	r27, r27
    266c:	66 1f       	adc	r22, r22
    266e:	77 1f       	adc	r23, r23
    2670:	88 1f       	adc	r24, r24
    2672:	91 50       	subi	r25, 0x01	; 1
    2674:	50 40       	sbci	r21, 0x00	; 0
    2676:	a9 f7       	brne	.-22     	; 0x2662 <__mulsf3_pse+0x64>
    2678:	9e 3f       	cpi	r25, 0xFE	; 254
    267a:	51 05       	cpc	r21, r1
    267c:	80 f0       	brcs	.+32     	; 0x269e <__mulsf3_pse+0xa0>
    267e:	0c 94 98 12 	jmp	0x2530	; 0x2530 <__fp_inf>
    2682:	0c 94 e3 12 	jmp	0x25c6	; 0x25c6 <__fp_szero>
    2686:	5f 3f       	cpi	r21, 0xFF	; 255
    2688:	e4 f3       	brlt	.-8      	; 0x2682 <__mulsf3_pse+0x84>
    268a:	98 3e       	cpi	r25, 0xE8	; 232
    268c:	d4 f3       	brlt	.-12     	; 0x2682 <__mulsf3_pse+0x84>
    268e:	86 95       	lsr	r24
    2690:	77 95       	ror	r23
    2692:	67 95       	ror	r22
    2694:	b7 95       	ror	r27
    2696:	f7 95       	ror	r31
    2698:	e7 95       	ror	r30
    269a:	9f 5f       	subi	r25, 0xFF	; 255
    269c:	c1 f7       	brne	.-16     	; 0x268e <__mulsf3_pse+0x90>
    269e:	fe 2b       	or	r31, r30
    26a0:	88 0f       	add	r24, r24
    26a2:	91 1d       	adc	r25, r1
    26a4:	96 95       	lsr	r25
    26a6:	87 95       	ror	r24
    26a8:	97 f9       	bld	r25, 7
    26aa:	08 95       	ret

000026ac <__tablejump2__>:
    26ac:	ee 0f       	add	r30, r30
    26ae:	ff 1f       	adc	r31, r31
    26b0:	05 90       	lpm	r0, Z+
    26b2:	f4 91       	lpm	r31, Z
    26b4:	e0 2d       	mov	r30, r0
    26b6:	09 94       	ijmp

000026b8 <puts>:
    26b8:	0f 93       	push	r16
    26ba:	1f 93       	push	r17
    26bc:	cf 93       	push	r28
    26be:	df 93       	push	r29
    26c0:	e0 91 e9 2a 	lds	r30, 0x2AE9	; 0x802ae9 <__iob+0x2>
    26c4:	f0 91 ea 2a 	lds	r31, 0x2AEA	; 0x802aea <__iob+0x3>
    26c8:	23 81       	ldd	r18, Z+3	; 0x03
    26ca:	21 ff       	sbrs	r18, 1
    26cc:	1b c0       	rjmp	.+54     	; 0x2704 <puts+0x4c>
    26ce:	8c 01       	movw	r16, r24
    26d0:	d0 e0       	ldi	r29, 0x00	; 0
    26d2:	c0 e0       	ldi	r28, 0x00	; 0
    26d4:	f8 01       	movw	r30, r16
    26d6:	81 91       	ld	r24, Z+
    26d8:	8f 01       	movw	r16, r30
    26da:	60 91 e9 2a 	lds	r22, 0x2AE9	; 0x802ae9 <__iob+0x2>
    26de:	70 91 ea 2a 	lds	r23, 0x2AEA	; 0x802aea <__iob+0x3>
    26e2:	db 01       	movw	r26, r22
    26e4:	18 96       	adiw	r26, 0x08	; 8
    26e6:	ed 91       	ld	r30, X+
    26e8:	fc 91       	ld	r31, X
    26ea:	19 97       	sbiw	r26, 0x09	; 9
    26ec:	88 23       	and	r24, r24
    26ee:	31 f0       	breq	.+12     	; 0x26fc <puts+0x44>
    26f0:	09 95       	icall
    26f2:	89 2b       	or	r24, r25
    26f4:	79 f3       	breq	.-34     	; 0x26d4 <puts+0x1c>
    26f6:	df ef       	ldi	r29, 0xFF	; 255
    26f8:	cf ef       	ldi	r28, 0xFF	; 255
    26fa:	ec cf       	rjmp	.-40     	; 0x26d4 <puts+0x1c>
    26fc:	8a e0       	ldi	r24, 0x0A	; 10
    26fe:	09 95       	icall
    2700:	89 2b       	or	r24, r25
    2702:	19 f0       	breq	.+6      	; 0x270a <puts+0x52>
    2704:	8f ef       	ldi	r24, 0xFF	; 255
    2706:	9f ef       	ldi	r25, 0xFF	; 255
    2708:	02 c0       	rjmp	.+4      	; 0x270e <puts+0x56>
    270a:	8d 2f       	mov	r24, r29
    270c:	9c 2f       	mov	r25, r28
    270e:	df 91       	pop	r29
    2710:	cf 91       	pop	r28
    2712:	1f 91       	pop	r17
    2714:	0f 91       	pop	r16
    2716:	08 95       	ret

00002718 <_exit>:
    2718:	f8 94       	cli

0000271a <__stop_program>:
    271a:	ff cf       	rjmp	.-2      	; 0x271a <__stop_program>
