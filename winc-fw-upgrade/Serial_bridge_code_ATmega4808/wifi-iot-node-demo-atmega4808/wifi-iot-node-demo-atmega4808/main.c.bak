/**
 *
 * \file
 *
 * \brief Serial Bridge.
 *
 * Copyright (c) 2016 Atmel Corporation. All rights reserved.
 *
 * \asf_license_start
 *
 * \page License
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * 3. The name of Atmel may not be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
 * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 * \asf_license_stop
 *
 */

/** \mainpage
 * \section intro Introduction
 * This example demonstrates how to implement a EDBG UART to WINC1500 SPI
 * bridge.<br>
 * It uses the following hardware:
 * - the SAM Xplained Pro.
 * - the WINC1500 on EXT1.
 *
 * \section files Main Files
 * - serial_bridge_ultra.c : Initialize the WINC1500 perform bridge operation.
 *
 * \section compinfo Compilation Information
 * This software was written for the GNU GCC compiler using Atmel Studio 6.2
 * Other compilers may or may not work.
 *
 * \section contactinfo Contact Information
 * For further information, visit
 * <A href="http://www.atmel.com">Atmel</A>.\n
 */
 
#include "winc/common/include/nm_common.h"
#include "winc/bsp/include/nm_bsp.h"
#include "winc/bus_wrapper/include/nm_bus_wrapper.h"
#include "winc/driver/source/nmbus.h"
#include "winc/driver/include/m2m_wifi.h"
#include "usart_basic.h"
#include <string.h>

/** UART commands. */
enum nm_usart_event_types {
	USART_PKT_RECEIVED = 0,
	USART_PKT_TRANSMITTED,
	USART_ERROR_ON_RECEPTION,
};

enum nm_usart_cmd_process_states {
	INIT = 0,
	WAIT_SYNC,
	WAITING,
	COLLECTING_HDR,
	COLLECTING_PAYLOAD,
	PROCESSING,
};

typedef struct uart_cmd_hdr_t {
	unsigned long cmd;
	unsigned long addr;
	unsigned long val;
} uart_cmd_hdr;

#define READ_REG                0
#define WRITE_REG               1
#define READ_BUFF               2
#define WRITE_BUFF              3
#define RESET                   4
#define RECONFIGURE_UART        5


#define CONF_STDIO_BAUDRATE      115200

#define USART_CMD_HDR_LENGTH    sizeof(uart_cmd_hdr)
#define SPI_TRANSFER_SIZE       512


static uint8_t usart_cmd_recv_buffer[8];
static uint8_t usart_payload_buffer[512];
static uint8_t usart_tx_buffer[16];
static uint8_t serial_command_pending = 0;
static uint8_t usart_pkt_received = 0;
static uint8_t usart_err_on_reception = 0;
static uint8 *uart_cmd_buf;
static uart_cmd_hdr uart_cmd;
static uint8_t schedule_rx_length = 0;
static uint8_t schedule_rx = 0;
static uint8_t *schedule_rx_buffer = NULL;
static uint8_t *usart_pkt = NULL;
static uint8_t usart_prot_handler_status = INIT;
static uint8_t new_state = INIT;
static uint8_t change_state = 0;
static uint8_t uart_reconfigure = 0;
static uint8_t buffer[30];
static uint8_t rx_data;

static void usart_read_buffer(uint8_t *rx_buffer, uint8_t rx_length);
static void usart_write_buffer(uint8_t *tx_buffer, uint8_t tx_length);
static void usart_rx_complete_handler(void);
static void usart_tx_complete_handler(void);
static void usart_receive_handler(void);
extern void default_rx_isr(void);

static void usart_receive_handler(void)
{
	uint8_t rx_status = USART2.RXDATAH;
	
	if (rx_status & (USART_BUFOVF_bm | USART_FERR_bm)) {
		rx_status = USART2.RXDATAL; // Clear flag by reading buffer
		//usart_err_on_reception = 1;
			// error handler
	} else {
		default_rx_isr();
	}	
}

static void usart_read_buffer(uint8_t *rx_buffer, uint8_t rx_length)
{
	uint8_t i = 0;
	
	
	while (i < rx_length)
	{
		if (USART_0_is_rx_ready());
		{
			rx_buffer[i] = USART_0_read();
			i++;
		}
	}
}

static void usart_write_buffer(uint8_t *tx_buffer, uint8_t tx_length)
{
	uint8_t i;
	
	for (i = 0; i < tx_length; i++)
	{
		USART_0_write(tx_buffer[i]);
	}
}

static void usart_tx_complete_handler(void)
{
	if (schedule_rx) {
		if (schedule_rx_length == 1) {
			usart_read_buffer((uint8_t *)schedule_rx_buffer, 1);
		} else {
			usart_read_buffer((uint8_t *)schedule_rx_buffer, schedule_rx_length);
		}

		schedule_rx = 0;
	}

	if (change_state) {
		usart_prot_handler_status = new_state;
		change_state = 0;
	}
}

static void usart_rx_complete_handler(void)
{
	usart_pkt_received = 1;
	usart_pkt = &rx_data;
	if (change_state) {
		usart_prot_handler_status = new_state;
		change_state = 0;
	}
}

static void nm_usart_send_regval(uint8_t *tx_data, uint16_t length)
{
	uint8_t temp, i, j;
	for (i = 0, j = (length - 1); i < j; i++, j--) {
		temp = tx_data[i];
		tx_data[i] = tx_data[j];
		tx_data[j] = temp;
	}
	usart_write_buffer(tx_data, length);
}

static void nm_usart_protocol_handler(enum nm_usart_event_types event_name)
{
	static uint16_t payload_length = 0;
	uint8 checksum = 0;
	uint8_t uartdata;
	uint8_t i;

	switch (usart_prot_handler_status) {
	case INIT:
		if ((event_name == USART_PKT_RECEIVED) && (schedule_rx_length == 1)) {
			if ((usart_pkt[0] == 0x12)) {
				usart_prot_handler_status = WAIT_SYNC;
				usart_cmd_recv_buffer[0] = 0xFF;
				schedule_rx_buffer = &usart_cmd_recv_buffer[0];
				schedule_rx_length = 1;
				schedule_rx = 1;
				uartdata = 0x5B;
				usart_write_buffer(&uartdata, schedule_rx_length);
				usart_tx_complete_handler();
				rx_data = *schedule_rx_buffer;
				usart_rx_complete_handler();
			} else {
				schedule_rx_buffer = &usart_cmd_recv_buffer[0];
				schedule_rx_length = 1;
				schedule_rx = 1;
				uartdata = usart_pkt[0];
				usart_write_buffer(&uartdata, schedule_rx_length);
				usart_tx_complete_handler();
				rx_data = *schedule_rx_buffer;
				usart_rx_complete_handler();
				/* usart_read_job(module,&usart_cmd_recv_buffer[0]); */
				//usart_tx_complete_handler();
			}
		} else {
			usart_cmd_recv_buffer[0] = 0xFF;
			schedule_rx_buffer = &usart_cmd_recv_buffer[0];
			schedule_rx_length = 1;
			schedule_rx = 1;
			uartdata = 0xEA;
			usart_write_buffer(&uartdata, schedule_rx_length);
			usart_tx_complete_handler();
			rx_data = *schedule_rx_buffer;
			usart_rx_complete_handler();
			//usart_tx_complete_handler();
		}

		break;

	case WAIT_SYNC:
		if (event_name == USART_PKT_RECEIVED) {
			if (usart_pkt[0] == 0xA5) {
				uint8 *usart_cmd_recv_buffer_u8 = (uint8 *)&usart_cmd_recv_buffer[0];
				usart_prot_handler_status = WAITING;
				usart_cmd_recv_buffer_u8[4] = 0xFF;
				schedule_rx_length = 1;
				usart_read_buffer(&usart_cmd_recv_buffer[2], schedule_rx_length);
			} else if (usart_pkt[0] == 0x12) {
				/* UART identification command. */
				uartdata = 0x5B;
				usart_cmd_recv_buffer[0] = 0xFF;
				schedule_rx_buffer = &usart_cmd_recv_buffer[0];
				schedule_rx_length = 1;
				schedule_rx = 1;
				usart_write_buffer(&uartdata, schedule_rx_length);
				usart_tx_complete_handler();
				rx_data = *schedule_rx_buffer;
				usart_rx_complete_handler();
			} else {
				if (!uart_reconfigure) {
					uartdata = 0x5A;
					usart_cmd_recv_buffer[0] = 0xFF;
					schedule_rx_buffer = &usart_cmd_recv_buffer[0];
					schedule_rx_length = 1;
					schedule_rx = 1;
					usart_write_buffer(&uartdata, schedule_rx_length);
					usart_tx_complete_handler();
					rx_data = *schedule_rx_buffer;
					usart_rx_complete_handler();
					//usart_tx_complete_handler();
				} else {
					schedule_rx_length = 1;
				}
			}
		}

		break;

	case WAITING:
		if (event_name == USART_PKT_RECEIVED) {
			usart_prot_handler_status = COLLECTING_HDR;
			buffer[0] = usart_cmd_recv_buffer[2];
			buffer[1] = rx_data;
			uart_cmd_buf = &buffer[0];
			schedule_rx_length = (USART_CMD_HDR_LENGTH - 2);
			usart_read_buffer(&buffer[2], schedule_rx_length);
			usart_rx_complete_handler();
		} else {
			usart_prot_handler_status = WAIT_SYNC;
			schedule_rx_buffer = &usart_cmd_recv_buffer[0];
			schedule_rx = 1;
			schedule_rx_length = 1;
			uartdata = 0xEA;
			usart_write_buffer(&uartdata, schedule_rx_length);
			//usart_tx_complete_handler();
		}

		break;

	case COLLECTING_HDR:
		if (event_name == USART_PKT_RECEIVED) {
			/* Verify checksum. */
			for (i = 0; i < (USART_CMD_HDR_LENGTH); i++) {
				checksum ^= *(((uint8_t *)uart_cmd_buf) + i);
			}
			
			if (checksum != 0) {
				usart_prot_handler_status = WAIT_SYNC;
				usart_cmd_recv_buffer[0] = 0xFF;
				schedule_rx_buffer = &usart_cmd_recv_buffer[0];
				schedule_rx_length = 1;
				schedule_rx = 1;
				uartdata = 0x5A;
				usart_write_buffer(&uartdata, schedule_rx_length);
				usart_write_buffer(uart_cmd_buf, USART_CMD_HDR_LENGTH);
				usart_tx_complete_handler();
				rx_data = *schedule_rx_buffer;
				usart_rx_complete_handler();
			} else {
				memcpy(&uart_cmd, uart_cmd_buf, sizeof(uart_cmd_hdr));
				/* Process the Command. */
				if ((uart_cmd.cmd & 0xFF) == WRITE_BUFF) {
					usart_prot_handler_status = COLLECTING_PAYLOAD;
					payload_length = (uart_cmd.cmd >> 16) & 0xFFFF;
					schedule_rx = 1;
					schedule_rx_buffer = &usart_payload_buffer[0];
					schedule_rx_length = payload_length;
					uartdata = 0xAC;
					usart_write_buffer(&uartdata, 1);
					usart_tx_complete_handler();
					rx_data = *schedule_rx_buffer;
					usart_rx_complete_handler();
				} else if ((uart_cmd.cmd & 0xFF) == WRITE_REG) {
					serial_command_pending = 1;
					usart_prot_handler_status = PROCESSING;
				} else {
					serial_command_pending = 1;
					change_state = 1;
					new_state = PROCESSING;
					uartdata = 0xAC;
					usart_write_buffer(&uartdata, 1);
					usart_tx_complete_handler();
					//rx_data = *schedule_rx_buffer;
					//usart_rx_complete_handler();
				}
			}
		} else if (event_name == USART_ERROR_ON_RECEPTION) {
			usart_prot_handler_status = WAIT_SYNC;
			schedule_rx_buffer = &usart_cmd_recv_buffer[0];
			schedule_rx = 1;
			schedule_rx_length = 1;
			uartdata = 0xEA;
			usart_write_buffer(&uartdata, schedule_rx_length);
			//usart_tx_complete_handler();
		}

		break;

	case COLLECTING_PAYLOAD:
		if ((event_name == USART_PKT_RECEIVED) && (schedule_rx_length == payload_length)) {
			serial_command_pending = 1;
			usart_prot_handler_status = PROCESSING;
		} else if (event_name == USART_ERROR_ON_RECEPTION) {
			usart_prot_handler_status = WAIT_SYNC;
			uartdata = 0xEA;
			usart_cmd_recv_buffer[0] = 0xFF;
			schedule_rx_length = 1;
			schedule_rx_buffer = &usart_cmd_recv_buffer[0];
			schedule_rx = 1;
			usart_write_buffer(&uartdata, schedule_rx_length);
			//usart_tx_complete_handler();
		} else {
			usart_prot_handler_status = WAIT_SYNC;
			uartdata = 0x5A;
			usart_cmd_recv_buffer[0] = 0xFF;
			schedule_rx_length = 1;
			schedule_rx_buffer = &usart_cmd_recv_buffer[0];
			schedule_rx = 1;
			usart_write_buffer(&uartdata, schedule_rx_length);
			//usart_tx_complete_handler();
		}

		break;

	default:
		usart_prot_handler_status = WAIT_SYNC;
		break;
	}
	
}

/**
 * \brief Process input UART command and forward to SPI.
 */
static sint8 enter_wifi_firmware_download(void)
{
	uint8_t uartdata;
	sint8 ret;
	
	ret = m2m_wifi_download_mode();
	if (ret != M2M_SUCCESS) {
		puts("Failed to put the WiFi Chip in download mode!\n");
		return M2M_ERR_INIT;
	}

	/* Process UART input command and forward to SPI. */
	while (1) {
		if (USART_0_is_rx_ready() && !usart_pkt_received && !usart_err_on_reception)
		{
			rx_data = USART_0_read();
			usart_rx_complete_handler();	
		}
		
		if (usart_pkt_received) {
			usart_pkt_received = 0;
			nm_usart_protocol_handler(USART_PKT_RECEIVED);
		}

		if (usart_err_on_reception) {
			usart_err_on_reception = 0;
			nm_usart_protocol_handler(USART_ERROR_ON_RECEPTION);
		}

		if (serial_command_pending && (usart_prot_handler_status == PROCESSING)) {
			uint32_t temp;
			switch ((uart_cmd.cmd) & 0xFF) {
			/* Forward it to SPI. */
			case READ_REG:
				/* Translate it to SPI Read register command. */
				temp = nm_read_reg(uart_cmd.addr);
				usart_tx_buffer[0] = (uint8)(temp >> 0);
				usart_tx_buffer[1] = (uint8)(temp >> 8);
				usart_tx_buffer[2] = (uint8)(temp >> 16);
				usart_tx_buffer[3] = (uint8)(temp >> 24);
				schedule_rx_buffer = &usart_cmd_recv_buffer[0];
				schedule_rx_length = 1;
				schedule_rx = 1;
				usart_prot_handler_status = WAIT_SYNC;
				nm_usart_send_regval(&usart_tx_buffer[0], sizeof(uint32_t));
				//usart_tx_complete_handler();
				//rx_data = *schedule_rx_buffer;
				//usart_rx_complete_handler();
				break;

			case WRITE_REG:
				/* Translate it to SPI Write register command. */
				nm_write_reg(uart_cmd.addr, uart_cmd.val);
				schedule_rx_buffer = &usart_cmd_recv_buffer[0];
				schedule_rx_length = 1;
				schedule_rx = 1;
				uartdata = 0xAC;
				usart_prot_handler_status = WAIT_SYNC;
				usart_write_buffer(&uartdata, schedule_rx_length);
				usart_tx_complete_handler();
				rx_data = *schedule_rx_buffer;
				usart_rx_complete_handler();
				break;

			case READ_BUFF:
				/* Translate it to SPI Read buffer command. */
				nm_read_block(uart_cmd.addr, (uint8 *)&usart_payload_buffer[0], ((uart_cmd.cmd >> 16) & 0xFFFF));
				schedule_rx_buffer = &usart_cmd_recv_buffer[0];
				schedule_rx_length = 1;
				schedule_rx = 1;
				usart_prot_handler_status = WAIT_SYNC;
				usart_write_buffer((uint8 *)&usart_payload_buffer[0], ((uart_cmd.cmd >> 16) & 0xFFFF));
				usart_tx_complete_handler();
				rx_data = *schedule_rx_buffer;
				usart_rx_complete_handler();
				break;

			case WRITE_BUFF:
				/* Translate it to SPI Write buffer command. */
				nm_write_block(uart_cmd.addr, (uint8 *)&usart_payload_buffer[0], ((uart_cmd.cmd >> 16) & 0xFFFF));
				schedule_rx_buffer = &usart_cmd_recv_buffer[0];
				schedule_rx_length = 1;
				schedule_rx = 1;
				uartdata = 0xAC;
				usart_prot_handler_status = WAIT_SYNC;
				usart_write_buffer(&uartdata, schedule_rx_length);
				usart_tx_complete_handler();
				rx_data = *schedule_rx_buffer;
				usart_rx_complete_handler();
				break;

			case RECONFIGURE_UART:
				/* Send ACK. */
				usart_prot_handler_status = WAIT_SYNC;
				uart_reconfigure = 1;
				while(!USART_0_is_tx_ready());
				USART2.BAUD = (uint16_t)USART2_BAUD_RATE(uart_cmd.val);
				//do {
				//	(void)USART2.RXDATAL;
				//} while ((USART2.STATUS & USART_RXCIF_bm) != 0);
				//USART2.CTRLA |=  1 << USART_RXCIE_bp;// | 1 << USART_TXCIE_bp;*/
				rx_data = 0;
				usart_rx_complete_handler();
			
				break;

			default:
				break;
			}
			
			serial_command_pending = 0;
		}
	}
	return ret;
}

/**
 * \brief Main application function.
 *
 * Application entry point.
 *
 * \return program return value.
 */
int main(void)
{
	/* Initialize the system. */
	system_init();
	USART_0_set_ISR_cb(&usart_receive_handler, RX_CB);
	
	do {
		(void)USART2.RXDATAL;
	} while ((USART2.STATUS & USART_RXCIF_bm) != 0);
	USART2.CTRLA |=  1 << USART_RXCIE_bp;// | 1 << USART_TXCIE_bp;
	schedule_rx_length = 1;
	//usart_read_buffer(&usart_cmd_recv_buffer[0], schedule_rx_length);
	/* Initialize the UART console. */
	usart_tx_complete_handler();
	rx_data = *schedule_rx_buffer;
	usart_rx_complete_handler();
	
	/* Initialize WINC IOs. */
	nm_bsp_init();
	/* Enter WiFi firmware download mode. */
	enter_wifi_firmware_download();

	return 0;
}
